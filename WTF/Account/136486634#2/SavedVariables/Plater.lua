
PlaterDB = {
["captured_spells"] = {
[424431] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["encounterID"] = 2847,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211290,
},
[429099] = {
["source"] = "Fervent Sharpshooter",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 206694,
},
[42138] = {
["source"] = "Marleth Barleybrew",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 154013,
},
[427894] = {
["isChanneled"] = false,
["source"] = "Forge Master Damian",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212831,
},
[435165] = {
["isChanneled"] = false,
["source"] = "Sir Braunpyke",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217658,
},
[427609] = {
["isChanneled"] = false,
["source"] = "Arathi Knight",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206696,
},
[448787] = {
["isChanneled"] = true,
["source"] = "Lightspawn",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206710,
},
[427356] = {
["isChanneled"] = false,
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206697,
},
[428150] = {
["isChanneled"] = false,
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212827,
},
[427357] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Devout Priest",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206697,
},
[1217938] = {
["source"] = "Risen Footman",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 212835,
},
[462855] = {
["isChanneled"] = false,
["source"] = "Captain Dailcry",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[427359] = {
["isChanneled"] = false,
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206705,
},
[453458] = {
["isChanneled"] = false,
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206694,
},
[448791] = {
["isChanneled"] = false,
["source"] = "Ardent Paladin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206704,
},
[427360] = {
["isChanneled"] = false,
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206705,
},
[428916] = {
["isChanneled"] = false,
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206697,
},
[425011] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Eternal Flame",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210851,
},
[1238780] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[1238782] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[462859] = {
["isChanneled"] = false,
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206694,
},
[24450] = {
["isChanneled"] = false,
["source"] = "Skarr",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 165189,
},
[1238027] = {
["source"] = "Smuggler Ba'vaal",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 232018,
},
[419204] = {
["source"] = "Crenna Earth-Daughter",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 209072,
},
[423015] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207939,
},
[423682] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[425556] = {
["encounterName"] = "Prioress Murrpray",
["type"] = "DEBUFF",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 207940,
},
[423588] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[448385] = {
["isChanneled"] = false,
["source"] = "Taener Duelmal",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 239834,
},
[424414] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[427621] = {
["isChanneled"] = false,
["source"] = "Arathi Knight",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206696,
},
[433622] = {
["source"] = "Brann Bronzebeard",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 210759,
},
[444608] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[444609] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[444546] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[448515] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["encounterID"] = 2847,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211290,
},
[108446] = {
["isChanneled"] = false,
["source"] = "Unknown",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 417,
},
[448485] = {
["isChanneled"] = false,
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212826,
},
[447439] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[444296] = {
["isChanneled"] = false,
["source"] = "Arathi Knight",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206696,
},
[427484] = {
["isChanneled"] = false,
["source"] = "Fanatical Conjuror",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206698,
},
[424421] = {
["isChanneled"] = false,
["source"] = "Taener Duelmal",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 239834,
},
[419205] = {
["source"] = "Crenna Earth-Daughter",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 209072,
},
[419287] = {
["source"] = "Crenna Earth-Daughter",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 209072,
},
[465] = {
["source"] = "Captain Garrick",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 209057,
},
[419207] = {
["source"] = "Crenna Earth-Daughter",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 209072,
},
[427629] = {
["isChanneled"] = false,
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206694,
},
[428169] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[386176] = {
["source"] = "Unknown",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 17252,
},
[444743] = {
["isChanneled"] = false,
["source"] = "Risen Mage",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221760,
},
[423536] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[428170] = {
["encounterName"] = "Prioress Murrpray",
["type"] = "DEBUFF",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 207940,
},
[429091] = {
["isChanneled"] = false,
["source"] = "Prioress Murrpray",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[446649] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207939,
},
[447443] = {
["encounterName"] = "Captain Dailcry",
["type"] = "DEBUFF",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 207946,
},
[435156] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Risen Footman",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212835,
},
[444728] = {
["isChanneled"] = false,
["source"] = "Zealous Templar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207949,
},
[427473] = {
["isChanneled"] = false,
["source"] = "Fanatical Conjuror",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206698,
},
[423664] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[464240] = {
["isChanneled"] = false,
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212827,
},
[448492] = {
["isChanneled"] = false,
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212826,
},
[427601] = {
["isChanneled"] = false,
["source"] = "Lightspawn",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206710,
},
[451763] = {
["isChanneled"] = false,
["source"] = "Sir Braunpyke",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217658,
},
[446776] = {
["isChanneled"] = false,
["source"] = "War Lynx",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206699,
},
[451764] = {
["isChanneled"] = false,
["source"] = "Sir Braunpyke",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217658,
},
[423665] = {
["encounterName"] = "Prioress Murrpray",
["type"] = "BUFF",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 207940,
},
[423062] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207939,
},
[424426] = {
["source"] = "Sergeant Shaynemail",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 239836,
},
[424423] = {
["isChanneled"] = false,
["source"] = "Sergeant Shaynemail",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 239836,
},
[451605] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207940,
},
[427635] = {
["isChanneled"] = false,
["source"] = "War Lynx",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206699,
},
[427469] = {
["isChanneled"] = false,
["source"] = "Risen Mage",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221760,
},
[446368] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207939,
},
[424429] = {
["isChanneled"] = false,
["source"] = "Ardent Paladin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206704,
},
[427342] = {
["isChanneled"] = true,
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206705,
},
[422969] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207939,
},
[453461] = {
["source"] = "Fervent Sharpshooter",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 206694,
},
[424430] = {
["source"] = "Ardent Paladin",
["type"] = "DEBUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 206704,
},
[424462] = {
["isChanneled"] = true,
["source"] = "Taener Duelmal",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 239834,
},
[424621] = {
["isChanneled"] = false,
["source"] = "Sergeant Shaynemail",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 239836,
},
[90328] = {
["source"] = "Unknown",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 165189,
},
[427596] = {
["isChanneled"] = false,
["source"] = "Zealous Templar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207949,
},
},
["profileKeys"] = {
["Driplitty - Twisting Nether"] = "Default",
["Weadasw - Twisting Nether"] = "Default",
["Mbuzi - Twisting Nether"] = "Default",
["Bæenjoyer - Twisting Nether"] = "Default",
["Misswarchira - Argent Dawn"] = "Default",
["Hannahuntana - Argent Dawn"] = "Default",
["Bægnaskeren - Twisting Nether"] = "Default",
["Kassedamen - Twisting Nether"] = "Default",
["Lilgoat - Twisting Nether"] = "Default",
["Ponypala - Twisting Nether"] = "Default",
["Dådyret - Draenor"] = "Default",
["Mbuzipriest - Twisting Nether"] = "Default",
["Mbuzi - Draenor"] = "Default",
["Weqasadwqwe - Twisting Nether"] = "Default",
["Daweq - Twisting Nether"] = "Default",
},
["captured_casts"] = {
[423664] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[1226917] = {
["source"] = "Dissenter Oathland",
["event"] = "SPELL_CAST_START",
["npcID"] = 241228,
},
[443111] = {
["source"] = "Glooming Disciple",
["event"] = "SPELL_CAST_START",
["npcID"] = 216867,
},
[451812] = {
["source"] = "Dogmatic Forgecaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 212884,
},
[1241254] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["npcID"] = 237660,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3122,
},
[410873] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gust Soldier",
["npcID"] = 45477,
},
[392451] = {
["source"] = "Flame Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 197985,
},
[465120] = {
["source"] = "Loaderbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 231014,
},
[369423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skittering Crawler",
["npcID"] = 184303,
},
[104318] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Imp",
["npcID"] = 55659,
},
[118903] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glintrok Hexxer",
["npcID"] = 61216,
},
[1214656] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maulspike",
["npcID"] = 247480,
},
[106877] = {
["encounterName"] = "Sha of Violence",
["source"] = "Sha of Violence",
["npcID"] = 56719,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1305,
},
[326438] = {
["isChanneled"] = false,
["source"] = "Shard of Halkias",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 164557,
},
[371984] = {
["source"] = "Flashfrost Chillweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 188067,
},
[457447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ixlorb the Spinner",
["npcID"] = 218426,
},
[1226947] = {
["source"] = "Dissenter Oathland",
["event"] = "SPELL_CAST_START",
["npcID"] = 241228,
},
[1226948] = {
["source"] = "Dissenter Oathland",
["event"] = "SPELL_CAST_START",
["npcID"] = 241228,
},
[1241278] = {
["isChanneled"] = true,
["source"] = "Untethered Rampager",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 242548,
},
[1226950] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Infuser",
["npcID"] = 241304,
},
[431349] = {
["source"] = "Nightfall Dark Architect",
["event"] = "SPELL_CAST_START",
["npcID"] = 213885,
},
[1233093] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["encounterID"] = 3122,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237661,
},
[1224906] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[326441] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shard of Halkias",
["npcID"] = 164557,
},
[474337] = {
["source"] = "Shreddinator 3000",
["event"] = "SPELL_CAST_START",
["npcID"] = 230740,
},
[1237195] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burrowing Creeper",
["npcID"] = 245092,
},
[465127] = {
["isChanneled"] = true,
["source"] = "Loaderbot",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231014,
},
[1231061] = {
["source"] = "Void-touched Hopper",
["event"] = "SPELL_CAST_START",
["npcID"] = 230377,
},
[118905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Capacitor Totem",
["npcID"] = 61245,
},
[427260] = {
["encounterName"] = "Kyrioss",
["source"] = "Cursed Rooktender",
["npcID"] = 207199,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2816,
},
[390926] = {
["event"] = "SPELL_CAST_START",
["source"] = "Candlelit Big-Boomer",
["npcID"] = 211546,
},
[1231067] = {
["source"] = "Void Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 234416,
},
[439031] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["event"] = "SPELL_CAST_START",
["npcID"] = 210267,
},
[76686] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Obsidian Borer",
["npcID"] = 40019,
},
[349987] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Achillite",
["npcID"] = 176555,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[467178] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gallagio Cocktail",
["npcID"] = 229435,
},
[1241307] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lurking Phaseburrower",
["npcID"] = 242548,
},
[433403] = {
["isChanneled"] = false,
["source"] = "Skittering Swarmer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208245,
},
[1239262] = {
["encounterName"] = "Dimensius, the All-Devouring",
["event"] = "SPELL_CAST_START",
["source"] = "Artoshion",
["npcID"] = 245255,
},
[373017] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Blazebound Firestorm",
["npcID"] = 189886,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2606,
},
[424704] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Gutter",
["npcID"] = 207454,
},
[1237220] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burrowing Creeper",
["npcID"] = 245092,
},
[1229033] = {
["source"] = "Voidcrawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 245782,
},
[457458] = {
["source"] = "Siegelord Xerosh",
["event"] = "SPELL_CAST_START",
["npcID"] = 224311,
},
[1229038] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["encounterID"] = 3135,
["event"] = "SPELL_CAST_START",
["npcID"] = 241517,
},
[467182] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[464112] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Stix Bunkjunker",
["npcID"] = 230322,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3012,
},
[448248] = {
["source"] = "Bloodstained Webmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 223253,
},
[468207] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["encounterID"] = 3009,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225821,
},
[316218] = {
["source"] = "Highway Serf",
["event"] = "SPELL_CAST_START",
["npcID"] = 169476,
},
[456438] = {
["source"] = "Cursed Miner",
["event"] = "SPELL_CAST_START",
["npcID"] = 213565,
},
[1237240] = {
["isChanneled"] = true,
["source"] = "Unbound Entity",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 240974,
},
[167385] = {
["source"] = "Dungeoneer's Training Dummy",
["event"] = "SPELL_CAST_START",
["npcID"] = 194644,
},
[433410] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chittering Fearmonger",
["npcID"] = 216583,
},
[395029] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Scorchling",
["npcID"] = 195119,
},
[371489] = {
["isChanneled"] = true,
["source"] = "Ukhel Corruptor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[433411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Darkcaster",
["npcID"] = 208242,
},
[347949] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2425,
},
[1227014] = {
["source"] = "Heka'tamos",
["event"] = "SPELL_CAST_START",
["npcID"] = 245998,
},
[378143] = {
["source"] = "Primalist Infiltrator",
["event"] = "SPELL_CAST_START",
["npcID"] = 189895,
},
[473841] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gallagio Jackbot",
["npcID"] = 229438,
},
[1237261] = {
["source"] = "Reshanor",
["event"] = "SPELL_CAST_START",
["npcID"] = 238319,
},
[455932] = {
["source"] = "Lighteater",
["event"] = "SPELL_CAST_START",
["npcID"] = 216036,
},
[1241357] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Unbound Assassin",
["encounterID"] = 3130,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237871,
},
[1227029] = {
["source"] = "Unstable Manifestation",
["event"] = "SPELL_CAST_START",
["npcID"] = 231558,
},
[1231130] = {
["source"] = "Soulbinder Naazindhri",
["event"] = "SPELL_CAST_START",
["npcID"] = 233816,
},
[1237272] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["encounterID"] = 3131,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233815,
},
[435465] = {
["source"] = "Machinist Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 219361,
},
[390943] = {
["encounterName"] = "Cragpie",
["source"] = "Cragpie",
["npcID"] = 220008,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3001,
},
[378150] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Infiltrator",
["npcID"] = 189869,
},
[438025] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218002,
},
[75539] = {
["encounterName"] = "Rom'ogg Bonecrusher",
["source"] = "Rom'ogg Bonecrusher",
["npcID"] = 39665,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1040,
},
[451843] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
},
[347958] = {
["encounterName"] = "Hylbrande",
["source"] = "Vault Purifier",
["encounterID"] = 2426,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 176551,
},
[1216815] = {
["source"] = "Xal'atath",
["event"] = "SPELL_CAST_START",
["npcID"] = 236933,
},
[1237288] = {
["source"] = "Reshanor",
["event"] = "SPELL_CAST_START",
["npcID"] = 238319,
},
[1225010] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[1237293] = {
["isChanneled"] = true,
["source"] = "Mercenary Acquisitionist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 244442,
},
[1237294] = {
["isChanneled"] = true,
["source"] = "Mercenary Acquisitionist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 244442,
},
[424212] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[426771] = {
["source"] = "Void-Bound Despoiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 212765,
},
[1225016] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[456453] = {
["source"] = "Skardyn Husk",
["event"] = "SPELL_CAST_START",
["npcID"] = 213566,
},
[444683] = {
["event"] = "SPELL_CAST_START",
["source"] = "Moss-Draped Ramolith",
["npcID"] = 214945,
},
[1243443] = {
["source"] = "Enchanted Ledger",
["event"] = "SPELL_CAST_START",
["npcID"] = 234300,
},
[1235256] = {
["isChanneled"] = true,
["source"] = "Nexus-Prince Azir",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231516,
},
[461060] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["npcID"] = 228458,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3014,
},
[465666] = {
["source"] = "Darkfuse Jumpstarter",
["event"] = "SPELL_CAST_START",
["npcID"] = 231325,
},
[466178] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Torq",
["encounterID"] = 3010,
["event"] = "SPELL_CAST_START",
["npcID"] = 229177,
},
[1214790] = {
["event"] = "SPELL_CAST_START",
["source"] = "Melbo the Magnificent",
["npcID"] = 229434,
},
[355641] = {
["event"] = "SPELL_CAST_START",
["source"] = "Veteran Sparkcaster",
["npcID"] = 179841,
},
[355642] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Veteran Sparkcaster",
["npcID"] = 179841,
},
[1216845] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Darkfuse Wrenchmonger",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231939,
},
[1235269] = {
["source"] = "Nexus-Prince Azir",
["event"] = "SPELL_CAST_START",
["npcID"] = 231516,
},
[1237319] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234478,
},
[398631] = {
["source"] = "Waxtail Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 212987,
},
[420125] = {
["source"] = "Primal Avalanche",
["event"] = "SPELL_CAST_START",
["npcID"] = 187082,
},
[449295] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["encounterID"] = 2878,
["event"] = "SPELL_CAST_START",
["npcID"] = 204188,
},
[431896] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Thirsty Patron",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 215819,
},
[88080] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whipping Wind",
["npcID"] = 47238,
},
[373046] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["npcID"] = 188252,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2609,
},
[346947] = {
["encounterName"] = "Mailroom Mayhem",
["source"] = "P.O.S.T. Master",
["npcID"] = 175646,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2424,
},
[1220959] = {
["source"] = "Narathe",
["event"] = "SPELL_CAST_START",
["npcID"] = 233628,
},
[471303] = {
["source"] = "Darkfuse Stunner",
["event"] = "SPELL_CAST_START",
["npcID"] = 229175,
},
[453392] = {
["source"] = "Sureki Eradicator",
["event"] = "SPELL_CAST_START",
["npcID"] = 225408,
},
[448787] = {
["source"] = "Lightspawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 206710,
},
[421665] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["event"] = "SPELL_CAST_START",
["npcID"] = 210149,
},
[426783] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Seer",
["npcID"] = 212775,
},
[445718] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sparklit Rust Crusher",
["npcID"] = 212597,
},
[467212] = {
["event"] = "SPELL_CAST_START",
["source"] = "Princeguard Demolisher",
["npcID"] = 227929,
},
[445207] = {
["source"] = "Void Bound Howler",
["event"] = "SPELL_CAST_START",
["npcID"] = 221979,
},
[472842] = {
["source"] = "Bomb Bot",
["event"] = "SPELL_CAST_START",
["npcID"] = 231928,
},
[1227117] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Ilyssa Darksorrow",
["npcID"] = 237662,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[455443] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waxx",
["npcID"] = 226267,
},
[466190] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["event"] = "SPELL_CAST_START",
["npcID"] = 226404,
},
[464655] = {
["source"] = "Mechadrone Sniper",
["event"] = "SPELL_CAST_START",
["npcID"] = 229069,
},
[448791] = {
["source"] = "Ardent Paladin",
["event"] = "SPELL_CAST_START",
["npcID"] = 206704,
},
[1220981] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3129,
},
[453909] = {
["isChanneled"] = true,
["source"] = "Taste Tester",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[456468] = {
["source"] = "Skardyn Husk",
["event"] = "SPELL_CAST_START",
["npcID"] = 213566,
},
[426275] = {
["isChanneled"] = false,
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212993,
},
[426787] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 211089,
},
[1239412] = {
["source"] = "Voidcrawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 245782,
},
[326997] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stoneborn Slasher",
["npcID"] = 167607,
},
[426277] = {
["isChanneled"] = true,
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212993,
},
[465682] = {
["source"] = "Darkfuse Inspector",
["event"] = "SPELL_CAST_START",
["npcID"] = 231385,
},
[382267] = {
["isChanneled"] = false,
["source"] = "Balara",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 193457,
},
[441119] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[384316] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["encounterID"] = 2636,
["event"] = "SPELL_CAST_START",
["npcID"] = 186615,
},
[1239426] = {
["encounterName"] = "Captain Nil'hitan",
["source"] = "Captain Nil'hitan",
["npcID"] = 244384,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3279,
},
[1239427] = {
["encounterName"] = "Captain Nil'hitan",
["source"] = "Captain Nil'hitan",
["npcID"] = 244384,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3279,
},
[1225099] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "The Royal Voidwing",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 244170,
},
[466197] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226404,
},
[401205] = {
["source"] = "Oblivious Shaleshell",
["event"] = "SPELL_CAST_START",
["npcID"] = 217123,
},
[460057] = {
["event"] = "SPELL_CAST_START",
["source"] = "Queensguard An'Jak Shabtir",
["npcID"] = 219665,
},
[1245575] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["encounterID"] = 3122,
["event"] = "SPELL_CAST_START",
["npcID"] = 237661,
},
[111752] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Scholomance Neophyte",
["npcID"] = 58823,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1426,
},
[1214872] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Sprocketmonger Lockenstock",
["npcID"] = 230583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[1245579] = {
["encounterName"] = "So'azmi",
["source"] = "So'azmi",
["npcID"] = 175806,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2437,
},
[467223] = {
["event"] = "SPELL_CAST_START",
["source"] = "Princeguard Demolisher",
["npcID"] = 227929,
},
[1231252] = {
["isChanneled"] = false,
["source"] = "Overcharged Sentinel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 242631,
},
[1245582] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 244752,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3326,
},
[1225113] = {
["source"] = "Shadowguard Technomancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 237132,
},
[351057] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["npcID"] = 177269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2442,
},
[1239445] = {
["encounterName"] = "Captain Nil'hitan",
["source"] = "Captain Nil'hitan",
["npcID"] = 244384,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3279,
},
[401209] = {
["source"] = "Oblivious Shaleshell",
["event"] = "SPELL_CAST_START",
["npcID"] = 217123,
},
[469272] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperious Mixer",
["npcID"] = 233247,
},
[324447] = {
["source"] = "Kobyss Spearfisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 214338,
},
[440615] = {
["source"] = "Ragefin Shadowcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 213405,
},
[457503] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cogchewer",
["npcID"] = 212617,
},
[1241500] = {
["source"] = "Oath-Breaker Desamirah",
["event"] = "SPELL_CAST_START",
["npcID"] = 241384,
},
[425264] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[1225130] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["encounterID"] = 3122,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237660,
},
[420659] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[1223085] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3015,
},
[1235368] = {
["source"] = "Overcharged Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 242631,
},
[471323] = {
["source"] = "Scavenger Worm",
["event"] = "SPELL_CAST_START",
["npcID"] = 238413,
},
[449318] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Darkcaster",
["npcID"] = 208242,
},
[440107] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["npcID"] = 216649,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2908,
},
[450854] = {
["source"] = "Deathscreamer Iken'tak",
["event"] = "SPELL_CAST_START",
["npcID"] = 211263,
},
[449831] = {
["isChanneled"] = true,
["source"] = "Kaheti Silk Hauler",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 221327,
},
[1245611] = {
["event"] = "SPELL_CAST_START",
["source"] = "Influx Warden",
["npcID"] = 246874,
},
[467231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gallagio Dealer",
["npcID"] = 229437,
},
[449321] = {
["isChanneled"] = true,
["source"] = "Mi'thk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211582,
},
[372047] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defier Draghar",
["npcID"] = 187897,
},
[440622] = {
["source"] = "Ragefin Shadowcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 213405,
},
[455975] = {
["source"] = "Void Crystal Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 217200,
},
[467234] = {
["event"] = "SPELL_CAST_START",
["source"] = "Princeguard Enforcer",
["npcID"] = 224175,
},
[1216967] = {
["source"] = "Voidveil Manta",
["event"] = "SPELL_CAST_START",
["npcID"] = 234842,
},
[460582] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "Reel Assistant",
["npcID"] = 228463,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3014,
},
[471841] = {
["isChanneled"] = true,
["source"] = "Bombshell Crab",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231312,
},
[1225162] = {
["encounterName"] = "Soul-Scribe",
["source"] = "Soul-Scribe",
["npcID"] = 234935,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3109,
},
[1245634] = {
["encounterName"] = "So'azmi",
["source"] = "So'azmi",
["npcID"] = 175806,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2437,
},
[123654] = {
["encounterName"] = "Trial of the King",
["source"] = "Ming the Cunning",
["encounterID"] = 1442,
["event"] = "SPELL_CAST_START",
["npcID"] = 61444,
},
[1231309] = {
["source"] = "Unraveled Energy Broker",
["event"] = "SPELL_CAST_START",
["npcID"] = 243044,
},
[467238] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Princeguard Enforcer",
["npcID"] = 224175,
},
[434998] = {
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_START",
["npcID"] = 214697,
},
[1225172] = {
["isChanneled"] = true,
["source"] = "Shadowguard Soldier",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234833,
},
[372565] = {
["isChanneled"] = true,
["source"] = "Flashfrost Chillweaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[368983] = {
["source"] = "Wickbreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215077,
},
[384336] = {
["source"] = "Nokhud Lancemaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 192800,
},
[1227226] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["encounterID"] = 3131,
["event"] = "SPELL_CAST_START",
["npcID"] = 233815,
},
[1227227] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["npcID"] = 233815,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3131,
},
[1219040] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Unbound Mage",
["encounterID"] = 3130,
["event"] = "SPELL_CAST_START",
["npcID"] = 237872,
},
[448818] = {
["source"] = "Kobold Skullface",
["event"] = "SPELL_CAST_START",
["npcID"] = 203951,
},
[346980] = {
["encounterName"] = "Hylbrande",
["source"] = "Vault Purifier",
["npcID"] = 176551,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2426,
},
[372568] = {
["isChanneled"] = true,
["source"] = "Primal Juggernaut",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[1231328] = {
["isChanneled"] = true,
["source"] = "Overcharged Sentinel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 242631,
},
[451890] = {
["source"] = "Dogmatic Soot-Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212876,
},
[446261] = {
["source"] = "Emboldened Fog Wither",
["event"] = "SPELL_CAST_START",
["npcID"] = 219909,
},
[448820] = {
["source"] = "Kobold Skullface",
["event"] = "SPELL_CAST_START",
["npcID"] = 203951,
},
[431421] = {
["isChanneled"] = true,
["source"] = "Murkfin Ravager",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213619,
},
[387411] = {
["source"] = "Soulharvester Galtmaa",
["event"] = "SPELL_CAST_START",
["npcID"] = 195927,
},
[435004] = {
["isChanneled"] = true,
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214697,
},
[1245669] = {
["encounterName"] = "So'azmi",
["source"] = "So'azmi",
["npcID"] = 175806,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2437,
},
[1227249] = {
["source"] = "Engorged Siltfeaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 230546,
},
[1231344] = {
["source"] = "Unraveled Energy Broker",
["event"] = "SPELL_CAST_START",
["npcID"] = 243044,
},
[1231345] = {
["isChanneled"] = false,
["source"] = "Unraveled Energy Broker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 243044,
},
[432448] = {
["source"] = "Nightfall Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 214761,
},
[424773] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gnarled Reviver",
["npcID"] = 207468,
},
[1227259] = {
["source"] = "Engorged Siltfeaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 230546,
},
[1227261] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["encounterID"] = 3131,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233815,
},
[428868] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["npcID"] = 213770,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[1227263] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["encounterID"] = 3131,
["event"] = "SPELL_CAST_START",
["npcID"] = 233815,
},
[111631] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Instructor Chillheart",
["npcID"] = 58633,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1426,
},
[1225218] = {
["encounterName"] = "Soul-Scribe",
["source"] = "Soul-Scribe",
["npcID"] = 234935,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3109,
},
[465715] = {
["source"] = "Darkfuse Stunner",
["event"] = "SPELL_CAST_START",
["npcID"] = 229175,
},
[1241596] = {
["source"] = "Untethered Swarmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 242535,
},
[191726] = {
["source"] = "Greater Lightning Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 97022,
},
[1214991] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mk II Electro Shocker",
["npcID"] = 230316,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3015,
},
[357226] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adorned Starseer",
["npcID"] = 180429,
},
[1233416] = {
["encounterName"] = "Fractillus",
["source"] = "Fractillus",
["encounterID"] = 3133,
["event"] = "SPELL_CAST_START",
["npcID"] = 237861,
},
[1227279] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["encounterID"] = 3130,
["event"] = "SPELL_CAST_START",
["npcID"] = 233816,
},
[1243656] = {
["source"] = "Pactsworn Arcanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 244411,
},
[432967] = {
["source"] = "Sentry Stagshell",
["event"] = "SPELL_CAST_START",
["npcID"] = 216340,
},
[460602] = {
["encounterName"] = "Demolition Duo",
["source"] = "Keeza Quickfuse",
["encounterID"] = 3019,
["event"] = "SPELL_CAST_START",
["npcID"] = 226403,
},
[357229] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cartel Muscle",
["npcID"] = 180348,
},
[439621] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["npcID"] = 216648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2908,
},
[460603] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 225821,
},
[322943] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["source"] = "Halkias",
["encounterID"] = 2401,
["event"] = "SPELL_CAST_START",
["npcID"] = 165408,
},
[440134] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218002,
},
[434505] = {
["source"] = "Venture Co. Patron",
["event"] = "SPELL_CAST_START",
["npcID"] = 214668,
},
[445252] = {
["isChanneled"] = true,
["source"] = "Lighteater",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216036,
},
[471352] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Darkfuse Technician",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231977,
},
[427342] = {
["isChanneled"] = true,
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206705,
},
[386914] = {
["isChanneled"] = true,
["source"] = "Primal Stormshield",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 186615,
},
[1235490] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Living Mass",
["encounterID"] = 3135,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234478,
},
[75683] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["npcID"] = 40586,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[188404] = {
["encounterName"] = "Hymdall",
["source"] = "Storm Drake",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 97788,
},
[444743] = {
["source"] = "Risen Mage",
["event"] = "SPELL_CAST_START",
["npcID"] = 221760,
},
[428879] = {
["source"] = "Rock Smasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 213954,
},
[1231403] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["encounterID"] = 3131,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233815,
},
[371565] = {
["source"] = "Galestrike Proto-Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 187211,
},
[1215033] = {
["encounterName"] = "Torque Clanfire and Sprok",
["source"] = "Torque Clankfire",
["encounterID"] = 3140,
["event"] = "SPELL_CAST_START",
["npcID"] = 237554,
},
[466751] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[440652] = {
["source"] = "Wandering Candle",
["event"] = "SPELL_CAST_START",
["npcID"] = 208450,
},
[351096] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["npcID"] = 177269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2442,
},
[1245743] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["npcID"] = 237661,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[357238] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adorned Starseer",
["npcID"] = 180429,
},
[445771] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Makura",
["npcID"] = 220643,
},
[160772] = {
["isChanneled"] = true,
["source"] = "Webbed Victim",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225601,
},
[473918] = {
["event"] = "SPELL_CAST_START",
["source"] = "Globlin",
["npcID"] = 234655,
},
[451913] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Puppetmaster?",
["npcID"] = 220507,
},
[386921] = {
["encounterName"] = "Granyth",
["source"] = "Dragonkiller Lance",
["encounterID"] = 2637,
["event"] = "SPELL_CAST_START",
["npcID"] = 194367,
},
[448843] = {
["source"] = "Waxtail Tormentor",
["event"] = "SPELL_CAST_START",
["npcID"] = 212983,
},
[1221190] = {
["source"] = "Ravenous Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 236995,
},
[422233] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["encounterID"] = 2880,
["event"] = "SPELL_CAST_START",
["npcID"] = 210156,
},
[386411] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["encounterID"] = 2581,
["event"] = "SPELL_CAST_START",
["npcID"] = 186339,
},
[106646] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flying Snow",
["npcID"] = 56473,
},
[76325] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Flame Caller",
["npcID"] = 39708,
},
[357243] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wandering Pulsar",
["npcID"] = 180433,
},
[384366] = {
["source"] = "Ashwhite Kestrel",
["event"] = "SPELL_CAST_START",
["npcID"] = 215070,
},
[427865] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["encounterID"] = 2883,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213119,
},
[1221207] = {
["source"] = "Shadowguard Riftcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 230474,
},
[387950] = {
["source"] = "Flickerflame Candlecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 219619,
},
[1231445] = {
["source"] = "Void Terror",
["event"] = "SPELL_CAST_START",
["npcID"] = 231552,
},
[1227355] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["encounterID"] = 3122,
["event"] = "SPELL_CAST_START",
["npcID"] = 237661,
},
[424798] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infected Beast",
["npcID"] = 210478,
},
[374135] = {
["source"] = "Desiccated Deer",
["event"] = "SPELL_CAST_START",
["npcID"] = 193420,
},
[427869] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["encounterID"] = 2883,
["event"] = "SPELL_CAST_START",
["npcID"] = 213119,
},
[445781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sparklit Rust Crusher",
["npcID"] = 212597,
},
[1241693] = {
["source"] = "Hulking Bloodguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 216338,
},
[1241694] = {
["isChanneled"] = true,
["source"] = "Hulking Bloodguard",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216338,
},
[428894] = {
["source"] = "Cursedforge Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 214264,
},
[427359] = {
["isChanneled"] = true,
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206705,
},
[448341] = {
["source"] = "Kobold Taskfinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 204127,
},
[329104] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["encounterID"] = 2381,
["event"] = "SPELL_CAST_START",
["npcID"] = 164218,
},
[440154] = {
["source"] = "Kobold Candlelighter",
["event"] = "SPELL_CAST_START",
["npcID"] = 218758,
},
[446807] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bomb",
["npcID"] = 222787,
},
[468813] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["event"] = "SPELL_CAST_START",
["npcID"] = 226404,
},
[425315] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["npcID"] = 207481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2831,
},
[1219192] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperious Blaster",
["npcID"] = 229356,
},
[465232] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Sprocketmonger Lockenstock",
["npcID"] = 230583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[1231477] = {
["source"] = "Void Terror",
["event"] = "SPELL_CAST_START",
["npcID"] = 231552,
},
[469327] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[460116] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["encounterID"] = 3009,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225821,
},
[387960] = {
["source"] = "Flickerflame Candlecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 219619,
},
[448347] = {
["source"] = "Diu'mik",
["event"] = "SPELL_CAST_START",
["npcID"] = 211564,
},
[1243771] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["encounterID"] = 3131,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233815,
},
[1233539] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["encounterID"] = 3135,
["event"] = "SPELL_CAST_START",
["npcID"] = 233824,
},
[83877] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oathsworn Pathfinder",
["npcID"] = 44932,
},
[443232] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Lookout",
["npcID"] = 217485,
},
[440162] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarlet Stinkcap",
["npcID"] = 212579,
},
[426345] = {
["source"] = "Void-Touched Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 212400,
},
[1231501] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["encounterID"] = 3122,
["event"] = "SPELL_CAST_START",
["npcID"] = 237660,
},
[442210] = {
["encounterName"] = "Anub'zekt",
["source"] = "Bloodstained Webmage",
["encounterID"] = 2906,
["event"] = "SPELL_CAST_START",
["npcID"] = 220599,
},
[437093] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[1231506] = {
["source"] = "Wastelander Dunewraith",
["event"] = "SPELL_CAST_START",
["npcID"] = 230621,
},
[426860] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 211089,
},
[435560] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_CAST_START",
["npcID"] = 214661,
},
[433002] = {
["source"] = "Bloodstained Assistant",
["event"] = "SPELL_CAST_START",
["npcID"] = 216333,
},
[325535] = {
["event"] = "SPELL_CAST_START",
["source"] = "Depraved Houndmaster",
["npcID"] = 164562,
},
[1229474] = {
["source"] = "Overgorged Mite",
["event"] = "SPELL_CAST_START",
["npcID"] = 242209,
},
[346006] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2425,
},
[351124] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["npcID"] = 177269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2442,
},
[429422] = {
["source"] = "Cursedforge Stoneshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 214066,
},
[350101] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Venza Goldfuse",
["npcID"] = 176705,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[348566] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Brawling Patron",
["npcID"] = 176562,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[372107] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Kokia Blazehoof",
["npcID"] = 189232,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2606,
},
[1237671] = {
["event"] = "SPELL_CAST_START",
["source"] = "D'rude",
["npcID"] = 244453,
},
[469340] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperious Mixer",
["npcID"] = 233247,
},
[1221299] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mug'Zee",
["npcID"] = 229953,
},
[428401] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["npcID"] = 213770,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[1221302] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mug'Zee",
["npcID"] = 229953,
},
[450407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Orta",
["npcID"] = 221067,
},
[1231540] = {
["source"] = "Wastelander Pilferer",
["event"] = "SPELL_CAST_START",
["npcID"] = 234033,
},
[1231542] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadowguard Harvester",
["npcID"] = 241304,
},
[465761] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["npcID"] = 228458,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3014,
},
[1219263] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3129,
},
[372623] = {
["encounterName"] = "Sentinel Talondras",
["source"] = "Sentinel Talondras",
["npcID"] = 184124,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2557,
},
[436592] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_CAST_START",
["npcID"] = 214661,
},
[428916] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[1237690] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Living Mass",
["encounterID"] = 3135,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 245255,
},
[440687] = {
["source"] = "Royal Jelly Purveyor",
["event"] = "SPELL_CAST_START",
["npcID"] = 220141,
},
[355225] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkbrine Fishmancer",
["npcID"] = 178142,
},
[1237694] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Artoshion",
["encounterID"] = 3135,
["event"] = "SPELL_CAST_START",
["npcID"] = 245255,
},
[1237695] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Pargoth",
["encounterID"] = 3135,
["event"] = "SPELL_CAST_START",
["npcID"] = 245222,
},
[451435] = {
["source"] = "Voidwraith",
["event"] = "SPELL_CAST_START",
["npcID"] = 224466,
},
[1229510] = {
["source"] = "Wastelander Farstalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 234962,
},
[423801] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadow-Blind Weaver",
["npcID"] = 206077,
},
[463206] = {
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_START",
["npcID"] = 214697,
},
[1217232] = {
["encounterName"] = "Azhiccar",
["source"] = "Azhiccar",
["encounterID"] = 3107,
["event"] = "SPELL_CAST_START",
["npcID"] = 234893,
},
[84521] = {
["encounterName"] = "Siamat",
["source"] = "Servant of Siamat",
["npcID"] = 45259,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1055,
},
[445808] = {
["source"] = "Heelripper",
["event"] = "SPELL_CAST_START",
["npcID"] = 216555,
},
[1239754] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Revenant of the Wasteland",
["npcID"] = 232189,
},
[1231567] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Collector",
["encounterID"] = 3132,
["event"] = "SPELL_CAST_START",
["npcID"] = 240905,
},
[473955] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Machinist",
["npcID"] = 229272,
},
[376723] = {
["encounterName"] = "Balakar Khan",
["source"] = "Nokhud Stormcaster",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 190294,
},
[459627] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 225821,
},
[440181] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rustul Titancap",
["npcID"] = 213115,
},
[389518] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sparklit Buttonmasher",
["npcID"] = 212596,
},
[411012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Young Storm Dragon",
["npcID"] = 45919,
},
[1217249] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gallagio Customer Care",
["npcID"] = 237109,
},
[450929] = {
["event"] = "SPELL_CAST_START",
["source"] = "Orta",
["npcID"] = 221067,
},
[473958] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flame Laser",
["npcID"] = 234671,
},
[468841] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["event"] = "SPELL_CAST_START",
["npcID"] = 226404,
},
[376727] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 186151,
},
[369563] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Baelog",
["npcID"] = 184581,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2555,
},
[440185] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rustul Titancap",
["npcID"] = 213115,
},
[76719] = {
["event"] = "SPELL_CAST_START",
["source"] = "Incendiary Spark",
["npcID"] = 40021,
},
[1241833] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Ilyssa Darksorrow",
["encounterID"] = 3122,
["event"] = "SPELL_CAST_START",
["npcID"] = 237662,
},
[464240] = {
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_START",
["npcID"] = 212827,
},
[468846] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226404,
},
[1215227] = {
["source"] = "Shadowguard Darkmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 235805,
},
[473964] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gallagio Dealer",
["npcID"] = 229437,
},
[1243887] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Dark Singularity",
["encounterID"] = 3132,
["event"] = "SPELL_CAST_START",
["npcID"] = 243859,
},
[450424] = {
["event"] = "SPELL_CAST_START",
["source"] = "Congealed Wax-Hulk",
["npcID"] = 223206,
},
[463218] = {
["source"] = "Hired Muscle",
["event"] = "SPELL_CAST_START",
["npcID"] = 210269,
},
[373662] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earthen Weaver",
["npcID"] = 186420,
},
[453496] = {
["isChanneled"] = true,
["source"] = "Sureki Webmage",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225479,
},
[431491] = {
["source"] = "Nightfall Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 214762,
},
[1219333] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[353706] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Brawling Patron",
["npcID"] = 176562,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[424328] = {
["source"] = "Waxtail Browbeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 213000,
},
[1221385] = {
["source"] = "Stix Bunkjunker",
["event"] = "SPELL_CAST_START",
["npcID"] = 230322,
},
[423305] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2836,
},
[1227529] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["npcID"] = 237763,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3134,
},
[433029] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mirror Master Murkna",
["npcID"] = 247458,
},
[431494] = {
["source"] = "Nightfall Tactician",
["event"] = "SPELL_CAST_START",
["npcID"] = 213934,
},
[369061] = {
["encounterName"] = "Emberon",
["source"] = "Emberon",
["npcID"] = 184422,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2558,
},
[1237769] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Echo",
["npcID"] = 241923,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[470388] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Siegelord",
["npcID"] = 239208,
},
[1221395] = {
["isChanneled"] = false,
["source"] = "Shadowguard Riftcaller",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 230474,
},
[1221396] = {
["source"] = "Shadowguard Riftcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 230474,
},
[1248009] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["encounterID"] = 3132,
["event"] = "SPELL_CAST_START",
["npcID"] = 233817,
},
[432520] = {
["source"] = "Nightfall Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 213893,
},
[1221401] = {
["source"] = "Shadowguard Voidtamer",
["event"] = "SPELL_CAST_START",
["npcID"] = 234428,
},
[1227543] = {
["source"] = "Crackling Wyrm",
["event"] = "SPELL_CAST_START",
["npcID"] = 236191,
},
[470902] = {
["source"] = "Wastelander Thief",
["event"] = "SPELL_CAST_START",
["npcID"] = 234032,
},
[448897] = {
["source"] = "Mi'thk",
["event"] = "SPELL_CAST_START",
["npcID"] = 211582,
},
[441221] = {
["event"] = "SPELL_CAST_START",
["source"] = "Escaped Stalker",
["npcID"] = 232257,
},
[427404] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidrider",
["npcID"] = 212786,
},
[470903] = {
["isChanneled"] = true,
["source"] = "Wastelander Thief",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234032,
},
[328125] = {
["encounterName"] = "Echelon",
["source"] = "Undying Stonefiend",
["encounterID"] = 2380,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 164363,
},
[426893] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quartermaster Koratite",
["npcID"] = 209801,
},
[1243931] = {
["source"] = "Sand Swooper",
["event"] = "SPELL_CAST_START",
["npcID"] = 230365,
},
[192018] = {
["encounterName"] = "Hyrja",
["source"] = "Hyrja",
["encounterID"] = 1806,
["event"] = "SPELL_CAST_START",
["npcID"] = 95833,
},
[1215278] = {
["source"] = "Shadowguard Soldier",
["event"] = "SPELL_CAST_START",
["npcID"] = 234050,
},
[1217327] = {
["encounterName"] = "Azhiccar",
["source"] = "Azhiccar",
["encounterID"] = 3107,
["event"] = "SPELL_CAST_START",
["npcID"] = 234893,
},
[471419] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3015,
},
[1231660] = {
["source"] = "Lesser Eye",
["event"] = "SPELL_CAST_START",
["npcID"] = 242901,
},
[439692] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["npcID"] = 216648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2908,
},
[1235762] = {
["source"] = "Stoneborn Reaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 167612,
},
[470910] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Gallagio Goon",
["npcID"] = 233474,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3015,
},
[1235766] = {
["source"] = "Stoneborn Reaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 167612,
},
[440207] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
},
[375727] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["npcID"] = 184125,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2559,
},
[464772] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["npcID"] = 228458,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3014,
},
[372147] = {
["source"] = "Balara",
["event"] = "SPELL_CAST_START",
["npcID"] = 193457,
},
[426905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Minion of Ghur'sha",
["npcID"] = 212778,
},
[117665] = {
["encounterName"] = "Sha of Doubt",
["source"] = "Sha of Doubt",
["npcID"] = 56439,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1439,
},
[448399] = {
["source"] = "Kobold Taskfinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 204127,
},
[421277] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[110117] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ethereal Sha",
["npcID"] = 65414,
},
[1217371] = {
["source"] = "The Underpin",
["event"] = "SPELL_CAST_START",
["npcID"] = 247390,
},
[465801] = {
["source"] = "Darkfuse Crossfire",
["event"] = "SPELL_CAST_START",
["npcID"] = 230299,
},
[472454] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["npcID"] = 228424,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3020,
},
[322000] = {
["event"] = "SPELL_CAST_START",
["source"] = "Architect Halen",
["npcID"] = 165008,
},
[460173] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "Pit Mechanic",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 228514,
},
[1239901] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowed Fateshaper",
["npcID"] = 242517,
},
[1231716] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["encounterID"] = 3135,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233824,
},
[449940] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[1221483] = {
["source"] = "Wastelander Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 234957,
},
[1221484] = {
["isChanneled"] = false,
["source"] = "Wastelander Ritualist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234957,
},
[433053] = {
["source"] = "Lighteater",
["event"] = "SPELL_CAST_START",
["npcID"] = 216036,
},
[472458] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3015,
},
[434589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overfiend",
["npcID"] = 217429,
},
[473994] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Torq",
["encounterID"] = 3010,
["event"] = "SPELL_CAST_START",
["npcID"] = 229177,
},
[1227631] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["encounterID"] = 3132,
["event"] = "SPELL_CAST_START",
["npcID"] = 233817,
},
[432031] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["encounterID"] = 2901,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215968,
},
[373692] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazebound Destroyer",
["npcID"] = 190034,
},
[1219448] = {
["isChanneled"] = true,
["source"] = "Darkfuse Shredder",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 227904,
},
[373693] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazebound Destroyer",
["npcID"] = 190034,
},
[443292] = {
["source"] = "Devouring Shade",
["event"] = "SPELL_CAST_START",
["npcID"] = 217870,
},
[440222] = {
["source"] = "Dark-Crazed Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 206067,
},
[469392] = {
["event"] = "SPELL_CAST_START",
["source"] = "Subwoofer",
["npcID"] = 232602,
},
[460181] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["npcID"] = 228458,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3014,
},
[466834] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Sharpshot Sentry",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231978,
},
[459671] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 225821,
},
[432037] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sparklit Buttonmasher",
["npcID"] = 212596,
},
[1237893] = {
["source"] = "Reshanor",
["event"] = "SPELL_CAST_START",
["npcID"] = 238319,
},
[76473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Flame Caller",
["npcID"] = 39708,
},
[435012] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["encounterID"] = 2906,
["event"] = "SPELL_CAST_START",
["npcID"] = 215405,
},
[1225616] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["encounterID"] = 3130,
["event"] = "SPELL_CAST_START",
["npcID"] = 233816,
},
[446368] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[1231759] = {
["source"] = "Cartel Thug",
["event"] = "SPELL_CAST_START",
["npcID"] = 243301,
},
[422648] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208745,
},
[449251] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Threadmancer",
["npcID"] = 208244,
},
[440551] = {
["source"] = "Ragefin Executioner",
["event"] = "SPELL_CAST_START",
["npcID"] = 213408,
},
[1219482] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["encounterID"] = 3108,
["event"] = "SPELL_CAST_START",
["npcID"] = 237514,
},
[441252] = {
["event"] = "SPELL_CAST_START",
["source"] = "Horrid Effusia",
["npcID"] = 211866,
},
[453856] = {
["isChanneled"] = true,
["source"] = "Nightfall Tactician",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225601,
},
[123651] = {
["isChanneled"] = true,
["source"] = "Kargesh Ribcrusher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 61947,
},
[1221532] = {
["source"] = "Wastelander Pactspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 234955,
},
[112929] = {
["encounterName"] = "Taran Zhu",
["source"] = "Gripping Hatred",
["npcID"] = 59804,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1306,
},
[106923] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Azure Serpent",
["npcID"] = 56754,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1303,
},
[434089] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[121601] = {
["source"] = "Harthak Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 61946,
},
[472833] = {
["source"] = "Bomb Bot",
["event"] = "SPELL_CAST_START",
["npcID"] = 231928,
},
[445860] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mirror Master Murkna",
["npcID"] = 247458,
},
[440231] = {
["source"] = "Dark-Crazed Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 206067,
},
[1239963] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowed Fateshaper",
["npcID"] = 242517,
},
[444692] = {
["source"] = "Ramolith Curlhorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 221672,
},
[1213354] = {
["event"] = "SPELL_CAST_START",
["source"] = "Princeguard Muscle",
["npcID"] = 229440,
},
[427950] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge Master Damian",
["npcID"] = 212831,
},
[387352] = {
["event"] = "SPELL_CAST_START",
["source"] = "Patreux",
["npcID"] = 211061,
},
[347094] = {
["encounterName"] = "Hylbrande",
["source"] = "Hylbrande",
["npcID"] = 175663,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2426,
},
[447909] = {
["source"] = "Master Machinist Dunstan",
["event"] = "SPELL_CAST_START",
["npcID"] = 217353,
},
[114062] = {
["encounterName"] = "Jandice Barov",
["source"] = "Jandice Barov",
["npcID"] = 59184,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1427,
},
[450980] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217491,
},
[459995] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "Geargrinder Biker",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 225804,
},
[429487] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2836,
},
[1214620] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maulspike",
["npcID"] = 247480,
},
[102573] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Azure Serpent",
["npcID"] = 56754,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1303,
},
[465822] = {
["source"] = "Darkfuse Crossfire",
["event"] = "SPELL_CAST_START",
["npcID"] = 230299,
},
[425394] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[1229523] = {
["isChanneled"] = true,
["source"] = "Plexus Sentinel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 239454,
},
[389572] = {
["source"] = "Deepwater Eel",
["event"] = "SPELL_CAST_START",
["npcID"] = 215680,
},
[449447] = {
["source"] = "Overseer Roskarrag",
["event"] = "SPELL_CAST_START",
["npcID"] = 221071,
},
[1244075] = {
["source"] = "Pactsworn Arcanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 244411,
},
[1245752] = {
["encounterName"] = "So'azmi",
["source"] = "So'azmi",
["encounterID"] = 2437,
["event"] = "SPELL_CAST_START",
["npcID"] = 175806,
},
[340446] = {
["source"] = "Manifestation of Envy",
["event"] = "SPELL_CAST_START",
["npcID"] = 167898,
},
[106797] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["npcID"] = 56732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1416,
},
[445866] = {
["isChanneled"] = true,
["source"] = "Swarm-Maven Donmiss",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216578,
},
[1227704] = {
["source"] = "Shadowguard Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 241666,
},
[1231799] = {
["source"] = "Wastelander Wildcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 230624,
},
[1239988] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Unbound Phaseblade",
["encounterID"] = 3130,
["event"] = "SPELL_CAST_START",
["npcID"] = 245008,
},
[119684] = {
["encounterName"] = "Xin the Weaponmaster",
["source"] = "Xin the Weaponmaster",
["npcID"] = 61398,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1441,
},
[106526] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["npcID"] = 56448,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1418,
},
[450885] = {
["source"] = "Cinderbee Forager",
["event"] = "SPELL_CAST_START",
["npcID"] = 222976,
},
[465826] = {
["isChanneled"] = true,
["source"] = "Darkfuse Crossfire",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 230299,
},
[452009] = {
["source"] = "Earthenwork Ironstrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 213951,
},
[354572] = {
["source"] = "Unruly Patron",
["event"] = "SPELL_CAST_START",
["npcID"] = 176561,
},
[76584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Zealot",
["npcID"] = 39990,
},
[449451] = {
["isChanneled"] = true,
["source"] = "Mi'thk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211582,
},
[443162] = {
["source"] = "Devouring Shade",
["event"] = "SPELL_CAST_START",
["npcID"] = 217870,
},
[421817] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[466808] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Wretch",
["npcID"] = 230028,
},
[424888] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A.",
["encounterID"] = 2854,
["event"] = "SPELL_CAST_START",
["npcID"] = 210108,
},
[1219531] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3129,
},
[448429] = {
["source"] = "Kobold Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 203878,
},
[432565] = {
["source"] = "Manifested Shadow",
["event"] = "SPELL_CAST_START",
["npcID"] = 211341,
},
[1233863] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["encounterID"] = 3122,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237660,
},
[1219535] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["encounterID"] = 3108,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237514,
},
[1219536] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["encounterID"] = 3108,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237514,
},
[1214607] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[474018] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidrider",
["npcID"] = 212786,
},
[349663] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Alcruux",
["npcID"] = 176556,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[1223634] = {
["source"] = "Watcher Gaz'Kreth",
["event"] = "SPELL_CAST_START",
["npcID"] = 239702,
},
[369110] = {
["encounterName"] = "Emberon",
["source"] = "Emberon",
["npcID"] = 184422,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2558,
},
[449455] = {
["source"] = "Ghastly Voidsoul",
["event"] = "SPELL_CAST_START",
["npcID"] = 212453,
},
[431544] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burrowing Stoneswarmer",
["npcID"] = 216537,
},
[1244108] = {
["source"] = "Pactsworn Sandreaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 248084,
},
[1245978] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Ilyssa Darksorrow",
["npcID"] = 237662,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3122,
},
[1227734] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[447921] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lambent Siltworm",
["npcID"] = 217556,
},
[378835] = {
["source"] = "Brackenhide Rotflinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 186362,
},
[114859] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bored Student",
["npcID"] = 59614,
},
[424891] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Speartender",
["npcID"] = 207456,
},
[1248209] = {
["encounterName"] = "So'azmi",
["source"] = "So'azmi",
["npcID"] = 175806,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2437,
},
[1245726] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["npcID"] = 238401,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[463061] = {
["isChanneled"] = false,
["source"] = "Darkfuse Hyena",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229252,
},
[447411] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[1240025] = {
["source"] = "Untethered Rampager",
["event"] = "SPELL_CAST_START",
["npcID"] = 242525,
},
[432059] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Geomancer",
["npcID"] = 212528,
},
[1227745] = {
["encounterName"] = "Azhiccar",
["source"] = "Azhiccar",
["encounterID"] = 3107,
["event"] = "SPELL_CAST_START",
["npcID"] = 234893,
},
[1248133] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Void Tear",
["npcID"] = 243108,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[474453] = {
["source"] = "Mechanized Peacekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 237587,
},
[450483] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[465820] = {
["source"] = "Waterworks Crocolisk",
["event"] = "SPELL_CAST_START",
["npcID"] = 227145,
},
[470308] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Acolyte",
["npcID"] = 238771,
},
[431549] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Venomspitter",
["npcID"] = 219661,
},
[428926] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Watcher",
["npcID"] = 40936,
},
[1235326] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stoneborn Slasher",
["npcID"] = 167607,
},
[463790] = {
["source"] = "Darkfuse Gunner",
["event"] = "SPELL_CAST_START",
["npcID"] = 229180,
},
[1231849] = {
["source"] = "Wastelander Dunewraith",
["event"] = "SPELL_CAST_START",
["npcID"] = 230621,
},
[449242] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["encounterID"] = 2878,
["event"] = "SPELL_CAST_START",
["npcID"] = 204188,
},
[471467] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Houndmaster",
["npcID"] = 229162,
},
[1242071] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["npcID"] = 233816,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3130,
},
[1227759] = {
["source"] = "Bound Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 234421,
},
[472782] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Gallagio Goon",
["npcID"] = 233474,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3015,
},
[1223667] = {
["isChanneled"] = true,
["source"] = "Watcher Gaz'Kreth",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 239702,
},
[451510] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[431552] = {
["event"] = "SPELL_CAST_START",
["source"] = "Direweb Lasher",
["npcID"] = 221303,
},
[372701] = {
["encounterName"] = "Sentinel Talondras",
["source"] = "Sentinel Talondras",
["npcID"] = 184124,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2557,
},
[332650] = {
["event"] = "SPELL_CAST_START",
["source"] = "Architect Halen",
["npcID"] = 165008,
},
[385434] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Teera",
["encounterID"] = 2581,
["event"] = "SPELL_CAST_START",
["npcID"] = 186339,
},
[445882] = {
["source"] = "Night-Twisted Hog",
["event"] = "SPELL_CAST_START",
["npcID"] = 215206,
},
[1227768] = {
["source"] = "Glutted Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 234282,
},
[463058] = {
["source"] = "Darkfuse Hyena",
["event"] = "SPELL_CAST_START",
["npcID"] = 229252,
},
[86331] = {
["encounterName"] = "Grand Vizier Ertan",
["source"] = "Grand Vizier Ertan",
["npcID"] = 43878,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1043,
},
[452024] = {
["source"] = "Iron-Runed Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 214576,
},
[462771] = {
["source"] = "Venture Co. Surveyor",
["event"] = "SPELL_CAST_START",
["npcID"] = 229686,
},
[89105] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lurking Tempest",
["npcID"] = 45704,
},
[355306] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rift Blast Portal",
["npcID"] = 179778,
},
[443837] = {
["encounterName"] = "Speaker Halven",
["source"] = "Speaker Halven",
["encounterID"] = 3007,
["event"] = "SPELL_CAST_START",
["npcID"] = 217570,
},
[466866] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[1231871] = {
["encounterName"] = "Fractillus",
["source"] = "Fractillus",
["encounterID"] = 3133,
["event"] = "SPELL_CAST_START",
["npcID"] = 237861,
},
[474031] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void-Cursed Crusher",
["npcID"] = 214419,
},
[1227779] = {
["source"] = "Void Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 245783,
},
[448444] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["npcID"] = 221896,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2877,
},
[1231875] = {
["source"] = "Wastelander Wildcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 230624,
},
[1227782] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["encounterID"] = 3131,
["event"] = "SPELL_CAST_START",
["npcID"] = 233815,
},
[384476] = {
["source"] = "Nokhud Longbow",
["event"] = "SPELL_CAST_START",
["npcID"] = 192789,
},
[45101] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dawnblade Marksman",
["npcID"] = 24979,
},
[224729] = {
["isChanneled"] = true,
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 206705,
},
[463798] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Torq",
["npcID"] = 229177,
},
[443840] = {
["encounterName"] = "Speaker Halven",
["source"] = "Speaker Halven",
["encounterID"] = 3007,
["event"] = "SPELL_CAST_START",
["npcID"] = 217570,
},
[1231882] = {
["source"] = "Nyz'raal the Umbral Blade",
["event"] = "SPELL_CAST_START",
["npcID"] = 234533,
},
[356843] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hourglass Tidesage",
["npcID"] = 179388,
},
[427384] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gilgoblin Hunter",
["npcID"] = 40935,
},
[98951] = {
["encounterName"] = "Ragnaros",
["source"] = "Ragnaros",
["encounterID"] = 1203,
["event"] = "SPELL_CAST_START",
["npcID"] = 52409,
},
[1227792] = {
["source"] = "Void Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 245783,
},
[75543] = {
["encounterName"] = "Rom'ogg Bonecrusher",
["source"] = "Rom'ogg Bonecrusher",
["npcID"] = 39665,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1040,
},
[398296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shambling Infester",
["npcID"] = 200387,
},
[460156] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 226398,
},
[392576] = {
["source"] = "Tempest Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 198047,
},
[411910] = {
["event"] = "SPELL_CAST_START",
["source"] = "Young Storm Dragon",
["npcID"] = 45919,
},
[1213469] = {
["event"] = "SPELL_CAST_START",
["source"] = "Princeguard Enforcer",
["npcID"] = 224175,
},
[376292] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["npcID"] = 184125,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2559,
},
[106547] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shado-Pan Novice",
["npcID"] = 56395,
},
[1239906] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadowed Fateshaper",
["npcID"] = 242517,
},
[427897] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge Master Damian",
["npcID"] = 212831,
},
[1215521] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Underpin",
["npcID"] = 247390,
},
[1242133] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["encounterID"] = 3122,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237660,
},
[1237381] = {
["source"] = "Mercenary Acquisitionist",
["event"] = "SPELL_CAST_START",
["npcID"] = 244442,
},
[1231719] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["encounterID"] = 3132,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233817,
},
[427469] = {
["source"] = "Fanatical Conjuror",
["event"] = "SPELL_CAST_START",
["npcID"] = 206698,
},
[82362] = {
["event"] = "SPELL_CAST_START",
["source"] = "Evolved Twilight Zealot",
["npcID"] = 39987,
},
[1227809] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["encounterID"] = 3122,
["event"] = "SPELL_CAST_START",
["npcID"] = 237660,
},
[398300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shambling Infester",
["npcID"] = 200387,
},
[1242088] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["npcID"] = 233816,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3130,
},
[446405] = {
["encounterName"] = "Undersea Abomination",
["source"] = "Undersea Abomination",
["encounterID"] = 2895,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214348,
},
[99503] = {
["source"] = "Lava Wielder",
["event"] = "SPELL_CAST_START",
["npcID"] = 53575,
},
[1242143] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Observer",
["npcID"] = 246874,
},
[1239407] = {
["encounterName"] = "Captain Nil'hitan",
["source"] = "Ethereal Scallywag",
["npcID"] = 245722,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3279,
},
[438218] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[114864] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bored Student",
["npcID"] = 59614,
},
[428407] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["npcID"] = 213770,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1047,
},
[200901] = {
["encounterName"] = "Hyrja",
["source"] = "Hyrja",
["encounterID"] = 1806,
["event"] = "SPELL_CAST_START",
["npcID"] = 95833,
},
[440266] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskborn Darkhound",
["npcID"] = 229170,
},
[465813] = {
["event"] = "SPELL_CAST_START",
["source"] = "Undercrawler",
["npcID"] = 231380,
},
[1217589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sporbit",
["npcID"] = 237337,
},
[192307] = {
["encounterName"] = "Hyrja",
["source"] = "Hyrja",
["encounterID"] = 1806,
["event"] = "SPELL_CAST_START",
["npcID"] = 95833,
},
[192563] = {
["source"] = "Valarjar Purifier",
["event"] = "SPELL_CAST_START",
["npcID"] = 97197,
},
[418262] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Treasure Wraith",
["npcID"] = 208728,
},
[1227784] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["encounterID"] = 3131,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233815,
},
[191284] = {
["encounterName"] = "Hymdall",
["source"] = "Hymdall",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 94960,
},
[446409] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Kelp",
["npcID"] = 215702,
},
[106421] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shado-Pan Guardian",
["npcID"] = 59741,
},
[353783] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Disruptive Patron",
["npcID"] = 176565,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[355830] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cartel Skulker",
["npcID"] = 179893,
},
[449481] = {
["source"] = "Overseer Roskarrag",
["event"] = "SPELL_CAST_START",
["npcID"] = 221071,
},
[473533] = {
["source"] = "Obedient-ish Predator",
["event"] = "SPELL_CAST_START",
["npcID"] = 231930,
},
[386024] = {
["source"] = "Primalist Stormspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 194894,
},
[451793] = {
["source"] = "Al'haggro",
["event"] = "SPELL_CAST_START",
["npcID"] = 216560,
},
[448458] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Devoted Worshipper",
["event"] = "SPELL_CAST_START",
["npcID"] = 223318,
},
[76484] = {
["encounterName"] = "Rom'ogg Bonecrusher",
["source"] = "Twilight Torturer",
["npcID"] = 39978,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1040,
},
[463811] = {
["source"] = "Darkfuse Gunner",
["event"] = "SPELL_CAST_START",
["npcID"] = 229180,
},
[430036] = {
["isChanneled"] = false,
["source"] = "Kobyss Spearfisher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214338,
},
[354297] = {
["event"] = "SPELL_CAST_START",
["source"] = "Focused Ritualist",
["npcID"] = 180431,
},
[357196] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cartel Wiseguy",
["npcID"] = 180336,
},
[386026] = {
["source"] = "Unstable Squall",
["event"] = "SPELL_CAST_START",
["npcID"] = 194895,
},
[1233984] = {
["source"] = "Hollowbane",
["event"] = "SPELL_CAST_START",
["npcID"] = 238536,
},
[430037] = {
["source"] = "Kobyss Spearfisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 214338,
},
[318319] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Morbid Ritualist",
["npcID"] = 164273,
},
[31707] = {
["event"] = "SPELL_CAST_START",
["source"] = "Water Elemental",
["npcID"] = 208441,
},
[384492] = {
["source"] = "Nokhud Beastmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 192794,
},
[428399] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["npcID"] = 213770,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1047,
},
[473537] = {
["source"] = "Punchy Thug",
["event"] = "SPELL_CAST_START",
["npcID"] = 231904,
},
[1233992] = {
["source"] = "Hollowbane",
["event"] = "SPELL_CAST_START",
["npcID"] = 238536,
},
[447950] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Ascended Voidspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 223150,
},
[450509] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Captain",
["npcID"] = 216584,
},
[448854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burly Contender",
["npcID"] = 217646,
},
[447439] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[1239907] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowed Fateshaper",
["npcID"] = 242517,
},
[446416] = {
["event"] = "SPELL_CAST_START",
["source"] = "Honey-Fused Droplet",
["npcID"] = 213697,
},
[459210] = {
["source"] = "Void-Bound Despoiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 212765,
},
[465863] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Flarendo",
["encounterID"] = 3010,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229181,
},
[456140] = {
["source"] = "Grimslice",
["event"] = "SPELL_CAST_START",
["npcID"] = 221551,
},
[1231954] = {
["isChanneled"] = true,
["source"] = "Crystalline Golem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 240974,
},
[426741] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Sentinel",
["npcID"] = 40577,
},
[75590] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Sadist",
["npcID"] = 39980,
},
[331274] = {
["event"] = "SPELL_CAST_START",
["source"] = "Consuming Rancor",
["npcID"] = 170002,
},
[456653] = {
["source"] = "Rabaan",
["event"] = "SPELL_CAST_START",
["npcID"] = 228343,
},
[473541] = {
["source"] = "Punchy Thug",
["event"] = "SPELL_CAST_START",
["npcID"] = 231904,
},
[106807] = {
["encounterName"] = "Ook-Ook",
["source"] = "Ook-Ook",
["npcID"] = 56637,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1412,
},
[427484] = {
["source"] = "Fanatical Conjuror",
["event"] = "SPELL_CAST_START",
["npcID"] = 206698,
},
[346116] = {
["encounterName"] = "Hylbrande",
["source"] = "Hylbrande",
["npcID"] = 175663,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2426,
},
[424414] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[463819] = {
["isChanneled"] = false,
["source"] = "Darkfuse Brute",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229161,
},
[442618] = {
["source"] = "Siege Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 215601,
},
[328206] = {
["encounterName"] = "Echelon",
["source"] = "Echelon",
["encounterID"] = 2380,
["event"] = "SPELL_CAST_START",
["npcID"] = 164185,
},
[451026] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[464584] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[437721] = {
["isChanneled"] = true,
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[75823] = {
["encounterName"] = "Corla, Herald of Twilight",
["source"] = "Corla, Herald of Twilight",
["npcID"] = 39679,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1038,
},
[1231315] = {
["source"] = "Coordinator Xy'thir",
["event"] = "SPELL_CAST_START",
["npcID"] = 232508,
},
[1231005] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Living Mass",
["encounterID"] = 3135,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 242587,
},
[1234020] = {
["source"] = "Hollowbane",
["event"] = "SPELL_CAST_START",
["npcID"] = 238536,
},
[372730] = {
["source"] = "Primal Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 188244,
},
[473351] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 226398,
},
[83780] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pygmy Scout",
["npcID"] = 44897,
},
[450519] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zekvir",
["npcID"] = 247387,
},
[451543] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hollows Resident",
["npcID"] = 219983,
},
[1214546] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Ascendant",
["npcID"] = 212793,
},
[435165] = {
["source"] = "Sir Braunpyke",
["event"] = "SPELL_CAST_START",
["npcID"] = 217658,
},
[456147] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bandtail Kestrel",
["npcID"] = 220300,
},
[444377] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Kodiak",
["npcID"] = 229060,
},
[424419] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[465871] = {
["source"] = "Darkfuse Bloodwarper",
["event"] = "SPELL_CAST_START",
["npcID"] = 230748,
},
[439506] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["encounterID"] = 2906,
["event"] = "SPELL_CAST_START",
["npcID"] = 215405,
},
[87618] = {
["encounterName"] = "Asaad",
["source"] = "Asaad",
["npcID"] = 43875,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1042,
},
[438749] = {
["encounterName"] = "The Silken Court",
["source"] = "Shattershell Scarab",
["encounterID"] = 2921,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218884,
},
[465872] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Torq",
["encounterID"] = 3010,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229177,
},
[426712] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211087,
},
[1215084] = {
["encounterName"] = "Torque Clanfire and Sprok",
["source"] = "Sprok",
["encounterID"] = 3140,
["event"] = "SPELL_CAST_START",
["npcID"] = 237552,
},
[424421] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Taener Duelmal",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 211289,
},
[260635] = {
["source"] = "Dire Barb",
["event"] = "SPELL_CAST_START",
["npcID"] = 140275,
},
[76588] = {
["encounterName"] = "Corla, Herald of Twilight",
["source"] = "Twilight Zealot",
["npcID"] = 39990,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1038,
},
[372735] = {
["source"] = "Flashfrost Earthshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 187969,
},
[473550] = {
["source"] = "Aerial Support Bot",
["event"] = "SPELL_CAST_START",
["npcID"] = 231906,
},
[82757] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Neferset Theurgist",
["npcID"] = 44980,
},
[1234044] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["encounterID"] = 3135,
["event"] = "SPELL_CAST_START",
["npcID"] = 233824,
},
[1216826] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["encounterID"] = 3020,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 230748,
},
[424423] = {
["source"] = "Sergeant Shaynemail",
["event"] = "SPELL_CAST_START",
["npcID"] = 239836,
},
[463828] = {
["source"] = "Darkfuse Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 229161,
},
[349498] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Alcruux",
["npcID"] = 176556,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[440288] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskborn Darkhound",
["npcID"] = 229170,
},
[1239732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Revenant of the Wasteland",
["npcID"] = 232189,
},
[445406] = {
["isChanneled"] = false,
["source"] = "Soaring Devilfish",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 246733,
},
[440768] = {
["event"] = "SPELL_CAST_START",
["source"] = "Black Blood Container",
["npcID"] = 234771,
},
[443598] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[1242187] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcana-Monger So'zer",
["npcID"] = 241956,
},
[445407] = {
["source"] = "Soaring Devilfish",
["event"] = "SPELL_CAST_START",
["npcID"] = 246733,
},
[355637] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Market Peacekeeper",
["npcID"] = 179840,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2441,
},
[452539] = {
["source"] = "Terror of the Forge",
["event"] = "SPELL_CAST_START",
["npcID"] = 220271,
},
[355640] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Veteran Sparkcaster",
["npcID"] = 179840,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2441,
},
[1227918] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["encounterID"] = 3108,
["event"] = "SPELL_CAST_START",
["npcID"] = 237514,
},
[1219731] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "Taah'bat",
["encounterID"] = 3108,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234933,
},
[449298] = {
["isChanneled"] = true,
["source"] = "Mi'thk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211582,
},
[414192] = {
["source"] = "Partially Teleported Murloc",
["event"] = "SPELL_CAST_START",
["npcID"] = 226666,
},
[447456] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[429545] = {
["source"] = "Voidtouched Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 223469,
},
[1239268] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Voidwarden",
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 245705,
},
[76813] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Oracle",
["npcID"] = 41096,
},
[1223364] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["encounterID"] = 3129,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233814,
},
[1231720] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["encounterID"] = 3132,
["event"] = "SPELL_CAST_START",
["npcID"] = 233817,
},
[1242086] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["npcID"] = 233816,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3130,
},
[424429] = {
["source"] = "Ardent Paladin",
["event"] = "SPELL_CAST_START",
["npcID"] = 206704,
},
[1242259] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Ilyssa Darksorrow",
["encounterID"] = 3122,
["event"] = "SPELL_CAST_START",
["npcID"] = 237662,
},
[426768] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Tempest Witch",
["npcID"] = 40634,
},
[372743] = {
["isChanneled"] = true,
["source"] = "Flashfrost Chillweaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[440806] = {
["encounterName"] = "Nerl'athekk the Skulking",
["source"] = "Nerl'athekk the Skulking",
["encounterID"] = 2946,
["event"] = "SPELL_CAST_START",
["npcID"] = 219676,
},
[1231893] = {
["source"] = "Steelsoul Arcanoward",
["event"] = "SPELL_CAST_START",
["npcID"] = 247624,
},
[1244313] = {
["source"] = "Pactsworn Arcanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 244411,
},
[473276] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Sprocketmonger Lockenstock",
["npcID"] = 230583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[424431] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 211290,
},
[369674] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stonevault Geomancer",
["npcID"] = 184022,
},
[472764] = {
["event"] = "SPELL_CAST_START",
["source"] = "Consuming Voidstone",
["npcID"] = 212739,
},
[445705] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepwater Makura",
["npcID"] = 220643,
},
[114872] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bored Student",
["npcID"] = 59614,
},
[1236130] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["encounterID"] = 3108,
["event"] = "SPELL_CAST_START",
["npcID"] = 237514,
},
[106428] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shado-Pan Novice",
["npcID"] = 56395,
},
[448485] = {
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_START",
["npcID"] = 212826,
},
[451044] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gargantuan Honeyslime",
["npcID"] = 222960,
},
[429037] = {
["encounterName"] = "Mindbender Ghur'sha",
["source"] = "Erunak Stonespeaker",
["npcID"] = 40825,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1046,
},
[456125] = {
["source"] = "Crystal Clacker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215881,
},
[1242028] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Sentinel Za'drin",
["npcID"] = 242705,
},
[427357] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[82760] = {
["event"] = "SPELL_CAST_START",
["source"] = "Neferset Darkcaster",
["npcID"] = 44982,
},
[1215015] = {
["encounterName"] = "Torque Clanfire and Sprok",
["source"] = "Sprok",
["encounterID"] = 3140,
["event"] = "SPELL_CAST_START",
["npcID"] = 237552,
},
[424737] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2861,
},
[1223859] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["encounterID"] = 3130,
["event"] = "SPELL_CAST_START",
["npcID"] = 233816,
},
[469981] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 226398,
},
[428530] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["npcID"] = 213770,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[87622] = {
["encounterName"] = "Asaad",
["source"] = "Asaad",
["npcID"] = 43875,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1042,
},
[418295] = {
["source"] = "Treasure Wraith",
["event"] = "SPELL_CAST_START",
["npcID"] = 208728,
},
[1219053] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Unbound Assassin",
["encounterID"] = 3130,
["event"] = "SPELL_CAST_START",
["npcID"] = 237871,
},
[1237245] = {
["event"] = "SPELL_CAST_START",
["source"] = "Great Devourer",
["npcID"] = 244444,
},
[432113] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overlord",
["npcID"] = 228575,
},
[1227962] = {
["source"] = "Unreal Observer",
["event"] = "SPELL_CAST_START",
["npcID"] = 231551,
},
[193092] = {
["encounterName"] = "Hymdall",
["source"] = "Hymdall",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 94960,
},
[317792] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magus of the Dead",
["npcID"] = 163366,
},
[432114] = {
["source"] = "Dogmatic Forgecaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 212884,
},
[418297] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Treasure Wraith",
["npcID"] = 208728,
},
[461796] = {
["source"] = "Darkfuse Demolitionist",
["event"] = "SPELL_CAST_START",
["npcID"] = 229212,
},
[193235] = {
["encounterName"] = "Hymdall",
["source"] = "Hymdall",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 94960,
},
[425974] = {
["source"] = "Earth Infused Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 210109,
},
[1254321] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["encounterID"] = 3132,
["event"] = "SPELL_CAST_START",
["npcID"] = 233817,
},
[114874] = {
["event"] = "SPELL_CAST_START",
["source"] = "Professor Slate",
["npcID"] = 59613,
},
[445935] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bomb",
["npcID"] = 222265,
},
[448492] = {
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_START",
["npcID"] = 212826,
},
[465380] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Houndmaster",
["npcID"] = 229162,
},
[1223880] = {
["source"] = "Watcher Gaz'Kreth",
["event"] = "SPELL_CAST_START",
["npcID"] = 239702,
},
[470498] = {
["event"] = "SPELL_CAST_START",
["source"] = "Goblin Sapper Bot",
["npcID"] = 228053,
},
[432117] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["encounterID"] = 2901,
["event"] = "SPELL_CAST_START",
["npcID"] = 215407,
},
[352796] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gatewarden Zo'mazz",
["npcID"] = 178392,
},
[115002] = {
["encounterName"] = "Taran Zhu",
["source"] = "Taran Zhu",
["npcID"] = 56884,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1306,
},
[106942] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Destroying Sha",
["npcID"] = 56765,
},
[440306] = {
["isChanneled"] = true,
["source"] = "Nerubian Darkcaster",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219810,
},
[387596] = {
["source"] = "Risen Mystic",
["event"] = "SPELL_CAST_START",
["npcID"] = 195877,
},
[427001] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 211089,
},
[355057] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkbrine Shellcrusher",
["npcID"] = 178139,
},
[427382] = {
["source"] = "Engine Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 212764,
},
[1213656] = {
["source"] = "Drill Sergeant",
["event"] = "SPELL_CAST_START",
["npcID"] = 231925,
},
[357404] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Evaile",
["encounterID"] = 2440,
["event"] = "SPELL_CAST_START",
["npcID"] = 180399,
},
[385536] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Primalist Flamedancer",
["npcID"] = 190206,
},
[432120] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overlord",
["npcID"] = 228575,
},
[469478] = {
["encounterName"] = "Swampface",
["source"] = "Swampface",
["encounterID"] = 3053,
["event"] = "SPELL_CAST_START",
["npcID"] = 226396,
},
[386063] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Maruuk",
["encounterID"] = 2581,
["event"] = "SPELL_CAST_START",
["npcID"] = 186338,
},
[353312] = {
["encounterName"] = "Hylbrande",
["source"] = "Hylbrande",
["npcID"] = 175663,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2426,
},
[115003] = {
["encounterName"] = "Yan-Zhu the Uncasked",
["source"] = "Yan-Zhu the Uncasked",
["npcID"] = 59479,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1414,
},
[444915] = {
["isChanneled"] = false,
["source"] = "Kobyss Trickster",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214343,
},
[429051] = {
["encounterName"] = "Mindbender Ghur'sha",
["source"] = "Erunak Stonespeaker",
["npcID"] = 40825,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1046,
},
[456174] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[1236186] = {
["source"] = "Shadowguard Void Adept",
["event"] = "SPELL_CAST_START",
["npcID"] = 244111,
},
[1245203] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 244752,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3326,
},
[449522] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drone Abductor",
["npcID"] = 219655,
},
[426734] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[450546] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Captain",
["npcID"] = 216584,
},
[431612] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Venomspitter",
["npcID"] = 219661,
},
[469993] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["npcID"] = 228458,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3014,
},
[116155] = {
["event"] = "SPELL_CAST_START",
["source"] = "Yeasty Brew Alemental",
["npcID"] = 66413,
},
[1236193] = {
["isChanneled"] = true,
["source"] = "Crystalline Golem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 236549,
},
[428542] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Sentinel",
["npcID"] = 40577,
},
[441242] = {
["source"] = "Taste Tester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220060,
},
[329113] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["encounterID"] = 2381,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 164218,
},
[432125] = {
["source"] = "Kaheti Silk Hauler",
["event"] = "SPELL_CAST_START",
["npcID"] = 221327,
},
[465326] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodfang Hyena",
["npcID"] = 227843,
},
[384823] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Blazebound Firestorm",
["npcID"] = 189886,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2606,
},
[450037] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malfunctioning Spire",
["npcID"] = 220068,
},
[382233] = {
["source"] = "Batak",
["event"] = "SPELL_CAST_START",
["npcID"] = 193462,
},
[1225966] = {
["isChanneled"] = true,
["source"] = "Bandtail Kestrel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237132,
},
[453989] = {
["isChanneled"] = true,
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[433662] = {
["isChanneled"] = true,
["source"] = "Blood Overseer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216856,
},
[385558] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Erkhart Stormvein",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190485,
},
[473579] = {
["source"] = "Aerial Support Bot",
["event"] = "SPELL_CAST_START",
["npcID"] = 231906,
},
[456891] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[382277] = {
["source"] = "Balara",
["event"] = "SPELL_CAST_START",
["npcID"] = 193457,
},
[345990] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2425,
},
[453110] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Puppetmaster?",
["npcID"] = 220507,
},
[427011] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["event"] = "SPELL_CAST_START",
["npcID"] = 208747,
},
[1225319] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[1240102] = {
["encounterName"] = "Timecap'n Hooktail",
["source"] = "Timecap'n Hooktail",
["npcID"] = 175546,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2419,
},
[460472] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["npcID"] = 228458,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3014,
},
[465905] = {
["source"] = "Darkfuse Shredder",
["event"] = "SPELL_CAST_START",
["npcID"] = 227904,
},
[473070] = {
["encounterName"] = "Swampface",
["source"] = "Swampface",
["encounterID"] = 3053,
["event"] = "SPELL_CAST_START",
["npcID"] = 226396,
},
[432130] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["encounterID"] = 2901,
["event"] = "SPELL_CAST_START",
["npcID"] = 215407,
},
[387608] = {
["isChanneled"] = true,
["source"] = "Ukhel Corruptor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 195842,
},
[82765] = {
["event"] = "SPELL_CAST_START",
["source"] = "Neferset Darkcaster",
["npcID"] = 44982,
},
[427894] = {
["source"] = "Forge Master Damian",
["event"] = "SPELL_CAST_START",
["npcID"] = 212831,
},
[473993] = {
["source"] = "Masked Freelancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 231910,
},
[444925] = {
["event"] = "SPELL_CAST_START",
["source"] = "Umbral Spore",
["npcID"] = 223916,
},
[470706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Machinist",
["npcID"] = 229272,
},
[450043] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malfunctioning Spire",
["npcID"] = 220068,
},
[270419] = {
["source"] = "Unbound Deposits",
["event"] = "SPELL_CAST_START",
["npcID"] = 223532,
},
[1236229] = {
["source"] = "Shadowguard Arcanotech",
["event"] = "SPELL_CAST_START",
["npcID"] = 244137,
},
[1223944] = {
["isChanneled"] = true,
["source"] = "Phase Stalker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234843,
},
[106434] = {
["encounterName"] = "Master Snowdrift",
["source"] = "Master Snowdrift",
["npcID"] = 56541,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1304,
},
[1230087] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["encounterID"] = 3135,
["event"] = "SPELL_CAST_START",
["npcID"] = 241517,
},
[13860] = {
["event"] = "SPELL_CAST_START",
["source"] = "Monstrous Larva",
["npcID"] = 240091,
},
[470515] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Siegelord",
["npcID"] = 239208,
},
[353836] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Disruptive Patron",
["npcID"] = 176565,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[1231311] = {
["source"] = "Enraged Slateback Shade",
["event"] = "SPELL_CAST_START",
["npcID"] = 239830,
},
[468658] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3015,
},
[1225582] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["encounterID"] = 3130,
["event"] = "SPELL_CAST_START",
["npcID"] = 233816,
},
[385363] = {
["source"] = "Hungry Hungry Riverbeast",
["event"] = "SPELL_CAST_START",
["npcID"] = 195969,
},
[432135] = {
["event"] = "SPELL_CAST_START",
["source"] = "Invading Kobold",
["npcID"] = 216157,
},
[387613] = {
["source"] = "Ukhel Corruptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 195842,
},
[445746] = {
["source"] = "Darkwater Tidecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 220621,
},
[472452] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 228424,
},
[392406] = {
["source"] = "Storm Warrior",
["event"] = "SPELL_CAST_START",
["npcID"] = 197982,
},
[387614] = {
["source"] = "Ukhel Deathspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 195851,
},
[369703] = {
["encounterName"] = "Bromach",
["source"] = "Bromach",
["npcID"] = 184018,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2556,
},
[1214468] = {
["source"] = "Mechadrone Sniper",
["event"] = "SPELL_CAST_START",
["npcID"] = 229069,
},
[468726] = {
["source"] = "Venture Co. Diver",
["event"] = "SPELL_CAST_START",
["npcID"] = 231496,
},
[473589] = {
["source"] = "Explosive Barrel",
["event"] = "SPELL_CAST_START",
["npcID"] = 234498,
},
[451900] = {
["source"] = "Dogmatic Soot-Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212876,
},
[439814] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[319941] = {
["encounterName"] = "Echelon",
["source"] = "Echelon",
["encounterID"] = 2380,
["event"] = "SPELL_CAST_START",
["npcID"] = 164185,
},
[424462] = {
["source"] = "Taener Duelmal",
["event"] = "SPELL_CAST_START",
["npcID"] = 239834,
},
[443397] = {
["source"] = "Sureki Venomblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 220193,
},
[1228065] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[448515] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Elaena Emberlanz",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 211290,
},
[83151] = {
["encounterName"] = "Siamat",
["source"] = "Siamat",
["npcID"] = 44819,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1055,
},
[441351] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[1244443] = {
["event"] = "SPELL_CAST_START",
["source"] = "Commerce Enforcer",
["npcID"] = 179842,
},
[1236256] = {
["source"] = "Shadowguard Phasecutter",
["event"] = "SPELL_CAST_START",
["npcID"] = 244101,
},
[427356] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[1226024] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[452099] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Animated Shadow",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 224616,
},
[1244249] = {
["source"] = "Pactsworn Sandreaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 248084,
},
[1228075] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-Prince Xevvos",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 241798,
},
[446649] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[1236263] = {
["source"] = "Narathe",
["event"] = "SPELL_CAST_START",
["npcID"] = 231519,
},
[432142] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian War-Weaver",
["npcID"] = 222731,
},
[459779] = {
["encounterName"] = "Demolition Duo",
["source"] = "Bront",
["encounterID"] = 3019,
["event"] = "SPELL_CAST_START",
["npcID"] = 226402,
},
[427025] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["event"] = "SPELL_CAST_START",
["npcID"] = 208747,
},
[115009] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Failed Student",
["npcID"] = 59808,
},
[356404] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Core Hound",
["npcID"] = 180091,
},
[1228081] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-Prince Xevvos",
["encounterID"] = 3134,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 241798,
},
[1236973] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["encounterID"] = 2381,
["event"] = "SPELL_CAST_START",
["npcID"] = 164218,
},
[460977] = {
["source"] = "Slippery Syphoner",
["event"] = "SPELL_CAST_START",
["npcID"] = 214548,
},
[430097] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213217,
},
[1244461] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 244752,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3326,
},
[1244462] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 244752,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3326,
},
[323142] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["encounterID"] = 2381,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 164218,
},
[325701] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Toiling Groundskeeper",
["npcID"] = 165529,
},
[428563] = {
["source"] = "Kobold Flametender",
["event"] = "SPELL_CAST_START",
["npcID"] = 213913,
},
[1217855] = {
["isChanneled"] = false,
["source"] = "Geargrinder Biker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237516,
},
[323143] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["encounterID"] = 2381,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 164218,
},
[356407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Core Hound",
["npcID"] = 180091,
},
[383823] = {
["source"] = "Nokhud Hornsounder",
["event"] = "SPELL_CAST_START",
["npcID"] = 192796,
},
[431364] = {
["source"] = "Nightfall Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 214761,
},
[372087] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defier Draghar",
["npcID"] = 187897,
},
[467117] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Stix Bunkjunker",
["npcID"] = 230322,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3012,
},
[434706] = {
["source"] = "Tasting Room Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 214920,
},
[1215023] = {
["encounterName"] = "Torque Clanfire and Sprok",
["source"] = "Torque Clankfire",
["encounterID"] = 3140,
["event"] = "SPELL_CAST_START",
["npcID"] = 237554,
},
[473903] = {
["event"] = "SPELL_CAST_START",
["source"] = "Globikus",
["npcID"] = 234640,
},
[446477] = {
["source"] = "Deepwater Sludger",
["event"] = "SPELL_CAST_START",
["npcID"] = 216515,
},
[116] = {
["npcID"] = 188027,
},
[449339] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["encounterID"] = 2878,
["event"] = "SPELL_CAST_START",
["npcID"] = 204188,
},
[471930] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "Reel Assistant",
["npcID"] = 228463,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3014,
},
[431639] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Saboteur",
["npcID"] = 212715,
},
[1224025] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["encounterID"] = 3130,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233816,
},
[115010] = {
["encounterName"] = "Taran Zhu",
["source"] = "Gripping Hatred",
["npcID"] = 59804,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1306,
},
[1228115] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[448528] = {
["source"] = "Spitfire Fusetender",
["event"] = "SPELL_CAST_START",
["npcID"] = 211777,
},
[444944] = {
["encounterName"] = "Fractillus",
["source"] = "Grottolight Osprey",
["event"] = "SPELL_CAST_START",
["npcID"] = 225936,
},
[451600] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Chamber Expeller",
["event"] = "SPELL_CAST_START",
["npcID"] = 224368,
},
[115650] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fizzy Brew Alemental",
["npcID"] = 59520,
},
[106439] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shado-Pan Novice",
["npcID"] = 56395,
},
[1215850] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burrowing Creeper",
["npcID"] = 245092,
},
[357436] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Verethian",
["encounterID"] = 2440,
["event"] = "SPELL_CAST_START",
["npcID"] = 180470,
},
[116162] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fizzy Brew Alemental",
["npcID"] = 59520,
},
[106055] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["npcID"] = 56448,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1418,
},
[1234263] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["encounterID"] = 3135,
["event"] = "SPELL_CAST_START",
["npcID"] = 233824,
},
[1246541] = {
["encounterName"] = "Dimensius, the All-Devouring",
["event"] = "SPELL_CAST_START",
["source"] = "Nullbinder",
["npcID"] = 248589,
},
[468487] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 225821,
},
[1232221] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["npcID"] = 233817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[372793] = {
["isChanneled"] = true,
["source"] = "Primal Juggernaut",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188244,
},
[106823] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["npcID"] = 56732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1416,
},
[378420] = {
["source"] = "Primal Avalanche",
["event"] = "SPELL_CAST_START",
["npcID"] = 187082,
},
[462859] = {
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_START",
["npcID"] = 206694,
},
[432156] = {
["source"] = "Waxtail Outrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 213095,
},
[461836] = {
["source"] = "Waxtail Candleflyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 219343,
},
[135029] = {
["event"] = "SPELL_CAST_START",
["source"] = "Water Elemental",
["npcID"] = 208441,
},
[1242469] = {
["source"] = "Pactsworn Sandreaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 244410,
},
[111813] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Guard",
["npcID"] = 58822,
},
[15284] = {
["encounterName"] = "Karsh Steelbender",
["source"] = "Karsh Steelbender",
["npcID"] = 39698,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1039,
},
[1224669] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[1213803] = {
["isChanneled"] = false,
["source"] = "Venture Co. Architect",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229251,
},
[87761] = {
["event"] = "SPELL_CAST_START",
["source"] = "Executor of the Caliph",
["npcID"] = 45928,
},
[1213805] = {
["source"] = "Venture Co. Architect",
["event"] = "SPELL_CAST_START",
["npcID"] = 229251,
},
[445974] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bomb",
["npcID"] = 222281,
},
[372794] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Defier Draghar",
["npcID"] = 187897,
},
[1215855] = {
["source"] = "Unstable Manifestation",
["event"] = "SPELL_CAST_START",
["npcID"] = 231558,
},
[451605] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[115652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stout Brew Alemental",
["npcID"] = 59519,
},
[454675] = {
["source"] = "Rampaging Stones",
["event"] = "SPELL_CAST_START",
["npcID"] = 223526,
},
[453140] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[275563] = {
["source"] = "Shadowstarved Bullfrog",
["event"] = "SPELL_CAST_START",
["npcID"] = 214406,
},
[456211] = {
["source"] = "Crystal Clacker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215881,
},
[453142] = {
["event"] = "SPELL_CAST_START",
["source"] = "Web Marauder",
["npcID"] = 219034,
},
[453141] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211087,
},
[454318] = {
["isChanneled"] = true,
["source"] = "Brew Drop",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[347721] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defective Sorter",
["npcID"] = 176396,
},
[428066] = {
["source"] = "Rank Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 211121,
},
[87762] = {
["event"] = "SPELL_CAST_START",
["source"] = "Minister of Air",
["npcID"] = 45930,
},
[424903] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A.",
["encounterID"] = 2854,
["event"] = "SPELL_CAST_START",
["npcID"] = 210108,
},
[1227900] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["encounterID"] = 3108,
["event"] = "SPELL_CAST_START",
["npcID"] = 241375,
},
[1219526] = {
["source"] = "Crawler Mine",
["event"] = "SPELL_CAST_START",
["npcID"] = 227956,
},
[434722] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["npcID"] = 216619,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2907,
},
[451608] = {
["source"] = "Kobyss Shadeshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 215653,
},
[439838] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[466961] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3011,
},
[1236354] = {
["source"] = "Shadowguard Soulbreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 244113,
},
[1226111] = {
["source"] = "Ravenous Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 236995,
},
[465432] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["npcID"] = 228458,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3014,
},
[1236348] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2425,
},
[1228161] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["encounterID"] = 3132,
["event"] = "SPELL_CAST_START",
["npcID"] = 233817,
},
[465939] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Skyfire",
["npcID"] = 227955,
},
[1228163] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "The Royal Voidwing",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 233823,
},
[377923] = {
["source"] = "Superheated Slag",
["event"] = "SPELL_CAST_START",
["npcID"] = 227382,
},
[350796] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["npcID"] = 177269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2442,
},
[459799] = {
["encounterName"] = "Demolition Duo",
["source"] = "Bront",
["encounterID"] = 3019,
["event"] = "SPELL_CAST_START",
["npcID"] = 226402,
},
[451102] = {
["source"] = "Ascendant Vis'coxria",
["event"] = "SPELL_CAST_START",
["npcID"] = 211261,
},
[338003] = {
["event"] = "SPELL_CAST_START",
["source"] = "Depraved Obliterator",
["npcID"] = 165414,
},
[397878] = {
["encounterName"] = "Wise Mari",
["source"] = "Corrupt Living Water",
["npcID"] = 56511,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1418,
},
[106826] = {
["encounterName"] = "Sha of Violence",
["source"] = "Sha of Violence",
["npcID"] = 56719,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1305,
},
[321633] = {
["event"] = "SPELL_CAST_START",
["source"] = "Morbid Boneguard",
["npcID"] = 168266,
},
[430125] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Quartermaster Koratite",
["npcID"] = 209801,
},
[397881] = {
["encounterName"] = "Wise Mari",
["source"] = "Corrupt Living Water",
["npcID"] = 56511,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1418,
},
[449568] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["npcID"] = 221896,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2877,
},
[445984] = {
["source"] = "Hilltop Jawcrawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 227980,
},
[463900] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Torq",
["encounterID"] = 3010,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229177,
},
[453149] = {
["event"] = "SPELL_CAST_START",
["source"] = "Web Marauder",
["npcID"] = 219034,
},
[449567] = {
["source"] = "Sunless Tidemarshal",
["event"] = "SPELL_CAST_START",
["npcID"] = 219602,
},
[1228196] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "The Royal Voidwing",
["encounterID"] = 3134,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233823,
},
[1244556] = {
["source"] = "Orith the Dreadful",
["event"] = "SPELL_CAST_START",
["npcID"] = 232127,
},
[1213852] = {
["source"] = "The Underpin",
["event"] = "SPELL_CAST_START",
["npcID"] = 247390,
},
[75610] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corla, Herald of Twilight",
["npcID"] = 39679,
},
[452127] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 211089,
},
[387135] = {
["source"] = "Primalist Arcblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 194898,
},
[356942] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tracker Zo'korss",
["npcID"] = 179837,
},
[106827] = {
["encounterName"] = "Sha of Violence",
["source"] = "Sha of Violence",
["npcID"] = 56719,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1305,
},
[396859] = {
["source"] = "Enraged Cliff",
["event"] = "SPELL_CAST_START",
["npcID"] = 187090,
},
[1224094] = {
["source"] = "Burrowing Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 236947,
},
[438823] = {
["source"] = "Diabolic Imp",
["event"] = "SPELL_CAST_START",
["npcID"] = 219161,
},
[76634] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tainted Sentry",
["npcID"] = 40925,
},
[431659] = {
["event"] = "SPELL_CAST_START",
["source"] = "Clotweave Widow",
["npcID"] = 216193,
},
[372808] = {
["encounterName"] = "Melidrussa Chillworn",
["source"] = "Melidrussa Chillworn",
["npcID"] = 188252,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2609,
},
[1232287] = {
["source"] = "Shadowguard Darkweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 230962,
},
[443430] = {
["source"] = "Sureki Silkbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 220195,
},
[438827] = {
["isChanneled"] = false,
["source"] = "Atik",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217533,
},
[257090] = {
["source"] = "Partially Teleported Trogg",
["event"] = "SPELL_CAST_START",
["npcID"] = 226668,
},
[451107] = {
["source"] = "Sureki Webmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 210966,
},
[73564] = {
["encounterName"] = "Siamat",
["source"] = "Siamat",
["npcID"] = 44819,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1055,
},
[1220555] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3129,
},
[459943] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 225821,
},
[438826] = {
["source"] = "Atik",
["event"] = "SPELL_CAST_START",
["npcID"] = 217533,
},
[1220553] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3129,
},
[387652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Patreux",
["npcID"] = 211061,
},
[473114] = {
["encounterName"] = "Swampface",
["source"] = "Swampface",
["encounterID"] = 3053,
["event"] = "SPELL_CAST_START",
["npcID"] = 226396,
},
[1242534] = {
["source"] = "Pactsworn Wildcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 244418,
},
[443433] = {
["source"] = "Herald of Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 220196,
},
[397888] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Waterspeaker",
["npcID"] = 200126,
},
[1228216] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["encounterID"] = 3132,
["event"] = "SPELL_CAST_START",
["npcID"] = 233817,
},
[381512] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Erkhart Stormvein",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190485,
},
[346204] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2425,
},
[1232315] = {
["source"] = "Shadowguard Duskwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 230963,
},
[432179] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[1228213] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Collector",
["encounterID"] = 3132,
["event"] = "SPELL_CAST_START",
["npcID"] = 240905,
},
[463905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Patreux",
["npcID"] = 211061,
},
[1248699] = {
["source"] = "Wastelander Pactspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 234955,
},
[1230263] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-Prince Xevvos",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 241798,
},
[82137] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rom'ogg Bonecrusher",
["npcID"] = 39665,
},
[443436] = {
["source"] = "Herald of Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 220196,
},
[82393] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Unstable Corruption",
["npcID"] = 39705,
},
[352345] = {
["encounterName"] = "Timecap'n Hooktail",
["source"] = "Hourglass Cannon",
["npcID"] = 176178,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2419,
},
[76508] = {
["encounterName"] = "Rom'ogg Bonecrusher",
["source"] = "Crazed Mage",
["npcID"] = 39982,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1040,
},
[429110] = {
["source"] = "Forgebound Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 213338,
},
[445996] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[1244600] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nether Phantom",
["npcID"] = 247987,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3326,
},
[453161] = {
["source"] = "Hulking Bloodguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 216338,
},
[429109] = {
["source"] = "Forgebound Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 213338,
},
[106447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shado-Pan Novice",
["npcID"] = 56395,
},
[352347] = {
["encounterName"] = "Hylbrande",
["source"] = "Vault Purifier",
["npcID"] = 176551,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2426,
},
[471585] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 226398,
},
[422969] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[1248701] = {
["isChanneled"] = true,
["source"] = "Wastelander Pactspeaker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234955,
},
[1248702] = {
["isChanneled"] = true,
["source"] = "Wastelander Pactspeaker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234955,
},
[1232327] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[451119] = {
["source"] = "Ixkreten the Unbreakable",
["event"] = "SPELL_CAST_START",
["npcID"] = 211262,
},
[1215953] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3015,
},
[456746] = {
["event"] = "SPELL_CAST_START",
["source"] = "Workmaster Earwax",
["npcID"] = 213195,
},
[451117] = {
["source"] = "Ixkreten the Unbreakable",
["event"] = "SPELL_CAST_START",
["npcID"] = 211262,
},
[1228238] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["encounterID"] = 3122,
["event"] = "SPELL_CAST_START",
["npcID"] = 237660,
},
[466470] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3015,
},
[442418] = {
["source"] = "Burkhalt",
["event"] = "SPELL_CAST_START",
["npcID"] = 228671,
},
[449071] = {
["source"] = "Kobold Taskfinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 204127,
},
[474147] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gallagio Cocktail",
["npcID"] = 229435,
},
[396874] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["npcID"] = 56448,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1418,
},
[440372] = {
["event"] = "SPELL_CAST_START",
["source"] = "Understalker Tunneler",
["npcID"] = 216249,
},
[87768] = {
["event"] = "SPELL_CAST_START",
["source"] = "Minister of Air",
["npcID"] = 45930,
},
[449584] = {
["source"] = "Sunless Tidemarshal",
["event"] = "SPELL_CAST_START",
["npcID"] = 219602,
},
[355934] = {
["event"] = "SPELL_CAST_START",
["source"] = "Support Officer",
["npcID"] = 177817,
},
[459997] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "Geargrinder Biker",
["encounterID"] = 3009,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225804,
},
[450728] = {
["source"] = "Siegelord Xerosh",
["event"] = "SPELL_CAST_START",
["npcID"] = 224311,
},
[437592] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[431674] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaheti Ambusher",
["npcID"] = 217448,
},
[1239281] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["encounterID"] = 3108,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237514,
},
[397899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sha-Touched Guardian",
["npcID"] = 200131,
},
[445492] = {
["source"] = "Soaring Devilfish",
["event"] = "SPELL_CAST_START",
["npcID"] = 246733,
},
[1230302] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Manaforged Titan",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 241800,
},
[371584] = {
["source"] = "Escaped Steam",
["event"] = "SPELL_CAST_START",
["npcID"] = 227383,
},
[392486] = {
["source"] = "Tempest Channeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 198047,
},
[440376] = {
["source"] = "Shadow-Blind Matriarch",
["event"] = "SPELL_CAST_START",
["npcID"] = 206078,
},
[472220] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Flarendo",
["encounterID"] = 3010,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229181,
},
[329838] = {
["source"] = "Depraved Stalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 159027,
},
[381525] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Kyrakka",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190484,
},
[461870] = {
["source"] = "Xal'atath",
["event"] = "SPELL_CAST_START",
["npcID"] = 229227,
},
[425536] = {
["source"] = "Lowly Moleherd",
["event"] = "SPELL_CAST_START",
["npcID"] = 210818,
},
[460847] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "Reel Assistant",
["npcID"] = 232599,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3014,
},
[1228265] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[3110] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lazpep",
["npcID"] = 416,
},
[446519] = {
["source"] = "Penumbral Shalehorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 227933,
},
[321652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Morbid Boneguard",
["npcID"] = 168266,
},
[470684] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Melter",
["npcID"] = 229222,
},
[465966] = {
["isChanneled"] = true,
["source"] = "Venture Co. Contractor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231312,
},
[355429] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coastwalker Goliath",
["npcID"] = 178165,
},
[444473] = {
["source"] = "The Ringing Death",
["event"] = "SPELL_CAST_START",
["npcID"] = 214162,
},
[397904] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sha-Touched Guardian",
["npcID"] = 200131,
},
[425027] = {
["source"] = "Earth Infused Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 210109,
},
[467379] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3015,
},
[1234009] = {
["isChanneled"] = true,
["source"] = "Shadowguard Voidcaller",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237132,
},
[1229037] = {
["source"] = "Voidcrawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 245782,
},
[428089] = {
["source"] = "Lowly Moleherd",
["event"] = "SPELL_CAST_START",
["npcID"] = 210818,
},
[1240561] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grubber",
["npcID"] = 238540,
},
[397394] = {
["source"] = "Nokhud Thunderfist",
["event"] = "SPELL_CAST_START",
["npcID"] = 193373,
},
[351119] = {
["encounterName"] = "So'leah",
["source"] = "So' Cartel Assassin",
["npcID"] = 177716,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2442,
},
[386012] = {
["source"] = "Stormcaller Boroo",
["event"] = "SPELL_CAST_START",
["npcID"] = 194317,
},
[1234328] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Collector",
["encounterID"] = 3132,
["event"] = "SPELL_CAST_START",
["npcID"] = 240905,
},
[270481] = {
["event"] = "SPELL_CAST_START",
["source"] = "Demonic Tyrant",
["npcID"] = 135002,
},
[1240567] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grubber",
["npcID"] = 238540,
},
[466979] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[1231438] = {
["source"] = "Shadowguard Bulwark",
["event"] = "SPELL_CAST_START",
["npcID"] = 231586,
},
[441772] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[467510] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skiggy Muckheimer",
["npcID"] = 229433,
},
[465971] = {
["source"] = "Darkfuse Skyfire",
["event"] = "SPELL_CAST_START",
["npcID"] = 227955,
},
[433731] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["encounterID"] = 2906,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215405,
},
[413263] = {
["encounterName"] = "Asaad",
["source"] = "Skyfall Nova",
["npcID"] = 52019,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1042,
},
[359016] = {
["encounterName"] = "Cragpie",
["source"] = "Cragpie",
["npcID"] = 220008,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3001,
},
[1240576] = {
["source"] = "Coordinator Xy'thir",
["event"] = "SPELL_CAST_START",
["npcID"] = 232508,
},
[456249] = {
["source"] = "Earthfury Cragshar",
["event"] = "SPELL_CAST_START",
["npcID"] = 222741,
},
[428103] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Naz'jar Frost Witch",
["npcID"] = 44404,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[118988] = {
["encounterName"] = "Gekkan",
["source"] = "Gekkan",
["npcID"] = 61243,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2129,
},
[465463] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["event"] = "SPELL_CAST_START",
["npcID"] = 226404,
},
[59638] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mirror Image",
["npcID"] = 31216,
},
[432198] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[473650] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Flarendo",
["encounterID"] = 3010,
["event"] = "SPELL_CAST_START",
["npcID"] = 229181,
},
[441410] = {
["source"] = "Worker Bee",
["event"] = "SPELL_CAST_START",
["npcID"] = 210265,
},
[440899] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[113999] = {
["encounterName"] = "Rattlegore",
["source"] = "Rattlegore",
["npcID"] = 59153,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1428,
},
[1232399] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Manaforged Titan",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 241800,
},
[457787] = {
["isChanneled"] = true,
["source"] = "Wickbreaker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215077,
},
[384194] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Cinderweaver",
["npcID"] = 190207,
},
[422393] = {
["source"] = "Skittering Darkness",
["event"] = "SPELL_CAST_START",
["npcID"] = 208457,
},
[439365] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["event"] = "SPELL_CAST_START",
["npcID"] = 210267,
},
[355438] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Zo'gron",
["npcID"] = 176563,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[423501] = {
["source"] = "Rank Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 211121,
},
[449090] = {
["isChanneled"] = false,
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223423,
},
[397914] = {
["event"] = "SPELL_CAST_START",
["source"] = "Depraved Mistweaver",
["npcID"] = 200137,
},
[355439] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Zo'gron",
["npcID"] = 176563,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2440,
},
[329340] = {
["encounterName"] = "High Adjudicator Aleez",
["source"] = "High Adjudicator Aleez",
["encounterID"] = 2403,
["event"] = "SPELL_CAST_START",
["npcID"] = 165410,
},
[438343] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[1228317] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "The Royal Voidwing",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 233823,
},
[1226277] = {
["source"] = "Netherfang Soulbarker",
["event"] = "SPELL_CAST_START",
["npcID"] = 234051,
},
[431691] = {
["source"] = "Sureki String Conductor",
["event"] = "SPELL_CAST_START",
["npcID"] = 216554,
},
[424621] = {
["source"] = "Sergeant Shaynemail",
["event"] = "SPELL_CAST_START",
["npcID"] = 239836,
},
[1216039] = {
["source"] = "Darkfuse Demolitionist",
["event"] = "SPELL_CAST_START",
["npcID"] = 229212,
},
[431180] = {
["source"] = "Dripear the Waxy",
["event"] = "SPELL_CAST_START",
["npcID"] = 213883,
},
[1216414] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Beam Turret",
["npcID"] = 230358,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[446533] = {
["source"] = "Upland Bull",
["event"] = "SPELL_CAST_START",
["npcID"] = 226118,
},
[346742] = {
["encounterName"] = "Mailroom Mayhem",
["source"] = "P.O.S.T. Master",
["npcID"] = 175646,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2424,
},
[468631] = {
["source"] = "Venture Co. Diver",
["event"] = "SPELL_CAST_START",
["npcID"] = 231496,
},
[1233997] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Collector",
["encounterID"] = 3132,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 240905,
},
[450628] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quartermaster Koratite",
["npcID"] = 209801,
},
[452164] = {
["source"] = "Swarm-Maven Donmiss",
["event"] = "SPELL_CAST_START",
["npcID"] = 216578,
},
[121165] = {
["event"] = "SPELL_CAST_START",
["source"] = "Harthak Flameseeker",
["npcID"] = 61392,
},
[470587] = {
["source"] = "Kobyss Witherer",
["event"] = "SPELL_CAST_START",
["npcID"] = 214251,
},
[455480] = {
["event"] = "SPELL_CAST_START",
["source"] = "Take",
["npcID"] = 226272,
},
[191732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unknown",
["npcID"] = 97022,
},
[456259] = {
["source"] = "Candleflyer Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 220276,
},
[427601] = {
["source"] = "Lightspawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 206710,
},
[441214] = {
["source"] = "Taste Tester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220060,
},
[328322] = {
["encounterName"] = "Echelon",
["source"] = "Undying Stonefiend",
["encounterID"] = 2380,
["event"] = "SPELL_CAST_START",
["npcID"] = 164363,
},
[1218103] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Velaryn Bloodwrath",
["encounterID"] = 3122,
["event"] = "SPELL_CAST_START",
["npcID"] = 237660,
},
[456260] = {
["source"] = "You?",
["event"] = "SPELL_CAST_START",
["npcID"] = 226694,
},
[456772] = {
["event"] = "SPELL_CAST_START",
["source"] = "Workmaster Nast",
["npcID"] = 213200,
},
[359028] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Zo'gron",
["npcID"] = 176563,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[450718] = {
["source"] = "Siegelord Xerosh",
["event"] = "SPELL_CAST_START",
["npcID"] = 224311,
},
[431697] = {
["source"] = "Sureki Eradicator",
["event"] = "SPELL_CAST_START",
["npcID"] = 242837,
},
[460867] = {
["encounterName"] = "Demolition Duo",
["source"] = "Keeza Quickfuse",
["encounterID"] = 3019,
["event"] = "SPELL_CAST_START",
["npcID"] = 226403,
},
[384761] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["encounterID"] = 2636,
["event"] = "SPELL_CAST_START",
["npcID"] = 186615,
},
[452169] = {
["event"] = "SPELL_CAST_START",
["source"] = "Queensguard Zirix",
["npcID"] = 211858,
},
[470591] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Inquisitor",
["npcID"] = 217518,
},
[470592] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Shadeguard",
["npcID"] = 217519,
},
[1226302] = {
["source"] = "Netherfang Soulbarker",
["event"] = "SPELL_CAST_START",
["npcID"] = 234051,
},
[1236872] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "The Royal Voidwing",
["encounterID"] = 3134,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233823,
},
[456263] = {
["source"] = "Candleflyer Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 220276,
},
[1218117] = {
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_START",
["npcID"] = 212411,
},
[456346] = {
["source"] = "Anguishing Nightmare",
["event"] = "SPELL_CAST_START",
["npcID"] = 214415,
},
[1224980] = {
["isChanneled"] = true,
["source"] = "Kobold Thwacker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237132,
},
[1218120] = {
["source"] = "The Junkmaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 233306,
},
[1221384] = {
["source"] = "Stix Bunkjunker",
["event"] = "SPELL_CAST_START",
["npcID"] = 230322,
},
[440912] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deathspore Lashroom",
["npcID"] = 221424,
},
[425048] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2861,
},
[452171] = {
["source"] = "Swarm-Maven Donmiss",
["event"] = "SPELL_CAST_START",
["npcID"] = 216578,
},
[461895] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Orb of Ascendance",
["npcID"] = 229296,
},
[326794] = {
["source"] = "Inquisitor Sigar",
["event"] = "SPELL_CAST_START",
["npcID"] = 167876,
},
[1218127] = {
["source"] = "The Junkmaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 233306,
},
[347775] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overloaded Mailemental",
["npcID"] = 176395,
},
[450637] = {
["source"] = "Nerubian Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 218103,
},
[434773] = {
["source"] = "Venture Co. Patron",
["event"] = "SPELL_CAST_START",
["npcID"] = 214668,
},
[369781] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Eric \"The Swift\"",
["npcID"] = 184582,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2555,
},
[427609] = {
["source"] = "Arathi Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 206696,
},
[430168] = {
["source"] = "Invading Hurler",
["event"] = "SPELL_CAST_START",
["npcID"] = 214677,
},
[1245156] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ky'veza",
["npcID"] = 248134,
},
[469650] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[450127] = {
["source"] = "Siegehold Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 216016,
},
[473876] = {
["event"] = "SPELL_CAST_START",
["source"] = "Globikus",
["npcID"] = 234640,
},
[432116] = {
["source"] = "Candleclaw Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 213833,
},
[375924] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Olaf",
["npcID"] = 184580,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2555,
},
[1216093] = {
["source"] = "Unreal Observer",
["event"] = "SPELL_CAST_START",
["npcID"] = 230426,
},
[429427] = {
["source"] = "Cursedforge Stoneshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 214066,
},
[465481] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodfang Hyena",
["npcID"] = 227843,
},
[1234529] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "The Royal Voidwing",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 233823,
},
[396907] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Yu'lon",
["npcID"] = 56762,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1416,
},
[430171] = {
["source"] = "Wandering Candle",
["event"] = "SPELL_CAST_START",
["npcID"] = 208450,
},
[397931] = {
["event"] = "SPELL_CAST_START",
["source"] = "Minion of Doubt",
["npcID"] = 57109,
},
[320657] = {
["event"] = "SPELL_CAST_START",
["source"] = "Morbid Boneguard",
["npcID"] = 168266,
},
[452177] = {
["source"] = "Arathi Reserve",
["event"] = "SPELL_CAST_START",
["npcID"] = 235409,
},
[1236572] = {
["source"] = "Shadowguard Null Bastion",
["event"] = "SPELL_CAST_START",
["npcID"] = 244115,
},
[447060] = {
["isChanneled"] = true,
["source"] = "Taste Tester",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222964,
},
[390256] = {
["event"] = "SPELL_CAST_START",
["source"] = "Proscenium Punk",
["npcID"] = 215791,
},
[456272] = {
["source"] = "You?",
["event"] = "SPELL_CAST_START",
["npcID"] = 226694,
},
[1252952] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Shadowguard Mage",
["encounterID"] = 3130,
["event"] = "SPELL_CAST_START",
["npcID"] = 237981,
},
[434779] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["npcID"] = 216619,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2907,
},
[319733] = {
["encounterName"] = "Echelon",
["source"] = "Echelon",
["encounterID"] = 2380,
["event"] = "SPELL_CAST_START",
["npcID"] = 164185,
},
[1219450] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3129,
},
[372858] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Kokia Blazehoof",
["npcID"] = 189232,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2606,
},
[1234534] = {
["event"] = "SPELL_CAST_START",
["source"] = "Riftbreaker Tza'akir",
["npcID"] = 241383,
},
[356133] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burly Deckhand",
["npcID"] = 180015,
},
[427616] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unruly Stormrook",
["npcID"] = 207186,
},
[400050] = {
["source"] = "Deepflayer Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 221198,
},
[352390] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portalmancer Zo'honn",
["npcID"] = 179334,
},
[461904] = {
["event"] = "SPELL_CAST_START",
["source"] = "Orb of Ascendance",
["npcID"] = 229296,
},
[462416] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Flare",
["npcID"] = 229603,
},
[448599] = {
["isChanneled"] = true,
["source"] = "Siege Webwing",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211591,
},
[448443] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["npcID"] = 221896,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2877,
},
[357508] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Direhorn",
["npcID"] = 180495,
},
[91872] = {
["encounterName"] = "Siamat",
["source"] = "Servant of Siamat",
["npcID"] = 45259,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1055,
},
[448600] = {
["isChanneled"] = false,
["source"] = "Spitfire Fusetender",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211777,
},
[438877] = {
["source"] = "Nakt",
["event"] = "SPELL_CAST_START",
["npcID"] = 218324,
},
[369791] = {
["encounterName"] = "The Lost Dwarves",
["source"] = "Eric \"The Swift\"",
["npcID"] = 184582,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2555,
},
[423015] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[434786] = {
["source"] = "Trilling Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 216293,
},
[447076] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[106841] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["npcID"] = 56732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1416,
},
[431714] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Webspinner",
["npcID"] = 212717,
},
[372863] = {
["encounterName"] = "Kokia Blazehoof",
["source"] = "Kokia Blazehoof",
["npcID"] = 189232,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2606,
},
[1226366] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["encounterID"] = 3131,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233815,
},
[355464] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coastwalker Goliath",
["npcID"] = 178165,
},
[427621] = {
["source"] = "Arathi Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 206696,
},
[432227] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["encounterID"] = 2901,
["event"] = "SPELL_CAST_START",
["npcID"] = 215407,
},
[1234558] = {
["source"] = "Flametouched Ray",
["event"] = "SPELL_CAST_START",
["npcID"] = 234197,
},
[357512] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enraged Direhorn",
["npcID"] = 180495,
},
[438883] = {
["isChanneled"] = true,
["source"] = "Nakt",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218324,
},
[436322] = {
["source"] = "Atik",
["event"] = "SPELL_CAST_START",
["npcID"] = 217533,
},
[87779] = {
["event"] = "SPELL_CAST_START",
["source"] = "Temple Adept",
["npcID"] = 45935,
},
[357513] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Hips",
["encounterID"] = 2440,
["event"] = "SPELL_CAST_START",
["npcID"] = 180485,
},
[114646] = {
["event"] = "SPELL_CAST_START",
["source"] = "Haunting Sha",
["npcID"] = 59555,
},
[432229] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[466518] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3015,
},
[1236614] = {
["source"] = "Inquisitor Sigar",
["event"] = "SPELL_CAST_START",
["npcID"] = 167876,
},
[458329] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kordac",
["npcID"] = 221084,
},
[1232543] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Volatile Manifestation",
["npcID"] = 243241,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3129,
},
[453212] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[445541] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["encounterID"] = 2888,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213217,
},
[472659] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Gallagio Goon",
["npcID"] = 233474,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3015,
},
[369806] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Berserker",
["npcID"] = 184020,
},
[455260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deathspore Lashroom",
["npcID"] = 221424,
},
[350919] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Zo'gron",
["npcID"] = 176563,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[356548] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gatewarden Zo'mazz",
["npcID"] = 178392,
},
[439403] = {
["isChanneled"] = false,
["source"] = "Yes Man",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219588,
},
[473684] = {
["source"] = "Bopper Bot",
["event"] = "SPELL_CAST_START",
["npcID"] = 231908,
},
[369853] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burly Rock-Thrower",
["npcID"] = 184019,
},
[1218418] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Sprocketmonger Lockenstock",
["npcID"] = 230583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[426145] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[1242770] = {
["isChanneled"] = true,
["source"] = "Pactsworn Fraycaller",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 244413,
},
[1226395] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["encounterID"] = 3131,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233815,
},
[472714] = {
["encounterName"] = "Rik Reverb",
["source"] = "Amplifier",
["npcID"] = 230197,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[434281] = {
["event"] = "SPELL_CAST_START",
["source"] = "Weeping Shade",
["npcID"] = 217268,
},
[434793] = {
["isChanneled"] = true,
["source"] = "Trilling Attendant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216293,
},
[451732] = {
["source"] = "Swarming Cogwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 232871,
},
[427629] = {
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_START",
["npcID"] = 206694,
},
[1226401] = {
["source"] = "Shadowguard Weavemaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 240974,
},
[436841] = {
["source"] = "Desecrated Ohuna",
["event"] = "SPELL_CAST_START",
["npcID"] = 195876,
},
[355473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Commander Zo'far",
["npcID"] = 179821,
},
[423536] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[1236640] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dryad",
["npcID"] = 244905,
},
[473691] = {
["source"] = "Bopper Bot",
["event"] = "SPELL_CAST_START",
["npcID"] = 231908,
},
[157331] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lesser Primal Storm Elemental",
["npcID"] = 229798,
},
[1242784] = {
["source"] = "Pactsworn Fraycaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 244413,
},
[474203] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Wretch",
["npcID"] = 230028,
},
[444055] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rampaging Threadling",
["npcID"] = 222730,
},
[121174] = {
["event"] = "SPELL_CAST_START",
["source"] = "Harthak Flameseeker",
["npcID"] = 61392,
},
[423538] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["encounterID"] = 2880,
["event"] = "SPELL_CAST_START",
["npcID"] = 210156,
},
[350916] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Oasis Security",
["npcID"] = 179269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[473690] = {
["encounterName"] = "Demolition Duo",
["source"] = "Keeza Quickfuse",
["encounterID"] = 3019,
["event"] = "SPELL_CAST_START",
["npcID"] = 226403,
},
[107356] = {
["encounterName"] = "Taran Zhu",
["source"] = "Corrupted Taran Zhu",
["npcID"] = 56884,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1306,
},
[323236] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["encounterID"] = 2381,
["event"] = "SPELL_CAST_START",
["npcID"] = 164218,
},
[448660] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[316072] = {
["source"] = "Highway Serf",
["event"] = "SPELL_CAST_START",
["npcID"] = 169476,
},
[355477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Commander Zo'far",
["npcID"] = 179821,
},
[1232568] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Ilyssa Darksorrow",
["encounterID"] = 3122,
["event"] = "SPELL_CAST_START",
["npcID"] = 237662,
},
[448616] = {
["source"] = "Hevo'myk",
["event"] = "SPELL_CAST_START",
["npcID"] = 211591,
},
[355479] = {
["event"] = "SPELL_CAST_START",
["source"] = "Commander Zo'far",
["npcID"] = 179821,
},
[107357] = {
["encounterName"] = "Taran Zhu",
["source"] = "Taran Zhu",
["npcID"] = 56884,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1306,
},
[350875] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["npcID"] = 177269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2442,
},
[1230529] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["encounterID"] = 3132,
["event"] = "SPELL_CAST_START",
["npcID"] = 233817,
},
[445038] = {
["source"] = "Kobyss Ambusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 219715,
},
[443500] = {
["source"] = "Royal Swarmguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 220197,
},
[1232569] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["encounterID"] = 3122,
["event"] = "SPELL_CAST_START",
["npcID"] = 237661,
},
[1214147] = {
["isChanneled"] = true,
["source"] = "The Underpin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 247390,
},
[463459] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[429172] = {
["encounterName"] = "Mindbender Ghur'sha",
["source"] = "Mindbender Ghur'sha",
["npcID"] = 40788,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1046,
},
[456295] = {
["source"] = "Aelric Leid",
["event"] = "SPELL_CAST_START",
["npcID"] = 213208,
},
[448619] = {
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 223423,
},
[373392] = {
["source"] = "Nokhud Longbow",
["event"] = "SPELL_CAST_START",
["npcID"] = 192789,
},
[1222341] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wastes Creeper",
["npcID"] = 234918,
},
[372369] = {
["source"] = "Ragefin Executioner",
["event"] = "SPELL_CAST_START",
["npcID"] = 213408,
},
[428150] = {
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_START",
["npcID"] = 212827,
},
[81642] = {
["encounterName"] = "Lockmaw",
["source"] = "Lockmaw",
["npcID"] = 43614,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1054,
},
[369811] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Berserker",
["npcID"] = 184020,
},
[355139] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Murkbrine Shorerunner",
["npcID"] = 179733,
},
[454762] = {
["isChanneled"] = true,
["source"] = "Ankle Biter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219996,
},
[1226442] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237763,
},
[396423] = {
["source"] = "Galestrike Proto-Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 187211,
},
[351646] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["npcID"] = 177269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2442,
},
[430109] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursed Thunderer",
["npcID"] = 207198,
},
[446064] = {
["encounterName"] = "Leviathan Caller",
["source"] = "Slamming Tentacle",
["encounterID"] = 3002,
["event"] = "SPELL_CAST_START",
["npcID"] = 220741,
},
[369813] = {
["source"] = "Wickbreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215077,
},
[448111] = {
["source"] = "Diu'mik",
["event"] = "SPELL_CAST_START",
["npcID"] = 211564,
},
[1232590] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Collector",
["encounterID"] = 3132,
["event"] = "SPELL_CAST_START",
["npcID"] = 240905,
},
[1222356] = {
["source"] = "Tamed Ruinstalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 234960,
},
[442995] = {
["source"] = "Venture Co. Honey Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220946,
},
[449136] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Flickerflame Overseer",
["npcID"] = 212542,
},
[474212] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Wretch",
["npcID"] = 230028,
},
[426619] = {
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_START",
["npcID"] = 212993,
},
[1228502] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Forgeweaver Araz",
["encounterID"] = 3132,
["event"] = "SPELL_CAST_START",
["npcID"] = 233817,
},
[386223] = {
["source"] = "Primal Stormshield",
["event"] = "SPELL_CAST_START",
["npcID"] = 194896,
},
[395946] = {
["source"] = "Decaymonger Rotpaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 205995,
},
[422245] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["event"] = "SPELL_CAST_START",
["npcID"] = 210153,
},
[326829] = {
["source"] = "Inquisitor Sigar",
["event"] = "SPELL_CAST_START",
["npcID"] = 167876,
},
[1232601] = {
["source"] = "Escaped Creature",
["event"] = "SPELL_CAST_START",
["npcID"] = 242295,
},
[450191] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[463967] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3015,
},
[429428] = {
["source"] = "Earth Burst Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 214287,
},
[1232605] = {
["source"] = "Escaped Creature",
["event"] = "SPELL_CAST_START",
["npcID"] = 230958,
},
[1238930] = {
["source"] = "Pactsworn Sandreaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 244410,
},
[384686] = {
["encounterName"] = "The Raging Tempest",
["source"] = "The Raging Tempest",
["encounterID"] = 2636,
["event"] = "SPELL_CAST_START",
["npcID"] = 186615,
},
[369818] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Berserker",
["npcID"] = 184020,
},
[1216233] = {
["source"] = "Crystalline Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 236549,
},
[1232610] = {
["source"] = "Escaped Creature",
["event"] = "SPELL_CAST_START",
["npcID"] = 242295,
},
[455281] = {
["source"] = "Grimslice",
["event"] = "SPELL_CAST_START",
["npcID"] = 221551,
},
[455277] = {
["source"] = "Tidelord Teethwretch",
["event"] = "SPELL_CAST_START",
["npcID"] = 216527,
},
[1214190] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Flarendo",
["encounterID"] = 3010,
["event"] = "SPELL_CAST_START",
["npcID"] = 229181,
},
[452252] = {
["source"] = "Master Machinist Dunstan",
["event"] = "SPELL_CAST_START",
["npcID"] = 217353,
},
[410760] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Vortex",
["npcID"] = 45912,
},
[445559] = {
["event"] = "SPELL_CAST_START",
["source"] = "Queensguard Zirix",
["npcID"] = 211858,
},
[464518] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3011,
},
[450677] = {
["event"] = "SPELL_CAST_START",
["source"] = "Orta",
["npcID"] = 221067,
},
[443001] = {
["source"] = "Sureki Eradicator",
["event"] = "SPELL_CAST_START",
["npcID"] = 242837,
},
[347149] = {
["encounterName"] = "Timecap'n Hooktail",
["source"] = "Timecap'n Hooktail",
["npcID"] = 175546,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2419,
},
[113629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Boneweaver",
["npcID"] = 59193,
},
[1232622] = {
["source"] = "Shadowguard Infiltrator",
["event"] = "SPELL_CAST_START",
["npcID"] = 237285,
},
[456101] = {
["source"] = "Void Crystal Monstrosity",
["event"] = "SPELL_CAST_START",
["npcID"] = 217200,
},
[1238765] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["encounterID"] = 3135,
["event"] = "SPELL_CAST_START",
["npcID"] = 234478,
},
[431744] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Queensguard Zirix",
["npcID"] = 211858,
},
[448632] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Under-Lord Vik'tis",
["npcID"] = 247464,
},
[381593] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ebonstone Golem",
["npcID"] = 184300,
},
[188046] = {
["source"] = "Denizen of the Dream",
["event"] = "SPELL_CAST_START",
["npcID"] = 198489,
},
[361088] = {
["source"] = "Cartel Xy Plunderer",
["event"] = "SPELL_CAST_START",
["npcID"] = 238318,
},
[88170] = {
["event"] = "SPELL_CAST_START",
["source"] = "Turbulent Squall",
["npcID"] = 45924,
},
[450188] = {
["source"] = "Candleclaw Mole",
["event"] = "SPELL_CAST_START",
["npcID"] = 213834,
},
[357542] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Vilt",
["encounterID"] = 2440,
["event"] = "SPELL_CAST_START",
["npcID"] = 180484,
},
[466545] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3015,
},
[448634] = {
["event"] = "SPELL_CAST_START",
["source"] = "Under-Lord Vik'tis",
["npcID"] = 247464,
},
[1226064] = {
["event"] = "SPELL_CAST_START",
["source"] = "Escaped Stalker",
["npcID"] = 232257,
},
[461446] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skittering Swarmite",
["npcID"] = 212579,
},
[1238780] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[1234688] = {
["source"] = "Shadow-Captain Lakheesh",
["event"] = "SPELL_CAST_START",
["npcID"] = 230781,
},
[377502] = {
["source"] = "Proscenium Puddlestomper",
["event"] = "SPELL_CAST_START",
["npcID"] = 216072,
},
[474223] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hideous Amalgamation",
["npcID"] = 234208,
},
[1238782] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["npcID"] = 207946,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2847,
},
[346286] = {
["encounterName"] = "Mailroom Mayhem",
["source"] = "P.O.S.T. Master",
["npcID"] = 175646,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2424,
},
[453242] = {
["event"] = "SPELL_CAST_START",
["source"] = "Trungal",
["npcID"] = 220268,
},
[1225174] = {
["encounterName"] = "Soul-Scribe",
["source"] = "Soul-Scribe",
["npcID"] = 234935,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3109,
},
[1240891] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Ilyssa Darksorrow",
["npcID"] = 237662,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3122,
},
[331479] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flawed Rancor",
["npcID"] = 169992,
},
[469900] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mechano Wolf",
["npcID"] = 228050,
},
[369828] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vicious Basilisk",
["npcID"] = 184023,
},
[446079] = {
["encounterName"] = "Leviathan Caller",
["source"] = "Leviathan Caller",
["encounterID"] = 3002,
["event"] = "SPELL_CAST_START",
["npcID"] = 220738,
},
[424614] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Stabber",
["npcID"] = 207450,
},
[464399] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Stix Bunkjunker",
["npcID"] = 230322,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3012,
},
[423051] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[449135] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Overseer",
["npcID"] = 212542,
},
[428169] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[473715] = {
["event"] = "SPELL_CAST_START",
["source"] = "Melbo the Magnificent",
["npcID"] = 229434,
},
[448640] = {
["source"] = "Cursedforge Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 214264,
},
[423062] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[444546] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[422541] = {
["source"] = "Shuffling Horror",
["event"] = "SPELL_CAST_START",
["npcID"] = 208456,
},
[474228] = {
["event"] = "SPELL_CAST_START",
["source"] = "Silent Slitherer",
["npcID"] = 234210,
},
[450176] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Slasher",
["npcID"] = 208243,
},
[474237] = {
["event"] = "SPELL_CAST_START",
["source"] = "Silent Slitherer",
["npcID"] = 234210,
},
[434824] = {
["source"] = "Ixin",
["event"] = "SPELL_CAST_START",
["npcID"] = 217531,
},
[106851] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stout Brew Alemental",
["npcID"] = 59519,
},
[371887] = {
["isChanneled"] = true,
["source"] = "Primal Terrasentry",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 188067,
},
[436360] = {
["source"] = "Glooming Darkweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 216868,
},
[449154] = {
["source"] = "Forge Loader",
["event"] = "SPELL_CAST_START",
["npcID"] = 213343,
},
[326846] = {
["isChanneled"] = false,
["source"] = "Inquisitor Sigar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 167876,
},
[456319] = {
["source"] = "Aelric Leid",
["event"] = "SPELL_CAST_START",
["npcID"] = 213208,
},
[1238834] = {
["isChanneled"] = true,
["source"] = "Enforcer Jak'tull",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 245601,
},
[450197] = {
["source"] = "Skittering Swarmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 208245,
},
[326847] = {
["source"] = "Inquisitor Sigar",
["event"] = "SPELL_CAST_START",
["npcID"] = 167876,
},
[1220394] = {
["encounterName"] = "Fractillus",
["source"] = "Fractillus",
["encounterID"] = 3133,
["event"] = "SPELL_CAST_START",
["npcID"] = 237861,
},
[448644] = {
["event"] = "SPELL_CAST_START",
["source"] = "Under-Lord Vik'tis",
["npcID"] = 247464,
},
[381605] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["source"] = "Kyrakka",
["encounterID"] = 2623,
["event"] = "SPELL_CAST_START",
["npcID"] = 190484,
},
[1236770] = {
["source"] = "Shadowguard Steelsoul",
["event"] = "SPELL_CAST_START",
["npcID"] = 244140,
},
[267997] = {
["event"] = "SPELL_CAST_START",
["source"] = "Charhound",
["npcID"] = 226269,
},
[1216204] = {
["source"] = "Crystalline Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 236549,
},
[372397] = {
["source"] = "Partially Teleported Gnoll",
["event"] = "SPELL_CAST_START",
["npcID"] = 226667,
},
[474001] = {
["source"] = "Masked Freelancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 231910,
},
[1218353] = {
["event"] = "SPELL_CAST_START",
["source"] = "Melbo the Magnificent",
["npcID"] = 229434,
},
[1244964] = {
["isChanneled"] = false,
["source"] = "Pactsworn Sandreaver",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 248084,
},
[429176] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gilgoblin Aquamage",
["npcID"] = 40943,
},
[157348] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Storm Elemental",
["npcID"] = 77942,
},
[106853] = {
["encounterName"] = "Master Snowdrift",
["source"] = "Master Snowdrift",
["npcID"] = 56541,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1304,
},
[1234733] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3129,
},
[420501] = {
["source"] = "Dripear the Waxy",
["event"] = "SPELL_CAST_START",
["npcID"] = 213883,
},
[1230619] = {
["source"] = "Shadowguard Colossus",
["event"] = "SPELL_CAST_START",
["npcID"] = 231585,
},
[1249065] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["encounterID"] = 3130,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233816,
},
[110945] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Gu Cloudstrike",
["npcID"] = 56747,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1303,
},
[372696] = {
["source"] = "Primal Juggernaut",
["event"] = "SPELL_CAST_START",
["npcID"] = 188244,
},
[399701] = {
["source"] = "Territorial Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 219902,
},
[452231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Queensguard Zirix",
["npcID"] = 211858,
},
[315076] = {
["event"] = "SPELL_CAST_START",
["source"] = "Morbid Ritualist",
["npcID"] = 164273,
},
[112992] = {
["encounterName"] = "Hoptallus",
["source"] = "Hoptallus",
["npcID"] = 56717,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1413,
},
[121182] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Harthak Flameseeker",
["npcID"] = 61392,
},
[1240821] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bazaar Overseer",
["npcID"] = 246285,
},
[1230608] = {
["source"] = "Shadowguard Dreadnaught",
["event"] = "SPELL_CAST_START",
["npcID"] = 234445,
},
[426645] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Ravager",
["npcID"] = 212673,
},
[440195] = {
["source"] = "Glooming Skulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 216869,
},
[373279] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thing From Beyond",
["npcID"] = 189988,
},
[326450] = {
["event"] = "SPELL_CAST_START",
["source"] = "Depraved Houndmaster",
["npcID"] = 164562,
},
[395941] = {
["source"] = "Hungry Hungry Riverbeast",
["event"] = "SPELL_CAST_START",
["npcID"] = 195969,
},
[267492] = {
["isChanneled"] = true,
["source"] = "Bubbling Mead",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 133429,
},
[427670] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["npcID"] = 40765,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1044,
},
[356537] = {
["event"] = "SPELL_CAST_START",
["source"] = "Portalmancer Zo'honn",
["npcID"] = 179334,
},
[424600] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Podling",
["npcID"] = 211063,
},
[453616] = {
["source"] = "Doomguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 225493,
},
[114658] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Instructor Chillheart",
["npcID"] = 58633,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1426,
},
[348350] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2425,
},
[1236703] = {
["encounterName"] = "Soul-Scribe",
["source"] = "Soul-Scribe",
["encounterID"] = 3109,
["event"] = "SPELL_CAST_START",
["npcID"] = 234935,
},
[443510] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Executor",
["npcID"] = 217516,
},
[427672] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["npcID"] = 40765,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1044,
},
[443027] = {
["source"] = "Siege Hopebreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 216019,
},
[1251138] = {
["source"] = "Glutted Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 234282,
},
[356001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Armored Overseer",
["npcID"] = 177808,
},
[456331] = {
["source"] = "Flickerflame Candlecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 219619,
},
[467086] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Acid Slime",
["npcID"] = 227930,
},
[322711] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["source"] = "Halkias",
["encounterID"] = 2401,
["event"] = "SPELL_CAST_START",
["npcID"] = 165408,
},
[422246] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210153,
},
[1245003] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 244752,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3326,
},
[473220] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 226398,
},
[369335] = {
["event"] = "SPELL_CAST_START",
["source"] = "Runic Protector",
["npcID"] = 184107,
},
[1240912] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bazaar Overseer",
["npcID"] = 246285,
},
[443507] = {
["source"] = "Royal Swarmguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 220197,
},
[1238867] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Echo",
["npcID"] = 241923,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3132,
},
[371383] = {
["source"] = "Partially Teleported Murloc",
["event"] = "SPELL_CAST_START",
["npcID"] = 226666,
},
[471652] = {
["isChanneled"] = true,
["source"] = "Darkfuse Soldier",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226398,
},
[460393] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 228424,
},
[471293] = {
["source"] = "Scavenger Worm",
["event"] = "SPELL_CAST_START",
["npcID"] = 238413,
},
[455273] = {
["source"] = "The Abominable Wavecrasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 216526,
},
[1238873] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Echo",
["npcID"] = 241923,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3132,
},
[448147] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Chamber Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 223204,
},
[434802] = {
["source"] = "Ixin",
["event"] = "SPELL_CAST_START",
["npcID"] = 217531,
},
[445077] = {
["source"] = "Kobyss Ambusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 219715,
},
[449130] = {
["source"] = "Forge Loader",
["event"] = "SPELL_CAST_START",
["npcID"] = 213343,
},
[1240925] = {
["source"] = "Untethered Spellweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 234896,
},
[1214315] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["npcID"] = 209230,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2816,
},
[455313] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deathspore Lashroom",
["npcID"] = 221424,
},
[377486] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Agent",
["npcID"] = 184335,
},
[450196] = {
["source"] = "Candleclaw Mole",
["event"] = "SPELL_CAST_START",
["npcID"] = 213834,
},
[430238] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupted Oracle",
["npcID"] = 214439,
},
[428703] = {
["source"] = "Rock Smasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 213954,
},
[106856] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["npcID"] = 56732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1416,
},
[106984] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Gu Cloudstrike",
["npcID"] = 56747,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1303,
},
[446615] = {
["source"] = "Nightfall Dark Architect",
["event"] = "SPELL_CAST_START",
["npcID"] = 213885,
},
[1214324] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["npcID"] = 209230,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2816,
},
[1214325] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["npcID"] = 209230,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2816,
},
[456851] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spore-Infused Shalewing",
["npcID"] = 221217,
},
[448663] = {
["event"] = "SPELL_CAST_START",
["source"] = "Under-Lord Vik'tis",
["npcID"] = 247464,
},
[1238892] = {
["encounterName"] = "Voidrider Challnax",
["source"] = "Voidripper",
["npcID"] = 244382,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3330,
},
[451222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hollows Resident",
["npcID"] = 219983,
},
[470612] = {
["encounterName"] = "Cragpie",
["source"] = "Cragpie",
["npcID"] = 220008,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3001,
},
[433766] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["encounterID"] = 2906,
["event"] = "SPELL_CAST_START",
["npcID"] = 215405,
},
[456861] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spore-Infused Shalewing",
["npcID"] = 221217,
},
[1234565] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["encounterID"] = 3122,
["event"] = "SPELL_CAST_START",
["npcID"] = 237661,
},
[443487] = {
["source"] = "Worker Bee",
["event"] = "SPELL_CAST_START",
["npcID"] = 210265,
},
[346766] = {
["encounterName"] = "Hylbrande",
["source"] = "Hylbrande",
["encounterID"] = 2426,
["event"] = "SPELL_CAST_START",
["npcID"] = 175663,
},
[270515] = {
["source"] = "Azerite-Infused Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 137905,
},
[112998] = {
["event"] = "SPELL_CAST_START",
["source"] = "Residual Hatred",
["npcID"] = 58803,
},
[1236247] = {
["source"] = "Lash'ir",
["event"] = "SPELL_CAST_START",
["npcID"] = 231529,
},
[442525] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[350922] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Oasis Security",
["npcID"] = 179269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[449690] = {
["source"] = "Queen's Guard Ge'zah",
["event"] = "SPELL_CAST_START",
["npcID"] = 223839,
},
[455250] = {
["source"] = "Rumblestone",
["event"] = "SPELL_CAST_START",
["npcID"] = 223546,
},
[450714] = {
["source"] = "Nerubian Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 218103,
},
[332500] = {
["event"] = "SPELL_CAST_START",
["source"] = "Panicked Necroray",
["npcID"] = 165025,
},
[1238909] = {
["encounterName"] = "Voidrider Challnax",
["source"] = "Voidripper",
["npcID"] = 244382,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3330,
},
[83445] = {
["encounterName"] = "General Husam",
["source"] = "General Husam",
["npcID"] = 44577,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1052,
},
[1219700] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["encounterID"] = 3108,
["event"] = "SPELL_CAST_START",
["npcID"] = 237514,
},
[1220489] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3129,
},
[1243007] = {
["source"] = "Pactsworn Dustblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 244415,
},
[446483] = {
["source"] = "Deepwater Sludger",
["event"] = "SPELL_CAST_START",
["npcID"] = 216515,
},
[456138] = {
["source"] = "Dustback Burrower",
["event"] = "SPELL_CAST_START",
["npcID"] = 230293,
},
[428711] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Dorlita",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213216,
},
[449693] = {
["source"] = "Queen's Guard Re'zah",
["event"] = "SPELL_CAST_START",
["npcID"] = 223822,
},
[415406] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["npcID"] = 207481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2831,
},
[1238919] = {
["encounterName"] = "Voidrider Challnax",
["source"] = "Voidrider Challnax",
["npcID"] = 244320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3330,
},
[447135] = {
["isChanneled"] = true,
["source"] = "Flavor Scientist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222964,
},
[1238921] = {
["encounterName"] = "Voidrider Challnax",
["source"] = "Voidrider Challnax",
["npcID"] = 244320,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3330,
},
[423479] = {
["source"] = "Royal Wicklighter",
["event"] = "SPELL_CAST_START",
["npcID"] = 210812,
},
[1243017] = {
["source"] = "Pactsworn Dustblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 244415,
},
[467606] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[470588] = {
["source"] = "Kobyss Witherer",
["event"] = "SPELL_CAST_START",
["npcID"] = 214251,
},
[438200] = {
["encounterName"] = "The Silken Court",
["source"] = "Skeinspinner Takazj",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217491,
},
[346957] = {
["encounterName"] = "Hylbrande",
["source"] = "Titanic Defense Turret",
["npcID"] = 175667,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2426,
},
[473748] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[449696] = {
["source"] = "Queen's Guard Ge'zah",
["event"] = "SPELL_CAST_START",
["npcID"] = 223839,
},
[1232789] = {
["source"] = "Shadowguard Voidtamer",
["event"] = "SPELL_CAST_START",
["npcID"] = 234429,
},
[1232790] = {
["isChanneled"] = false,
["source"] = "Shadowguard Voidtamer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234429,
},
[88308] = {
["encounterName"] = "Altairus",
["source"] = "Altairus",
["npcID"] = 43873,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1041,
},
[1214369] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[1220511] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "Taah'bat",
["encounterID"] = 3108,
["event"] = "SPELL_CAST_START",
["npcID"] = 234933,
},
[449986] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[446328] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow-Hemmed Fog Beast",
["npcID"] = 221663,
},
[369865] = {
["source"] = "Vakril",
["event"] = "SPELL_CAST_START",
["npcID"] = 193223,
},
[456351] = {
["source"] = "Boneseer Hookjaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 213805,
},
[465051] = {
["event"] = "SPELL_CAST_START",
["source"] = "Xal'atath",
["npcID"] = 230937,
},
[381535] = {
["source"] = "Convoked Tremor",
["event"] = "SPELL_CAST_START",
["npcID"] = 187079,
},
[437417] = {
["encounterName"] = "Queen Ansurek",
["source"] = "Queen Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 218370,
},
[434756] = {
["source"] = "Hired Muscle",
["event"] = "SPELL_CAST_START",
["npcID"] = 210269,
},
[1240577] = {
["source"] = "Coordinator Xy'thir",
["event"] = "SPELL_CAST_START",
["npcID"] = 232508,
},
[447141] = {
["source"] = "Repurposed Loaderbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 222923,
},
[426283] = {
["source"] = "Cursedheart Invader",
["event"] = "SPELL_CAST_START",
["npcID"] = 212389,
},
[356967] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cartel Muscle",
["npcID"] = 180348,
},
[357260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Focused Ritualist",
["npcID"] = 180431,
},
[438954] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["encounterID"] = 2926,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213179,
},
[1240310] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["encounterID"] = 3135,
["event"] = "SPELL_CAST_START",
["npcID"] = 234478,
},
[1239791] = {
["source"] = "Engorged Siltfeaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 230546,
},
[322936] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["source"] = "Halkias",
["encounterID"] = 2401,
["event"] = "SPELL_CAST_START",
["npcID"] = 165408,
},
[1235583] = {
["source"] = "Tainted Fragment",
["event"] = "SPELL_CAST_START",
["npcID"] = 223416,
},
[439467] = {
["source"] = "Yes Man",
["event"] = "SPELL_CAST_START",
["npcID"] = 219588,
},
[1238954] = {
["source"] = "The Bone Melter",
["event"] = "SPELL_CAST_START",
["npcID"] = 245617,
},
[444985] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shacklefang Hornet",
["npcID"] = 223178,
},
[1219438] = {
["source"] = "Darkfuse Shredder",
["event"] = "SPELL_CAST_START",
["npcID"] = 227904,
},
[459938] = {
["source"] = "Dripear the Waxy",
["event"] = "SPELL_CAST_START",
["npcID"] = 213883,
},
[349797] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Alcruux",
["npcID"] = 176556,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[1219407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gallagio Security",
["npcID"] = 229439,
},
[1236428] = {
["source"] = "Shadeye Observer",
["event"] = "SPELL_CAST_START",
["npcID"] = 244138,
},
[1244630] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Dirtwhistle",
["encounterID"] = 2440,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 180486,
},
[450505] = {
["source"] = "Zekvir",
["event"] = "SPELL_CAST_START",
["npcID"] = 247387,
},
[1224634] = {
["source"] = "Burrowing Creeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 236947,
},
[443052] = {
["source"] = "Siege Hopebreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 216019,
},
[429114] = {
["isChanneled"] = false,
["source"] = "Forge Loader",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213343,
},
[433841] = {
["source"] = "Blood Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 216364,
},
[434740] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Inquisitor",
["npcID"] = 217518,
},
[426677] = {
["source"] = "Sootsnout",
["event"] = "SPELL_CAST_START",
["npcID"] = 212412,
},
[441518] = {
["source"] = "Failed Batch",
["event"] = "SPELL_CAST_START",
["npcID"] = 220368,
},
[428086] = {
["encounterName"] = "Speaker Shadowcrown",
["source"] = "Speaker Shadowcrown",
["encounterID"] = 2837,
["event"] = "SPELL_CAST_START",
["npcID"] = 211087,
},
[451113] = {
["source"] = "Sureki Webmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 210966,
},
[1244596] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Evaile",
["encounterID"] = 2440,
["event"] = "SPELL_CAST_START",
["npcID"] = 180399,
},
[1228214] = {
["encounterName"] = "Forgeweaver Araz",
["source"] = "Arcane Collector",
["encounterID"] = 3132,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 240905,
},
[439984] = {
["isChanneled"] = true,
["source"] = "Earthen-Ward Sentinel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216221,
},
[465952] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[1241023] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Zo'gron",
["npcID"] = 176563,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2440,
},
[75645] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corla, Herald of Twilight",
["npcID"] = 39679,
},
[88055] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Armored Mistral",
["npcID"] = 45915,
},
[1228197] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Dimension Portal",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 241916,
},
[383693] = {
["source"] = "Nokhud Beastmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 192794,
},
[1242521] = {
["source"] = "Pactsworn Wildcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 244418,
},
[433845] = {
["source"] = "Blood Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 216364,
},
[467109] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Stix Bunkjunker",
["npcID"] = 230322,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3012,
},
[453292] = {
["event"] = "SPELL_CAST_START",
["source"] = "Trungal",
["npcID"] = 220268,
},
[1241032] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Zo'gron",
["npcID"] = 176563,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[443427] = {
["source"] = "Sureki Silkbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 220195,
},
[83066] = {
["encounterName"] = "Siamat",
["source"] = "Siamat",
["npcID"] = 44819,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1055,
},
[328791] = {
["encounterName"] = "Lord Chamberlain",
["source"] = "Lord Chamberlain",
["encounterID"] = 2381,
["event"] = "SPELL_CAST_START",
["npcID"] = 164218,
},
[451758] = {
["source"] = "Kobyss Shadeshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 215653,
},
[429091] = {
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_START",
["npcID"] = 212827,
},
[385063] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primalist Cinderweaver",
["npcID"] = 190207,
},
[1234898] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["encounterID"] = 3135,
["event"] = "SPELL_CAST_START",
["npcID"] = 241517,
},
[355584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormforged Guardian",
["npcID"] = 178171,
},
[88056] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Armored Mistral",
["npcID"] = 45915,
},
[467776] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "Pit Mechanic",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 228514,
},
[426684] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Ravager",
["npcID"] = 212673,
},
[438801] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[454319] = {
["isChanneled"] = true,
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[431645] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Webspinner",
["npcID"] = 212717,
},
[356929] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tracker Zo'korss",
["npcID"] = 179837,
},
[392398] = {
["source"] = "Primal Thundercloud",
["event"] = "SPELL_CAST_START",
["npcID"] = 197509,
},
[462508] = {
["source"] = "Void Emissary",
["event"] = "SPELL_CAST_START",
["npcID"] = 229537,
},
[1226721] = {
["encounterName"] = "Loom'ithar",
["source"] = "Loom'ithar",
["npcID"] = 233815,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3131,
},
[347716] = {
["event"] = "SPELL_CAST_START",
["source"] = "P.O.S.T. Worker",
["npcID"] = 176394,
},
[267532] = {
["source"] = "Honey-Crazed Mauler",
["event"] = "SPELL_CAST_START",
["npcID"] = 131568,
},
[388817] = {
["encounterName"] = "Granyth",
["source"] = "Granyth",
["encounterID"] = 2637,
["event"] = "SPELL_CAST_START",
["npcID"] = 186616,
},
[440504] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["event"] = "SPELL_CAST_START",
["npcID"] = 217489,
},
[445457] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2836,
},
[472233] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Flarendo",
["encounterID"] = 3010,
["event"] = "SPELL_CAST_START",
["npcID"] = 229181,
},
[442387] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian War-Weaver",
["npcID"] = 222731,
},
[382836] = {
["encounterName"] = "Teera and Maruuk",
["source"] = "Maruuk",
["encounterID"] = 2581,
["event"] = "SPELL_CAST_START",
["npcID"] = 186338,
},
[461487] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["encounterID"] = 2901,
["event"] = "SPELL_CAST_START",
["npcID"] = 215407,
},
[106864] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["npcID"] = 56732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1416,
},
[388897] = {
["source"] = "Deepwater Snapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 214550,
},
[440506] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bubbling Mudskip",
["npcID"] = 214960,
},
[465827] = {
["source"] = "Darkfuse Bloodwarper",
["event"] = "SPELL_CAST_START",
["npcID"] = 230748,
},
[426869] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Enforcer",
["npcID"] = 212548,
},
[353635] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["npcID"] = 177269,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2442,
},
[465071] = {
["source"] = "Darkfuse Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 229161,
},
[111854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Instructor Chillheart",
["npcID"] = 58633,
},
[1217853] = {
["source"] = "Geargrinder Biker",
["event"] = "SPELL_CAST_START",
["npcID"] = 237516,
},
[465408] = {
["source"] = "Venture Co. Architect",
["event"] = "SPELL_CAST_START",
["npcID"] = 229251,
},
[473260] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[438973] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pit Lord",
["npcID"] = 228574,
},
[426261] = {
["source"] = "Sootsnout",
["event"] = "SPELL_CAST_START",
["npcID"] = 212412,
},
[1221152] = {
["source"] = "Voracious Gorger",
["event"] = "SPELL_CAST_START",
["npcID"] = 234883,
},
[88186] = {
["event"] = "SPELL_CAST_START",
["source"] = "Empyrean Assassin",
["npcID"] = 45922,
},
[326389] = {
["encounterName"] = "Echelon",
["source"] = "Echelon",
["encounterID"] = 2380,
["event"] = "SPELL_CAST_START",
["npcID"] = 164185,
},
[377732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Refti Custodian",
["npcID"] = 184319,
},
[413387] = {
["event"] = "SPELL_CAST_START",
["source"] = "Executor of the Caliph",
["npcID"] = 45928,
},
[1240060] = {
["source"] = "Untethered Rampager",
["event"] = "SPELL_CAST_START",
["npcID"] = 242525,
},
[355048] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkbrine Shellcrusher",
["npcID"] = 178139,
},
[1234939] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zagithav",
["npcID"] = 230644,
},
[111599] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Scholomance Acolyte",
["npcID"] = 58757,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1426,
},
[1231865] = {
["source"] = "Wastelander Thief",
["event"] = "SPELL_CAST_START",
["npcID"] = 234032,
},
[474461] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3015,
},
[1237905] = {
["source"] = "Reshanor",
["event"] = "SPELL_CAST_START",
["npcID"] = 238319,
},
[458423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kordac",
["npcID"] = 221084,
},
[466296] = {
["source"] = "Mechanized Peacekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 237587,
},
[418292] = {
["source"] = "Treasure Wraith",
["event"] = "SPELL_CAST_START",
["npcID"] = 208728,
},
[1220618] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["encounterID"] = 3129,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233814,
},
[1216525] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Rocket Launcher",
["npcID"] = 230360,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[422090] = {
["source"] = "Treant",
["event"] = "SPELL_CAST_START",
["npcID"] = 54983,
},
[455354] = {
["source"] = "Searing Flameslinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 223528,
},
[449960] = {
["source"] = "Deepwater Kobyss",
["event"] = "SPELL_CAST_START",
["npcID"] = 215750,
},
[349934] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Achillite",
["npcID"] = 176555,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[444608] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[1224719] = {
["source"] = "Forge Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 234041,
},
[431303] = {
["source"] = "Nightfall Shadowmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 213892,
},
[437956] = {
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_START",
["npcID"] = 218671,
},
[444609] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[1217653] = {
["encounterName"] = "Demolition Duo",
["source"] = "Keeza Quickfuse",
["encounterID"] = 3019,
["event"] = "SPELL_CAST_START",
["npcID"] = 226403,
},
[1241100] = {
["encounterName"] = "Soulbinder Naazindhri",
["source"] = "Soulbinder Naazindhri",
["encounterID"] = 3130,
["event"] = "SPELL_CAST_START",
["npcID"] = 233816,
},
[450492] = {
["source"] = "Zekvir",
["event"] = "SPELL_CAST_START",
["npcID"] = 247387,
},
[445191] = {
["source"] = "Spitfire Charger",
["event"] = "SPELL_CAST_START",
["npcID"] = 213577,
},
[471733] = {
["source"] = "Disturbed Kelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 231223,
},
[1220982] = {
["encounterName"] = "Plexus Sentinel",
["source"] = "Plexus Sentinel",
["npcID"] = 233814,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3129,
},
[392924] = {
["source"] = "High Channeler Ryvati",
["event"] = "SPELL_CAST_START",
["npcID"] = 197535,
},
[465595] = {
["source"] = "Venture Co. Electrician",
["event"] = "SPELL_CAST_START",
["npcID"] = 231312,
},
[1224731] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[1223235] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkmage Zadus",
["npcID"] = 239454,
},
[113136] = {
["encounterName"] = "Darkmaster Gandling",
["source"] = "Darkmaster Gandling",
["npcID"] = 59080,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1430,
},
[438471] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["encounterID"] = 2926,
["event"] = "SPELL_CAST_START",
["npcID"] = 213179,
},
[424958] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2861,
},
[1226783] = {
["source"] = "Unbound Entity",
["event"] = "SPELL_CAST_START",
["npcID"] = 236072,
},
[440007] = {
["source"] = "Iron-Runed Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 214576,
},
[448888] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[471736] = {
["isChanneled"] = true,
["source"] = "Disturbed Kelp",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231223,
},
[451778] = {
["source"] = "Dogmatic Machine Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 212878,
},
[83455] = {
["encounterName"] = "Siamat",
["source"] = "Minion of Siamat",
["npcID"] = 44704,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1055,
},
[438473] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["encounterID"] = 2926,
["event"] = "SPELL_CAST_START",
["npcID"] = 213179,
},
[356812] = {
["event"] = "SPELL_CAST_START",
["source"] = "Leader Xy'viler",
["npcID"] = 180286,
},
[474004] = {
["source"] = "Drill Sergeant",
["event"] = "SPELL_CAST_START",
["npcID"] = 231925,
},
[88061] = {
["event"] = "SPELL_CAST_START",
["source"] = "Armored Mistral",
["npcID"] = 45915,
},
[450756] = {
["source"] = "Nightfall Commander",
["event"] = "SPELL_CAST_START",
["npcID"] = 214762,
},
[1225673] = {
["encounterName"] = "Fractillus",
["source"] = "Fractillus",
["npcID"] = 237861,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3133,
},
[1217456] = {
["isChanneled"] = true,
["source"] = "Disturbed Kelp",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231223,
},
[1226991] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sand Swirler",
["npcID"] = 237972,
},
[450757] = {
["source"] = "Waxtail Browbeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 213000,
},
[1213621] = {
["event"] = "SPELL_CAST_START",
["source"] = "Princeguard Demolisher",
["npcID"] = 227929,
},
[449734] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[358131] = {
["encounterName"] = "Hylbrande",
["source"] = "Stormbound Breaker",
["encounterID"] = 2426,
["event"] = "SPELL_CAST_START",
["npcID"] = 180640,
},
[438476] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["encounterID"] = 2926,
["event"] = "SPELL_CAST_START",
["npcID"] = 213179,
},
[455364] = {
["source"] = "Kx",
["event"] = "SPELL_CAST_START",
["npcID"] = 216582,
},
[369675] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stonevault Geomancer",
["npcID"] = 184022,
},
[382696] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Guardian",
["npcID"] = 184131,
},
[1214523] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Ascendant",
["npcID"] = 212793,
},
[369465] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Weaver",
["npcID"] = 186420,
},
[1224760] = {
["isChanneled"] = true,
["source"] = "Forge Sentinel",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234041,
},
[350086] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Venza Goldfuse",
["npcID"] = 176705,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[114999] = {
["encounterName"] = "Taran Zhu",
["source"] = "Taran Zhu",
["npcID"] = 56884,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1306,
},
[1223222] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkmage Zadus",
["npcID"] = 239454,
},
[1239740] = {
["event"] = "SPELL_CAST_START",
["source"] = "Untethered Voidshade",
["npcID"] = 234897,
},
[468672] = {
["source"] = "Bombshell Crab",
["event"] = "SPELL_CAST_START",
["npcID"] = 231497,
},
[348128] = {
["encounterName"] = "Zo'phex the Sentinel",
["source"] = "Zo'phex",
["npcID"] = 175616,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2425,
},
[1214780] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 228424,
},
[86911] = {
["encounterName"] = "Asaad",
["source"] = "Asaad",
["npcID"] = 43875,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1042,
},
[359222] = {
["encounterName"] = "Myza's Oasis",
["source"] = "Unruly Patron",
["npcID"] = 180158,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2440,
},
[1245240] = {
["encounterName"] = "Nexus-Princess Ky'veza",
["source"] = "Nexus-Princess Ky'veza",
["npcID"] = 244752,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3326,
},
[205231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkglare",
["npcID"] = 103673,
},
[355577] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormforged Guardian",
["npcID"] = 178171,
},
[463169] = {
["source"] = "Venture Co. Surveyor",
["event"] = "SPELL_CAST_START",
["npcID"] = 229686,
},
[355638] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Market Peacekeeper",
["npcID"] = 179840,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2441,
},
[430805] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coalescing Void Diffuser",
["npcID"] = 214421,
},
[323538] = {
["encounterName"] = "High Adjudicator Aleez",
["source"] = "High Adjudicator Aleez",
["encounterID"] = 2403,
["event"] = "SPELL_CAST_START",
["npcID"] = 165410,
},
[115509] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shado-Pan Warden",
["npcID"] = 59751,
},
[118963] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glintrok Skulker",
["npcID"] = 61240,
},
[326409] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shard of Halkias",
["npcID"] = 164557,
},
[376049] = {
["encounterName"] = "Chrono-Lord Deios",
["source"] = "Chrono-Lord Deios",
["npcID"] = 184125,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2559,
},
[347903] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overloaded Mailemental",
["npcID"] = 176395,
},
[418791] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bill",
["npcID"] = 211062,
},
[451277] = {
["encounterName"] = "The Silken Court",
["source"] = "Anub'arash",
["encounterID"] = 2921,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217489,
},
[88959] = {
["event"] = "SPELL_CAST_START",
["source"] = "Temple Adept",
["npcID"] = 45935,
},
[1232973] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["encounterID"] = 3135,
["event"] = "SPELL_CAST_START",
["npcID"] = 233824,
},
[445910] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sporbit",
["npcID"] = 237337,
},
[1224787] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[414944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Gutter",
["npcID"] = 207454,
},
[1237071] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stoneborn Slasher",
["npcID"] = 167607,
},
[114291] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hopper",
["npcID"] = 59464,
},
[369399] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Weaver",
["npcID"] = 186420,
},
[414945] = {
["source"] = "Invasive Sporemancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 215538,
},
[1224793] = {
["encounterName"] = "Soul-Scribe",
["source"] = "Soul-Scribe",
["npcID"] = 234935,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3109,
},
[91408] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Augh",
["npcID"] = 49045,
},
[369400] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Warder",
["npcID"] = 184132,
},
[1239350] = {
["encounterName"] = "Captain Nil'hitan",
["source"] = "Captain Nil'hitan",
["npcID"] = 244384,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3279,
},
[349954] = {
["encounterName"] = "The Grand Menagerie",
["source"] = "Achillite",
["npcID"] = 176555,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2441,
},
[16568] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Monstrous Larva",
["npcID"] = 240091,
},
[381683] = {
["source"] = "Nokhud Warspear",
["event"] = "SPELL_CAST_START",
["npcID"] = 192791,
},
[1230941] = {
["source"] = "Shadowguard Infiltrator",
["event"] = "SPELL_CAST_START",
["npcID"] = 237285,
},
[82753] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Neferset Theurgist",
["npcID"] = 44980,
},
[91263] = {
["encounterName"] = "General Husam",
["source"] = "General Husam",
["npcID"] = 44577,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1052,
},
[430812] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coalescing Void Diffuser",
["npcID"] = 214421,
},
[427376] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gilgoblin Hunter",
["npcID"] = 40935,
},
[1239134] = {
["encounterName"] = "Voidrider Challnax",
["source"] = "Voidrider Challnax",
["npcID"] = 244320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3330,
},
[474554] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3015,
},
[464149] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Stix Bunkjunker",
["npcID"] = 230322,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3012,
},
[466124] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["npcID"] = 226404,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3054,
},
[448213] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[1235045] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Adarus Duskblaze",
["encounterID"] = 3122,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237661,
},
[98710] = {
["encounterName"] = "Ragnaros",
["source"] = "Ragnaros",
["encounterID"] = 1203,
["event"] = "SPELL_CAST_START",
["npcID"] = 52409,
},
[1224812] = {
["encounterName"] = "Nexus-King Salhadaar",
["source"] = "Nexus-King Salhadaar",
["encounterID"] = 3134,
["event"] = "SPELL_CAST_START",
["npcID"] = 237763,
},
[75441] = {
["encounterName"] = "Rom'ogg Bonecrusher",
["source"] = "Twilight Flame Caller",
["npcID"] = 40447,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1040,
},
[449941] = {
["source"] = "Emperor Pitfang",
["event"] = "SPELL_CAST_START",
["npcID"] = 219265,
},
[98952] = {
["encounterName"] = "Ragnaros",
["source"] = "Ragnaros",
["encounterID"] = 1203,
["event"] = "SPELL_CAST_START",
["npcID"] = 52409,
},
[1223211] = {
["isChanneled"] = true,
["source"] = "Nascent Darkmage",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 248626,
},
[1235052] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Stormforged Guardian",
["npcID"] = 178171,
},
[1223007] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wastes Creeper",
["npcID"] = 234918,
},
[455380] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malfunctioning Railbot",
["npcID"] = 218251,
},
[1233672] = {
["encounterName"] = "The Soul Hunters",
["source"] = "Ilyssa Darksorrow",
["encounterID"] = 3122,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237662,
},
[465754] = {
["source"] = "Shreddinator 3000",
["event"] = "SPELL_CAST_START",
["npcID"] = 230740,
},
[118940] = {
["encounterName"] = "Gekkan",
["source"] = "Glintrok Oracle",
["npcID"] = 61339,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2129,
},
[428374] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["npcID"] = 40586,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[468915] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperious Blaster",
["npcID"] = 229356,
},
[424750] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Rotcaster",
["npcID"] = 207459,
},
[88194] = {
["event"] = "SPELL_CAST_START",
["source"] = "Young Storm Dragon",
["npcID"] = 45919,
},
[415492] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["npcID"] = 207481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2831,
},
[76688] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Twilight Obsidian Borer",
["npcID"] = 40019,
},
[1235064] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zagithav",
["npcID"] = 230644,
},
[442589] = {
["source"] = "Venture Co. Honey Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220946,
},
[369409] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Custodian",
["npcID"] = 184130,
},
[465165] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Flare",
["npcID"] = 229603,
},
[445210] = {
["source"] = "Spitfire Charger",
["event"] = "SPELL_CAST_START",
["npcID"] = 213577,
},
[440056] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Slasher",
["npcID"] = 208243,
},
[107140] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Azure Serpent",
["npcID"] = 56754,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1303,
},
[433448] = {
["isChanneled"] = true,
["source"] = "Nerubian Webspinner",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216621,
},
[452314] = {
["source"] = "Kol Bruncrag",
["event"] = "SPELL_CAST_START",
["npcID"] = 213658,
},
[1230979] = {
["encounterName"] = "Dimensius, the All-Devouring",
["source"] = "Dimensius",
["encounterID"] = 3135,
["event"] = "SPELL_CAST_START",
["npcID"] = 241517,
},
[369411] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cavern Seeker",
["npcID"] = 184301,
},
[431333] = {
["isChanneled"] = true,
["source"] = "Nightfall Shadowmage",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213893,
},
[123649] = {
["source"] = "Kargesh Ribcrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 61947,
},
[428263] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["npcID"] = 40586,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[449245] = {
["source"] = "Tij'allet",
["event"] = "SPELL_CAST_START",
["npcID"] = 215600,
},
[433040] = {
["source"] = "Kobyss Trickster",
["event"] = "SPELL_CAST_START",
["npcID"] = 214343,
},
[113143] = {
["encounterName"] = "Darkmaster Gandling",
["source"] = "Darkmaster Gandling",
["npcID"] = 59080,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1430,
},
[450781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flickerflame Sticker",
["npcID"] = 212629,
},
[330553] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scathely",
["npcID"] = 172485,
},
[123652] = {
["source"] = "Kargesh Ribcrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 61947,
},
[1214614] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maulspike",
["npcID"] = 247480,
},
[1227629] = {
["source"] = "Manifested Shadow",
["event"] = "SPELL_CAST_START",
["npcID"] = 241632,
},
[111772] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Scholomance Acolyte",
["npcID"] = 58757,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1426,
},
[388349] = {
["source"] = "Deepwater Eel",
["event"] = "SPELL_CAST_START",
["npcID"] = 215680,
},
[468694] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3015,
},
[434407] = {
["encounterName"] = "Rasha'nan",
["source"] = "Rasha'nan",
["encounterID"] = 2839,
["event"] = "SPELL_CAST_START",
["npcID"] = 213937,
},
[426731] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Oracle",
["npcID"] = 41096,
},
[1226903] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Harvester",
["npcID"] = 241242,
},
[76590] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Watcher",
["npcID"] = 40936,
},
[440549] = {
["source"] = "Kobyss Shellbreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 213598,
},
[106920] = {
["event"] = "SPELL_CAST_START",
["source"] = "Regenerating Sha",
["npcID"] = 56763,
},
[1217446] = {
["encounterName"] = "Azhiccar",
["source"] = "Azhiccar",
["encounterID"] = 3107,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234893,
},
[112911] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fragment of Hatred",
["npcID"] = 58810,
},
[1222815] = {
["source"] = "Wastelander Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 234957,
},
[1214628] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Consuming Voidstone",
["npcID"] = 212739,
},
[76682] = {
["encounterName"] = "Ascendant Lord Obsidius",
["source"] = "Twilight Element Warden",
["npcID"] = 40017,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1036,
},
[441627] = {
["source"] = "Flavor Scientist",
["event"] = "SPELL_CAST_START",
["npcID"] = 214673,
},
[428269] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Fragment",
["npcID"] = 227518,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2836,
},
[318243] = {
["event"] = "SPELL_CAST_START",
["source"] = "Necromantic Dissident",
["npcID"] = 172479,
},
[410870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wild Vortex",
["npcID"] = 45912,
},
[1231144] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siphoned Drake",
["npcID"] = 245053,
},
},
["performance_units"] = {
[191714] = 0,
[214441] = true,
[189707] = 0,
[220626] = true,
[176920] = 0,
[96247] = 0,
[196679] = 0,
[100529] = 0,
[208994] = 0,
[87329] = false,
[198594] = false,
[210231] = 0,
[84401] = 0,
[189363] = 0,
[196642] = 0,
[194999] = 0,
[219746] = 0,
[189706] = 0,
[197398] = 0,
[167999] = true,
[211306] = 0,
},
["InterruptableSpells"] = {
[1229474] = true,
[188443] = true,
[354297] = true,
[220543] = true,
[1235326] = true,
[427609] = true,
[428086] = true,
[468631] = true,
[434786] = true,
[427357] = true,
[29722] = true,
[270481] = true,
[6552] = true,
[465871] = true,
[157331] = true,
[453616] = true,
[51505] = true,
[326450] = true,
[147362] = true,
[57994] = true,
[461904] = true,
[585] = true,
[323538] = true,
[420090] = true,
[1229510] = true,
[91807] = true,
[1214780] = true,
[31935] = true,
[132409] = true,
[368847] = true,
[448248] = true,
[77472] = true,
[434635] = true,
[105174] = true,
[357196] = true,
[432031] = true,
[357260] = true,
[355641] = true,
[325701] = true,
[191732] = true,
[328322] = true,
[355642] = true,
[434589] = true,
[452099] = true,
[431303] = true,
[59638] = true,
[188196] = true,
[30451] = true,
[97547] = true,
[429812] = true,
[394976] = true,
[356407] = true,
[465595] = true,
[104318] = true,
[420320] = true,
[431333] = true,
[353836] = true,
[423051] = true,
[422090] = true,
[462771] = true,
[1222815] = true,
[451113] = true,
[427356] = true,
[449734] = true,
[463058] = true,
[356537] = true,
[355934] = true,
[424419] = true,
[338003] = true,
[347775] = true,
[434802] = true,
[187707] = true,
[32747] = true,
[1214468] = true,
[96231] = true,
[427469] = true,
[1766] = true,
[194153] = true,
[436322] = true,
[93985] = true,
[1245669] = true,
[386071] = true,
[433662] = true,
[444743] = true,
[350922] = true,
[352347] = true,
[432520] = true,
[347008] = true,
[356843] = true,
[455476] = true,
[391528] = true,
[423536] = true,
[47528] = true,
[471733] = true,
[420330] = true,
[423664] = true,
[424421] = true,
[351338] = true,
[116705] = true,
[183752] = true,
[355225] = true,
[433841] = true,
[434793] = true,
[465813] = true,
[373279] = true,
[326829] = true,
[19647] = true,
[2139] = true,
[267997] = true,
[5143] = true,
[351119] = true,
[442210] = true,
[426240] = true,
[686] = true,
[355057] = true,
[6353] = true,
},
["profiles"] = {
["FragUI"] = {
["focus_as_target_alpha"] = true,
["aura_breakline_space"] = 3,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["Time"] = 1743409167,
["semver"] = "1.0.7",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["Icon"] = 135964,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Revision"] = 117,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["version"] = 8,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["Author"] = "Duracell",
["Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["Name"] = "Invalid Target",
["Prio"] = 99,
["SpellIds"] = {
383840,
379256,
388084,
369031,
336499,
347097,
328921,
329636,
350857,
365381,
367573,
361934,
362020,
352016,
260189,
261265,
261266,
271590,
202455,
197422,
232156,
229489,
235308,
235089,
376705,
},
["PlaterCore"] = 1,
["Enabled"] = true,
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["url"] = "https://wago.io/Dq5DaC3b4/8",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
["indicatorAlpha"] = 0.75,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1743281252,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 162,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["Name"] = "Add - Health Markers [P]",
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Enabled"] = true,
["NpcNames"] = {
"214840",
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1743281703,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Icon"] = 610472,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Revision"] = 94,
["Options"] = {
},
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["Name"] = "Aura is Shield [P]",
["Prio"] = 99,
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["Enabled"] = true,
["NpcNames"] = {
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1743409175,
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["Revision"] = 1286,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 2,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 10,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Abilities casted on the tank.",
["Name"] = "Cast - Tankbuster [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["PlaterCore"] = 1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Enabled"] = true,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["url"] = "",
},
},
["blizzard_nameplate_large_font"] = "Friz Quadrata TT",
["saved_cvars_last_change"] = {
["nameplateShowOnlyNames"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelectedAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateLargeTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:5104",
["nameplateShowPersonalCooldowns"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMotionSpeed"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyNPCs"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelectedScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOverlapH"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyBuffs"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinAlphaDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMotion"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateLargerScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMaxDistance"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:5530",
["nameplateOtherTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:5104",
["nameplatePlayerMaxDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOccludedAlphaMult"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriends"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemies"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowSelf"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOverlapV"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:5510",
},
["aura_cache_by_name"] = {
},
["url"] = "https://wago.io/tA5ADNfDG/11",
["blizzard_nameplate_font_override_enabled"] = true,
["aura_stack_anchor"] = {
["y"] = 15,
["side"] = 5,
},
["cast_statusbar_fadein_time"] = 0.019999999552965,
["target_shady_enabled"] = false,
["cast_statusbar_spark_alpha"] = 0,
["aura2_y_offset"] = 3,
["extra_icon_caster_size"] = 12,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["level_text_alpha"] = 0.3,
["module_enabled"] = false,
},
["friendlyplayer"] = {
["castbar_offset"] = -1,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
210,
22,
},
["percent_text_ooc"] = true,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
210,
22,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
0,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = -1,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["mana_incombat"] = {
nil,
4,
},
["actorname_text_size"] = 12,
["big_actorname_text_font"] = "Friz Quadrata TT",
["percent_text_enabled"] = true,
["all_names"] = true,
["mana"] = {
nil,
4,
},
["big_actorname_text_size"] = 12,
["level_text_alpha"] = 0.2999999821186066,
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["health_incombat"] = {
232,
32,
},
["spellpercent_text_enabled"] = true,
["actorname_text_spacing"] = 11,
["percent_text_font"] = "Friz Quadrata TT",
["buff_frame_y_offset"] = 0,
["quest_color_enabled"] = true,
["quest_enabled"] = true,
["percent_text_size"] = 12,
["spellpercent_text_size"] = 12,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_size"] = 12,
["health"] = {
232,
32,
},
["big_actortitle_text_size"] = 12,
["spellname_text_font"] = "Friz Quadrata TT",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
},
["friendlynpc"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
210,
22,
},
["percent_text_ooc"] = true,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 12,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
210,
22,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = -1,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["actorname_text_size"] = 12,
["percent_text_enabled"] = true,
["actorname_text_outline"] = "OUTLINE",
["level_text_alpha"] = 0.2999999821186066,
["spellpercent_text_enabled"] = true,
["percent_text_size"] = 12,
["actorname_text_spacing"] = 11,
["percent_text_font"] = "Friz Quadrata TT",
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["spellpercent_text_size"] = 12,
["castbar_offset"] = -1,
["spellname_text_size"] = 12,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
232,
32,
},
["health"] = {
232,
32,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_font"] = "Friz Quadrata TT",
["castbar_offset_x"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
},
["enemynpc"] = {
["castbar_offset"] = -1,
["spellpercent_text_font"] = "Friz Quadrata TT",
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
160,
16,
},
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 11,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
160,
16,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = -1,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
nil,
0.50196081399918,
0.25098040699959,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["percent_show_health"] = false,
["percent_text_size"] = 11,
["percent_text_font"] = "Friz Quadrata TT",
["quest_color_enemy"] = {
nil,
0.50196081399918,
0.25098040699959,
},
["level_text_alpha"] = 0.2999999821186066,
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["spellname_text_font"] = "Friz Quadrata TT",
["health_incombat"] = {
176,
24,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_size"] = 11,
["health"] = {
176,
24,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_size"] = 11,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 8,
["level_text_enabled"] = false,
},
["global_health_height"] = 28,
["enemyplayer"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
210,
22,
},
["spellpercent_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 12,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
210,
22,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = -1,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["all_names"] = true,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["actorname_text_outline"] = "OUTLINE",
["level_text_alpha"] = 0.2999999821186066,
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["percent_text_size"] = 12,
["actorname_text_spacing"] = 11,
["percent_text_font"] = "Friz Quadrata TT",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_show_health"] = false,
["quest_enabled"] = true,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
232,
32,
},
["quest_color_enabled"] = true,
["spellname_text_size"] = 12,
["health"] = {
232,
32,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset"] = -1,
["spellname_text_font"] = "Friz Quadrata TT",
["castbar_offset_x"] = 11,
["level_text_enabled"] = false,
},
["global_health_width"] = 224,
},
["indicator_quest"] = false,
["aura_y_offset"] = 3,
["use_ui_parent"] = true,
["expansion_triggerwipe"] = {
[10] = true,
[9] = true,
},
["focus_texture"] = "Kait",
["cast_statusbar_color_nointerrupt"] = {
0.7803922295570374,
0.250980406999588,
0.250980406999588,
1,
},
["cast_statusbar_use_fade_effects"] = false,
["bossmod_support_bars_enabled"] = false,
["border_thickness"] = 0.4999999701976776,
["resources_settings"] = {
["chr"] = {
["Player-3674-0B4CEAF6"] = "HolyPower",
["Player-3674-0B10664D"] = "Runes",
["Player-3674-0B7E99BA"] = "Chi",
["Player-3674-0B290529"] = "Chi",
["Player-3674-0B6F6C67"] = "ComboPoints",
["Player-3674-0B54DA49"] = "Runes",
["Player-3674-0B1BB2A3"] = "ComboPoints",
["Player-3666-073F2CE7"] = "Chi",
["Player-3674-0B7EE2CB"] = "Chi",
["Player-3674-0B0A2407"] = "Essence",
["Player-3674-0B733AA8"] = "Runes",
["Player-3674-0B7DA606"] = "Chi",
["Player-3674-0B1E76C1"] = "SoulShards",
["Player-3674-0ABC0676"] = "ArcaneCharges",
["Player-3674-0B5833AE"] = "Chi",
["Player-3674-0B436FA0"] = "ComboPoints",
["Player-3674-0B782F56"] = "Runes",
["Player-3674-0B7AA5AA"] = "Chi",
["Player-5764-00087D02"] = "Chi",
["Player-3674-0B6950F5"] = "ComboPoints",
["Player-3674-0B267A73"] = "HolyPower",
["Player-3674-0B7429F4"] = "Runes",
["Player-3674-0B25F50F"] = "ComboPoints",
["Player-3674-0B7DEF79"] = "Chi",
["Player-3674-0B82DA01"] = "HolyPower",
},
["global_settings"] = {
["show_depleted"] = false,
},
},
["health_animation_time_dilatation"] = 2.6199998855591,
["npc_cache"] = {
[158158] = {
"Forge-Guard Hurrul",
"Horrific Vision of Stormwind",
"enUS",
},
[237272] = {
"Underpin's Friend's Broker",
"Excavation Site 9",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[158286] = {
"Reprogrammed Warbot",
"Horrific Vision of Stormwind",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[153760] = {
"Enthralled Footman",
"Horrific Vision of Stormwind",
"enUS",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[158478] = {
"Corruption Tumor",
"Horrific Vision of Stormwind",
"enUS",
},
[159275] = {
"Portal Keeper",
"Horrific Vision of Stormwind",
"enUS",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[157811] = {
"Lilliam Sparkspindle",
"Horrific Vision of Stormwind",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[233675] = {
"Alleria Windrunner",
"Horrific Vision of Stormwind",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
},
[157813] = {
"Sprite Jumpsprocket",
"Horrific Vision of Stormwind",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[152809] = {
"Alx'kov the Infested",
"Horrific Vision of Stormwind",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[219046] = {
"Voracious Worm",
"Nerub-ar Palace",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
"enUS",
},
[158452] = {
"Mindtwist Tendril",
"Horrific Vision of Stormwind",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
},
[156795] = {
"SI:7 Informant",
"Horrific Vision of Stormwind",
"enUS",
},
[159632] = {
"Cultist Shadowblade",
"Horrific Vision of Stormwind",
"enUS",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[153130] = {
"Greater Void Elemental",
"Horrific Vision of Stormwind",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
},
[152939] = {
"Boundless Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[216275] = {
"Brann's Epic Egg",
"Excavation Site 9",
"enUS",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[233679] = {
"Therum Deepforge",
"Horrific Vision of Stormwind",
"enUS",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[158136] = {
"Inquisitor Darkspeak",
"Horrific Vision of Stormwind",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[130436] = {
"Off-Duty Laborer",
"The MOTHERLODE!!",
"enUS",
},
[212739] = {
"Consuming Voidstone",
"The Rookery",
"enUS",
},
[233681] = {
"Magister Umbric",
"Horrific Vision of Stormwind",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[88314] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
},
[156641] = {
"Enthralled Weaponsmith",
"Horrific Vision of Stormwind",
"enUS",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[156642] = {
"Enthralled Laborer",
"Horrific Vision of Stormwind",
"enUS",
},
[233684] = {
"Overlord Mathias Shaw",
"Horrific Vision of Stormwind",
"enUS",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[152722] = {
"Fallen Voidspeaker",
"Horrific Vision of Stormwind",
"enUS",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
},
[233685] = {
"Slavemaster Ul'rok",
"Horrific Vision of Stormwind",
"enUS",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
},
[138061] = {
"Venture Co. Longshoreman",
"The MOTHERLODE!!",
"enUS",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[156837] = {
"Valeera Sanguinar",
"Horrific Vision of Stormwind",
"enUS",
},
[224221] = {
"Twilight Overseer",
"Grim Batol",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[137713] = {
"Big Money Crab",
"Zandalar",
"enUS",
},
[234900] = {
"Underpin's Adoring Fan",
"Excavation Site 9",
"enUS",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
},
[234901] = {
"Underpin's Well-Connected Friend",
"Excavation Site 9",
"enUS",
},
[157158] = {
"Cultist Slavedriver",
"Horrific Vision of Stormwind",
"enUS",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
},
[234902] = {
"Underpin's Explosive Ally",
"Excavation Site 9",
"enUS",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[137716] = {
"Bottom Feeder",
"The MOTHERLODE!!",
"enUS",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
},
[158690] = {
"Cultist Tormenter",
"Horrific Vision of Stormwind",
"enUS",
},
[242570] = {
"Haymar the Devout",
"Horrific Vision of Stormwind",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[160061] = {
"Crawling Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[158371] = {
"Zardeth of the Black Claw",
"Horrific Vision of Stormwind",
"enUS",
},
[164188] = {
"Horrific Figment",
"Horrific Vision of Stormwind",
"enUS",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[158140] = {
"Frenzied Rat",
"Horrific Vision of Stormwind",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
},
[158774] = {
"Broken Citizen",
"Horrific Vision of Stormwind",
"enUS",
},
[158373] = {
"Roberto Pupellyverbos",
"Horrific Vision of Stormwind",
"enUS",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[158437] = {
"Fallen Taskmaster",
"Horrific Vision of Stormwind",
"enUS",
},
[234204] = {
"Congealed Clot",
"Excavation Site 9",
"enUS",
},
[159266] = {
"Portal Master",
"Horrific Vision of Stormwind",
"enUS",
},
[87320] = {
"Raider's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[158279] = {
"Haywire Clockwork Rocket Bot",
"Horrific Vision of Stormwind",
"enUS",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[152669] = {
"Void Globule",
"Horrific Vision of Stormwind",
"enUS",
},
[213741] = {
"Voidstone Awakened",
"The Rookery",
"enUS",
},
[239437] = {
"Hogger",
"Horrific Vision of Stormwind",
"enUS",
},
[234205] = {
"Corruption Parasite",
"Excavation Site 9",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[151649] = {
"Defense Bot Mk I",
"Operation: Mechagon",
"enUS",
},
[158056] = {
"Rat",
"Horrific Vision of Stormwind",
"enUS",
},
[152988] = {
"Faceless Shadowcaller",
"Horrific Vision of Stormwind",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[234206] = {
"Nightmare Crawler",
"Excavation Site 9",
"enUS",
},
[157812] = {
"Billibub Cogspinner",
"Horrific Vision of Stormwind",
"enUS",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
},
[87317] = {
"Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[220626] = {
"Blood Parasite",
"Nerub-ar Palace",
},
[152987] = {
"Faceless Willbreaker",
"Horrific Vision of Stormwind",
"enUS",
},
[156145] = {
"Burrowing Appendage",
"Horrific Vision of Stormwind",
"enUS",
},
[234207] = {
"Tainted Feaster",
"Excavation Site 9",
"enUS",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[152704] = {
"Crawling Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[87318] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
},
[234208] = {
"Hideous Amalgamation",
"Excavation Site 9",
"enUS",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[242209] = {
"Overgorged Mite",
"Eco-Dome Al'dani",
"enUS",
},
[237651] = {
"Lit Fuse",
"Excavation Site 9",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
},
[236942] = {
"The Underpin",
"Excavation Site 9",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[234209] = {
"Coagulated Mass",
"Excavation Site 9",
"enUS",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
"enUS",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[158315] = {
"Eye of Chaos",
"Horrific Vision of Stormwind",
"enUS",
},
[158092] = {
"Fallen Heartpiercer",
"Horrific Vision of Stormwind",
"enUS",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
},
[158411] = {
"Unstable Servant",
"Horrific Vision of Stormwind",
"enUS",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[234210] = {
"Silent Slitherer",
"Excavation Site 9",
"enUS",
},
[159633] = {
"Cultist Executioner",
"Horrific Vision of Stormwind",
"enUS",
},
[158284] = {
"Craggle Wobbletop",
"Horrific Vision of Stormwind",
"enUS",
},
[158146] = {
"Fallen Riftwalker",
"Horrific Vision of Stormwind",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[156794] = {
"SI:7 Light-Hunter",
"Horrific Vision of Stormwind",
"enUS",
},
[234912] = {
"Ravaging Scavenger",
"Eco-Dome Al'dani",
"enUS",
},
[156949] = {
"Armsmaster Terenson",
"Horrific Vision of Stormwind",
"enUS",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[237252] = {
"Underpin's Friend's Agent",
"Excavation Site 9",
"enUS",
},
[158285] = {
"Tinkered Shieldbot",
"Horrific Vision of Stormwind",
"enUS",
},
[234870] = {
"Invading Mite",
"Eco-Dome Al'dani",
"enUS",
},
},
["indicator_scale"] = 1.200000047683716,
["aura_grow_direction"] = 1,
["focus_color"] = {
0.6274510025978088,
0.988235354423523,
0.4431372880935669,
1,
},
["indicator_anchor"] = {
["y"] = -5,
["x"] = 1,
["side"] = 1,
},
["npc_colors"] = {
[173044] = {
true,
false,
"deeppink",
},
[213954] = {
true,
false,
"orange",
},
[212827] = {
true,
false,
"orange",
},
[136643] = {
true,
false,
"orange",
},
[210812] = {
true,
false,
"deeppink",
},
[166299] = {
true,
false,
"deeppink",
},
[136470] = {
true,
false,
"deeppink",
},
[218671] = {
true,
false,
"deeppink",
},
[128969] = {
true,
false,
"orange",
},
[213893] = {
true,
false,
"deeppink",
},
[216338] = {
true,
false,
"orange",
},
[220815] = {
true,
false,
"deeppink",
},
[213338] = {
true,
false,
"deeppink",
},
[163618] = {
true,
false,
"orange",
},
[231325] = {
true,
false,
"orange",
},
[167111] = {
true,
false,
"deeppink",
},
[136139] = {
true,
false,
"orange",
},
[151649] = {
true,
false,
"orange",
},
[220626] = {
true,
false,
"orange",
},
[166302] = {
true,
false,
"deeppink",
},
[130661] = {
true,
false,
"deeppink",
},
[217531] = {
true,
false,
"deeppink",
},
[223770] = {
true,
false,
"deeppink",
},
[239836] = {
true,
false,
"orange",
},
[230740] = {
true,
false,
"orange",
},
[40167] = {
true,
false,
"deeppink",
},
[231312] = {
true,
false,
"deeppink",
},
[207198] = {
true,
false,
"deeppink",
},
[174210] = {
true,
false,
"deeppink",
},
[212453] = {
true,
false,
"deeppink",
},
[210818] = {
true,
false,
"deeppink",
},
[212739] = {
true,
false,
"orange",
},
[223423] = {
true,
false,
"orange",
},
[221979] = {
true,
false,
"deeppink",
},
[223773] = {
true,
false,
"deeppink",
},
[134232] = {
true,
false,
"deeppink",
},
[211121] = {
true,
false,
"orange",
},
[214439] = {
true,
false,
"deeppink",
},
[164921] = {
true,
false,
"deeppink",
},
[220946] = {
true,
false,
"orange",
},
[166301] = {
true,
false,
"orange",
},
[220599] = {
true,
false,
"deeppink",
},
[229251] = {
true,
false,
"orange",
},
[166275] = {
true,
false,
"deeppink",
},
[163126] = {
true,
false,
"deeppink",
},
[224219] = {
true,
false,
"deeppink",
},
[133430] = {
true,
false,
"orange",
},
[229686] = {
true,
false,
"deeppink",
},
[214350] = {
true,
false,
"deeppink",
},
[223775] = {
true,
false,
"deeppink",
},
[223774] = {
true,
false,
"deeppink",
},
[166276] = {
true,
false,
"orange",
},
[208456] = {
true,
false,
"deeppink",
},
[173016] = {
true,
false,
"deeppink",
},
[206704] = {
true,
false,
"orange",
},
[129367] = {
true,
false,
"deeppink",
},
[130485] = {
true,
false,
"orange",
},
[223776] = {
true,
false,
"deeppink",
},
[221760] = {
true,
false,
"deeppink",
},
[223772] = {
true,
false,
"deeppink",
},
[220141] = {
true,
false,
"deeppink",
},
[224221] = {
true,
false,
"orange",
},
[133432] = {
true,
false,
"deeppink",
},
[219046] = {
true,
false,
"deeppink",
},
[223253] = {
true,
false,
"deeppink",
},
[223777] = {
true,
false,
"deeppink",
},
[207207] = {
true,
false,
"orange",
},
[213741] = {
true,
false,
"orange",
},
[170882] = {
true,
false,
"deeppink",
},
[214697] = {
true,
false,
"orange",
},
[216364] = {
true,
false,
"deeppink",
},
[212793] = {
true,
false,
"deeppink",
},
[209801] = {
true,
false,
"orange",
},
[130435] = {
true,
false,
"orange",
},
[206697] = {
true,
false,
"deeppink",
},
[165919] = {
true,
false,
"deeppink",
},
[212786] = {
true,
false,
"orange",
},
[212412] = {
true,
false,
"deeppink",
},
[210269] = {
true,
false,
"orange",
},
[210539] = {
true,
false,
"orange",
},
[230748] = {
true,
false,
"orange",
},
[214762] = {
true,
false,
"deeppink",
},
[144293] = {
true,
false,
"orange",
},
[229212] = {
true,
false,
"orange",
},
[144071] = {
true,
false,
"deeppink",
},
[224732] = {
true,
false,
"deeppink",
},
[129370] = {
true,
false,
"deeppink",
},
[212826] = {
true,
false,
"orange",
},
[220195] = {
true,
false,
"deeppink",
},
[220196] = {
true,
false,
"deeppink",
},
[144294] = {
true,
false,
"deeppink",
},
[223844] = {
true,
false,
"deeppink",
},
[211228] = {
true,
false,
"deeppink",
},
[224962] = {
true,
false,
"deeppink",
},
},
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.99999994039536,
["extra_icon_show_enrage_border"] = {
0,
0,
0,
},
["aura_padding"] = 3,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
["replaceName"] = false,
["nameplateFlash"] = true,
["colorTick"] = {
1,
1,
1,
1,
},
["colorInterruptSoon"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
["colorInterruptAvailable"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
["colorNoInterrupt"] = {
0.80000007152557,
0.80000007152557,
0.80000007152557,
1,
},
["colorProtected"] = {
1,
0.25098040699959,
0.25098040699959,
1,
},
["colorSecondaryInterrupt"] = {
1,
0.50196081399918,
0.50196081399918,
1,
},
},
["HooksTemp"] = {
},
["UID"] = "0x63cc19ce2df2342d",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend\n\n\n",
["Constructor"] = "function(self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    if not unitFrame.castBar.tick then\n        unitFrame.castBar.tick = unitFrame.castBar:CreateTexture (nil, \"overlay\")\n        unitFrame.castBar.tick:SetDrawLayer (\"overlay\", 4)\n        unitFrame.castBar.tick:SetBlendMode (\"DISABLE\")\n        unitFrame.castBar.tick:SetHeight(unitFrame.castBar:GetHeight())\n    end\n    unitFrame.castBar.tick:SetTexture(Plater.SparkTextures[8])\n    unitFrame.castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n    unitFrame.castBar.tick:SetWidth(2)\n    \n    \n    function envTable.EnhancedCastBar(unitId, castBar)\n        castBar.tick:Hide()\n        \n        if castBar.IsInterrupted then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        \n        if UnitExists(targetUnitId) then\n            local targetName = UnitName(targetUnitId)\n            local spellID = castBar.SpellID\n            if BigWigsAPI then\n                spellName =  BigWigsAPI.GetSpellRename(spellID) or castBar.spellName\n            else\n                spellName = castBar.spellName\n            end\n            local inParty = UnitInParty(\"player\")\n            local inRaid = UnitInRaid(\"player\")\n            castBar.Text:SetText(spellName)\n            \n            -- Cast is targetting a specific unit\n            if targetName then\n                \n                local isTargettingMe\n                local targetNameByColor\n                \n                -- Determine if the cast is targetting the player character\n                if targetName == UnitName(\"player\") then\n                    isTargettingMe = true\n                else\n                    isTargettingMe = false\n                end\n                \n                -- Nameplate flash options\n                if isTargettingMe then\n                    if envTable.optionsNameplateFlash then\n                        \n                        -- Default value of true since it is turned on in the options\n                        local showNameplateFlash = true\n                        \n                        -- Hide flash when not in a group\n                        if envTable.optionsHideFlashSolo then\n                            if not inParty and not inRaid then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Hide flash when player is a tank specialization\n                        if envTable.optionsHideFlashAsTank then\n                            if GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Show nameplate flash if conditions met\n                        if showNameplateFlash then\n                            Plater.FlashNameplateBody (unitFrame)\n                        end\n                    end\n                end\n                \n                \n                -- Target name in cast bar options\n                if envTable.optionsShowTargetName then\n                    \n                    -- Change character name to \"Me\" if turned on in options\n                    if envTable.optionsReplaceMyName then\n                        if isTargettingMe then\n                            targetName = \"Me\"\n                        end\n                    end\n                    \n                    -- Color the target name based on the targets class color\n                    targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                    \n                    -- Shrink the name of the cast bar text if necessary (based on options)\n                    local castBarWidth = castBar:GetWidth()\n                    DetailsFramework:TruncateText (castBar.Text, castBarWidth * (envTable.optionsCastNameSize / 100))\n                    \n                    -- Update the cast bar text\n                    local currentText = castBar.Text:GetText()\n                    if currentText ~= nil and currentText ~= '' then\n                        local castText = currentText .. \" - \" ..  targetNameByColor\n                        \n                        -- Hide self target name when solo\n                        if envTable.optionsHideNameSolo then\n                            if not inParty and not inRaid then\n                                if isTargettingMe then\n                                    castText = currentText\n                                end\n                            end\n                        end\n                        castBar.Text:SetText(castText)\n                        DetailsFramework:TruncateText (castBar.Text, castBarWidth)\n                    end\n                end\n            end\n            \n            \n            -- Interrupt bar color options\n            if envTable.optionsShowInterruptColor then\n                local canInterrupt = castBar.canInterrupt\n                local castEndTime = castBar.spellEndTime\n                local interruptReadyTime = 0\n                local start\n                local duration\n                local playerIsWarlock\n                \n                if envTable.interruptID ~= nil then\n                    local cd = C_Spell.GetSpellCooldown(envTable.interruptID)  --local\n                    start, duration  =  cd.startTime, cd.duration\n                    interruptReadyTime = start + duration\n                end\n                \n                if canInterrupt then\n                    if envTable.interruptID ~= nil then\n                        \n                        -- Is the player a warlock?\n                        if envTable.class == 9 then\n                            playerIsWarlock = true\n                        else\n                            playerIsWarlock = false\n                        end\n                        \n                        -- Check to see if the spell is known/talented\n                        if IsSpellKnown(envTable.interruptID, playerIsWarlock) then\n                            if interruptReadyTime == 0 then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptAvailable)\n                            elseif envTable.optionsShowSecondaryInterrupts and envTable.class == 2 and IsSpellKnown(31935) and not envTable.isSpellOnCooldown_IgnoreGCD(31935) then\n                                -- Paladin Avenger's Shield\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            elseif interruptReadyTime < (castEndTime - 0.25) then\n                                castBar.tick:Show()\n                                castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n                                local tickLocation = (start + duration - castBar.spellStartTime) / castBar.maxValue  -- castBar.spellStartTime + 0.25\n                                if castBar.channeling then\n                                    tickLocation = 1 - tickLocation\n                                end\n                                castBar.tick:SetPoint (\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                                \n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptSoon)\n                            elseif interruptReadyTime >= (castEndTime - 0.25) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                            end\n                        else\n                            Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                        end\n                    end\n                else\n                    Plater.SetCastBarColor(unitFrame, envTable.optionsColorProtected)\n                end\n                \n            end\n            \n        end\n    end\n    \n    \n    -- Checks to see if Felgaurd or Felhunter interrupt skill is known and assigns if found\n    function envTable.GetWarlockInterrupt()\n        if IsSpellKnown(89766, true) then\n            -- Felguard: Axe Toss\n            return 89766\n        elseif IsSpellKnown(19647, true) then\n            -- Felhunter: Spell Lock\n            return 19647\n        elseif C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnown(132409, true) then\n            -- Check for Grimoire of Sacrifice\n            return 132409\n        else\n            -- Otherwise no interrupt available    \n            return nil\n        end\n    end\n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    function envTable.isSpellOnCooldown_IgnoreGCD(spellID)\n        local GCD=C_Spell.GetSpellCooldown(61304) -- GCD\n        local gcdSTART, gcdDUR = GCD.startTime, GCD.duration\n        local GCD_expirationTime = gcdSTART + gcdDUR\n        local info = C_Spell.GetSpellCooldown(spellID)\n        local spellStart, spellDuration  = info.startTime, info.duration\n        local spellReadyTime = spellStart + spellDuration\n        if spellReadyTime <= GCD_expirationTime then\n            return false\n        else\n            return true\n        end\n    end\n    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Get players current talent specialization\n    envTable.spec = GetSpecialization()\n    \n    -- Flashing nameplate options\n    envTable.optionsHideFlashSolo = modTable.config.hideNameplateFlashSolo\n    envTable.optionsNameplateFlash = modTable.config.nameplateFlash\n    envTable.optionsHideFlashAsTank = modTable.config.hideFlashAsTank\n    \n    -- Target name options\n    envTable.optionsShowTargetName = modTable.config.showTargetName\n    envTable.optionsReplaceMyName = modTable.config.replaceName\n    envTable.optionsHideNameSolo = modTable.config.hideNameSolo\n    envTable.optionsCastNameSize = modTable.config.castNameSize\n    \n    -- Cast bar interrupt coloring\n    envTable.optionsShowInterruptColor = modTable.config.showInterruptColor\n    envTable.optionsShowSecondaryInterrupts = modTable.config.showSecondaryInterrupts\n    envTable.optionsColorNoInterrupt = modTable.config[\"colorNoInterrupt\"]\n    envTable.optionsColorInterruptAvailable = modTable.config[\"colorInterruptAvailable\"]\n    envTable.optionsColorInterruptSoon = modTable.config[\"colorInterruptSoon\"]\n    envTable.optionsColorSecondaryAvailable = modTable.config[\"colorSecondaryInterrupt\"]\n    envTable.optionsColorProtected = modTable.config[\"colorProtected\"]\n    envTable.optionsColorTick = modTable.config[\"colorTick\"]\n    \n    -- Get the primary interrupt ID of the players current class/spec.\n    -- All non-warlock classes have straight forward primary interrupt skills.\n    if envTable.class ~= 9 then\n        envTable.interruptID = modTable.primaryInterrupts[envTable.class][envTable.spec]\n    else\n        -- Warlock interrupt changes based on pet being used.\n        envTable.interruptID = envTable.GetWarlockInterrupt()\n    end\n    \n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend",
["Initialization"] = "function (modTable)\n    -- List of primary interupt skills used by each spec and class\n    -- Does not track secondary interrupt skills (such as Avenger's shield, etc)\n    modTable.primaryInterrupts =\n    {\n        \n        -- Warrior\n        [1] =\n        {\n            [1] = 6552, -- Pummel (Arms)\n            [2] = 6552, -- Pummel (Fury)\n            [3] = 6552 --  Pummel (Protection)\n        },\n        \n        -- Paladin\n        [2] =\n        {\n            [1] = 96231, -- Rebuke (Holy)\n            [2] = 96231, -- Rebuke (Protection)\n            [3] = 96231 -- Rebuke (Retribution)\n        },\n        \n        -- Hunter\n        [3] =\n        {\n            [1] = 147362, -- Counter Shot (Beast Mastery)\n            [2] = 147362, -- Counter Shot (Marksmanship)\n            [3] = 187707 -- Muzzle (Survival)\n        },\n        \n        -- Rogue\n        [4] =\n        {\n            [1] = 1766, -- Kick (Assassination)\n            [2] = 1766, -- Kick (Outlaw)\n            [3] = 1766 -- Kick (Subtlety)\n        },\n        \n        -- Priest\n        [5] =\n        {\n            [1] = nil,\n            [2] = nil,\n            [3] = 15487 -- Silence (Shadow)\n        },\n        \n        -- Death Knight\n        [6] =\n        {\n            [1] = 47528, -- Mind Freeze (Blood)\n            [2] = 47528, -- Mind Freeze (Frost)\n            [3] = 47528 -- Mind Freeze (Unholy)\n        },\n        \n        -- Shaman\n        [7] =\n        {\n            [1] = 57994, -- Wind Shear (Elemental)\n            [2] = 57994, -- Wind Shear (Enhancement)\n            [3] = 57994 -- Wind Shear (Restoration)\n        },\n        \n        -- Mage\n        [8] =\n        {\n            [1] = 2139, -- Counterspell (Arcane)\n            [2] = 2139, -- Counterspell (Fire)\n            [3] = 2139 -- Counterspell (Frost)\n        },\n        \n        -- [9] Warlock interrupt depends on pet being used.\n        --  Code for warlock contained in Cast Start hook.\n        \n        -- Monk\n        [10] =\n        {\n            [1] = 116705, -- Spear Hand Strike (Brewmaster)\n            [2] = 116705, -- Spear Hand Strike (Mistweaver)\n            [3] = 116705 -- Spear Hand Strike (Windwalker)\n        },\n        \n        -- Druid\n        [11] =\n        {\n            [1] = 78675, -- Solar Beam (Balance)\n            [2] = 106839, -- Skull Bash (Feral)\n            [3] = 106839, -- Skull Bash (Guardian)\n            [4] = 106839 -- Skull Bash (Restoration)\n        },\n        \n        -- Demon Hunter\n        [12] =\n        {\n            [1] = 183752, -- Disrupt (Havoc)\n            [2] = 183752 -- Disrupt (Vengeance)\n        },\n        \n        -- Evoker\n        [13] =\n        {\n            [1] = 351338, -- Quell (Devastation)\n            [2] = 351338 -- Quell (Preservation)\n        }\n    }\n    \nend\n\n\n",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\nend",
},
["Time"] = 1753401350,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/L6ZlsbPEC/9",
["Icon"] = 429383,
["Enabled"] = true,
["Revision"] = 1349,
["semver"] = "1.2.3",
["Author"] = "Nimeshady-Zul'jin",
["Desc"] = "Shows who a cast is targeting in the cast bar as well as other configurable options.",
["Prio"] = 99,
["version"] = 9,
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Name"] = "CUSTOM CAST BAR COLORS",
["Value"] = "Feature - Custom cast bar coloring:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable custom colored enemy cast bars.",
["Value"] = true,
["Key"] = "showInterruptColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting the cast bar will change to the colors below based on the status of you being able to interrupt the cast.",
},
{
["Type"] = 4,
["Name"] = "Enable support for secondary interrupts: Avenger's Shield (Paladin), Spell Reflection (Warrior).",
["Value"] = true,
["Key"] = "showSecondaryInterrupts",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colors casts that can be reflected with Spell Reflection (Warrior) and interrupted with Avenger's Shield (Paladin).",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is available.",
["Value"] = {
0.10980392992496,
0.63921570777893,
0.1843137294054,
1,
},
["Key"] = "colorInterruptAvailable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is down but will be available before cast finishes.",
["Value"] = {
0.63921570777893,
0.61568629741669,
0.10980392992496,
1,
},
["Key"] = "colorInterruptSoon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt on cooldown but it will be available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is unavailable.",
["Value"] = {
0.61960786581039,
0.16862745583057,
0.28627452254295,
1,
},
["Key"] = "colorNoInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you do not have an interrupt available to interrupt the current cast",
},
{
["Type"] = 1,
["Name"] = "Color for secondary interrupts. (Avenger's Shield and Spell Reflection)",
["Value"] = {
0.10980392992496,
0.52156865596771,
0.63921570777893,
1,
},
["Key"] = "colorSecondaryInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast targeting you can be reflected with Spell Reflection or interrupted with Avenger's Shield. Only active when playing the appropriate class with the skill off cooldown.",
},
{
["Type"] = 1,
["Name"] = "Color for casts that are protected/un-interruptable.",
["Value"] = {
0.22352942824364,
0.22352942824364,
0.22352942824364,
1,
},
["Key"] = "colorProtected",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast can not be interrupted by a standard interrupt.",
},
{
["Type"] = 1,
["Name"] = "Color of interrupt available tick. (Hover for more info)",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Key"] = "colorTick",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "When your interrupt is currently down but will become available before the current cast completes a tick will appear in the cast bar showing you the exact position in the cast you will be able to interrupt the cast. You can customize the color of the tick using this setting.  YOU MUST /RELOAD YOUR UI AFTER CHANGING THIS COLOR.",
},
{
["Type"] = 5,
["Name"] = "Settings Target Name",
["Value"] = "Feature - Show name of target in the cast bar:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show the name of cast targets in the cast bar.",
["Value"] = true,
["Key"] = "showTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting a spell at a target, the targets name will appear in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Hide my name when not in a party.",
["Value"] = true,
["Key"] = "hideNameSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When you are not in a party or raid group casts targetting you will not display your name in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Show \"Me\" instead of my character name.",
["Value"] = true,
["Key"] = "replaceName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When targetted by casts, instead of showing your character name it will show \"Me\".",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "The relative size (in percentage) that a spell name will take up of the cast bar, not including the target name. Adjust this so that target names fit into the cast bar correctly based on the width and text size of your cast bar. If you find even after adjusting this setting that there is not enough space try decreasing your cast bar text size or making the cast bar wider.",
["Min"] = 30,
["Name"] = "Maximum length of a cast name in %. Hover for more info.",
["Value"] = 60,
["Key"] = "castNameSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 5,
["Name"] = "Settings Border Flash",
["Value"] = "Feature - Flash nameplates when a spell targets you:",
["Key"] = "option8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Namplate Flash",
},
{
["Type"] = 4,
["Name"] = "Flash the nameplates of enemies that are casting a spell or ability targeting me.",
["Value"] = false,
["Key"] = "nameplateFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is targetting you with a cast, this option will flash the nameplate of that enemy to indicate that cast is targeting you.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when not in a party.",
["Value"] = true,
["Key"] = "hideNameplateFlashSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing solo.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when I'm playing a tank specialization.",
["Value"] = true,
["Key"] = "hideFlashAsTank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing as a tank specialization.",
},
},
["Name"] = "Enhanced Enemy Castbar",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --ensure reload updates existing\n    modTable.updateExisting(unitFrame)\nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    \n    -- settings:\n    local formatAuraTimers = modTable.config.formatAuraTimers\n    local formatBuffSpecialTimers = modTable.config.formatBuffSpecialTimers\n    \n    \n    -- time formatting function: (can be adjusted)\n    Plater.FormatTimeNew = function (s)\n        if s < 5 then\n            return (\"%.1f\"):format(s)\n        elseif s < 60 then\n            return (\"%d\"):format(s)\n        elseif s < 3600 then\n            return (\"%d:%02d\"):format(s/60%60, s%60)\n        elseif s < 86400 then\n            return (\"%dh %02dm\"):format(s/(3600), s/60%60)\n        else\n            return (\"%dd %02dh\"):format(s/86400, (s /3600) - (floor(s/86400) * 24))\n        end\n    end\n    Plater.FormatTimeOrig = Plater.FormatTimeOrig or Plater.FormatTime\n    \n    local DF = _G[\"DetailsFramework\"]\n    local IconRowFunctions = DF.IconRowFunctions or DF.IconMixin\n    IconRowFunctions.FormatCooldownTimeOrig = IconRowFunctions.FormatCooldownTimeOrig or IconRowFunctions.FormatCooldownTime\n    \n    \n    -- exchange formatting:\n    function modTable.hookTimeFormat()\n        if formatAuraTimers then\n            Plater.FormatTime = Plater.FormatTimeNew\n        else\n            Plater.FormatTime = Plater.FormatTimeOrig\n        end\n        \n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                IconRowFunctions.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n        else\n            -- no buff special\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            end\n        end\n    end\n    \n    function modTable.updateExisting(unitFrame)\n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        else\n            \n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeOrig (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        end\n        \n    end\n    \n    \n    modTable.hookTimeFormat()\n    for _, plateFrame in ipairs (Plater.GetAllShownPlates()) do\n        modTable.updateExisting(plateFrame.unitFrame)\n    end\n    \nend",
["Player Logon"] = "function(modTable)\n    modTable.hookTimeFormat()\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1753401349,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/mULsbUUxJ/13",
["Icon"] = "INTERFACE\\ICONS\\Ability_BossMagistrix_TimeWarp2",
["Enabled"] = true,
["Revision"] = 251,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Overwrites the Plater time formatting to show second fractions.",
["Prio"] = 99,
["version"] = 13,
["PlaterCore"] = 1,
["Name"] = "Detailed Time Format",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Name"] = "Format Aura Timers",
["Value"] = true,
["Key"] = "formatAuraTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Format Buff Special Timers",
["Value"] = true,
["Key"] = "formatBuffSpecialTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"#FF4040\",\n        okay = \"#FFFFFF\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 5.0,\n    }\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsVisible()) then\n                if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n                end \n            end\n            \n        end\n    end\n    \n    \n    for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        if auraIcon:IsShown() then\n            if (auraIcon:IsVisible()) then\n                local remainingTime = (auraIcon.startTime + auraIcon.duration - GetTime())\n                if (remainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.okay)\n                end\n            end\n        end\n    end\n    \nend\n\n\n",
},
["Time"] = 1753401351,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/CjOSTakvH/1",
["Icon"] = "Interface\\Timer\\Challenges-Logo",
["Enabled"] = true,
["Revision"] = 125,
["semver"] = "1.0.0",
["Author"] = "Ditador-Azralon",
["Desc"] = "Change the color of the aura timer by it's time left",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Paint Aura Timers",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = .5 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Time"] = 1741738545,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 134400,
["Enabled"] = true,
["Revision"] = 202,
["semver"] = "",
["Author"] = "????????-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Debuff Border",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["TargetBorderSize"] = 1.5,
["SpellIconXOffset"] = 0,
["ReplaceDefaultBorder"] = false,
["showBigIcon"] = false,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Destructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar.border then unitFrame.healthBar.border:Hide() end\n    if unitFrame.healthBar.targetBorder then unitFrame.healthBar.targetBorder:Hide() end\n    if unitFrame.castBar.border then unitFrame.castBar.border:Hide() end\n    if unitFrame.castBar.Icon then unitFrame.castBar.Icon:Hide() end\n    if unitFrame.castBar.IconBorder then unitFrame.castBar.IconBorder:Hide() end\n    if unitFrame.castBar.BorderShield then unitFrame.castBar.BorderShield:Hide() end\nend",
["Initialization"] = "function (modTable)\n    \n    function modTable.UpdateIconPosition(unitFrame, envTable, modTable)\n        local castBar = unitFrame.castBar\n        local icon = unitFrame.castBar.Icon\n        local shield = unitFrame.castBar.BorderShield\n        icon:Hide()\n        castBar.IconBorder:Hide()\n        if (modTable.config.ShowSpellIcon) then\n            icon:ClearAllPoints()\n            if (modTable.config.showBigIcon) then\n                icon:SetPoint(\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetPoint(\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            else\n                icon:SetPoint(\"topright\", unitFrame.castBar, \"topleft\", modTable.config.SpellIconXOffset, envTable.IconSizeOffset)\n                icon:SetPoint(\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            end\n            icon:Show()\n            if modTable.config.SpellIconBorder then\n                castBar.IconBorder:SetVertexColor(\n                    DetailsFramework:ParseColors(modTable.config.SpellIconBorderColor)\n                )\n                castBar.IconBorder:SetBorderSizes(\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize\n                )\n                castBar.IconBorder:UpdateSizes()\n                castBar.IconBorder:Show()\n            end\n        end\n        \n        if modTable.config.CastBarBorder then\n            castBar.border:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.CastBarBorderColor)\n            )\n            castBar.border:SetBorderSizes(\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize\n            )\n            castBar.border:UpdateSizes()\n            castBar.border:Show()\n        else\n            castBar.border:Hide()\n        end\n        \n        if (modTable.config.ShowShieldIcon and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            shield:SetSize(modTable.config.ShieldIconWidth, modTable.config.ShieldIconHeight)\n            shield:ClearAllPoints()\n            shield:SetPoint( \"center\", castBar, \"left\", modTable.config.ShieldIconXOffset, modTable.config.ShieldIconYOffset )\n        else\n            shield:Hide()\n        end\n    end\n    \n    function modTable.UpdateBorder(unitFrame, envTable, modTable, casting)\n        local healthBar = unitFrame.healthBar\n        local castBar = unitFrame.castBar\n        local targetBorder = unitFrame.healthBar.targetBorder\n        local defaultBorder = unitFrame.healthBar.border\n        \n        targetBorder:Hide()\n        defaultBorder:Hide()\n        \n        if modTable.config.ReplaceDefaultBorder then\n            targetBorder = unitFrame.healthBar.border\n            targetBorder:SetFrameStrata(\"HIGH\")\n            targetBorder:Show()\n        else\n            unitFrame.healthBar.border:Show()\n            if unitFrame.IsTarget then\n                targetBorder:Show()\n            end\n        end\n        \n        if casting==true then\n            if modTable.config.ShowSpellIcon then\n                targetBorder:ClearAllPoints()\n                if modTable.config.ExpandTargetBorder then\n                    if modTable.config.showBigIcon then\n                        targetBorder:SetPoint(\"topleft\", castBar.Icon, \"topleft\", 0, 0)\n                    else\n                        targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                    end\n                else\n                    targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                end\n                if modTable.config.ExpandTargetBorder then\n                    targetBorder:SetPoint(\"bottomright\", castBar, \"bottomright\", 0, 0)\n                else\n                    targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0)\n                end\n            else\n                targetBorder:ClearAllPoints()\n                targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0)\n            end\n            \n        elseif casting==false then\n            targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n            targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0) \n        end\n        \n        if unitFrame.IsTarget then\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.TargetBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize\n            )\n            targetBorder:UpdateSizes()\n        else\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(envTable.DefaultBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize\n            )\n            targetBorder:UpdateSizes()\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    modTable.UpdateBorder (unitFrame, envTable, modTable, true)\nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- Any settings changed here will require you to disable this plater mod,\n    -- then re-enable it by checking the box in the list on the left hand side of the window\n    \n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 0\n    \n    -- Settings for the shield for non interruptible casts\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    \n    envTable.DefaultBorderSize  = Plater.db.profile.border_thickness\n    envTable.DefaultBorderColor = Plater.db.profile.border_color\n    \n    -- Create a new health bar target border\n    if not unitFrame.healthBar.targetBorder then\n        unitFrame.healthBar.targetBorder = CreateFrame(\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.healthBar.targetBorder:Hide()\n    end\n    \n    -- Create a frame for the spell icon border\n    if not unitFrame.castBar.IconOverlayFrame then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.IconBorder:SetIgnoreParentScale(false)\n    end\n    \n    -- Create a frame for the cast bar border\n    if not unitFrame.castBar.border then\n        unitFrame.castBar.border = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.border:SetIgnoreParentScale(false)\n    end\n    \n    -- Hook into when the cast bar hides so we can update the border with casting set to false\n    -- Note: This hook needs to be the last thing in the constructor as it may immediately call\n    -- UpdateBorder and we need to make sure all of the frames are created first\n    if not unitFrame.castBar.borderChangeHooked then\n        hooksecurefunc(\n            unitFrame.castBar, \n            \"Hide\",\n            function()\n                modTable.UpdateBorder(unitFrame, envTable, modTable, false)\n            end\n        )\n        unitFrame.castBar.borderChangeHooked = true\n    end\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    self.ThrottleUpdate = -1\nend\n\n\n\n\n\n\n",
},
["Time"] = 1754339130,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 1651,
["semver"] = "",
["Author"] = "Vahra-Tichondrius",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate and extend the border around icon and cast bar.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Target Border",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Border Settings",
["Value"] = "Border Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Target Border Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "TargetBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of the targeted nameplate",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Target Border Size",
["Value"] = 1,
["Key"] = "TargetBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 4,
["Name"] = "Expand Target Border",
["Value"] = true,
["Key"] = "ExpandTargetBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Expands the target border around the cast icon and cast bar",
},
{
["Type"] = 4,
["Name"] = "Replace Default Border (/reload)",
["Value"] = true,
["Key"] = "ReplaceDefaultBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Replace the default border instead of creating a new one. You may have to /reload when changing this option",
},
{
["Type"] = 5,
["Name"] = "Cast Bar Settings",
["Value"] = "Cast Bar Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "Note, to get this to look right you may have",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "to update the Y offset of the cast bar",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "under Plater's \"Enemy Npc\" settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Border",
["Value"] = true,
["Key"] = "CastBarBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show a border around the enemy cast bar",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the enemy cast bar",
["Min"] = 0,
["Name"] = "Cast Bar Border Size",
["Value"] = 0.5,
["Key"] = "CastBarBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Cast Bar Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "CastBarBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of enemy cast bar",
},
{
["Type"] = 5,
["Name"] = "Cast Icon Settings",
["Value"] = "Cast Icon Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Spell Icon",
["Value"] = true,
["Key"] = "ShowSpellIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show the spell icon of the targets cast",
},
{
["Type"] = 4,
["Name"] = "Show Big Icon",
["Value"] = false,
["Key"] = "showBigIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Spell Icon Border",
["Value"] = true,
["Key"] = "SpellIconBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should Show a border around the spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Spell Icon Border Size",
["Value"] = 0.5,
["Key"] = "SpellIconBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Spell Icon Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "SpellIconBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of target's spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X Offset of the Spell Icon",
["Min"] = -10,
["Name"] = "Spell Icon X Offset",
["Value"] = 0.5,
["Key"] = "SpellIconXOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 5,
["Name"] = "Shield Icon Settings",
["Value"] = "Shield Icon Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Shield Icon",
["Value"] = false,
["Key"] = "ShowShieldIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show a shield icon next to the cast bar for uninterruptable spells",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon X Offset",
["Value"] = -4.5,
["Key"] = "ShieldIconXOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The Y offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon Y Offset",
["Value"] = 0,
["Key"] = "ShieldIconYOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The width of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Width",
["Value"] = 8,
["Key"] = "ShieldIconWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The height of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Height",
["Value"] = 8,
["Key"] = "ShieldIconHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
{
["OptionsValues"] = {
["colour_names"] = false,
["show_elite"] = false,
["show_elite_text"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Initialization"] = "function(modTable)\n    \n    -- used for nameColouring\n    -- AARRGGBB\n    local markerToHex = {\n        [1] = \"FFEAEA0D\", -- Yellow 5 Point Star\n        [2] = \"FFEAB10D\", -- Orange Circle\n        [3] = \"FFCD00FF\", -- Purple Diamond\n        [4] = \"FF06D425\", -- Green Triangle\n        [5] = \"FFB3E3D8\", -- Light Blue Moon\n        [6] = \"FF0CD2EA\", -- Blue Square\n        [7] = \"FFD6210B\", -- Red Cross\n        [8] = \"FFFFFFFF\", -- White Skull\n    }\n    \n    local eliteToHex = {\n        [1] = \"FFFFCC00\", -- Elite\n        [2] = \"FFCCCCCC\", -- Rare\n        [3] = \"FFFF8040\", -- Rare Elite\n    }\n    \n    -- Makes it so you take their first name e.g Jessie Howlis -> Jessie\n    local nameBlacklist = {\n        [\"the\"] = true,\n        [\"of\"] = true,\n        [\"Tentacle\"] = true,\n        [\"Apprentice\"] = true,\n        [\"Denizen\"] = true,\n        [\"Emissary\"] = true,\n        [\"Howlis\"] = true,\n        [\"Terror\"] = true,\n        [\"Totem\"] = true,\n        [\"Waycrest\"] = true,\n        [\"Aspect\"] = true\n    }\n    \n    \n    -- @unitId  unitID for mob e.g nameplate1\n    function modTable.renamer(unitFrame, unitId)\n        \n        if not (unitId and unitFrame) then\n            return\n        end\n        \n        local name = unitFrame.namePlateUnitName or UnitName(unitId) or \"\"\n        \n        -- 1) shorten\n        if modTable.config[\"short_names\"] and not unitFrame.unitName.isRenamed then\n            local unitName\n            local a, b, c, d, e, f = strsplit(' ', name, 5)\n            if nameBlacklist[b] then\n                unitName = a or b or c or d or e or f\n            else\n                unitName = f or e or d or c or b or a\n            end\n            name = unitName or name\n        end -- if short_names\n        \n        \n        -- 2) Coloring\n        if modTable.config[\"colour_names\"] then\n            local marker = GetRaidTargetIndex(unitId)\n            if marker then\n                local color = markerToHex[marker or 8]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        -- 3) Rare / Elite Addition\n        if modTable.config[\"show_elite\"] then\n            local eliteType = UnitClassification(unitId)\n            if eliteType == \"elite\" then\n                local color = eliteToHex[1]\n                name = WrapTextInColorCode(name, color)\n            elseif eliteType == \"rare\" then\n                local color = eliteToHex[2]\n                name = WrapTextInColorCode(name, color)\n            elseif eliteType == \"rareelite\" then\n                local color = eliteToHex[3]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        if modTable.config[\"show_elite_text\"] then\n            local eliteType = UnitClassification(unitId)\n            if eliteType == \"elite\" and not IsInRaid() then\n                name = name .. \" [E]\"\n            elseif eliteType == \"rare\" and not IsInRaid() then\n                name = name .. \" [R]\"\n            elseif eliteType == \"rareelite\" and not IsInRaid() then\n                name = name .. \" [RE]\"\n            end\n        end\n        \n        -- 4) Apply\n        unitFrame.healthBar.unitName:SetText(name)\n    end -- envTable.namer\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend\n\n\n\n",
},
["Time"] = 1753401491,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 385,
["semver"] = "",
["Author"] = "Rhk-Tarren Mill",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Name Shortener",
["LastHookEdited"] = "Initialization",
["Options"] = {
{
["Type"] = 4,
["Name"] = "Shorten Names",
["Value"] = true,
["Key"] = "short_names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Shortens NPC Names. eg.: \"Murkbrine Fishmancer\" -> \"Fishmancer\"",
},
{
["Type"] = 4,
["Name"] = "Colour by Raidmark",
["Value"] = true,
["Key"] = "colour_names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colours the Name by the assigned Raidmark. eg.: Triangle --> Green Name",
},
{
["Type"] = 4,
["Name"] = "Colour by Unit Status",
["Value"] = true,
["Key"] = "show_elite",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "show_elite_text",
["Value"] = true,
["Name"] = "Concatenate Name with Unit Status",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function(self, unitId, unitFrame, envTable)\n    unitFrame.castBar.ScheduleToHide = function(self) self:Hide() end\nend",
},
["Time"] = 1753401352,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 97,
["semver"] = "",
["Author"] = "Avade-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Hide Interrupted",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["raidMarkerXOff"] = 1,
["unitNameXOffRaidMarker"] = 3,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.updatePosition = function(unitFrame)\n        local unitNameXOff = modTable.config.unitNameXOff -- Unit Name X Offset\n        local unitNameXOffRaidMarker = modTable.config.unitNameXOffRaidMarker -- Unit Name X Offset with Raid Marker\n        local raidMarkerXOff = modTable.config.raidMarkerXOff\n        local hasRaidTarget = unitFrame.PlaterRaidTargetFrame.RaidTargetIcon:IsShown() and unitFrame.PlaterRaidTargetFrame\n        if hasRaidTarget then\n            unitFrame.PlaterRaidTargetFrame:ClearAllPoints()\n            unitFrame.PlaterRaidTargetFrame:SetPoint(\"LEFT\", unitFrame.healthBar, \"LEFT\", raidMarkerXOff, 0)\n            unitFrame.PlaterRaidTargetFrame:SetSize(18, 18)\n            unitFrame.unitName:SetPoint(\"LEFT\", unitFrame.PlaterRaidTargetFrame, \"RIGHT\", unitNameXOffRaidMarker, 0)\n        else\n            unitFrame.unitName:ClearAllPoints()\n            unitFrame.unitName:SetPoint(\"LEFT\", unitFrame.healthBar, \"LEFT\", unitNameXOff, 0)\n        end\n    end\nend",
["Raid Target"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
},
["Time"] = 1754339088,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
["raid"] = true,
["none"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 458724,
["Enabled"] = true,
["Revision"] = 1176,
["semver"] = "",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "Aligns Raid Marker to the Left of the Unit Name.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Target Marker",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset without Raid Marker",
["Min"] = -99,
["Name"] = "Unit Name (No Raid Marker)",
["Value"] = 1,
["Key"] = "unitNameXOff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset with Raid Marker",
["Min"] = -99,
["Name"] = "Unit Name (Raid Marker)",
["Value"] = 3,
["Key"] = "unitNameXOffRaidMarker",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset for Raid Marker",
["Min"] = -99,
["Name"] = "Raid Marker",
["Value"] = 1,
["Key"] = "raidMarkerXOff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
{
["OptionsValues"] = {
["oneColor"] = {
0,
1,
0.01176470704376698,
1,
},
["twoColor"] = {
0,
0.501960813999176,
1,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x6490c26f17d91913",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.SetNameplateColors(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    --IDs of dots, you can change them to easier adjust to different classes, change only numbers\n    modTable.doubleDebuffs = {\n        {34914, 335467}, --Vampiric Touch + Devouring Plague\n        {188389, 334168}, --Flame Shock + Lashing Flames\n        {164815, 164812}, --Sunfire + Moonfire\n        {703, 1943}, --Garrote + Rupture\n        {980, 146739}, --Agony + Corruption\n        {980, 445474}, --Agony + Wither\n    }\n    \n    modTable.singleDebuffs = {\n        34914, --Vampiric Touch\n        589,--Shadow Word: Pain\n        20421, --Purge the Wicked\n        188389, --Flame Shock\n        157736, --Immolate\n        217200, --Barbed Shot\n        228287, --Mark of the Crane\n        445474, --Wither\n        164815, --Sunfire\n        164812, --Moonfire\n        155722, --Rake\n        980, --Agony\n        146739, --Corruption\n        460553, --Doom\n    }\n    \n    modTable.rOption = modTable.config.resetOption\n    \n    modTable.matchMultipleBuffs = {}\n    \n    for _, v in ipairs (modTable.doubleDebuffs) do\n        local buff = {\n            auras = v,\n            nameplateColor = modTable.config.twoColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\n    \n    for _, v in ipairs (modTable.singleDebuffs) do\n        local buff = {\n            auras = {v},\n            nameplateColor = modTable.config.oneColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\nend\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(modTable.matchMultipleBuffs) do      \n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, v.nameplateColor)\n                \n                return\n            else\n                -- reset colour\n                if (modTable.rOption) then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, 1,1,1, 1)\n                end\n                \n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors(unitFrame)\n        local colored = envTable.matchMultiple(unitFrame)\n    end\n    \nend",
},
["Time"] = 1753401349,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/-OwVE8C1v/1",
["Enabled"] = true,
["Revision"] = 1541,
["semver"] = "1.0.0",
["Author"] = "Megabelly-Silvermoon",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Debuff Name Color Change",
["PlaterCore"] = 1,
["version"] = 1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 5,
["Key"] = "label1",
["Value"] = "Settings:",
["Name"] = "Settings:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "oneColor",
["Value"] = {
1,
0.50196081399918,
0,
1,
},
["Name"] = "One Debuff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with 1 debuff",
},
{
["Type"] = 1,
["Key"] = "twoColor",
["Value"] = {
0.13333334028721,
0.54509806632996,
0.13333334028721,
1,
},
["Name"] = "Two Debuffs",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with a set of 2 debuffs",
},
{
["Type"] = 5,
["Key"] = "label4",
["Value"] = "Miscellaneous:",
["Name"] = "Miscellaneous:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetOption",
["Value"] = true,
["Name"] = "Reset colour after expire",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Resets colour after debuf expires. Toggling on will prevent sometimes lingering colour on nameplates/borders. Toggling off makes mod compatible with other nameplate colouring mods.",
},
},
},
},
["auras_per_row_auto"] = false,
["cast_statusbar_fadeout_time"] = 0.49999997019768,
["aura_stack_size"] = 12,
["extra_icon_caster_outline"] = "OUTLINE",
["auras_per_row_amount2"] = 5,
["disable_omnicc_on_auras"] = true,
["aura_height2"] = 26,
["bossmod_support_enabled"] = false,
["ghost_auras"] = {
["enabled"] = true,
["auras"] = {
["WARLOCK"] = {
{
[980] = true,
[172] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
["height"] = 28,
["width"] = 28,
},
["blizzard_nameplate_large_font_size"] = 12,
["cast_colors"] = {
[420907] = {
false,
"white",
"",
},
},
["range_check_enabled"] = false,
["aura_border_colors"] = {
["enrage"] = {
0,
0,
0,
},
["steal_or_purge"] = {
nil,
0,
0,
},
["crowdcontrol"] = {
0,
0,
0,
},
["offensive"] = {
nil,
0,
0,
},
["is_show_all"] = {
0,
0,
0,
},
["defensive"] = {
0,
0,
0,
},
["is_buff"] = {
nil,
0,
0,
},
},
["quick_hide"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Shining Green [P]"] = 3,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Heroic Leap [P]"] = 3,
["Unit - Show Energy"] = 11,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - Very Important"] = 15,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Cast - Quick Flash"] = 2,
["Cast - On Going Cast [P]"] = 2,
["Add - Explode on Die [P]"] = 1,
["Cast - Shield Interrupt"] = 2,
["Cast - AoE Hit All [P]"] = 3,
["Cast - Voidzone [P]"] = 2,
["Cast - AoE With Range [P]"] = 2,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Stop Casting"] = 4,
["Cast - Heal Cut [P]"] = 3,
["Cast - Glowing [P]"] = 10,
["Spiteful Affix"] = 3,
["Add - Warning [P]"] = 5,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Alert + Timer [P]"] = 4,
["Auto Set Skull"] = 11,
["Countdown"] = 12,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Fixate"] = 11,
["Aura - Is Cast Bar [P]"] = 1,
["Cast - Circular Swipe"] = 4,
["Cast - Castbar is Timer [P]"] = 2,
["Fixate On You"] = 12,
},
["target_highlight_color"] = {
1,
1,
},
["cast_statusbar_color_channeling"] = {
nil,
nil,
nil,
1,
},
["extra_icon_anchor"] = {
["x"] = -14,
},
["extra_icon_wide_icon"] = false,
["cast_statusbar_spark_hideoninterrupt"] = false,
["extra_icon_stack_outline"] = "OUTLINE",
["range_check_alpha"] = 0.5,
["castbar_target_font"] = "Friz Quadrata TT",
["semver"] = "1.0.10",
["bossmod_aura_glow_expiring"] = true,
["aura_frame2_anchor"] = {
["y"] = 3,
["side"] = 1,
},
["use_name_translit"] = true,
["cast_statusbar_texture"] = "Atrocity",
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark8",
["indicator_faction"] = false,
["extra_icon_height"] = 34,
["aura_x_offset"] = 0,
["range_check_alpha_friendlies"] = 0.5,
["transparency_behavior"] = 2,
["spell_animations"] = false,
["ui_parent_scale_tune"] = 1,
["debuff_show_cc_border"] = {
0,
0,
0,
},
["aura_consolidate"] = true,
["health_statusbar_bgtexture"] = "Atrocity",
["ui_parent_target_strata"] = "BACKGROUND",
["extra_icon_width"] = 34,
["aura_show_enrage"] = true,
["health_statusbar_texture"] = "Atrocity",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Aura Reorder"] = 3,
["Cast Bar Icon Config"] = 2,
["Execute Range"] = 1,
["Extra Border"] = 2,
["Hide Neutral Units"] = 1,
["Target Color"] = 3,
["Attacking Specific Unit"] = 2,
["Combo Points"] = 6,
},
["cast_statusbar_color"] = {
0.8549020290374756,
0.7725490927696228,
0.3607843220233917,
1,
},
["update_throttle"] = 0.5,
["minor_width_scale"] = 0.99999994039536,
["cast_statusbar_interrupt_anim"] = false,
["indicator_pet"] = false,
["extra_icon_show_defensive_border"] = {
0,
0,
0,
},
["aura_frame1_anchor"] = {
["y"] = 3,
["side"] = 7,
},
["tocversion"] = 110107,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["indicator_rare"] = false,
["extra_icon_timer_font"] = "Friz Quadrata TT",
["not_affecting_combat_alpha"] = 1,
["cast_statusbar_bgcolor"] = {
0.13333334028721,
0.13333334028721,
0.13333334028721,
1,
},
["cast_statusbar_color_finished"] = {
0.3921568989753723,
0.9960784912109375,
0.6392157077789307,
},
["extra_icon_stack_font"] = "Friz Quadrata TT",
["indicator_elite"] = false,
["aura_height"] = 26,
["non_targeted_alpha_enabled"] = true,
["castbar_target_text_size"] = 11,
["cast_statusbar_bgtexture"] = "Atrocity",
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["extra_icon_show_purge_border"] = {
nil,
0,
0,
},
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
0.9764706492424011,
0.5411764979362488,
0.4745098352432251,
},
["anothertank"] = {
0.729411780834198,
0.917647123336792,
},
["aggro"] = {
0.5058823823928833,
0.4235294461250305,
0.9137255549430847,
},
["nocombat"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["noaggro"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["pulling"] = {
0.3098039329051971,
0.4509804248809815,
0.6313725709915161,
},
},
},
["cast_statusbar_spark_filloninterrupt"] = false,
["first_run3"] = true,
["extra_icon_stack_size"] = 12,
["range_check_in_range_or_target_alpha_friendlies"] = 1,
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["target_shady_alpha"] = 0.59999996423721,
["aura_alpha"] = 1,
["tap_denied_color"] = {
0.40000003576279,
0.40000003576279,
0.40000003576279,
},
["bossmod_icons_anchor"] = {
["y"] = 30,
["x"] = 0,
["side"] = 8,
},
["indicator_raidmark_anchor"] = {
["side"] = 9,
["x"] = 0,
},
["aura2_grow_direction"] = 3,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "0",
["nameplateSelectedAlpha"] = "1",
["nameplateLargeTopInset"] = "0.049999997019768",
["nameplateShowPersonalCooldowns"] = "0",
["nameplateMotionSpeed"] = "0.024999998509884",
["nameplateShowFriendlyNPCs"] = "1",
["nameplateSelectedScale"] = "1",
["nameplateOverlapH"] = "0.79999995231628",
["nameplateShowFriendlyBuffs"] = "0",
["nameplateMinAlpha"] = "0.90135484",
["nameplateShowFriends"] = "0",
["nameplateMotion"] = "1",
["nameplateLargerScale"] = "1",
["nameplateMaxDistance"] = "40",
["nameplateOtherTopInset"] = "0.049999997019768",
["nameplatePlayerMaxDistance"] = "40",
["nameplateOccludedAlphaMult"] = "0.19999998807907",
["nameplateShowSelf"] = "0",
["nameplateShowEnemies"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateOverlapV"] = "1.6000000238419",
},
["pet_width_scale"] = 0.99999994039536,
["extra_icon_caster_font"] = "Friz Quadrata TT",
["login_counter"] = 16209,
["extra_icon_caster_name"] = false,
["aura_timer_text_font"] = "Friz Quadrata TT",
["extra_icon_timer_outline"] = "OUTLINE",
["indicator_raidmark_scale"] = 0.99999994039536,
["blizzard_nameplate_font_size"] = 10,
["version"] = 11,
["health_selection_overlay_alpha"] = 0,
["health_selection_overlay"] = "Atrocity",
["patch_version"] = 39,
["aura_stack_font"] = "Friz Quadrata TT",
["cast_statusbar_color_interrupted"] = {
0.7803922295570374,
0.250980406999588,
0.250980406999588,
},
["blizzard_nameplate_font"] = "Friz Quadrata TT",
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 12,
["target_highlight_height"] = 25,
["aura_sort"] = true,
["number_region_first_run"] = true,
["extra_icon_show_offensive_border"] = {
nil,
0,
0,
},
["extra_icon_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["aura_tracker"] = {
["debuff"] = {
217200,
371472,
292626,
422683,
},
["buff_tracked"] = {
["166591"] = true,
["273432"] = true,
["312926"] = true,
["262092"] = true,
["303941"] = true,
["265160"] = true,
["342073"] = true,
["233210"] = true,
["209859"] = true,
},
["buff"] = {
412012,
412695,
},
["buff_banned"] = {
["206150"] = true,
["299450"] = true,
["333553"] = true,
["352854"] = true,
["61574"] = true,
["411635"] = true,
["61573"] = true,
},
["debuff_banned"] = {
["418339"] = true,
["353793"] = true,
["359078"] = true,
["411717"] = true,
["345801"] = true,
["345219"] = true,
["368802"] = true,
["359168"] = true,
["390271"] = true,
["331016"] = true,
["420092"] = true,
["284678"] = true,
["391568"] = true,
["359180"] = true,
["317583"] = true,
["270569"] = true,
["375583"] = true,
["381743"] = true,
["392566"] = true,
["356181"] = true,
["331934"] = true,
["324260"] = true,
["329449"] = true,
["390155"] = true,
["428103"] = true,
["411715"] = true,
["426783"] = true,
["417419"] = true,
["436582"] = true,
["420054"] = true,
["394327"] = true,
["269576"] = true,
["373305"] = true,
["372127"] = true,
["115994"] = true,
["410790"] = true,
["440339"] = true,
["403696"] = true,
["379021"] = true,
["302564"] = true,
["425180"] = true,
["394453"] = true,
["403952"] = true,
["353773"] = true,
["430184"] = true,
["435476"] = true,
["340007"] = true,
["356329"] = true,
["283649"] = true,
["390276"] = true,
["392885"] = true,
["440340"] = true,
["333526"] = true,
["376974"] = true,
["344748"] = true,
["426534"] = true,
["356372"] = true,
["328287"] = true,
["345547"] = true,
["258883"] = true,
["367902"] = true,
["280494"] = true,
["355759"] = true,
},
["debuff_tracked"] = {
["389809"] = true,
["292451"] = true,
["312595"] = true,
},
},
["profile_name"] = "FragUI",
["target_highlight"] = false,
["pet_height_scale"] = 0.99999994039536,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["bossmod_cooldown_text_enabled"] = false,
["extra_icon_use_blizzard_border_color"] = false,
["hover_highlight_alpha"] = 0.25,
["dps"] = {
["colors"] = {
["solo"] = {
0.501960813999176,
0.501960813999176,
},
["aggro"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["notontank"] = {
0.501960813999176,
0.501960813999176,
},
["noaggro"] = {
0.5058823823928833,
0.4235294461250305,
0.9137255549430847,
},
["pulling"] = {
nil,
0.7725490927696228,
0.658823549747467,
},
},
},
["target_shady_combat_only"] = false,
["health_statusbar_bgcolor"] = {
0.13333334028721,
0.13333334028721,
0.13333334028721,
1,
},
["color_override_colors"] = {
[3] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
[4] = {
0.8509804606437683,
0.8156863451004028,
0.5882353186607361,
},
[5] = {
0.5058823823928833,
0.7803922295570374,
0.5137255191802979,
},
},
["health_cutoff_upper"] = false,
["border_color"] = {
nil,
nil,
nil,
1,
},
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 5,
["indicator_spec"] = false,
["cast_statusbar_spark_width"] = 4,
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator7",
},
["Default_1"] = {
["target_shady_combat_only"] = false,
["aura_breakline_space"] = 2,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\nend\n\n-- 167966: Experimental Sludge (De Other Side)\n-- 199220 - Stagbeetle (Valdrakken)\n-- 199916 - Bridge Slimes (Brackenhide Hollow)",
["Time"] = 1759089038,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend",
["Icon"] = 618980,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["Enabled"] = false,
["Revision"] = 146,
["Options"] = {
},
["NpcNames"] = {
"167966",
"199220",
"199916",
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["Author"] = "Briarbreed-Area 52",
["Initialization"] = "function (scriptTable)\nend\n\n-- 167966: Experimental Sludge (De Other Side)\n-- 199220 - Stagbeetle (Valdrakken)\n-- 199916 - Bridge Slimes (Brackenhide Hollow)",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["SpellIds"] = {
},
["Prio"] = 99,
["Name"] = "Hide Nameplate",
["PlaterCore"] = 1,
["version"] = -1,
["Desc"] = "",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.options = {\n        color = \"white\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 4, -- number of lines. Defaul value is 8;\n        frequency = 0.5, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 4, -- length of lines. Default value depends on region size and number of lines;\n        th = 2, -- thickness of lines. Default value is 2;\n        xOffset = 0,\n        yOffset = 0, -- offset of glow relative to region border;\n        border = true, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n    self.glowStarted = false\n    \n    envTable.pandemicTime[self.spellId..unitId] = nil\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.pandemicTime = envTable.pandemicTime or {}\n    envTable.pandemicTime[self.spellId..unitId] = envTable._RemainingTime * 0.3\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    if (timeLeft < (envTable.pandemicTime[self.spellId..unitId] or (envTable._Duration*0.3))) then\n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self.Cooldown, nil, envTable.options, envTable.options.key)\n        end\n    else\n        if self.glowStarted then\n            self.glowStarted = false\n            Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1759089299,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.options = {\n        color = \"white\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 4, -- number of lines. Defaul value is 8;\n        frequency = 0.5, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 4, -- length of lines. Default value depends on region size and number of lines;\n        th = 2, -- thickness of lines. Default value is 2;\n        xOffset = 0,\n        yOffset = 0, -- offset of glow relative to region border;\n        border = true, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\n    \nend\n\n\n",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n    self.glowStarted = false\n    \n    envTable.pandemicTime[self.spellId..unitId] = nil\n    \nend\n\n\n",
["Revision"] = 369,
["Options"] = {
},
["Icon"] = 618980,
["SpellIds"] = {
292711,
278946,
212463,
284402,
284401,
2818,
703,
1943,
295425,
283668,
316220,
258179,
207690,
315341,
1822,
1079,
106830,
202347,
204213,
391191,
334168,
188389,
},
["Author"] = "Viash-Thrall",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Pandemic Glow (Pixel)",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    if (timeLeft < (envTable.pandemicTime[self.spellId..unitId] or (envTable._Duration*0.3))) then\n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self.Cooldown, nil, envTable.options, envTable.options.key)\n        end\n    else\n        if self.glowStarted then\n            self.glowStarted = false\n            Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.pandemicTime = envTable.pandemicTime or {}\n    envTable.pandemicTime[self.spellId..unitId] = envTable._RemainingTime * 0.3\nend\n\n\n",
["semver"] = "",
["Enabled"] = false,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.lifePercent = {\n        --npcId         percent divisions\n        --[154564] = {80, 30},   --debug\n        \n        --                                                                             ***DUNGEONS***\n        -- DF Dungeons\n        [190485] = {50}, --Stormvein - Ruby Life pools\n        [190484] = {50},  --Kyrakka - Ruby Life pools\n        [193435] = {50}, --Kyrakka - Ruby Life pools\n        [188252] = {66,33}, --Melidrussa Chillworn - Ruby Life pools\n        [197697] = {50}, -- Flamegullet - Ruby Life Pools\n        [186738] = {75, 50, 25}, --Umbrelskul - The Azure Vault\n        [186125] = {30}, --Tricktotem - Brackenhide Hollow\n        [186122] = {30}, --Rira Hackclaw - Brackenhide Hollow\n        [186124] = {30}, --Gashtooth - Brackenhide Hollow\n        [185534] = {10}, --Bonebolt Hunter - Brackenhide Hollow\n        [186121] = {4}, -- Decatriarch Wratheye - Brackenhide Hollow\n        [194816] = {10}, -- Forgewrought Monstrosity - Neltharus\n        [189719] = {15}, --Watcher Irideus - Halls of Infusion\n        [190407] = {20}, --Aqua Rager - Halls of Infusion\n        [186151] = {60}, --Balakar Khan - The Nokhud Offensive\n        [184020] = {40}, -- Hulking Berserker-  Uldaman: Legacy of Tyr\n        [184580] = {10}, -- Olaf -  Uldaman: Legacy of Tyr\n        [184581] = {10}, -- Baelog -  Uldaman: Legacy of Tyr\n        [184582] = {10}, -- Eric \"The Swift\" -  Uldaman: Legacy of Tyr\n        [184422] = {70, 30}, --Emberon - Uldaman: Legacy of Tyr\n        \n        -- SL Dungeons\n        [164451] = {40}, --dessia the decapirator - theater of pain\n        [164463] = {40}, --Paceran the Virulent - theater of pain\n        [164461] = {40}, --Sathel the Accursed - theater of pain\n        [165946] = {50}, -- ~mordretha - thather of pain\n        [164501] = {70, 40, 10}, --mistcaller -mists of  tina\n        [164926] = {50}, --Drust Boughbreaker - mists of tina\n        [164804] = {22}, -- Droman Oulfarran - mists of tina\n        [164267] = {66, 33}, --Magrave Stradama - Plaguefall\n        [164967] = {66, 33}, --Doctor ickus - Plaguefall\n        [169861] = {66, 33}, -- Ickor Bileflesh - Plaguefall\n        [164218] = {70, 40}, --Lord Chamberlain - Halls of Atonemen\n        [162099] = {50}, --General Kaal Boss fight- Sanguine Depths\n        [162061] = {70, 30}, --Devos - Spires of Ascension\n        [163121] = {70}, -- Stitched vanguard - Necrotic Wake\n        [164558] = {80, 60, 40, 20}, --Hakkar the Soulflayer - De Other Side\n        [177269] = {40}, --So'leah - Tazavesh: Gambit\n        [175806] = {66, 33}, --So'azmi - Tazavesh: Streets\n        \n        -- BFA Dungeons\n        [133345] = {20}, --Feckless Assistant - The MOTHERLODE!!\n        [150276] = {50}, --Heavy Scrapbots - Mechagon: Junk\n        [152009] = {30}, --Malfunctioning Scrapbots - Mechagon: Jun\n        [144298] = {30}, --Defense Bot Mk III (casts a shield) -Mechagon: Work\n        \n        -- Draenor Dungeons\n        [81236] = {50}, -- Grimrail Technician - Grimrail Depot\n        [79545] = {60}, -- Nitrogg Thundertower - Grimrail Depot\n        [77803] = {20}, -- Railmaster Rocketspark - Grimrail Depot\n        [81297] = {50}, -- Dreadfang -> Fleshrender Nok'gar - Iron Docks\n        [76057] = {20.5}, -- Carrion Worm - Shadowmoon Burial Grounds\n        \n        -- Legion Dungeons\n        [114790] = {66, 33}, -- Viz'aduum - Kara: Upper\n        [114261] = {50}, --Toe Knee - Kara: Lower\n        [114260] = {50}, -- Mrrgria - Kara: Lower\n        [114265] = {50}, --Gang Ruffian - Kara: Lower\n        [114783] = {50}, --Reformed Maiden - Kara: Lower\n        [114312] = {60}, -- Moroes - Kara: Lower\n        [96574] = {30}, --Stormforged Sentinel - Halls of Valor\n        [95674] = {60.5}, -- Fenryr P1- Halls of Valor\n        [94960] = {10.5}, -- Hymdall - Halls of Valor\n        [95676] = {80,5}, --Odyn - Halls of Valor\n        [104215] = {25}, -- Patrol Captain Gerdo - Court of Stars\n        \n        -- Pandaria Dungeons\n        [59544] = {50}, --The Nodding Tiger\n        [56732] = {29.5}, -- Liu Flameheart, TotJS\n        \n        \n        \n        --                                                                             ***RAID***\n        -- DF Raid\n        -- [181378] = {66, 33},  --Kurog Grimtotem, Vault of the Incarnates\n        [194990] = {50},        -- Stormseeker Acolyte, Vault of the Incarnates\n        [189492] = {65},        -- Raszageth, Vault of the Incarnates\n        [201774] = {50},        --Amalgamation Chamber, Aberrus\n        [201773] = {50},        --Amalgamation Chamber, Aberrus\n        [200912] = {50},        --Forgotten Experiments P1, Aberrus\n        [200913] = {50},        --Forgotten Experiments P2, Aberrus\n        [199659] = {25},        --Assault of the Zaqali, Aberrus\n        [201668] = {60, 35},        --Neltharion, Aberrus\n        [208445] = {35},        --Larodar, Amirdrassil\n        [204931] = {70},        --Fyrakk, Amirdrassil\n        \n        \n        --SL Raid\n        [181548] = {40}, --Absolution: Prototype Pantheon, Sepulcher of the First Ones\n        [181551] = {40}, --Duty: Prototype Pantheon, Sepulcher of the First Ones\n        [181546] = {40}, --Renewal: Prototype Pantheon, Sepulcher of the First Ones\n        [181549] = {40}, --War: Prototype Pantheon, Sepulcher of the First Ones\n        [183501] = {75, 50}, --Xymox, Sepulcher of the First Ones\n        [180906] = {78, 45}, --Halondrus, Sepulcher of the First Ones\n        [183671] = {40}, --Monstrous Soul - Anduin, Sepulcher of the First Ones\n        [185421] = {15}, --The Jailer, Sepulcher of the First Ones\n        [175730] = {70, 40}, --Fatescribe Roh-Kalo, Sanctum of domination\n        [176523] = {70, 40}, --Painsmith, Sanctum of domination\n        [175725] = {66, 33}, --Eye of the Jailer, Sanctum of domination\n        [176929] = {60, 20}, --Remnant of Kel'Thuzad, Sanctum of domination\n        [175732] = {83, 50}, -- Sylvanas Windrunner, Sanctum of Domination\n        [166969] = {50}, --Council of Blood - Frieda, Castle Nathria\n        [166970] = {50}, --Council of Blood - Stavros, Castle Nathria\n        [166971] = {50}, --Council of Blood - Niklaus, Castle Nathria\n        [167406] = {70.5, 37.5}, --Sire Denathrius, Castle Nathria\n        [173162] = {66,33}, --Lord Evershade, Castle Nathria\n        \n        \n        \n        --                                                                             ***OPEN WORD***\n        [180013] = {20}, --Escaped Wilderling, Shadowlands - Korthia\n        [179931] = {80, 60}, --Relic Breaker krelva, Shadowlands - Korthia\n        [193532] = {40}, --Bazual, The Dreaded Flame, Dhragonflight\n        \n        --Mage Tower\n        [116410] = {33}, -- Karam Magespear \n        \n        \n    }\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
["fillAlpha"] = 0.199999988079071,
["indicatorAlpha"] = 0.800000011920929,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1759089300,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.lifePercent = {\n        --npcId         percent divisions\n        --[154564] = {80, 30},   --debug\n        \n        --                                                                             ***DUNGEONS***\n        -- DF Dungeons\n        [190485] = {50}, --Stormvein - Ruby Life pools\n        [190484] = {50},  --Kyrakka - Ruby Life pools\n        [193435] = {50}, --Kyrakka - Ruby Life pools\n        [188252] = {66,33}, --Melidrussa Chillworn - Ruby Life pools\n        [197697] = {50}, -- Flamegullet - Ruby Life Pools\n        [186738] = {75, 50, 25}, --Umbrelskul - The Azure Vault\n        [186125] = {30}, --Tricktotem - Brackenhide Hollow\n        [186122] = {30}, --Rira Hackclaw - Brackenhide Hollow\n        [186124] = {30}, --Gashtooth - Brackenhide Hollow\n        [185534] = {10}, --Bonebolt Hunter - Brackenhide Hollow\n        [186121] = {4}, -- Decatriarch Wratheye - Brackenhide Hollow\n        [194816] = {10}, -- Forgewrought Monstrosity - Neltharus\n        [189719] = {15}, --Watcher Irideus - Halls of Infusion\n        [190407] = {20}, --Aqua Rager - Halls of Infusion\n        [186151] = {60}, --Balakar Khan - The Nokhud Offensive\n        [184020] = {40}, -- Hulking Berserker-  Uldaman: Legacy of Tyr\n        [184580] = {10}, -- Olaf -  Uldaman: Legacy of Tyr\n        [184581] = {10}, -- Baelog -  Uldaman: Legacy of Tyr\n        [184582] = {10}, -- Eric \"The Swift\" -  Uldaman: Legacy of Tyr\n        [184422] = {70, 30}, --Emberon - Uldaman: Legacy of Tyr\n        \n        -- SL Dungeons\n        [164451] = {40}, --dessia the decapirator - theater of pain\n        [164463] = {40}, --Paceran the Virulent - theater of pain\n        [164461] = {40}, --Sathel the Accursed - theater of pain\n        [165946] = {50}, -- ~mordretha - thather of pain\n        [164501] = {70, 40, 10}, --mistcaller -mists of  tina\n        [164926] = {50}, --Drust Boughbreaker - mists of tina\n        [164804] = {22}, -- Droman Oulfarran - mists of tina\n        [164267] = {66, 33}, --Magrave Stradama - Plaguefall\n        [164967] = {66, 33}, --Doctor ickus - Plaguefall\n        [169861] = {66, 33}, -- Ickor Bileflesh - Plaguefall\n        [164218] = {70, 40}, --Lord Chamberlain - Halls of Atonemen\n        [162099] = {50}, --General Kaal Boss fight- Sanguine Depths\n        [162061] = {70, 30}, --Devos - Spires of Ascension\n        [163121] = {70}, -- Stitched vanguard - Necrotic Wake\n        [164558] = {80, 60, 40, 20}, --Hakkar the Soulflayer - De Other Side\n        [177269] = {40}, --So'leah - Tazavesh: Gambit\n        [175806] = {66, 33}, --So'azmi - Tazavesh: Streets\n        \n        -- BFA Dungeons\n        [133345] = {20}, --Feckless Assistant - The MOTHERLODE!!\n        [150276] = {50}, --Heavy Scrapbots - Mechagon: Junk\n        [152009] = {30}, --Malfunctioning Scrapbots - Mechagon: Jun\n        [144298] = {30}, --Defense Bot Mk III (casts a shield) -Mechagon: Work\n        \n        -- Draenor Dungeons\n        [81236] = {50}, -- Grimrail Technician - Grimrail Depot\n        [79545] = {60}, -- Nitrogg Thundertower - Grimrail Depot\n        [77803] = {20}, -- Railmaster Rocketspark - Grimrail Depot\n        [81297] = {50}, -- Dreadfang -> Fleshrender Nok'gar - Iron Docks\n        [76057] = {20.5}, -- Carrion Worm - Shadowmoon Burial Grounds\n        \n        -- Legion Dungeons\n        [114790] = {66, 33}, -- Viz'aduum - Kara: Upper\n        [114261] = {50}, --Toe Knee - Kara: Lower\n        [114260] = {50}, -- Mrrgria - Kara: Lower\n        [114265] = {50}, --Gang Ruffian - Kara: Lower\n        [114783] = {50}, --Reformed Maiden - Kara: Lower\n        [114312] = {60}, -- Moroes - Kara: Lower\n        [96574] = {30}, --Stormforged Sentinel - Halls of Valor\n        [95674] = {60.5}, -- Fenryr P1- Halls of Valor\n        [94960] = {10.5}, -- Hymdall - Halls of Valor\n        [95676] = {80,5}, --Odyn - Halls of Valor\n        [104215] = {25}, -- Patrol Captain Gerdo - Court of Stars\n        \n        -- Pandaria Dungeons\n        [59544] = {50}, --The Nodding Tiger\n        [56732] = {29.5}, -- Liu Flameheart, TotJS\n        \n        \n        \n        --                                                                             ***RAID***\n        -- DF Raid\n        -- [181378] = {66, 33},  --Kurog Grimtotem, Vault of the Incarnates\n        [194990] = {50},        -- Stormseeker Acolyte, Vault of the Incarnates\n        [189492] = {65},        -- Raszageth, Vault of the Incarnates\n        [201774] = {50},        --Amalgamation Chamber, Aberrus\n        [201773] = {50},        --Amalgamation Chamber, Aberrus\n        [200912] = {50},        --Forgotten Experiments P1, Aberrus\n        [200913] = {50},        --Forgotten Experiments P2, Aberrus\n        [199659] = {25},        --Assault of the Zaqali, Aberrus\n        [201668] = {60, 35},        --Neltharion, Aberrus\n        [208445] = {35},        --Larodar, Amirdrassil\n        [204931] = {70},        --Fyrakk, Amirdrassil\n        \n        \n        --SL Raid\n        [181548] = {40}, --Absolution: Prototype Pantheon, Sepulcher of the First Ones\n        [181551] = {40}, --Duty: Prototype Pantheon, Sepulcher of the First Ones\n        [181546] = {40}, --Renewal: Prototype Pantheon, Sepulcher of the First Ones\n        [181549] = {40}, --War: Prototype Pantheon, Sepulcher of the First Ones\n        [183501] = {75, 50}, --Xymox, Sepulcher of the First Ones\n        [180906] = {78, 45}, --Halondrus, Sepulcher of the First Ones\n        [183671] = {40}, --Monstrous Soul - Anduin, Sepulcher of the First Ones\n        [185421] = {15}, --The Jailer, Sepulcher of the First Ones\n        [175730] = {70, 40}, --Fatescribe Roh-Kalo, Sanctum of domination\n        [176523] = {70, 40}, --Painsmith, Sanctum of domination\n        [175725] = {66, 33}, --Eye of the Jailer, Sanctum of domination\n        [176929] = {60, 20}, --Remnant of Kel'Thuzad, Sanctum of domination\n        [175732] = {83, 50}, -- Sylvanas Windrunner, Sanctum of Domination\n        [166969] = {50}, --Council of Blood - Frieda, Castle Nathria\n        [166970] = {50}, --Council of Blood - Stavros, Castle Nathria\n        [166971] = {50}, --Council of Blood - Niklaus, Castle Nathria\n        [167406] = {70.5, 37.5}, --Sire Denathrius, Castle Nathria\n        [173162] = {66,33}, --Lord Evershade, Castle Nathria\n        \n        \n        \n        --                                                                             ***OPEN WORD***\n        [180013] = {20}, --Escaped Wilderling, Shadowlands - Korthia\n        [179931] = {80, 60}, --Relic Breaker krelva, Shadowlands - Korthia\n        [193532] = {40}, --Bazual, The Dreaded Flame, Dhragonflight\n        \n        --Mage Tower\n        [116410] = {33}, -- Karam Magespear \n        \n        \n    }\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 458,
["semver"] = "",
["NpcNames"] = {
"81236",
"77803",
"150276",
"152009",
"175806",
"114790",
"81297",
"79545",
"177269",
"133345",
"164926",
"114265",
"114261",
"114783",
"180013",
"179931",
"193532",
"116410",
"190485",
"193435",
"188252",
"186738",
"186125",
"186122",
"186124",
"184422",
"96574",
"114312",
"164804",
"164267",
"164967",
"169861",
"162061",
"144298",
"181378",
"181548",
"181551",
"181546",
"181549",
"183501",
"180906",
"185421",
"163121",
"175730",
"176523",
"175725",
"176929",
"166969",
"166970",
"166971",
"167406",
"173162",
"175732",
"183671",
"114260",
"184581",
"184582",
"184580",
"189719",
"185534",
"190407",
"194816",
"186151",
"186121",
"194990",
"76057",
"56732",
"95676",
"94960",
"104215",
"95674",
"189492",
"190484",
"97087",
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Author"] = "Duracell",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["SpellIds"] = {
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Add - Health Markers [D]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vertical Line Alpha",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["castColor"] = {
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["Time"] = 1724581705,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = false,
["Revision"] = 832,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a special animation changing the cast bar color.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "To get a list of color names, use: /plater colors",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.431372,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 6,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Name"] = "Color List by SpellId",
["Value"] = {
},
["Key"] = "castColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_important_bycolor.png",
["Prio"] = 99,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode, summon or transform if the cast passes.",
["Name"] = "Cast - Important by Color [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
432967,
446717,
451379,
451067,
448013,
448057,
322486,
341709,
321226,
429428,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1724581701,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = false,
["Revision"] = 874,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_shining_green.png",
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["Name"] = "Cast - Shining Green [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
434802,
448248,
453840,
337249,
324293,
49184,
449455,
268702,
268797,
330562,
330868,
341969,
440687,
1214780,
1214468,
426295,
422541,
427011,
427157,
427601,
424420,
444743,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1759089301,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Enabled"] = true,
["Revision"] = 163,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["NpcNames"] = {
"214840",
},
["Prio"] = 99,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["Name"] = "Add - Health Markers [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1724581687,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = false,
["Revision"] = 614,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Name"] = "Option 18",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Nameplate Color",
["Value"] = "Nameplate Color",
["Key"] = "option17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_special_ability.png",
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "For unique abilities that are an important part of the fight against a bosses or mini bosse.",
["Name"] = "Cast - Special Ability [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
451026,
452127,
446615,
433766,
432117,
448560,
440218,
441289,
447146,
438860,
448847,
449687,
456751,
449939,
322550,
320208,
321894,
276068,
423200,
282801,
1215412,
474298,
339573,
468841,
444034,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1724581712,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Enabled"] = false,
["Revision"] = 140,
["semver"] = "",
["Icon"] = 236171,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Name"] = "Cast - Heroic Leap [P]",
["PlaterCore"] = 1,
["Prio"] = 99,
["SpellIds"] = {
447141,
432967,
},
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Rename Spell",
["Value"] = true,
["Key"] = "bRenameSpell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Name"] = "Spell Name",
["Value"] = "Heroic Leap",
["Key"] = "spellName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color",
["Value"] = false,
["Key"] = "bUseCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.364705890417099,
0.1058823615312576,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
["OptionsValues"] = {
["sparkColor"] = {
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1724581691,
["Temp_ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Enabled"] = false,
["Revision"] = 76,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "In the box at right, add the spell id and the color.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "To get a list of colors, use: /plater colors",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Spark Width Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "sparkWithScale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Name"] = "Spark Height Scale",
["Value"] = 1,
["Key"] = "sparkHeightScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Name"] = "Spark Color",
["Value"] = {
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_spark.png",
["Prio"] = 99,
["Author"] = "Tennah-These Go To Eleven",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Change the spark color to differentiate a cast from another.",
["Name"] = "Cast - Spark Color [P]",
["Temp_UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
453140,
456713,
450088,
322614,
323730,
257348,
272422,
429427,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719679972,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = false,
["Revision"] = 551,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Healing effect that cannot be interrupted.",
["NpcNames"] = {
},
["SpellIds"] = {
432520,
320822,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Heal Stun [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion + 5, castBar:GetHeight() + math.random(1, 5))\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        \n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2 + math.random(-2, 2))\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(1)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration + 0.5) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(1)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1759089307,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = false,
["Revision"] = 320,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "How much time takes for one revolution.",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.2,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.05,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.9,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Color",
["Value"] = {
0.6392157077789307,
0.6392157077789307,
0.6392157077789307,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2_icon.png",
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["Name"] = "Cast - AoE Hit All [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
451102,
426787,
448888,
439811,
434796,
434793,
438879,
438473,
434252,
434829,
440468,
436205,
436246,
441395,
437533,
451965,
456902,
456900,
451996,
451939,
450077,
450079,
324909,
324922,
460092,
272711,
269266,
425974,
424879,
426771,
426786,
423324,
428879,
258622,
269429,
271456,
1215102,
1215409,
291946,
297128,
1215741,
330716,
463206,
442995,
435622,
465827,
460156,
1218117,
428266,
427404,
1214628,
424431,
448791,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1759089303,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["url"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Revision"] = 84,
["semver"] = "",
["Icon"] = 610472,
["Enabled"] = false,
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["SpellIds"] = {
343470,
423228,
},
["Prio"] = 99,
["Name"] = "Aura is Shield [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1724581729,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = false,
["Revision"] = 742,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 7,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9686275124549866,
0.9764706492424011,
1,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.4901961088180542,
0,
0.5490196347236633,
1,
},
["Name"] = "Trail Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_debuff.png",
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["Name"] = "Cast - Debuff [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
432448,
431309,
451107,
451119,
438618,
436322,
443507,
443436,
439341,
447261,
449444,
451224,
451241,
450095,
451612,
451395,
324987,
327393,
256709,
268230,
275836,
426308,
449153,
427461,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1724581694,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Enabled"] = false,
["Revision"] = 959,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start.",
["Name"] = "Cast - Simple Interrupt [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
431333,
442210,
443430,
443433,
451871,
76711,
334748,
334749,
328667,
338353,
445207,
269302,
263215,
342675,
453909,
462771,
424322,
426145,
427260,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["Time"] = 1759089310,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = false,
["Revision"] = 160,
["Options"] = {
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Name"] = "Dots Y Offset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Key"] = "speed",
["Value"] = 0.4,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "minAlpha",
["Value"] = 0,
["Name"] = "Blink Min Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Key"] = "maxAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Name"] = "Blink Color",
["Value"] = {
1,
0.5254902243614197,
0.5137255191802979,
1,
},
["Key"] = "blinkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["Name"] = "Cast - Ongoing Cast [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
431364,
423327,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1722866303,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
["Enabled"] = false,
["Revision"] = 1254,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
450756,
452162,
322938,
322939,
324776,
324914,
326046,
340544,
335143,
327130,
256957,
275826,
429109,
451097,
293729,
341902,
341977,
441351,
441627,
463058,
471733,
425536,
427356,
424419,
423051,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Heal Cut [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1724581699,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Enabled"] = false,
["Revision"] = 222,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Settings for the animation played when the cast creates small void zones in the ground.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_voidzone.png",
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play an animation when the cast creates small zones in the ground that will damage if the player doesn't move.",
["Name"] = "Cast - Voidzone [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
450784,
451423,
445813,
445838,
438658,
433845,
456696,
451391,
324923,
323138,
340189,
326021,
320571,
321780,
345623,
333479,
334476,
320772,
257882,
424903,
426345,
422233,
445541,
428703,
439559,
336499,
472041,
473168,
473304,
1216431,
320182,
1215850,
331237,
434706,
434998,
439365,
473070,
427484,
424462,
424429,
423062,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1724581727,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Enabled"] = false,
["Revision"] = 282,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.15,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.8,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 0.8,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
0.7411764860153198,
0.7411764860153198,
0.7411764860153198,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["Name"] = "Cast - AoE With Range [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
453212,
451098,
427001,
438622,
446086,
447271,
437700,
439646,
448877,
451387,
331743,
320637,
327240,
257170,
257326,
257169,
423538,
428508,
428520,
267354,
1214754,
260280,
293861,
285454,
317605,
339415,
331223,
318406,
442589,
423501,
440652,
424621,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
["Time"] = 1724581732,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = false,
["Revision"] = 755,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "animSpeed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Speed",
},
{
["Type"] = 4,
["Key"] = "desaturateArrow",
["Value"] = false,
["Name"] = "Use White Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
{
["Type"] = 6,
["Name"] = "Option 8",
["Value"] = 0,
["Key"] = "option8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Spell Name",
["Value"] = true,
["Key"] = "bChangeSpellName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the spell name to the text entered below",
},
{
["Type"] = 3,
["Name"] = "New Spell Name",
["Value"] = "Frontal",
["Key"] = "spellNameText",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "The customized spell name",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["Name"] = "Cast - Frontal Cone [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
431494,
426860,
448213,
434407,
439789,
434824,
453161,
435012,
439506,
443500,
434779,
451543,
439621,
441384,
441381,
447395,
456711,
448105,
323137,
321968,
331718,
331721,
325223,
340160,
321834,
320596,
324323,
333488,
323496,
333477,
256627,
257292,
454438,
269029,
257862,
425027,
449130,
428202,
448640,
427869,
1217279,
267551,
275907,
259940,
283421,
293986,
291865,
292264,
1215738,
334023,
317231,
320729,
333294,
330614,
323608,
432198,
441119,
448619,
436592,
473220,
472452,
465682,
465754,
473114,
1217496,
422122,
426261,
421277,
427025,
426893,
474018,
1214546,
445457,
447270,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1759089303,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Enabled"] = false,
["Revision"] = 29,
["Options"] = {
},
["NpcNames"] = {
},
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show a castbar for the aura duration.",
["Name"] = "Aura - Is Cast Bar [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
438494,
335141,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end --compatibility\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        --[225976] = {secondCastBar = true, altCastId = \"Uber Strike\",  debuffTimer = 167385, name = GetSpellInfo(167385), spellIcon = 167385}, --tank dummy        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        config.text = npcInfo.name\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1759089036,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end --compatibility\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        --[225976] = {secondCastBar = true, altCastId = \"Uber Strike\",  debuffTimer = 167385, name = GetSpellInfo(167385), spellIcon = 167385}, --tank dummy        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        config.text = npcInfo.name\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend",
["Enabled"] = false,
["Revision"] = 236,
["Options"] = {
},
["NpcNames"] = {
"164427",
"164414",
"164185",
"164567",
"165408",
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Countdown",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --compat\n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        --[167385] = \"Uber Strike\", --tank dummy\n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    local auras = Plater.GetUnitAuras(unitFrame)\n    for id, aura in pairs(auras) do\n        local name, caster = aura.name, aura.sourceUnit\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n            break\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1759089302,
["url"] = "",
["NpcNames"] = {
"Illusionary Vulpin",
129802,
133482,
235631,
231014,
},
["Enabled"] = true,
["Revision"] = 290,
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["Icon"] = 841383,
["Author"] = "Tecno-Azralon",
["Temp_ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --compat\n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        --[167385] = \"Uber Strike\", --tank dummy\n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    local auras = Plater.GetUnitAuras(unitFrame)\n    for id, aura in pairs(auras) do\n        local name, caster = aura.name, aura.sourceUnit\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n            break\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Prio"] = 2,
["Name"] = "Fixate On You [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 50, 0);   \n    envTable.FixateTarget:Hide()\nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    envTable.FixateTarget:Hide()\n    \n    \nend\n\n\n\n\n",
["OptionsValues"] = {
["dotsColor"] = {
1,
0.7137255072593689,
0,
0,
},
["nameplateColor"] = {
1,
0,
1,
1,
},
["changeNameplateColor"] = true,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.colorchanged = false\nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1759089303,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 50, 0);   \n    envTable.FixateTarget:Hide()\nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    local targetName = UnitName (unitId .. \"target\");\n    \n    if targetName and UnitIsUnit(targetName, \"player\")then\n        Plater.SetNameplateColor (unitFrame, scriptTable.config.nameplateColor)\n        \n        if not envTable.colorchanged then\n            Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n            unitFrame.healthBar.MainTargetDotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n            \n            envTable.colorchanged = true\n        end\n        \n    end\n    \n   -- if (targetName) then\n   --     local _, class = UnitClass (unitId..\"target\");\n   --   targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n   --   envTable.FixateTarget.text = targetName;\n   --   envTable.FixateTarget:Show();\n   --end  \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    envTable.FixateTarget:Hide()\n    \n    \nend\n\n\n\n\n",
["Revision"] = 676,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "changeNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0,
0.52549019607843,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.71372549019608,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["NpcNames"] = {
"218961",
"133482",
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    local targetName = UnitName (unitId .. \"target\");\n    \n    if targetName and UnitIsUnit(targetName, \"player\")then\n        Plater.SetNameplateColor (unitFrame, scriptTable.config.nameplateColor)\n        \n        if not envTable.colorchanged then\n            Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n            unitFrame.healthBar.MainTargetDotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n            \n            envTable.colorchanged = true\n        end\n        \n    end\n    \n   -- if (targetName) then\n   --     local _, class = UnitClass (unitId..\"target\");\n   --   targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n   --   envTable.FixateTarget.text = targetName;\n   --   envTable.FixateTarget:Show();\n   --end  \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Spiteful Glow",
["version"] = -1,
["Prio"] = 20,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Spiteful Name&Glow",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.colorchanged = false\nend\n\n\n\n\n\n\n\n",
["semver"] = "",
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    unitFrame:SetAlpha(1)\nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend",
["ScriptType"] = 3,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1759089037,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend",
["Icon"] = "",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if C_UnitAuras.GetPlayerAuraBySpellID(461536) then\n        local info = C_UnitAuras.GetPlayerAuraBySpellID(461536)\n        local rem = info.expirationTime - GetTime()\n        if (rem < 8 or envTable._HealthPercent < 20 or Plater.UnitHasAura (unitFrame, 1217685)) then\n            unitFrame:SetAlpha(0)\n            return\n        end\n    end\n    \n    if unitFrame:GetAlpha() < 1 then\n        unitFrame:SetAlpha(1)\n    end\nend",
["Enabled"] = false,
["Revision"] = 35,
["Options"] = {
},
["NpcNames"] = {
"231935",
"231839",
},
["Prio"] = 99,
["Author"] = "Dyspepsic-Iridikron",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Hides plates for adds on Stix that are already debuffed or are very low health anyway",
["Name"] = "Echo - Stix Add Hider",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if C_UnitAuras.GetPlayerAuraBySpellID(461536) then\n        local info = C_UnitAuras.GetPlayerAuraBySpellID(461536)\n        local rem = info.expirationTime - GetTime()\n        if (rem < 8 or envTable._HealthPercent < 20 or Plater.UnitHasAura (unitFrame, 1217685)) then\n            unitFrame:SetAlpha(0)\n            return\n        end\n    end\n    \n    if unitFrame:GetAlpha() < 1 then\n        unitFrame:SetAlpha(1)\n    end\nend",
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend",
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    unitFrame:SetAlpha(1)\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1745292683,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Enabled"] = false,
["Revision"] = 1286,
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Abilities casted on the tank.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Name"] = "Cast - Tankbuster [P]",
["PlaterCore"] = 1,
["Prio"] = 99,
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 2,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 10,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.ShowHealthBar(unitFrame)\n    Plater.EnableHighlight(unitFrame)\nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if ECHO_DIMI_BAD_GUIDS then\n        local guid = UnitGUID(unitId)\n        if ECHO_DIMI_BAD_GUIDS[guid] then\n            Plater.HideHealthBar(unitFrame)\n            Plater.DisableHighlight(unitFrame)\n            unitFrame.castBar:Hide()\n        end\n    end\nend\n\n\n\n\n\n",
["Time"] = 1759089302,
["Icon"] = 1417424,
["url"] = "",
["NpcNames"] = {
"245705",
},
["Options"] = {
},
["Enabled"] = true,
["Revision"] = 30,
["semver"] = "",
["Name"] = "ECHO DIMI ADD HIDER",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if ECHO_DIMI_BAD_GUIDS then\n        local guid = UnitGUID(unitId)\n        if ECHO_DIMI_BAD_GUIDS[guid] then\n            Plater.HideHealthBar(unitFrame)\n            Plater.DisableHighlight(unitFrame)\n            unitFrame.castBar:Hide()\n        end\n    end\nend\n\n\n\n\n\n",
["Author"] = "Kastfall-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.ShowHealthBar(unitFrame)\n    Plater.EnableHighlight(unitFrame)\nend",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
},
["npcs_renamed"] = {
[114627] = "Terror",
},
["blizzard_nameplate_large_font"] = "Expressway",
["saved_cvars_last_change"] = {
["ShowClassColorInNameplate"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOverlapV"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:5510",
["ShowNamePlateLoseAggroFlash"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemyMinus"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["NamePlateClassificationScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyTotems"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplatePersonalHideDelaySeconds"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowDebuffsOnFriendly"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplatePersonalShowInCombat"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyBuffs"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateResourceOnTarget"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["clampTargetNameplateToScreen"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowAll"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMaxDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyMinions"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelfScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateTargetBehindMaxDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemies"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["NamePlateVerticalScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelectedAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowSelf"] = "...e/AddOns/WeakAuras/AuraEnvironmentWrappedSystems.lua:51",
["nameplateShowPersonalCooldowns"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelfTopInset"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMotionSpeed"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateGlobalScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemyMinions"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemyPets"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyNPCs"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelectedScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinAlphaDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMotion"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateTargetRadialPosition"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowOnlyNames"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOtherTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:5104",
["nameplateShowFriendlyPets"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelfBottomInset"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemyTotems"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyGuardians"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelfAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateLargeTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:5104",
["NamePlateHorizontalScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOverlapH"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriends"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
},
["aura_cache_by_name"] = {
["ultimate form"] = {
323095,
323524,
},
["storm dominance"] = {
374918,
396076,
396077,
396111,
396113,
},
["fear"] = {
5782,
12096,
12542,
22678,
26070,
26580,
26661,
27641,
27990,
29168,
29321,
30002,
30530,
30584,
30615,
31358,
31970,
32241,
33547,
33924,
34259,
38154,
38595,
38660,
39119,
39176,
39210,
39415,
41150,
46561,
51240,
59669,
65809,
68950,
70171,
81442,
83613,
113712,
115186,
117573,
118699,
125204,
128098,
130616,
130940,
134938,
142884,
144062,
173093,
182806,
204730,
205398,
214304,
220540,
221424,
223170,
240136,
242084,
242739,
245902,
246277,
246307,
248028,
251419,
259874,
259995,
266918,
287685,
287687,
288545,
331741,
342914,
344887,
},
["exsanguinated"] = {
294100,
328897,
356372,
},
["in the spotlight"] = {
227931,
312926,
},
["flame dominance"] = {
374881,
396056,
396062,
396105,
396106,
},
["cloak of shadows"] = {
31224,
39666,
65961,
81549,
178055,
196518,
248773,
283106,
283108,
333920,
},
["echoing void"] = {
307232,
307236,
317014,
317020,
317022,
317029,
318280,
318485,
318486,
373281,
373304,
373305,
},
["greater fade"] = {
213602,
},
["blessing of freedom"] = {
1044,
234878,
262618,
299256,
305395,
},
["ice barrier"] = {
11426,
33245,
69787,
198094,
201565,
240074,
262251,
264458,
267504,
284882,
},
["nether ward"] = {
212295,
},
["aspect of the turtle"] = {
186265,
189949,
210761,
},
["concentrated flame"] = {
295368,
295373,
295374,
295375,
295376,
295377,
295378,
295379,
295380,
295384,
299349,
299353,
302564,
},
["frost dominance"] = {
374916,
396072,
396074,
396108,
396109,
},
["chaos brand"] = {
1490,
255260,
281242,
},
["whip rage"] = {
29340,
233210,
},
["bursting with pride"] = {
340873,
342332,
},
["entangling roots"] = {
339,
11922,
12747,
20654,
20699,
21331,
22127,
22415,
22800,
24648,
26071,
28858,
31287,
32173,
33844,
37823,
40363,
57095,
65857,
66070,
66967,
96633,
101155,
105143,
132743,
149065,
168248,
170855,
173089,
177606,
177607,
186456,
196216,
201192,
201589,
233873,
235963,
247564,
272681,
278176,
288581,
311634,
311761,
330873,
343238,
},
["guardian spirit"] = {
47788,
48153,
97983,
122845,
255312,
289623,
289626,
},
["survival instincts"] = {
50322,
61336,
85842,
236156,
236157,
328767,
},
["anti-magic zone"] = {
50461,
50462,
51052,
52893,
52894,
53636,
53637,
79907,
135233,
145629,
162624,
162625,
164065,
164225,
165775,
222791,
332829,
332831,
},
["hungering void"] = {
339426,
339958,
339969,
339980,
345218,
345219,
},
["power word: shield"] = {
17,
11647,
11835,
11974,
17139,
20697,
22187,
27607,
29408,
32595,
35944,
36052,
41373,
44175,
44291,
46193,
66099,
71548,
71780,
83842,
84039,
102409,
113734,
122808,
123258,
127399,
135313,
136100,
165718,
211558,
226076,
248441,
284471,
318158,
344426,
},
["defensive stance"] = {
7164,
41101,
53790,
143593,
145044,
146127,
147925,
164363,
193580,
197690,
212520,
219484,
238245,
},
["spell reflection"] = {
9943,
10074,
21118,
23920,
31533,
31534,
31554,
33961,
34783,
35399,
36096,
37885,
38331,
38592,
38599,
43443,
47981,
57643,
146120,
146122,
147923,
169339,
186704,
186705,
186706,
224740,
329267,
335255,
},
["guessing game"] = {
321471,
336499,
},
["alter time"] = {
108978,
110909,
127140,
342245,
342246,
342247,
347402,
},
["ancient flame"] = {
144691,
144695,
144699,
295365,
295367,
295369,
295372,
295381,
299348,
299350,
303380,
369990,
375583,
},
["blessing of sacrifice"] = {
6940,
199448,
200327,
},
["barkskin"] = {
20655,
22812,
173558,
182872,
327993,
},
["pistol shot"] = {
185763,
207820,
214779,
223933,
240073,
255966,
267241,
267452,
268229,
274253,
275000,
285167,
294934,
},
["morbid fixation"] = {
338504,
338606,
338610,
343555,
343556,
343558,
},
["enveloping mist"] = {
124682,
209193,
212414,
227345,
231605,
274062,
317602,
344008,
344240,
},
["coordinated assault"] = {
266779,
},
["selfless healer"] = {
85804,
114250,
128863,
216777,
},
["eternal torment"] = {
292926,
295777,
318449,
318450,
318451,
318464,
350075,
355790,
358962,
},
["effusive anima accelerator"] = {
352188,
353248,
353349,
360277,
},
["dampen harm"] = {
122278,
123715,
175395,
},
["dream delver"] = {
352786,
353353,
353354,
},
["haunted urn"] = {
228626,
348723,
},
["pillar of frost"] = {
51271,
167171,
281214,
316849,
},
["arcane intellect"] = {
1459,
13326,
36880,
45525,
129171,
266499,
367803,
},
["spiritwalker's grace"] = {
79206,
},
["dark soul: instability"] = {
113858,
},
["weapons of order"] = {
310454,
311054,
311075,
311123,
312106,
312951,
314473,
},
["astral shift"] = {
74312,
108271,
263786,
292158,
343196,
},
["divine favor"] = {
210294,
210303,
},
["spiteful"] = {
338510,
},
["touch of karma"] = {
122470,
124280,
125174,
},
["boneshatter shield"] = {
343470,
344423,
},
["ritual of desecration"] = {
388104,
389029,
395680,
},
["icebound aegis"] = {
321368,
321370,
321754,
321755,
},
["mort'regar's echoes"] = {
333575,
},
["regrowth"] = {
8936,
16561,
20665,
22373,
22695,
27637,
28744,
34361,
39000,
39125,
66067,
69882,
72922,
72932,
84158,
97426,
98099,
102047,
165753,
173791,
176218,
187697,
188905,
224527,
265532,
283745,
292627,
292734,
311571,
326689,
338857,
},
["engorge"] = {
321402,
334653,
},
["divine shield"] = {
642,
13874,
29382,
33581,
40733,
41367,
54322,
63148,
66010,
67251,
71550,
133093,
164410,
169631,
173086,
179493,
183248,
184028,
186521,
189679,
210377,
218344,
228050,
228177,
263323,
264115,
283627,
317131,
335103,
343150,
},
["metamorphosis"] = {
36298,
37673,
37768,
37905,
131451,
138033,
138555,
162264,
173685,
181968,
184895,
187827,
189743,
191427,
191428,
192504,
193435,
193502,
193803,
194611,
195449,
196787,
200166,
201453,
202740,
223903,
224282,
225191,
225193,
225195,
225205,
225323,
225852,
225853,
226681,
247121,
260416,
268257,
268353,
320103,
320104,
320421,
320422,
320645,
321067,
321068,
321259,
321260,
321315,
321316,
321671,
321672,
333390,
333391,
335878,
343774,
343775,
343776,
343777,
343783,
343784,
},
["dispersion"] = {
47585,
65544,
79811,
120044,
156868,
164444,
165766,
173206,
201250,
201251,
201257,
322108,
},
["sanguine ichor"] = {
226489,
226510,
226512,
340299,
340324,
342073,
},
["crippling poison"] = {
3408,
3409,
25809,
30981,
44289,
115196,
132747,
132748,
169622,
169623,
283648,
283649,
},
["intervene"] = {
3411,
34784,
41198,
122506,
147833,
199114,
203388,
316531,
},
["fortifying brew"] = {
115203,
120954,
122498,
201318,
243435,
292300,
322960,
325208,
},
["thorns"] = {
467,
15438,
21335,
21337,
22128,
22351,
22696,
25640,
25777,
31271,
33907,
34343,
34663,
35361,
43420,
66068,
113966,
165771,
188652,
203728,
209334,
232559,
236696,
258985,
288273,
305496,
305497,
},
["sphere of suppression"] = {
294906,
294907,
294908,
294909,
294910,
294912,
294919,
294920,
294922,
298292,
298418,
298419,
298420,
300012,
300013,
},
["evasion"] = {
4086,
5277,
15087,
31379,
37683,
38541,
70190,
78826,
79853,
84122,
90958,
128919,
173103,
203868,
226364,
257742,
259331,
292230,
329977,
344363,
},
["atrophic poison"] = {
83609,
381637,
392388,
},
["congealed contagion"] = {
321268,
328175,
333737,
340271,
340273,
},
["icebound fortitude"] = {
48792,
58130,
58837,
66023,
292152,
},
["amplifying poison"] = {
381664,
383414,
394328,
},
["rallying cry"] = {
31115,
31732,
85527,
97462,
97463,
122507,
148868,
290046,
316825,
},
["deadly poison"] = {
2818,
2823,
3583,
10022,
13582,
21787,
21788,
32970,
32971,
34616,
34655,
34657,
36872,
38519,
38520,
41191,
41192,
41485,
43580,
43581,
56145,
56149,
59479,
59482,
63755,
63756,
67710,
67711,
72329,
82632,
82633,
96648,
113780,
129410,
130980,
130981,
132745,
132746,
145419,
145420,
145421,
177918,
177919,
177920,
289078,
314113,
373774,
377030,
377036,
394324,
394325,
},
["wracking pain"] = {
93720,
100865,
101221,
101257,
101258,
250096,
265148,
273045,
329181,
329183,
335372,
345010,
361689,
365126,
367670,
},
["blood barrier"] = {
262980,
269185,
269281,
322759,
322766,
322773,
323482,
329840,
329849,
329852,
},
["kevin's wrath"] = {
352520,
352528,
352533,
352534,
},
["enraged regeneration"] = {
184364,
316474,
},
["soulglow spectrometer"] = {
352186,
352938,
352939,
352940,
358379,
},
["abomination limb"] = {
315443,
323710,
323798,
323950,
335486,
335933,
340735,
},
["seraphim"] = {
152262,
172320,
172321,
},
["sinful revelation"] = {
309623,
324260,
},
["blessing of protection"] = {
1022,
41450,
},
["predatory instincts"] = {
389808,
},
["scouring touch"] = {
356329,
},
["iron wire"] = {
196861,
256148,
},
["stygia tap"] = {
343224,
343613,
},
["pain suppression"] = {
33206,
69910,
122844,
129035,
},
["enslaved"] = {
201089,
204831,
211680,
222424,
268192,
299156,
303622,
323961,
},
["holy ward"] = {
213610,
233473,
234682,
240521,
},
["earth shield"] = {
379,
974,
32734,
38590,
54479,
54480,
55599,
55600,
56451,
57802,
57803,
58981,
58982,
59471,
59472,
60013,
60014,
66063,
66064,
67530,
67537,
69568,
69569,
69925,
69926,
77905,
79927,
79928,
101649,
101650,
143475,
143479,
145559,
145560,
159981,
159982,
165773,
199355,
199356,
204288,
204290,
226078,
254417,
254425,
268709,
268710,
374066,
374067,
377874,
377875,
383648,
},
["thunder clap"] = {
6343,
57832,
60019,
69304,
85216,
145046,
147683,
183543,
236389,
237917,
262538,
267578,
283929,
316143,
316414,
316490,
382590,
386028,
396719,
},
["life cocoon"] = {
116849,
165128,
209194,
},
["shadowfury"] = {
30283,
35373,
39082,
45270,
56733,
61463,
81441,
320132,
326475,
},
["blur"] = {
81216,
177566,
195450,
198589,
202818,
202819,
212800,
292222,
320407,
},
["mind flay"] = {
15407,
16568,
17165,
22919,
23953,
26044,
26143,
28310,
29407,
29570,
32417,
35507,
37276,
37330,
37621,
38243,
40842,
42396,
43512,
46562,
52586,
54339,
54805,
57779,
57941,
59367,
59974,
60006,
60472,
65488,
78751,
79541,
79711,
89032,
91134,
103024,
129033,
144293,
149984,
150886,
150893,
154125,
164445,
172670,
183324,
189873,
193473,
196508,
196509,
201520,
202894,
203037,
203313,
203375,
208697,
216513,
218510,
222075,
234696,
241934,
254123,
260182,
260304,
263117,
264892,
271649,
274019,
274032,
277358,
277521,
278311,
284414,
290402,
292974,
299301,
303566,
306391,
308172,
308884,
308885,
310552,
310555,
312526,
312679,
314187,
314188,
314592,
315949,
316835,
317490,
319027,
321330,
},
["diffuse magic"] = {
122783,
},
["spectral"] = {
290506,
344739,
346603,
},
["bolster"] = {
209859,
280001,
},
["sanguine sphere"] = {
163689,
166591,
},
["ironbark"] = {
102342,
197061,
},
["strength of the pack"] = {
64369,
64381,
171114,
178149,
178150,
189715,
199184,
199186,
200922,
260057,
341222,
341223,
359768,
365338,
},
["numbing poison"] = {
5760,
5761,
158873,
158876,
311373,
342947,
359078,
},
["netherwalk"] = {
31599,
196555,
},
["voidform"] = {
126733,
126738,
185916,
194249,
199415,
218413,
227386,
228264,
250844,
284508,
},
["lunar empowerment"] = {
211091,
292664,
},
["commanding presence"] = {
328839,
330545,
330546,
},
["crackling shield"] = {
376705,
376724,
},
["loyal beasts"] = {
326450,
},
["insidious chill"] = {
391566,
391568,
},
["bubbling pox"] = {
331016,
},
["nimble steps"] = {
352366,
354050,
354051,
354052,
},
["consecration"] = {
26573,
32773,
33559,
36946,
37553,
38385,
41541,
43429,
57798,
59998,
69930,
79966,
81297,
107100,
111365,
153441,
158416,
162642,
165711,
184047,
188370,
190010,
200667,
200678,
200679,
204242,
205228,
216217,
221645,
221730,
233390,
243597,
251151,
251152,
251549,
251550,
264082,
283579,
283582,
283583,
288807,
288808,
288809,
290496,
290497,
290498,
294346,
294347,
327980,
344172,
382484,
387881,
},
["mind soothe"] = {
453,
},
["mind sear"] = {
32000,
36447,
48045,
49821,
60440,
60441,
85643,
85647,
135513,
157170,
157172,
172877,
172878,
177402,
177403,
208232,
237388,
284430,
284431,
294009,
294018,
344752,
344754,
},
["tidebringer"] = {
236501,
236502,
},
["prey on the weak"] = {
131511,
255909,
389788,
389806,
},
["ice block"] = {
27619,
36911,
41590,
45438,
45776,
46604,
46882,
56124,
56644,
62766,
65802,
68252,
91686,
99247,
121548,
145533,
167415,
172987,
176269,
188839,
211011,
211014,
240133,
241720,
241722,
251345,
256590,
256730,
262192,
271527,
278960,
287322,
287347,
290049,
304344,
304345,
304463,
314908,
322683,
329007,
341857,
},
["inspiring presence"] = {
185089,
185090,
192944,
320973,
320980,
327808,
327812,
335034,
343502,
},
["fixate"] = {
12021,
34719,
40414,
40607,
40892,
41294,
41295,
41614,
41951,
41976,
49026,
52537,
53626,
73544,
73545,
73686,
73687,
78617,
78618,
78625,
80093,
80094,
91829,
91830,
97025,
97027,
97486,
99284,
99526,
99559,
99849,
99999,
100007,
100011,
100014,
100288,
100548,
105695,
111723,
111725,
118303,
118448,
118964,
120434,
120831,
120837,
120839,
122477,
124070,
125390,
125393,
125895,
125896,
129149,
132760,
132984,
133042,
133112,
133196,
133843,
136594,
137686,
137687,
138486,
139034,
140189,
140547,
141918,
142097,
142388,
142870,
143292,
143445,
143682,
143864,
144036,
146540,
146581,
147665,
147712,
148243,
149337,
150702,
152310,
153787,
154769,
154952,
155196,
155207,
156652,
156653,
156665,
157168,
157625,
157763,
158702,
159373,
167757,
172866,
173079,
173080,
174627,
176544,
177643,
178139,
186572,
186574,
187621,
197849,
197850,
198161,
198477,
199618,
199619,
200349,
201015,
202081,
202453,
203983,
204873,
205011,
205054,
206364,
208739,
210099,
213466,
216115,
218369,
220727,
224072,
224307,
224532,
225388,
226044,
226088,
227221,
229593,
234189,
238674,
239280,
239556,
241657,
243461,
243590,
243613,
244653,
244657,
244860,
245406,
253001,
254491,
255860,
256311,
257858,
262240,
262241,
262242,
262243,
262244,
262245,
264215,
264219,
267406,
269103,
269936,
270509,
272427,
272482,
275269,
275270,
276020,
277556,
285694,
285696,
285697,
285702,
285703,
285813,
286135,
286539,
286974,
287845,
288390,
288623,
289925,
291917,
296524,
299484,
304298,
305699,
306957,
307260,
308360,
309859,
314729,
315093,
315094,
318059,
318078,
318540,
319781,
320740,
326082,
326892,
327902,
330115,
330966,
330967,
331343,
337617,
340797,
340827,
343496,
},
["prideful"] = {
340186,
340384,
340880,
342333,
},
["ascendance"] = {
28200,
28204,
114049,
114050,
114051,
114052,
147059,
163296,
173160,
191475,
191478,
344548,
},
["anti-magic shell"] = {
31662,
48707,
49088,
53766,
171465,
173097,
181425,
203272,
218977,
218988,
292150,
311975,
},
["spectral sight"] = {
188501,
199461,
199490,
202688,
215725,
220239,
220243,
233028,
320379,
},
["enrage"] = {
8599,
12686,
15061,
15097,
15716,
18501,
19451,
19812,
22428,
23128,
23342,
26041,
26051,
28371,
30485,
31540,
31915,
32714,
33958,
34670,
37605,
37648,
37975,
38046,
38166,
38664,
39031,
41254,
41447,
42705,
42745,
43139,
44427,
45111,
47399,
48138,
48142,
48193,
50420,
51513,
52470,
54287,
54427,
55285,
56646,
59697,
59707,
59828,
60075,
61369,
63227,
68335,
68541,
70371,
71205,
72143,
75998,
76100,
76862,
78722,
78943,
80084,
80467,
86736,
102134,
108169,
109889,
109890,
115430,
119629,
126370,
127823,
129016,
130196,
133052,
140758,
144404,
145411,
145554,
145692,
145974,
150498,
150500,
154982,
156314,
163483,
164257,
164811,
165947,
172360,
172781,
175192,
175337,
176048,
178658,
179681,
184361,
184362,
186882,
188480,
190225,
197064,
201279,
207680,
212561,
214037,
216363,
218121,
222022,
222042,
224604,
225319,
225320,
228318,
228895,
237689,
245566,
257260,
257391,
257609,
258463,
259975,
260355,
261893,
266095,
271369,
273422,
273874,
275091,
275667,
277573,
297152,
298078,
300414,
302483,
304178,
307506,
311086,
313675,
314466,
316133,
316424,
316425,
317535,
317553,
319147,
321820,
323599,
323828,
324085,
329989,
330631,
332169,
334800,
343484,
},
["defensive countermeasure"] = {
297133,
299428,
300996,
303941,
},
["destabilize"] = {
123059,
157657,
163466,
263902,
334688,
334695,
},
["filthy transfusion"] = {
273834,
273835,
273836,
},
["eye for an eye"] = {
25988,
25997,
205191,
205202,
},
["nothing personal"] = {
286573,
286579,
286581,
289467,
},
["mutilated flesh"] = {
211672,
340431,
381672,
394021,
},
["butcher cut"] = {
279416,
279426,
},
["divine protection"] = {
498,
13007,
27778,
27779,
138250,
149150,
174967,
174968,
174987,
288292,
288294,
},
["moonkin aura"] = {
209740,
209746,
},
["might of the upper reaches"] = {
333579,
},
["double tap"] = {
203412,
203414,
203486,
260402,
},
["incarnation: chosen of elune"] = {
102560,
184747,
},
["undying rage"] = {
333227,
},
["recharge anima"] = {
321367,
324046,
327280,
327416,
},
["celestial alignment"] = {
173562,
194223,
},
["mystic touch"] = {
8647,
113746,
331653,
},
["droman's wrath"] = {
323059,
},
["raging tantrum"] = {
333241,
333242,
},
["forsworn doctrine"] = {
317936,
331213,
},
["bulwark of maldraxxus"] = {
336449,
336450,
336451,
},
["combustion"] = {
29977,
74630,
99303,
100271,
190319,
197889,
304888,
321710,
323048,
},
["unending resolve"] = {
104773,
173189,
317138,
},
["shadow's grasp"] = {
206760,
263656,
263658,
306965,
},
["avenging wrath"] = {
31884,
43430,
50837,
66011,
113127,
121163,
158405,
162762,
164397,
167917,
173312,
181043,
185413,
189292,
195272,
218346,
242743,
252856,
267511,
282113,
292266,
317872,
327979,
339044,
343029,
},
["all-consuming spite"] = {
343553,
},
["drain soul"] = {
32862,
35839,
60452,
74402,
79094,
129562,
136378,
139420,
161718,
171893,
181965,
182065,
185181,
190711,
197801,
198590,
205292,
209200,
209264,
231853,
242938,
251528,
328785,
346562,
},
["earth dominance"] = {
374917,
396067,
396068,
396085,
396098,
},
["die by the sword"] = {
118038,
236385,
315948,
},
["power word: fortitude"] = {
13864,
21562,
23947,
23948,
36004,
58921,
74973,
94366,
133538,
160637,
165739,
183585,
206629,
211681,
266501,
267528,
284466,
286145,
},
["dark soul: misery"] = {
113860,
},
["cyclone"] = {
29538,
32334,
33786,
38516,
38517,
39594,
40578,
43528,
60236,
61662,
62632,
62633,
65859,
88010,
92371,
143499,
143551,
151165,
160209,
189454,
189947,
189950,
193121,
193244,
203562,
203596,
204832,
208056,
208060,
233946,
234175,
255793,
261521,
268341,
},
},
["blizzard_nameplate_font_override_enabled"] = true,
["aura_stack_anchor"] = {
["y"] = 7,
["x"] = 1.5,
["side"] = 5,
},
["cast_statusbar_fadein_time"] = 0.009999999776482582,
["indicator_raidmark_scale"] = 0.699999988079071,
["cast_statusbar_spark_alpha"] = 1,
["aura2_y_offset"] = 1.599990844726563,
["aura_timer_text_anchor"] = {
["x"] = 0.5,
},
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["spellname_text_font"] = "Expressway",
["percent_text_show_decimals"] = false,
["castbar_enabled"] = false,
["power_percent_text_enabled"] = false,
["healthbar_enabled"] = false,
["percent_show_percent"] = false,
["power_percent_text_font"] = "Expressway",
["power_enabled"] = false,
["percent_text_enabled"] = false,
["percent_text_ooc"] = false,
["spellpercent_text_enabled"] = false,
["percent_show_health"] = false,
["module_enabled"] = false,
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 9,
["spellpercent_text_font"] = "Expressway",
["level_text_size"] = 6,
["only_thename"] = true,
["big_actortitle_text_font"] = "Expressway",
["cast"] = {
50,
1,
},
["spellpercent_text_size"] = 7,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["fixed_class_color"] = {
1,
0,
0.501960813999176,
},
["level_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["big_actorname_text_color"] = {
0.5,
1,
0.5,
},
["percent_text_show_decimals"] = false,
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
50,
1,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
0.06999999284744263,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
0.06999999284744263,
},
["level_text_font"] = "Expressway",
["actorname_text_font"] = "Expressway",
["quest_color"] = {
0.5,
1,
0,
1,
},
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["actorname_text_size"] = 6,
["big_actortitle_text_size"] = 9,
["big_actorname_text_font"] = "Expressway",
["actorname_use_guild_color"] = false,
["all_names"] = false,
["spellname_text_font"] = "Expressway",
["big_actorname_text_outline"] = "OUTLINE",
["mana"] = {
nil,
4,
},
["quest_enabled"] = true,
["level_text_alpha"] = 0.2999999821186066,
["health_incombat"] = {
50,
1,
},
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 5,
["only_damaged"] = false,
["buff_frame_y_offset"] = 0,
["quest_color_enabled"] = true,
["percent_show_percent"] = false,
["percent_text_font"] = "Expressway",
["only_names"] = true,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["relevance_state"] = 3,
["health"] = {
50,
1,
},
["percent_text_size"] = 6,
["spellname_text_size"] = 6,
["big_actortitle_text_color"] = {
1,
0.8,
0,
},
["actorname_use_friends_color"] = false,
["mana_incombat"] = {
nil,
4,
},
},
["friendlynpc"] = {
["big_actorname_text_size"] = 7,
["spellpercent_text_font"] = "Expressway",
["level_text_size"] = 7,
["big_actortitle_text_font"] = "Expressway",
["cast"] = {
110,
5,
},
["spellpercent_text_size"] = 7,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 7,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["enabled"] = false,
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
110,
5,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["level_text_font"] = "Expressway",
["actorname_text_font"] = "Expressway",
["actorname_text_size"] = 7,
["big_actorname_text_font"] = "Expressway",
["all_names"] = false,
["actorname_text_outline"] = "OUTLINE",
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 7,
["actorname_text_spacing"] = 6,
["percent_text_font"] = "Expressway",
["percent_show_percent"] = false,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["spellname_text_size"] = 7,
["health"] = {
110,
15,
},
["spellname_text_font"] = "Expressway",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["relevance_state"] = 3,
["health_incombat"] = {
110,
15,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
},
["global_health_width"] = 110,
["global_health_height"] = 15,
["enemyplayer"] = {
["big_actorname_text_size"] = 8,
["spellpercent_text_font"] = "Expressway",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Expressway",
["cast"] = {
105,
},
["spellpercent_text_size"] = 8,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 8,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["spellpercent_text_anchor"] = {
["x"] = 1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
105,
10,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 1,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = 1,
},
["level_text_font"] = "Expressway",
["actorname_text_font"] = "Expressway",
["quest_color_neutral"] = {
1,
0.615686297416687,
0.9450981020927429,
1,
},
["actorname_text_size"] = 8,
["big_actorname_text_font"] = "Expressway",
["all_names"] = true,
["quest_color_enemy"] = {
1,
0.615686297416687,
0.9450981020927429,
1,
},
["actorname_text_outline"] = "OUTLINE",
["level_text_alpha"] = 0.2999999821186066,
["level_text_anchor"] = {
["y"] = 0,
},
["percent_text_size"] = 8,
["actorname_text_spacing"] = 7,
["percent_text_font"] = "Expressway",
["spellname_text_font"] = "Expressway",
["castbar_offset"] = -0.5,
["quest_enabled"] = true,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_size"] = 8,
["quest_color_enabled"] = true,
["health_incombat"] = {
105,
13,
},
["health"] = {
105,
13,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_show_health"] = false,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 1,
},
["level_text_enabled"] = false,
},
["enemynpc"] = {
["castbar_offset"] = -0.5,
["spellpercent_text_font"] = "Expressway",
["big_actortitle_text_font"] = "Expressway",
["cast"] = {
105,
},
["spellpercent_text_size"] = 8,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 8,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["spellpercent_text_anchor"] = {
["x"] = 1,
},
["level_text_anchor"] = {
["y"] = 0,
},
["cast_incombat"] = {
105,
10,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 1,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = 1,
},
["level_text_font"] = "Expressway",
["actorname_text_font"] = "Expressway",
["quest_color_neutral"] = {
nil,
0.7019608020782471,
},
["actorname_text_size"] = 8,
["big_actorname_text_font"] = "Expressway",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 1,
},
["percent_text_size"] = 8,
["actorname_text_spacing"] = 7,
["percent_text_font"] = "Expressway",
["quest_color_enemy"] = {
nil,
0.7019608020782471,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_show_decimals"] = false,
["big_actorname_text_size"] = 8,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_size"] = 8,
["health"] = {
105,
13,
},
["health_incombat"] = {
105,
13,
},
["percent_show_health"] = false,
["spellname_text_font"] = "Expressway",
["level_text_alpha"] = 0.2999999821186066,
["level_text_enabled"] = false,
},
},
["indicator_quest"] = false,
["aura_y_offset"] = 1.399993896484375,
["use_ui_parent"] = true,
["aura_show_defensive_cd"] = true,
["expansion_triggerwipe"] = {
[9] = true,
[10] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.7803922295570374,
0.250980406999588,
0.250980406999588,
0.9600000008940697,
},
["show_interrupt_author"] = false,
["indicator_spec"] = false,
["color_override_colors"] = {
[3] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
[4] = {
0.8509804606437683,
0.8156863451004028,
0.5882353186607361,
},
[5] = {
0.5058823823928833,
0.7803922295570374,
0.5137255191802979,
},
},
["resources_settings"] = {
["chr"] = {
["Player-1084-0AF5D1C2"] = "ComboPoints",
["Player-3674-0B0DCEB0"] = "ComboPoints",
["Player-4606-005E885A"] = "Runes",
["Player-1084-0B154935"] = "ComboPoints",
["Player-57-0BA165CE"] = "Runes",
["Player-57-08C1DC17"] = "HolyPower",
["Player-1084-0B154D7D"] = "ComboPoints",
["Player-4606-005E55C3"] = "ComboPoints",
["Player-57-0D480764"] = "SoulShards",
["Player-57-0D62515D"] = "Essence",
["Player-1084-0B154940"] = "ComboPoints",
["Player-57-0D4542F5"] = "ComboPoints",
["Player-3674-0B3DDFC9"] = "ComboPoints",
["Player-1084-0B206C78"] = "Runes",
["Player-4606-005FB170"] = "ArcaneCharges",
["Player-1403-0A579DD7"] = "ComboPoints",
["Player-1084-0B15494E"] = "ComboPoints",
["Player-57-0B43B146"] = "SoulShards",
["Player-3674-0B09C9EB"] = "Essence",
["Player-581-0A4DE5F8"] = "ComboPoints",
["Player-3674-0B2F8510"] = "ComboPoints",
["Player-57-0B7D8135"] = "Chi",
["Player-57-0B1CFD21"] = "ComboPoints",
["Player-1084-0B15493B"] = "ComboPoints",
["Player-57-0B7B51F3"] = "ComboPoints",
["Player-512-0561998A"] = "ComboPoints",
["Player-3684-0E213A9B"] = "Essence",
["Player-3674-0B0D44FC"] = "Chi",
["Player-4606-005E3292"] = "Runes",
["Player-4606-005E45ED"] = "ComboPoints",
["Player-4606-0061A91E"] = "Chi",
["Player-580-0A4B7060"] = "ComboPoints",
["Player-4606-0068C31B"] = "SoulShards",
["Player-57-0A630FDB"] = "ArcaneCharges",
["Player-4606-005F7E70"] = "ComboPoints",
["Player-4606-005DFF9F"] = "HolyPower",
["Player-1390-0B899D31"] = "Runes",
["Player-1084-0AD73B44"] = "ArcaneCharges",
["Player-4606-005E8C3F"] = "ComboPoints",
["Player-3684-0E4896BA"] = "Essence",
["Player-4606-005E55AB"] = "ComboPoints",
["Player-3674-0B456429"] = "SoulShards",
["Player-3674-0B2227C2"] = "HolyPower",
["Player-4606-005FADB2"] = "SoulShards",
["Player-578-0A4D4A86"] = "ComboPoints",
["Player-4606-005DFFA1"] = "ComboPoints",
["Player-3674-0B4173F5"] = "ComboPoints",
["Player-4606-006166B5"] = "HolyPower",
["Player-3684-0E213266"] = "SoulShards",
["Player-57-0D48734C"] = "SoulShards",
["Player-1084-0AF5D02A"] = "Runes",
["Player-1084-0AF3E1E4"] = "ComboPoints",
["Player-1084-0B15494C"] = "ComboPoints",
},
},
["health_animation_time_dilatation"] = 1.799999952316284,
["npc_cache"] = {
[40788] = {
"Mindbender Ghur'sha",
"Throne of the Tides",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
"enUS",
},
[244137] = {
"Shadowguard Arcanotech",
"Fungal Folly",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
"enUS",
},
[99200] = {
"Dresaron",
"Darkheart Thicket",
},
[244138] = {
"Shadeye Observer",
"Fungal Folly",
"enUS",
},
[166608] = {
"Mueh'zala",
"De Other Side",
},
[190405] = {
"Infuser Sariya",
"Halls of Infusion",
"enUS",
},
[184520] = {
"Anduin's Despair",
"Sepulcher of the First Ones",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
"enUS",
},
[230322] = {
"Stix Bunkjunker",
"Liberation of Undermine",
"enUS",
},
[210108] = {
"E.D.N.A",
"The Stonevault",
"enUS",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[213179] = {
"Avanoxx",
"Ara-Kara, City of Echoes",
"enUS",
},
[244140] = {
"Shadowguard Steelsoul",
"Fungal Folly",
"enUS",
},
[164563] = {
"Vicious Gargon",
"Halls of Atonement",
"enUS",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[200387] = {
"Shambling Infester",
"Temple of the Jade Serpent",
"enUS",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[167892] = {
"Tormented Soul",
"Halls of Atonement",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
"enUS",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
"enUS",
},
[211904] = {
"Tainted Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[230583] = {
"Sprocketmonger Lockenstock",
"Liberation of Undermine",
"enUS",
},
[234933] = {
"Taah'bat",
"Eco-Dome Al'dani",
"enUS",
},
[209090] = {
"Tindral Sageswift",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[213696] = {
"Molten Scorpid",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[228537] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[136934] = {
"Weapons Tester",
"The MOTHERLODE!!",
"enUS",
},
[180433] = {
"Wandering Pulsar",
"Tazavesh, the Veiled Market",
"enUS",
},
[131817] = {
"Cragmaw the Infested",
"The Underrot",
"enUS",
},
[102019] = {
"Stormforged Obliterator",
"Halls of Valor",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[131818] = {
"Marked Sister",
"Waycrest Manor",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
"enUS",
},
[98949] = {
"Smashspite the Hateful",
"Black Rook Hold",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
"enUS",
},
[211140] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[152033] = {
"Inconspicuous Plant",
"Operation: Mechagon",
"enUS",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[184018] = {
"Bromach",
"Uldaman: Legacy of Tyr",
"enUS",
},
[102404] = {
"Stoneclaw Grubmaster",
"Neltharion's Lair",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
},
[129527] = {
"Bilge Rat Buccaneer",
"Freehold",
"enUS",
},
[59726] = {
"Peril",
"Temple of the Jade Serpent",
"enUS",
},
[245173] = {
"Infused Tangle",
"Manaforge Omega",
"enUS",
},
[101637] = {
"Valarjar Aspirant",
"Halls of Valor",
},
[234939] = {
"Torque Clankfire",
"The Underkeep",
"enUS",
},
[184020] = {
"Hulking Berserker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[126969] = {
"Trothak",
"Freehold",
},
[100486] = {
"Risen Arcanist",
"Black Rook Hold",
},
[44566] = {
"Ozumat",
"Throne of the Tides",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
"enUS",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
"enUS",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[131824] = {
"Sister Solena",
"Waycrest Manor",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
"enUS",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[178394] = {
"Cartel Lackey",
"Tazavesh, the Veiled Market",
"enUS",
},
[131825] = {
"Sister Briar",
"Waycrest Manor",
},
[244922] = {
"Shadowguard Phaseblade",
"Manaforge Omega",
"enUS",
},
[233152] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
"enUS",
},
[133361] = {
"Wasting Servant",
"Waycrest Manor",
},
[244411] = {
"Pactsworn Arcanist",
"Sidestreet Sluice",
"enUS",
},
[150250] = {
"Pistonhead Blaster",
"Operation: Mechagon",
"enUS",
},
[220616] = {
"Corridor Sleeper",
"Darkflame Cleft",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
"enUS",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[150251] = {
"Pistonhead Mechanic",
"Operation: Mechagon",
"enUS",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
"enUS",
},
[225479] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[244414] = {
"Unbound Remnant",
"Sidestreet Sluice",
"enUS",
},
[131318] = {
"Elder Leaxa",
"The Underrot",
"enUS",
},
[244415] = {
"Pactsworn Dustblade",
"Sidestreet Sluice",
"enUS",
},
[82579] = {
"Grom'kar Far Seer",
"Grimrail Depot",
"enUS",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
"enUS",
},
[190426] = {
"Decay Totem",
"Brackenhide Hollow",
"enUS",
},
[237763] = {
"Nexus-King Salhadaar",
"Manaforge Omega",
"enUS",
},
[150254] = {
"Scraphound",
"Operation: Mechagon",
"enUS",
},
[53140] = {
"Son of Flame",
"Firelands",
"enUS",
},
[222923] = {
"Repurposed Loaderbot",
"The Stonevault",
"enUS",
},
[168934] = {
"Enraged Spirit",
"De Other Side",
},
[217039] = {
"Nerubian Hauler",
"Ara-Kara, City of Echoes",
"enUS",
},
[244418] = {
"Pactsworn Wildcaller",
"Sidestreet Sluice",
"enUS",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
},
[126847] = {
"Captain Raoul",
"Freehold",
},
[223181] = {
"Agile Pursuer",
"City of Threads",
"enUS",
},
[190174] = {
"Hypnosis Bat",
"Tazavesh, the Veiled Market",
},
[223182] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[220368] = {
"Failed Batch",
"Cinderbrew Meadery",
"enUS",
},
[126848] = {
"Captain Eudora",
"Freehold",
"enUS",
},
[202969] = {
"Empty Recollection",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[5913] = {
"Tremor Totem",
"The Battle for Gilneas",
},
[242630] = {
"Crazed Nerubian Lord",
"Fungal Folly",
"enUS",
},
[216275] = {
"Brann's Epic Egg",
"Fungal Folly",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
"enUS",
},
[186338] = {
"Maruuk",
"The Nokhud Offensive",
"enUS",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[164589] = {
"Regenerating Wildseed",
"Sanctum of Domination",
},
[242631] = {
"Overcharged Sentinel",
"Eco-Dome Al'dani",
"enUS",
},
[234955] = {
"Wastelander Pactspeaker",
"Eco-Dome Al'dani",
"enUS",
},
[237514] = {
"A'wazj",
"Eco-Dome Al'dani",
"enUS",
},
[244423] = {
"Wild Duneflyer",
"Sidestreet Sluice",
"enUS",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[192481] = {
"Decaying Slime",
"Brackenhide Hollow",
"enUS",
},
[81432] = {
"Grom'kar Technician",
"Iron Docks",
},
[114312] = {
"Moroes",
"Return to Karazhan",
},
[234957] = {
"Wastelander Ritualist",
"Eco-Dome Al'dani",
"enUS",
},
[196576] = {
"Spellbound Scepter",
"UNKNOWN",
"enUS",
},
[200926] = {
"Igira the Cruel",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[245705] = {
"Voidwarden",
"Manaforge Omega",
"enUS",
},
[200927] = {
"Smolderon",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[244426] = {
"Feral Warpstalker",
"Sidestreet Sluice",
"enUS",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[118791] = {
"Sturdy Love Fool",
"Tazavesh, the Veiled Market",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[101008] = {
"Stinging Swarm",
"Black Rook Hold",
},
[234960] = {
"Tamed Ruinstalker",
"Eco-Dome Al'dani",
"enUS",
},
[135169] = {
"Spirit Drain Totem",
"The Underrot",
"enUS",
},
[191206] = {
"Primalist Mage",
"Vault of the Incarnates",
"enUS",
},
[57109] = {
"Minion of Doubt",
"Temple of the Jade Serpent",
"enUS",
},
[40925] = {
"Tainted Sentry",
"Throne of the Tides",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
},
[234962] = {
"Wastelander Farstalker",
"Eco-Dome Al'dani",
"enUS",
},
[231380] = {
"Undercrawler",
"Operation: Floodgate",
"enUS",
},
[162038] = {
"Regal Mistdancer",
"Sanguine Depths",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[45915] = {
"Armored Mistral",
"The Vortex Pinnacle",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
"enUS",
},
[184300] = {
"Ebonstone Golem",
"Uldaman: Legacy of Tyr",
"enUS",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[86809] = {
"Grom'kar Incinerator",
"Iron Docks",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[114316] = {
"Baroness Dorothea Millstipe",
"Return to Karazhan",
},
[190187] = {
"Draconic Image",
"The Azure Vault",
"enUS",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
"enUS",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[131849] = {
"Crazed Marksman",
"Waycrest Manor",
},
[114317] = {
"Lady Catriona Von'Indi",
"Return to Karazhan",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[231385] = {
"Darkfuse Inspector",
"Operation: Floodgate",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[131850] = {
"Maddened Survivalist",
"Waycrest Manor",
},
[98965] = {
"Kur'talos Ravencrest",
"Black Rook Hold",
},
[127879] = {
"Shieldbearer of Zul",
"Atal'Dazar",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
"enUS",
},
[199659] = {
"Warlord Kagni",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[86684] = {
"Feral Lasher",
"The Everbloom",
"enUS",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[39392] = {
"Faceless Corruptor",
"Grim Batol",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[45917] = {
"Cloud Prince",
"The Vortex Pinnacle",
},
[239833] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[242648] = {
"Nascent Shadowguard",
"Manaforge Omega",
"enUS",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[214502] = {
"The Bloodbound Horror",
"Nerub-ar Palace",
"enUS",
},
[56792] = {
"Figment of Doubt",
"Temple of the Jade Serpent",
"enUS",
},
[101398] = {
"Psyfiend",
"Alterac Valley",
},
[239834] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[234205] = {
"Corruption Parasite",
"Excavation Site 9",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
},
[210153] = {
"Ol' Waxbeard",
"Darkflame Cleft",
"enUS",
},
[240091] = {
"Monstrous Larva",
"Fungal Folly",
"enUS",
},
[234206] = {
"Nightmare Crawler",
"Excavation Site 9",
"enUS",
},
[205804] = {
"Risen Dragon",
"Dawn of the Infinite",
"enUS",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
"enUS",
},
[223204] = {
"Chamber Guardian",
"Nerub-ar Palace",
"enUS",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[231904] = {
"Punchy Thug",
"Fungal Folly",
"enUS",
},
[244442] = {
"Mercenary Acquisitionist",
"Fungal Folly",
"enUS",
},
[128650] = {
"Chopper Redhook",
"Siege of Boralus",
"enUS",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[178171] = {
"Stormforged Guardian",
"Tazavesh, the Veiled Market",
"enUS",
},
[186615] = {
"The Raging Tempest",
"The Nokhud Offensive",
"enUS",
},
[207341] = {
"Blistering Spear",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[210156] = {
"Skarmorak",
"The Stonevault",
"enUS",
},
[214506] = {
"Broodtwister Ovi'nax",
"Nerub-ar Palace",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[186616] = {
"Granyth",
"The Nokhud Offensive",
"enUS",
},
[231906] = {
"Aerial Support Bot",
"Sidestreet Sluice",
"enUS",
},
[244444] = {
"Great Devourer",
"Fungal Folly",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
},
[128651] = {
"Hadal Darkfathom",
"Siege of Boralus",
"enUS",
},
[104215] = {
"Patrol Captain Gerdo",
"Court of Stars",
},
[59544] = {
"The Nodding Tiger",
"Temple of the Jade Serpent",
"enUS",
},
[163077] = {
"Azules",
"Spires of Ascension",
},
[208367] = {
"Pip",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[231908] = {
"Bopper Bot",
"Fungal Folly",
"enUS",
},
[95772] = {
"Frenzied Nightclaw",
"Darkheart Thicket",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
},
[175616] = {
"Zo'phex",
"Tazavesh, the Veiled Market",
"enUS",
},
[231909] = {
"Underpaid Brute",
"Fungal Folly",
"enUS",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
},
[231910] = {
"Masked Freelancer",
"Fungal Folly",
"enUS",
},
[244448] = {
"Invasive Phasecrawler",
"Fungal Folly",
"enUS",
},
[104217] = {
"Talixae Flamewreath",
"Court of Stars",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[206068] = {
"Temporal Fusion",
"Dawn of the Infinite",
"enUS",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[162058] = {
"Ventunax",
"Spires of Ascension",
},
[164873] = {
"Runestag Elderhorn",
"De Other Side",
},
[43873] = {
"Altairus",
"The Vortex Pinnacle",
},
[104218] = {
"Advisor Melandrus",
"Court of Stars",
},
[162059] = {
"Kin-Tara",
"Spires of Ascension",
},
[82597] = {
"Grom'kar Captain",
"Grimrail Depot",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[162060] = {
"Oryphrion",
"Spires of Ascension",
},
[164363] = {
"Undying Stonefiend",
"Halls of Atonement",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[180484] = {
"Vilt",
"Tazavesh, the Veiled Market",
"enUS",
},
[162317] = {
"Gorechop",
"Theater of Pain",
"enUS",
},
[57819] = {
"Corrupted Fragment",
"Dragon Soul",
"enUS",
},
[80935] = {
"Grom'kar Boomer",
"Grimrail Depot",
"enUS",
},
[180485] = {
"Hips",
"Tazavesh, the Veiled Market",
"enUS",
},
[191232] = {
"Drakonid Stormbringer",
"Vault of the Incarnates",
"enUS",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
"enUS",
},
[245222] = {
"Pargoth",
"Manaforge Omega",
"enUS",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[187139] = {
"Crystal Thrasher",
"The Azure Vault",
"enUS",
},
[129552] = {
"Monzumi",
"Atal'Dazar",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
},
[56732] = {
"Liu Flameheart",
"Temple of the Jade Serpent",
"enUS",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[249829] = {
"Geargrave",
"Sidestreet Sluice",
"enUS",
},
[194816] = {
"Forgewrought Monstrosity",
"Neltharus",
"enUS",
},
[205307] = {
"Fractured Causality",
"10.1.5 Time Rifts - Black Empire (Azq'roth)",
"enUS",
},
[168717] = {
"Forsworn Justicar",
"Spires of Ascension",
},
[184582] = {
"Eric \"The Swift\"",
"Uldaman: Legacy of Tyr",
"enUS",
},
[150295] = {
"Tank Buster MK1",
"Operation: Mechagon",
"enUS",
},
[234478] = {
"Dimensius",
"Manaforge Omega",
"enUS",
},
[210170] = {
"Zaqali Flamemancer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[80937] = {
"Grom'kar Gunner",
"Grimrail Depot",
"enUS",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
"enUS",
},
[77483] = {
"Grom'kar Gunner",
"Grimrail Depot",
},
[176396] = {
"Defective Sorter",
"Tazavesh, the Veiled Market",
"enUS",
},
[150297] = {
"Mechagon Renormalizer",
"Operation: Mechagon",
"enUS",
},
[84520] = {
"Pitwarden Gwarnok",
"Iron Docks",
},
[210172] = {
"Zaqali Juggernaut",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
"enUS",
},
[80938] = {
"Grom'kar Hulk",
"Grimrail Depot",
"enUS",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
},
[210173] = {
"Zaqali Steelshaper",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[186122] = {
"Rira Hackclaw",
"Brackenhide Hollow",
"enUS",
},
[184331] = {
"Infinite Timereaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[153882] = {
"Deadsoul Spirit",
"Torghast, Tower of the Damned",
},
[193799] = {
"Rotchanting Totem",
"Brackenhide Hollow",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[163862] = {
"Defender of Many Eyes",
"Plaguefall",
},
[231925] = {
"Drill Sergeant",
"Sidestreet Sluice",
"enUS",
},
[40166] = {
"Molten Giant",
"Grim Batol",
"enUS",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
"enUS",
},
[186124] = {
"Gashtooth",
"Brackenhide Hollow",
"enUS",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
"enUS",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[145185] = {
"Gnomercy 4.U.",
"Operation: Mechagon",
"enUS",
},
[165911] = {
"Loyal Creation",
"The Necrotic Wake",
"enUS",
},
[201222] = {
"Valow, Timesworn Keeper",
"Dawn of the Infinite",
},
[223995] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[184335] = {
"Infinite Agent",
"Uldaman: Legacy of Tyr",
"enUS",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[193291] = {
"Apex Blazewing",
"Neltharus",
"enUS",
},
[216320] = {
"The Coaglamation",
"City of Threads",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
"enUS",
},
[165913] = {
"Ghastly Parishioner",
"Halls of Atonement",
"enUS",
},
[176404] = {
"Dark Sentinel",
"Sanctum of Domination",
},
[212739] = {
"Consuming Voidstone",
"The Rookery",
"enUS",
},
[99365] = {
"Taintheart Stalker",
"Darkheart Thicket",
},
[231930] = {
"Obedient-ish Predator",
"Fungal Folly",
"enUS",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
"enUS",
},
[218370] = {
"Queen Ansurek",
"Nerub-ar Palace",
"enUS",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
"enUS",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
},
[187154] = {
"Unstable Curator",
"The Azure Vault",
"enUS",
},
[43878] = {
"Grand Vizier Ertan",
"The Vortex Pinnacle",
},
[167964] = {
"4.RF-4.RF",
"De Other Side",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[168988] = {
"Overgrowth",
"Mists of Tirna Scithe",
"enUS",
},
[134701] = {
"Blood Effigy",
"The Underrot",
"enUS",
},
[80816] = {
"Ahri'ok Dugru",
"Iron Docks",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[186644] = {
"Leymor",
"The Azure Vault",
"enUS",
},
[40936] = {
"Faceless Watcher",
"Throne of the Tides",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
"enUS",
},
[197904] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
},
[216583] = {
"Chittering Fearmonger",
"Fungal Folly",
"enUS",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
"enUS",
},
[216328] = {
"Unstable Test Subject",
"City of Threads",
"enUS",
},
[216584] = {
"Nerubian Captain",
"Fungal Folly",
"enUS",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
"enUS",
},
[190485] = {
"Erkhart Stormvein",
"Ruby Life Pools",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[213770] = {
"Ink of Ozumat",
"Throne of the Tides",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[220423] = {
"Retired Lord Vul'azak",
"City of Threads",
"enUS",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
"enUS",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[114338] = {
"Mana Confluence",
"Return to Karazhan",
},
[196116] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[204560] = {
"Incorporeal Being",
"The Azure Vault",
"enUS",
},
[75829] = {
"Nhallish",
"Shadowmoon Burial Grounds",
"enUS",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
"enUS",
},
[196117] = {
"Crystal Thrasher",
"The Azure Vault",
"enUS",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
"enUS",
},
[198933] = {
"Iridikron",
"Dawn of the Infinite",
"enUS",
},
[189466] = {
"Irontorch Commander",
"Neltharus",
"enUS",
},
[189722] = {
"Gulping Goliath",
"Halls of Infusion",
"enUS",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
"enUS",
},
[131383] = {
"Sporecaller Zancha",
"The Underrot",
"enUS",
},
[65310] = {
"Turnip Punching Bag",
"Tazavesh, the Veiled Market",
"enUS",
},
[214287] = {
"Earth Burst Totem",
"The Stonevault",
"enUS",
},
[165415] = {
"Toiling Groundskeeper",
"Halls of Atonement",
"enUS",
},
[241666] = {
"Shadowguard Juggernaut",
"Manaforge Omega",
"enUS",
},
[192794] = {
"Nokhud Beastmaster",
"The Nokhud Offensive",
"enUS",
},
[59553] = {
"The Songbird Queen",
"Temple of the Jade Serpent",
"enUS",
},
[236549] = {
"Crystalline Golem",
"Manaforge Omega",
"enUS",
},
[59873] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
"enUS",
},
[241923] = {
"Arcane Echo",
"Manaforge Omega",
"enUS",
},
[197145] = {
"Colossal Stormfiend",
"Vault of the Incarnates",
"enUS",
},
[216336] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[216337] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[215826] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[189727] = {
"Khajin the Unyielding",
"Halls of Infusion",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
"enUS",
},
[201754] = {
"Sarkareth",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[197406] = {
"Aggravated Skitterfly",
"Algeth'ar Academy",
"enUS",
},
[240905] = {
"Arcane Collector",
"Manaforge Omega",
"enUS",
},
[245255] = {
"Artoshion",
"Manaforge Omega",
"enUS",
},
[230927] = {
"Darkfuse Shredder Pilot",
"Operation: Floodgate",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
"enUS",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
"enUS",
},
[192803] = {
"War Ohuna",
"The Nokhud Offensive",
"enUS",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
},
[186151] = {
"Balakar Khan",
"The Nokhud Offensive",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[162099] = {
"General Kaal",
"Sanguine Depths",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[97202] = {
"Olmyr the Enlightened",
"Halls of Valor",
},
[162100] = {
"Kryxis the Voracious",
"Sanguine Depths",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
"enUS",
},
[173360] = {
"Plaguebelcher",
"Plaguefall",
},
[175663] = {
"Hylbrande",
"Tazavesh, the Veiled Market",
"enUS",
},
[212765] = {
"Void Bound Despoiler",
"The Stonevault",
"enUS",
},
[162102] = {
"Grand Proctor Beryllia",
"Sanguine Depths",
},
[246285] = {
"Bazaar Overseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
"enUS",
},
[163894] = {
"Blighted Spinebreaker",
"Plaguefall",
},
[162103] = {
"Executor Tarvold",
"Sanguine Depths",
},
[248589] = {
"Nullbinder",
"Manaforge Omega",
"enUS",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
"enUS",
},
[180015] = {
"Burly Deckhand",
"Tazavesh, the Veiled Market",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[189227] = {
"Qalashi Hunter",
"Neltharus",
"enUS",
},
[203812] = {
"Voice From Beyond",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
"enUS",
},
[239379] = {
"Unbound Ethereal",
"Eco-Dome Al'dani",
"enUS",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
"enUS",
},
[196394] = {
"Tuskarr Training Dummy",
"Tazavesh, the Veiled Market",
"enUS",
},
[84028] = {
"Siegemaster Rokra",
"Iron Docks",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
},
[177716] = {
"So' Cartel Assassin",
"Tazavesh, the Veiled Market",
"enUS",
},
[165946] = {
"Mordretha, the Endless Empress",
"Theater of Pain",
"enUS",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[189232] = {
"Kokia Blazehoof",
"Ruby Life Pools",
"enUS",
},
[53545] = {
"Molten Spewer",
"Firelands",
"enUS",
},
[248084] = {
"Pactsworn Sandreaver",
"Sidestreet Sluice",
"enUS",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[231197] = {
"Bubbles",
"Operation: Floodgate",
"enUS",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
"enUS",
},
[189234] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
"enUS",
},
[164926] = {
"Drust Boughbreaker",
"Mists of Tirna Scithe",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[75715] = {
"Reanimated Ritual Bones",
"Shadowmoon Burial Grounds",
"enUS",
},
[81984] = {
"Gnarlroot",
"The Everbloom",
"enUS",
},
[235805] = {
"Shadowguard Darkmage",
"Manaforge Omega",
"enUS",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[95674] = {
"Fenryr",
"Halls of Valor",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
"enUS",
},
[104246] = {
"Duskwatch Guard",
"Court of Stars",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
"enUS",
},
[235807] = {
"Shadowguard Acolyte",
"Manaforge Omega",
"enUS",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[40177] = {
"Forgemaster Throngus",
"Grim Batol",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[175677] = {
"Smuggled Creature",
"Tazavesh, the Veiled Market",
"enUS",
},
[212779] = {
"Umbraclaw",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[131667] = {
"Soulbound Goliath",
"Waycrest Manor",
},
[95675] = {
"God-King Skovald",
"Halls of Valor",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[216363] = {
"Reinforced Drone",
"Ara-Kara, City of Echoes",
"enUS",
},
[97083] = {
"King Ranulf",
"Halls of Valor",
},
[176703] = {
"Frostbound Devoted",
"Sanctum of Domination",
"enUS",
},
[95676] = {
"Odyn",
"Halls of Valor",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
},
[196406] = {
"Rubbery Fish Head",
"Tazavesh, the Veiled Market",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
},
[216365] = {
"Winged Carrier",
"Ara-Kara, City of Echoes",
"enUS",
},
[167493] = {
"Venomous Sniper",
"Plaguefall",
},
[184125] = {
"Chrono-Lord Deios",
"Uldaman: Legacy of Tyr",
"enUS",
},
[208945] = {
"Dwarven Bomber",
"Dawn of the Infinite",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
},
[228648] = {
"Rik Reverb",
"Liberation of Undermine",
"enUS",
},
[133463] = {
"Venture Co. War Machine",
"The MOTHERLODE!!",
"enUS",
},
[89] = {
"Infernal",
"Manaforge Omega",
"enUS",
},
[237861] = {
"Fractillus",
"Manaforge Omega",
"enUS",
},
[179010] = {
"Fatespawn Anomaly",
"Sanctum of Domination",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[96574] = {
"Stormforged Sentinel",
"Halls of Valor",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[155215] = {
"Faeleaf Lasher",
"Torghast, Tower of the Damned",
},
[236072] = {
"Unbound Entity",
"Manaforge Omega",
"enUS",
},
[155216] = {
"Faeleaf Warden",
"Torghast, Tower of the Damned",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[240935] = {
"Nascent Shadowguard",
"Manaforge Omega",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[184131] = {
"Earthen Guardian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[165197] = {
"Skeletal Monstrosity",
"The Necrotic Wake",
"enUS",
},
[208440] = {
"Infinite Slayer",
"Dawn of the Infinite",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[92610] = {
"Understone Drummer",
"Neltharion's Lair",
},
[201788] = {
"Dazhak",
"Dawn of the Infinite",
"enUS",
},
[155219] = {
"Gormling Spitter",
"Torghast, Tower of the Damned",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[228144] = {
"Darkfuse Soldier",
"Operation: Floodgate",
"enUS",
},
[243241] = {
"Volatile Manifestation",
"Manaforge Omega",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
},
[98368] = {
"Ghostly Protector",
"Black Rook Hold",
},
[201790] = {
"Loszkeleth",
"Dawn of the Infinite",
"enUS",
},
[171341] = {
"Bladebeak Hatchling",
"De Other Side",
},
[155221] = {
"Faeleaf Tender",
"Torghast, Tower of the Damned",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[199233] = {
"Flamescale Captain",
"Vault of the Incarnates",
"enUS",
},
[92612] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[208445] = {
"Larodar, Keeper of the Flame",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[237871] = {
"Unbound Assassin",
"Manaforge Omega",
"enUS",
},
[53231] = {
"Lava Scion",
"Firelands",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
},
[162133] = {
"General Kaal",
"Sanguine Depths",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[163157] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[155225] = {
"Faeleaf Grovesinger",
"Torghast, Tower of the Damned",
},
[97219] = {
"Solsten",
"Halls of Valor",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
},
[155226] = {
"Verdant Keeper",
"Torghast, Tower of the Damned",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[193352] = {
"Hextrick Totem",
"Brackenhide Hollow",
"enUS",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
},
[198214] = {
"Broodguardian Ziruss",
"Vault of the Incarnates",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[231223] = {
"Disturbed Kelp",
"Operation: Floodgate",
"enUS",
},
[168022] = {
"Slime Tentacle",
"Plaguefall",
},
[184910] = {
"Wo Drifter",
"Theater of Pain",
},
[207939] = {
"Baron Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[115388] = {
"King",
"Return to Karazhan",
},
[219198] = {
"Ravenous Scarab",
"City of Threads",
"enUS",
},
[164185] = {
"Echelon",
"Halls of Atonement",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[132713] = {
"Mogul Razdunk",
"The MOTHERLODE!!",
"enUS",
},
[107073] = {
"Duskwatch Reinforcement",
"Court of Stars",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[151649] = {
"Defense Bot Mk I",
"Operation: Mechagon",
"enUS",
},
[234041] = {
"Forge Sentinel",
"Manaforge Omega",
"enUS",
},
[248626] = {
"Nascent Darkmage",
"Manaforge Omega",
"enUS",
},
[177237] = {
"Chains of Damnation",
"Tazavesh, the Veiled Market",
"enUS",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
"enUS",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[207943] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[53617] = {
"Molten Erupter",
"Firelands",
"enUS",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[240952] = {
"Evoked Spirit",
"Eco-Dome Al'dani",
"enUS",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[129208] = {
"Dread Captain Lockwood",
"Siege of Boralus",
"enUS",
},
[222786] = {
"Parasitic Worm",
"Nerub-ar Palace",
"enUS",
},
[180567] = {
"Frenzied Nightclaw",
"Tazavesh, the Veiled Market",
"enUS",
},
[130488] = {
"Mech Jockey",
"The MOTHERLODE!!",
"enUS",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[226625] = {
"Cave Skipper",
"Fungal Folly",
"enUS",
},
[114624] = {
"Arcane Warden",
"Return to Karazhan",
},
[194897] = {
"Stormsurge Totem",
"The Nokhud Offensive",
"enUS",
},
[208459] = {
"Fiery Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[229953] = {
"Mug'Zee",
"Liberation of Undermine",
"enUS",
},
[216648] = {
"Nx",
"City of Threads",
"enUS",
},
[164450] = {
"Dealer Xy'exa",
"De Other Side",
},
[207949] = {
"Zealous Templar",
"Priory of the Sacred Flame",
"enUS",
},
[177500] = {
"Corsair Brute",
"Tazavesh, the Veiled Market",
"enUS",
},
[216649] = {
"Vx",
"City of Threads",
"enUS",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
"enUS",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[40633] = {
"Naz'jar Honor Guard",
"Throne of the Tides",
},
[164707] = {
"Congealed Slime",
"Plaguefall",
},
[40825] = {
"Erunak Stonespeaker",
"Throne of the Tides",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
},
[174175] = {
"Loyal Stoneborn",
"Halls of Atonement",
"enUS",
},
[225606] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[96587] = {
"Felsworn Infester",
"Vault of the Wardens",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
},
[83026] = {
"Siegemaster Olugar",
"Iron Docks",
},
[198996] = {
"Manifested Timeways",
"Dawn of the Infinite",
"enUS",
},
[234051] = {
"Netherfang Soulbarker",
"Manaforge Omega",
"enUS",
},
[170850] = {
"Raging Bloodhorn",
"Theater of Pain",
"enUS",
},
[208208] = {
"Alliance Destroyer",
"Dawn of the Infinite",
},
[114627] = {
"Shrieking Terror",
"Return to Karazhan",
},
[198997] = {
"Blight of Galakrond",
"Dawn of the Infinite",
"enUS",
},
[219723] = {
"Royal Whisperer",
"Nerub-ar Palace",
"enUS",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[198998] = {
"Tyr, the Infinite Keeper",
"Dawn of the Infinite",
},
[81236] = {
"Grimrail Technician",
"Grimrail Depot",
"enUS",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
"enUS",
},
[227145] = {
"Waterworks Crocolisk",
"Operation: Floodgate",
"enUS",
},
[198999] = {
"Morchie",
"Dawn of the Infinite",
},
[141939] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[203861] = {
"Horde Destroyer",
"Dawn of the Infinite",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
"enUS",
},
[214608] = {
"Screaming Soul",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
"enUS",
},
[199000] = {
"Chrono-Lord Deios",
"Dawn of the Infinite",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
"enUS",
},
[231497] = {
"Bombshell Crab",
"Operation: Floodgate",
"enUS",
},
[129214] = {
"Coin-Operated Crowd Pummeler",
"The MOTHERLODE!!",
"enUS",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[186208] = {
"Rotbow Ranger",
"Brackenhide Hollow",
"enUS",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[5925] = {
"Grounding Totem",
"Temple of Kotmogu",
},
[237897] = {
"Shadowguard Assassin",
"Manaforge Omega",
"enUS",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
"enUS",
},
[134012] = {
"Taskmaster Askari",
"The MOTHERLODE!!",
"enUS",
},
[167532] = {
"Heavin the Breaker",
"Theater of Pain",
"enUS",
},
[144248] = {
"Head Machinist Sparkflux",
"Operation: Mechagon",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
"enUS",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[157810] = {
"Mawsworn Endbringer",
"Torghast, Tower of the Damned",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
"enUS",
},
[237132] = {
"Shadowguard Technomancer",
"Manaforge Omega",
"enUS",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
},
[184422] = {
"Emberon",
"Uldaman: Legacy of Tyr",
"enUS",
},
[235853] = {
"Waygate Watcher",
"Manaforge Omega",
"enUS",
},
[180840] = {
"Frostbound Devoted",
"Sanctum of Domination",
"enUS",
},
[206172] = {
"Nymue",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[101839] = {
"Risen Companion",
"Black Rook Hold",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[167536] = {
"Harugia the Bloodthirsty",
"Theater of Pain",
"enUS",
},
[114633] = {
"Spectral Valet",
"Return to Karazhan",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[223318] = {
"Devoted Worshipper",
"Nerub-ar Palace",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[197219] = {
"Vile Lasher",
"Algeth'ar Academy",
"enUS",
},
[187240] = {
"Drakonid Breaker",
"The Azure Vault",
"enUS",
},
[40765] = {
"Commander Ulthok",
"Throne of the Tides",
},
[240974] = {
"Shadowguard Weavemaster",
"Manaforge Omega",
"enUS",
},
[208478] = {
"Volcoross",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[114634] = {
"Undying Servant",
"Return to Karazhan",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
},
[59764] = {
"Healing Tide Totem",
"Heart of Fear",
"enUS",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
"enUS",
},
[244302] = {
"Binding Javelin",
"Eco-Dome Al'dani",
"enUS",
},
[150396] = {
"Aerial Unit R-21/X",
"Operation: Mechagon",
"enUS",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[115019] = {
"Coldmist Widow",
"Return to Karazhan",
},
[207969] = {
"Horde Raider",
"Dawn of the Infinite",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[180335] = {
"Cartel Smuggler",
"Tazavesh, the Veiled Market",
"enUS",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[150142] = {
"Scrapbone Trashtosser",
"Operation: Mechagon",
"enUS",
},
[104273] = {
"Jazshariu",
"Court of Stars",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
"enUS",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
"enUS",
},
[233814] = {
"Plexus Sentinel",
"Manaforge Omega",
"enUS",
},
[101075] = {
"Wormspeaker Devout",
"Neltharion's Lair",
},
[233815] = {
"Loom'ithar",
"Manaforge Omega",
"enUS",
},
[187246] = {
"Nullmagic Hornswog",
"The Azure Vault",
"enUS",
},
[104274] = {
"Baalgar the Watchful",
"Court of Stars",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
"enUS",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
"enUS",
},
[164218] = {
"Lord Chamberlain",
"Halls of Atonement",
"enUS",
},
[52409] = {
"Ragnaros",
"Firelands",
"enUS",
},
[226396] = {
"Swampface",
"Operation: Floodgate",
"enUS",
},
[40319] = {
"Drahga Shadowburner",
"Grim Batol",
"enUS",
},
[196203] = {
"Ethereal Restorer",
"Algeth'ar Academy",
"enUS",
},
[212835] = {
"Risen Footman",
"Priory of the Sacred Flame",
"enUS",
},
[239702] = {
"Watcher Gaz'Kreth",
"Manaforge Omega",
"enUS",
},
[233817] = {
"Forgeweaver Araz",
"Manaforge Omega",
"enUS",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[177269] = {
"So'leah",
"Tazavesh, the Veiled Market",
"enUS",
},
[104275] = {
"Imacu'tya",
"Court of Stars",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[186737] = {
"Telash Greywing",
"The Azure Vault",
"enUS",
},
[220001] = {
"Black Blood Ooze",
"The Underkeep",
"enUS",
},
[226398] = {
"Big M.O.M.M.A.",
"Operation: Floodgate",
"enUS",
},
[115406] = {
"Knight",
"Return to Karazhan",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
"enUS",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
"enUS",
},
[166524] = {
"Deathwalker",
"Theater of Pain",
"enUS",
},
[214117] = {
"Stormflurry Totem",
"Throne of the Tides",
},
[234843] = {
"Phase Stalker",
"Manaforge Omega",
"enUS",
},
[241240] = {
"Budding Silkgrub",
"Manaforge Omega",
"enUS",
},
[212838] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[186739] = {
"Azureblade",
"The Azure Vault",
"enUS",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[224609] = {
"Twilight Destroyer",
"Grim Batol",
"enUS",
},
[208745] = {
"The Candle King",
"Darkflame Cleft",
"enUS",
},
[189555] = {
"Astral Attendant",
"The Azure Vault",
"enUS",
},
[241242] = {
"Shadowguard Harvester",
"Manaforge Omega",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[237660] = {
"Velaryn Bloodwrath",
"Manaforge Omega",
"enUS",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[168574] = {
"Pestilent Harvester",
"Plaguefall",
},
[162689] = {
"Surgeon Stitchflesh",
"The Necrotic Wake",
"enUS",
},
[226402] = {
"Bront",
"Operation: Floodgate",
"enUS",
},
[157572] = {
"Mawsworn Firecaller",
"Torghast, Tower of the Damned",
},
[237661] = {
"Adarus Duskblaze",
"Manaforge Omega",
"enUS",
},
[233823] = {
"The Royal Voidwing",
"Manaforge Omega",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[164737] = {
"Brood Ambusher",
"Plaguefall",
},
[154758] = {
"Toxic Monstrosity",
"Operation: Mechagon",
"enUS",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[137103] = {
"Blood Visage",
"The Underrot",
"enUS",
},
[237662] = {
"Ilyssa Darksorrow",
"Manaforge Omega",
"enUS",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
},
[215657] = {
"Ulgrax the Devourer",
"Nerub-ar Palace",
"enUS",
},
[162691] = {
"Blightbone",
"The Necrotic Wake",
"enUS",
},
[226404] = {
"Geezle Gigazap",
"Operation: Floodgate",
"enUS",
},
[187767] = {
"Embar Firepath",
"Vault of the Incarnates",
"enUS",
},
[184124] = {
"Sentinel Talondras",
"Uldaman: Legacy of Tyr",
"enUS",
},
[239454] = {
"Darkmage Zadus",
"Manaforge Omega",
"enUS",
},
[213008] = {
"Wriggling Darkspawn",
"Darkflame Cleft",
"enUS",
},
[189729] = {
"Primal Tsunami",
"Halls of Infusion",
"enUS",
},
[190496] = {
"Terros",
"Vault of the Incarnates",
"enUS",
},
[167731] = {
"Separation Assistant",
"The Necrotic Wake",
"enUS",
},
[210147] = {
"Harbinger of Incineration",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[53115] = {
"Molten Lord",
"Firelands",
},
[247387] = {
"Zekvir",
"Fungal Folly",
"enUS",
},
[210797] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
"enUS",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[162693] = {
"Nalthor the Rimebinder",
"The Necrotic Wake",
"enUS",
},
[210150] = {
"Flametouched Enforcer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[208239] = {
"Skittering Menace",
"Fungal Folly",
"enUS",
},
[179837] = {
"Tracker Zo'korss",
"Tazavesh, the Veiled Market",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[187967] = {
"Sennarth",
"Vault of the Incarnates",
"enUS",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
"enUS",
},
[234743] = {
"Darkfuse Pillager",
"The Underkeep",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[130635] = {
"Stonefury",
"The MOTHERLODE!!",
"enUS",
},
[224616] = {
"Animated Shadow",
"The Dawnbreaker",
"enUS",
},
[188026] = {
"Frost Tomb",
"Vault of the Incarnates",
"enUS",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[228015] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[168580] = {
"Plagueborer",
"Plaguefall",
},
[96512] = {
"Archdruid Glaidalis",
"Darkheart Thicket",
},
[242784] = {
"Black Blood Leacher",
"Fungal Folly",
"enUS",
},
[208241] = {
"Ankle Biter",
"Fungal Folly",
"enUS",
},
[247390] = {
"The Underpin",
"Fungal Folly",
"enUS",
},
[129996] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[156212] = {
"Coldheart Agent",
"Torghast, Tower of the Damned",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[208242] = {
"Nerubian Darkcaster",
"Fungal Folly",
"enUS",
},
[179840] = {
"Market Peacekeeper",
"Tazavesh, the Veiled Market",
"enUS",
},
[169861] = {
"Ickor Bileflesh",
"Plaguefall",
},
[184107] = {
"Runic Protector",
"Uldaman: Legacy of Tyr",
"enUS",
},
[215407] = {
"Ki'katal the Harvester",
"Ara-Kara, City of Echoes",
"enUS",
},
[150159] = {
"King Gobbamak",
"Operation: Mechagon",
"enUS",
},
[99891] = {
"Storm Drake",
"Halls of Valor",
},
[183423] = {
"Reformed Bachelor",
"Return to Karazhan",
},
[210290] = {
"Firelands Flameguard",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
"enUS",
},
[245601] = {
"Enforcer Jak'tull",
"Manaforge Omega",
"enUS",
},
[236033] = {
"Metal Gunk",
"Operation: Mechagon",
"enUS",
},
[228538] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[150160] = {
"Scrapbone Bully",
"Operation: Mechagon",
"enUS",
},
[175646] = {
"P.O.S.T. Master",
"Tazavesh, the Veiled Market",
"enUS",
},
[228458] = {
"One-Armed Bandit",
"Liberation of Undermine",
"enUS",
},
[208244] = {
"Nerubian Threadmancer",
"Earthcrawl Mines",
"enUS",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
"enUS",
},
[76057] = {
"Carrion Worm",
"Shadowmoon Burial Grounds",
"enUS",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[180470] = {
"Verethian",
"Tazavesh, the Veiled Market",
"enUS",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
"enUS",
},
[134041] = {
"Infected Peasant",
"Waycrest Manor",
},
[231014] = {
"Loaderbot",
"Operation: Floodgate",
"enUS",
},
[208245] = {
"Skittering Swarmer",
"Fungal Folly",
"enUS",
},
[244413] = {
"Pactsworn Fraycaller",
"Sidestreet Sluice",
"enUS",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[204030] = {
"Goblin Sapper",
"Dawn of the Infinite",
},
[216333] = {
"Bloodstained Assistant",
"Ara-Kara, City of Echoes",
"enUS",
},
[234842] = {
"Voidveil Manta",
"Manaforge Omega",
"enUS",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[126832] = {
"Skycap'n Kragg",
"Freehold",
"enUS",
},
[151812] = {
"Detect-o-Bot",
"Operation: Mechagon",
"enUS",
},
[165515] = {
"Depraved Darkblade",
"Halls of Atonement",
"enUS",
},
[97720] = {
"Blightshard Skitter",
"Neltharion's Lair",
},
[231531] = {
"Territorial Bombshell",
"Liberation of Undermine",
"enUS",
},
[129231] = {
"Rixxa Fluxflame",
"The MOTHERLODE!!",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[233824] = {
"Dimensius",
"Manaforge Omega",
"enUS",
},
[209333] = {
"Gnarlroot",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[210294] = {
"Flamespreader",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[95072] = {
"Greater Earth Elemental",
"Manaforge Omega",
"enUS",
},
[243303] = {
"Lil Leacher",
"Fungal Folly",
"enUS",
},
[223150] = {
"Ascended Voidspeaker",
"Nerub-ar Palace",
"enUS",
},
[246374] = {
"Shadowguard Soldier",
"Manaforge Omega",
"enUS",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[168843] = {
"Klotos",
"Spires of Ascension",
},
[224368] = {
"Chamber Expeller",
"Nerub-ar Palace",
"enUS",
},
[210295] = {
"Flamewaker Infernoguard",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[79720] = {
"Grom'kar Boomer",
"Grimrail Depot",
"enUS",
},
[182149] = {
"Commander Borramus",
"Eye of Azshara",
},
[122963] = {
"Rezan",
"Atal'Dazar",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[150165] = {
"Slime Elemental",
"Operation: Mechagon",
"enUS",
},
[168844] = {
"Lakesis",
"Spires of Ascension",
},
[212327] = {
"Zaqali Flamemancer",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[129802] = {
"Earthrager",
"The MOTHERLODE!!",
"enUS",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[182150] = {
"Observer Ongrax",
"Court of Stars",
},
[206698] = {
"Fanatical Conjuror",
"Priory of the Sacred Flame",
"enUS",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
[205435] = {
"Epoch Ripper",
"Dawn of the Infinite",
"enUS",
},
[168845] = {
"Astronos",
"Spires of Ascension",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[130896] = {
"Blackout Barrel",
"Freehold",
"enUS",
},
[180104] = {
"Tangling Bloom",
"The Shadowlands",
},
[187771] = {
"Kadros Icewrath",
"Vault of the Incarnates",
"enUS",
},
[234050] = {
"Shadowguard Soldier",
"Manaforge Omega",
"enUS",
},
[207796] = {
"Burning Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[208365] = {
"Aerwynn",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[192955] = {
"Draconic Illusion",
"The Azure Vault",
"enUS",
},
[189816] = {
"Dathea Stormlash",
"Vault of the Incarnates",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[182152] = {
"Infiltrator Deraxis",
"Court of Stars",
},
[212831] = {
"Forge Master Damian",
"Priory of the Sacred Flame",
"enUS",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
"enUS",
},
[150168] = {
"Toxic Monstrosity",
"Operation: Mechagon",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
"enUS",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
"enUS",
},
[191222] = {
"Juvenile Frost Proto-Dragon",
"Vault of the Incarnates",
"enUS",
},
[196482] = {
"Overgrown Ancient",
"Algeth'ar Academy",
"enUS",
},
[122965] = {
"Vol'kaal",
"Atal'Dazar",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
"enUS",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
},
[211121] = {
"Rank Overseer",
"Khaz Algar",
"enUS",
},
[165010] = {
"Congealed Slime",
"Plaguefall",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Dragon Isles",
"enUS",
},
[241517] = {
"Dimensius",
"Manaforge Omega",
"enUS",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[150169] = {
"Toxic Lurker",
"Operation: Mechagon",
"enUS",
},
[179963] = {
"Terror Orb",
"Sanctum of Domination",
},
[236995] = {
"Ravenous Destroyer",
"Eco-Dome Al'dani",
"enUS",
},
[114266] = {
"Shoreline Tidespeaker",
"Return to Karazhan",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
"enUS",
},
[165251] = {
"Illusionary Vulpin",
"Mists of Tirna Scithe",
"enUS",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
"enUS",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[222927] = {
"Sacred Flame Vintner",
"Priory of the Sacred Flame",
"enUS",
},
[111563] = {
"Duskwatch Guard",
"Court of Stars",
},
[231928] = {
"Bomb Bot",
"Fungal Folly",
"enUS",
},
[75452] = {
"Bonemaw",
"Shadowmoon Burial Grounds",
"enUS",
},
[151659] = {
"Rocket Tonk",
"Operation: Mechagon",
"enUS",
},
[162329] = {
"Xav the Unfallen",
"Theater of Pain",
"enUS",
},
[174802] = {
"Venomous Sniper",
"Plaguefall",
},
[164501] = {
"Mistcaller",
"Mists of Tirna Scithe",
"enUS",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
"enUS",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
"enUS",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[177807] = {
"Customs Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
},
[153755] = {
"Naeno Megacrash",
"Operation: Mechagon",
"enUS",
},
[154011] = {
"Armed Prisoner",
"Torghast, Tower of the Damned",
},
[184972] = {
"Eranog",
"Vault of the Incarnates",
"enUS",
},
[210288] = {
"Ancient Core Hound",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[162309] = {
"Kul'tharok",
"Theater of Pain",
"enUS",
},
[237872] = {
"Unbound Mage",
"Manaforge Omega",
"enUS",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[204931] = {
"Fyrakk",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[98696] = {
"Illysanna Ravencrest",
"Black Rook Hold",
},
[234935] = {
"Soul-Scribe",
"Eco-Dome Al'dani",
"enUS",
},
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
},
[122968] = {
"Yazma",
"Atal'Dazar",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"UNKNOWN",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[234870] = {
"Invading Mite",
"Eco-Dome Al'dani",
"enUS",
},
[175806] = {
"So'azmi",
"Tazavesh, the Veiled Market",
"enUS",
},
[245617] = {
"The Bone Melter",
"Manaforge Omega",
"enUS",
},
[231075] = {
"Chrome King Gallywix",
"Liberation of Undermine",
"enUS",
},
[154014] = {
"Imprisoned Cabalist",
"Torghast, Tower of the Damned",
},
[129699] = {
"Ludwig Von Tortollan",
"Freehold",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[118491] = {
"Corrupted Risen Mage",
"Black Rook Hold - Artifact Challenge",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
"enUS",
},
[196045] = {
"Corrupted Manafiend",
"UNKNOWN",
"enUS",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[154015] = {
"Escaped Ritualist",
"Torghast, Tower of the Damned",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
"enUS",
},
[98810] = {
"Wrathguard Bladelord",
"Black Rook Hold",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
"enUS",
},
[234872] = {
"Wastelander Phaseblade",
"Eco-Dome Al'dani",
"enUS",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[208363] = {
"Urctos",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[101476] = {
"Molten Charskin",
"Neltharion's Lair",
},
[154016] = {
"Prisonbreak Soulmender",
"Torghast, Tower of the Damned",
},
[189878] = {
"Nathrezim Infiltrator",
"Return to Karazhan",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[180091] = {
"Ancient Core Hound",
"Tazavesh, the Veiled Market",
"enUS",
},
[188252] = {
"Melidrussa Chillworn",
"Ruby Life Pools",
"enUS",
},
[164451] = {
"Dessia the Decapitator",
"Theater of Pain",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[59051] = {
"Strife",
"Temple of the Jade Serpent",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
"enUS",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
"enUS",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[129879] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[214441] = {
"Scorched Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[154018] = {
"Prisonbreak Mauler",
"Torghast, Tower of the Damned",
},
[105699] = {
"Mana Saber",
"Court of Stars",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
"enUS",
},
[133007] = {
"Unbound Abomination",
"The Underrot",
"enUS",
},
[214661] = {
"Goldie Baronbottom",
"Cinderbrew Meadery",
"enUS",
},
[167615] = {
"Depraved Darkblade",
"Halls of Atonement",
"enUS",
},
[114783] = {
"Reformed Maiden",
"Return to Karazhan",
},
[56448] = {
"Wise Mari",
"Temple of the Jade Serpent",
"enUS",
},
[164510] = {
"Shambling Arbalest",
"Theater of Pain",
"enUS",
},
[213894] = {
"Nightfall Curseblade",
"The Dawnbreaker",
"enUS",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
"enUS",
},
[91004] = {
"Ularogg Cragshaper",
"Neltharion's Lair",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
"enUS",
},
[229296] = {
"Orb of Ascendance",
"Halls of Atonement",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Shadowlands",
"enUS",
},
[164255] = {
"Globgrog",
"Plaguefall",
},
[86526] = {
"Grom'kar Chainmaster",
"Iron Docks",
},
[213895] = {
"Nightfall Shadowalker",
"The Dawnbreaker",
"enUS",
},
[83894] = {
"Dulhu",
"The Everbloom",
"enUS",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
"enUS",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
},
[129369] = {
"Irontide Raider",
"Siege of Boralus",
"enUS",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
"enUS",
},
[231978] = {
"Sharpshot Sentry",
"Liberation of Undermine",
"enUS",
},
[75966] = {
"Defiled Spirit",
"Shadowmoon Burial Grounds",
"enUS",
},
[163520] = {
"Forsworn Squad-Leader",
"Spires of Ascension",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
},
[167898] = {
"Manifestation of Envy",
"Halls of Atonement",
"enUS",
},
[39625] = {
"General Umbriss",
"Grim Batol",
"enUS",
},
[188244] = {
"Primal Juggernaut",
"Dragon Isles",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
},
[228361] = {
"Agile Pursuer",
"City of Threads",
"enUS",
},
[208524] = {
"Echo of Fyrakk",
"10.2 Scenario",
"enUS",
},
[229250] = {
"Venture Co. Contractor",
"Operation: Floodgate",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[199057] = {
"Black Dragon's Challenge Dummy",
"Tazavesh, the Veiled Market",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[167998] = {
"Portal Guardian",
"Theater of Pain",
"enUS",
},
[210267] = {
"I'pa",
"Cinderbrew Meadery",
"enUS",
},
[190034] = {
"Blazebound Destroyer",
"Ruby Life Pools",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
"enUS",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
"enUS",
},
[137029] = {
"Ordnance Specialist",
"The MOTHERLODE!!",
"enUS",
},
[83763] = {
"Grom'kar Technician",
"Iron Docks",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
[75509] = {
"Sadana Bloodfury",
"Shadowmoon Burial Grounds",
"enUS",
},
[208526] = {
"Tempting Shadow",
"10.2 Scenario",
"enUS",
},
[229252] = {
"Darkfuse Hyena",
"Operation: Floodgate",
"enUS",
},
[184986] = {
"Kurog Grimtotem",
"Vault of the Incarnates",
"enUS",
},
[98538] = {
"Lady Velandras Ravencrest",
"Black Rook Hold",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
"enUS",
},
[26125] = {
"Risen Ghoul",
"Manaforge Omega",
"enUS",
},
[241304] = {
"Shadowguard Infuser",
"Manaforge Omega",
"enUS",
},
[183707] = {
"Xy Spellslinger",
"Sepulcher of the First Ones",
"enUS",
},
[208527] = {
"Shadowflame Elemental",
"10.2 Scenario",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
"enUS",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
"enUS",
},
[168891] = {
"Rigged Plagueborer",
"Plaguefall",
},
[164517] = {
"Tred'ova",
"Mists of Tirna Scithe",
"enUS",
},
[185683] = {
"Wo Relic",
"Halls of Atonement",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[234883] = {
"Voracious Gorger",
"Eco-Dome Al'dani",
"enUS",
},
[164967] = {
"Doctor Ickus",
"Plaguefall",
},
[211087] = {
"Speaker Shadowcrown",
"The Dawnbreaker",
"enUS",
},
[170147] = {
"Volatile Memory",
"De Other Side",
},
[244095] = {
"Failed Aspirant",
"Fungal Folly",
"enUS",
},
[129372] = {
"Blacktar Bomber",
"Siege of Boralus",
"enUS",
},
[189338] = {
"Riverbend Chomper",
"Dragon Isles",
},
[167611] = {
"Stoneborn Eviscerator",
"Halls of Atonement",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[208747] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[40586] = {
"Lady Naz'jar",
"Throne of the Tides",
},
[184140] = {
"Xy Acolyte",
"Sepulcher of the First Ones",
"enUS",
},
[232228] = {
"Waterworks Bottomfeeder",
"Operation: Floodgate",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[234833] = {
"Unstable Mana",
"Manaforge Omega",
"enUS",
},
[77700] = {
"Shadowmoon Exhumer",
"Shadowmoon Burial Grounds",
"enUS",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
"enUS",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
"enUS",
},
[180640] = {
"Stormbound Breaker",
"Tazavesh, the Veiled Market",
"enUS",
},
[167610] = {
"Stonefiend Anklebiter",
"Halls of Atonement",
"enUS",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[76407] = {
"Ner'zhul",
"Shadowmoon Burial Grounds",
"enUS",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[201792] = {
"Ahnzon",
"Dawn of the Infinite",
"enUS",
},
[187768] = {
"Dathea Stormlash",
"Vault of the Incarnates",
"enUS",
},
[210231] = {
"Tainted Lasher",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[144246] = {
"K.U.-J.0.",
"Operation: Mechagon",
"enUS",
},
[213905] = {
"Unstable Darkness",
"The Dawnbreaker",
"enUS",
},
[175576] = {
"Containment Cell",
"Tazavesh, the Veiled Market",
"enUS",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[130909] = {
"Fetid Maggot",
"The Underrot",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[244099] = {
"Prowling Voidstalker",
"Fungal Folly",
"enUS",
},
[164266] = {
"Domina Venomblade",
"Plaguefall",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
"enUS",
},
[122967] = {
"Priestess Alun'za",
"Atal'Dazar",
},
[156226] = {
"Coldheart Binder",
"Torghast, Tower of the Damned",
},
[131863] = {
"Raal the Gluttonous",
"Waycrest Manor",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[120651] = {
"Explosives",
"Shrine of the Storm",
},
[164267] = {
"Margrave Stradama",
"Plaguefall",
},
[217489] = {
"Anub'arash",
"Nerub-ar Palace",
"enUS",
},
[144244] = {
"The Platinum Pummeler",
"Operation: Mechagon",
"enUS",
},
[180432] = {
"Devoted Accomplice",
"Tazavesh, the Veiled Market",
"enUS",
},
[98542] = {
"Amalgam of Souls",
"Black Rook Hold",
},
[214419] = {
"Void-Cursed Crusher",
"The Rookery",
"enUS",
},
[237192] = {
"Giga-Juiced Technician",
"Liberation of Undermine",
"enUS",
},
[172981] = {
"Kyrian Stitchwerk",
"The Necrotic Wake",
"enUS",
},
[241798] = {
"Nexus-Prince Xevvos",
"Manaforge Omega",
"enUS",
},
[244101] = {
"Shadowguard Phasecutter",
"Fungal Folly",
"enUS",
},
[154744] = {
"Toxic Monstrosity",
"Operation: Mechagon",
"enUS",
},
[218002] = {
"Benk Buzzbee",
"Cinderbrew Meadery",
"enUS",
},
[56439] = {
"Sha of Doubt",
"Temple of the Jade Serpent",
"enUS",
},
[94960] = {
"Hymdall",
"Halls of Valor",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[216619] = {
"Orator Krix'vizk",
"City of Threads",
"enUS",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
"enUS",
},
[176551] = {
"Vault Purifier",
"Tazavesh, the Veiled Market",
"enUS",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
"enUS",
},
[56762] = {
"Yu'lon",
"Temple of the Jade Serpent",
"enUS",
},
[130012] = {
"Irontide Ravager",
"Freehold",
"enUS",
},
[214421] = {
"Coalescing Void Diffuser",
"The Rookery",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[241800] = {
"Manaforged Titan",
"Manaforge Omega",
"enUS",
},
[82039] = {
"Rockspine Stinger",
"Draenor",
"enUS",
},
[244113] = {
"Shadowguard Soulbreaker",
"Fungal Folly",
"enUS",
},
[199325] = {
"Nokhud Stormcaller",
"The Nokhud Offensive",
},
[114796] = {
"Wholesome Hostess",
"Return to Karazhan",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[217491] = {
"Skeinspinner Takazj",
"Nerub-ar Palace",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[190370] = {
"Squallbringer Cyraz",
"Halls of Infusion",
"enUS",
},
[168109] = {
"Empowered Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[241801] = {
"Shadowguard Reaper",
"Manaforge Omega",
"enUS",
},
[130400] = {
"Irontide Crusher",
"Freehold",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[144569] = {
"Grigori the Unrepentant",
"Arathi Basin Comp Stomp",
},
[234893] = {
"Azhiccar",
"Eco-Dome Al'dani",
"enUS",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
},
[75899] = {
"Possessed Soul",
"Shadowmoon Burial Grounds",
},
[137405] = {
"Gripping Terror",
"Siege of Boralus",
"enUS",
},
[205212] = {
"Infinite Keeper",
"Dawn of the Infinite",
},
[157571] = {
"Mawsworn Flametender",
"Torghast, Tower of the Damned",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
},
[183463] = {
"Remnant of a Fallen King",
"Sepulcher of the First Ones",
},
[179446] = {
"Incinerator Arkolath",
"Plaguefall",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[241803] = {
"Nexus-Prince Ky'vor",
"Manaforge Omega",
"enUS",
},
[176555] = {
"Achillite",
"Tazavesh, the Veiled Market",
"enUS",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[203678] = {
"Grommash Hellscream",
"Dawn of the Infinite",
},
[150712] = {
"Trixie Tazer",
"Operation: Mechagon",
"enUS",
},
[207177] = {
"Infinite Watchkeeper",
"Dawn of the Infinite",
},
[235151] = {
"K'aresh Elemental",
"Eco-Dome Al'dani",
"enUS",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[155830] = {
"Mawsworn Disciple",
"Torghast, Tower of the Damned",
},
[176556] = {
"Alcruux",
"Tazavesh, the Veiled Market",
"enUS",
},
[131009] = {
"Spirit of Gold",
"Atal'Dazar",
},
[203679] = {
"Anduin Lothar",
"Dawn of the Infinite",
},
[171376] = {
"Head Custodian Javlin",
"Sanguine Depths",
},
[129232] = {
"Mogul Razdunk",
"The MOTHERLODE!!",
"enUS",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[177892] = {
"Mawforged Goliath",
"Sanctum of Domination",
},
[198995] = {
"Chronikar",
"Dawn of the Infinite",
"enUS",
},
[216658] = {
"Izo, the Grand Splicer",
"City of Threads",
"enUS",
},
[206070] = {
"Chronaxie",
"Dawn of the Infinite",
},
[81212] = {
"Grimrail Overseer",
"Grimrail Depot",
"enUS",
},
[236946] = {
"Wasteland Creeper",
"Manaforge Omega",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[231977] = {
"Darkfuse Technician",
"Liberation of Undermine",
"enUS",
},
[169905] = {
"Risen Warlord",
"De Other Side",
},
[137614] = {
"Demolishing Terror",
"Siege of Boralus",
"enUS",
},
[136330] = {
"Soul Thorns",
"Waycrest Manor",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[150146] = {
"Scrapbone Shaman",
"Operation: Mechagon",
"enUS",
},
[53575] = {
"Lava Wielder",
"Firelands",
"enUS",
},
[82682] = {
"Archmage Sol",
"The Everbloom",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
"enUS",
},
[167538] = {
"Dokigg the Brutalizer",
"Theater of Pain",
"enUS",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[163620] = {
"Rotspew",
"The Necrotic Wake",
"enUS",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
"enUS",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
"enUS",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[192680] = {
"Guardian Sentry",
"Algeth'ar Academy",
"enUS",
},
[244111] = {
"Shadowguard Void Adept",
"Fungal Folly",
"enUS",
},
[199333] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
"enUS",
},
[129227] = {
"Azerokk",
"The MOTHERLODE!!",
"enUS",
},
[97068] = {
"Storm Drake",
"Halls of Valor",
},
[236947] = {
"Burrowing Creeper",
"Manaforge Omega",
"enUS",
},
[168112] = {
"General Kaal",
"Castle Nathria",
"enUS",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[180399] = {
"Evaile",
"Tazavesh, the Veiled Market",
"enUS",
},
[131527] = {
"Lord Waycrest",
"Waycrest Manor",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[162744] = {
"Nekthara the Mangler",
"Theater of Pain",
"enUS",
},
[205723] = {
"Time-Lost Aerobot",
"Dawn of the Infinite",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
},
[144295] = {
"Mechagon Mechanic",
"Operation: Mechagon",
"enUS",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
"enUS",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[176562] = {
"Brawling Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[198870] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[154020] = {
"Prisonbreak Cursewalker",
"Torghast, Tower of the Damned",
},
[208743] = {
"Blazikon",
"Darkflame Cleft",
"enUS",
},
[165560] = {
"Gormling Larva",
"Mists of Tirna Scithe",
"enUS",
},
[186696] = {
"Quaking Totem",
"Uldaman: Legacy of Tyr",
"enUS",
},
[245008] = {
"Unbound Phaseblade",
"Manaforge Omega",
"enUS",
},
[176563] = {
"Zo'gron",
"Tazavesh, the Veiled Market",
"enUS",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[150253] = {
"Weaponized Crawler",
"Operation: Mechagon",
"enUS",
},
[179890] = {
"Executioner Varruth",
"Plaguefall",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[178163] = {
"Murkbrine Shorerunner",
"Tazavesh, the Veiled Market",
"enUS",
},
[244115] = {
"Shadowguard Null Bastion",
"Fungal Folly",
"enUS",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
},
[218016] = {
"Ravenous Cinderbee",
"Cinderbrew Meadery",
"enUS",
},
[178388] = {
"Bazaar Strongarm",
"Tazavesh, the Veiled Market",
"enUS",
},
[246874] = {
"Influx Warden",
"Manaforge Omega",
"enUS",
},
[179891] = {
"Soggodon the Breaker",
"Plaguefall",
},
[164578] = {
"Stitchflesh's Creation",
"The Necrotic Wake",
"enUS",
},
[162061] = {
"Devos",
"Spires of Ascension",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[129928] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[179892] = {
"Oros Coldheart",
"Plaguefall",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
"enUS",
},
[213751] = {
"Dynamite Mine Cart",
"Darkflame Cleft",
"enUS",
},
[176705] = {
"Venza Goldfuse",
"Tazavesh, the Veiled Market",
"enUS",
},
[180486] = {
"Dirtwhistle",
"Tazavesh, the Veiled Market",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[190128] = {
"Zul'gamux",
"Tazavesh, the Veiled Market",
},
[126983] = {
"Harlan Sweete",
"Freehold",
"enUS",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[194990] = {
"Stormseeker Acolyte",
"Vault of the Incarnates",
"enUS",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[162047] = {
"Insatiable Brute",
"Sanguine Depths",
},
[242649] = {
"Nascent Acolyte",
"Manaforge Omega",
"enUS",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
"enUS",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[103344] = {
"Oakheart",
"Darkheart Thicket",
},
[92538] = {
"Tarspitter Grub",
"Neltharion's Lair",
},
[187315] = {
"Disease Slasher",
"Brackenhide Hollow",
"enUS",
},
[189719] = {
"Watcher Irideus",
"Halls of Infusion",
"enUS",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
"enUS",
},
[91003] = {
"Rokmora",
"Neltharion's Lair",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
},
[194896] = {
"Primal Stormshield",
"The Nokhud Offensive",
"enUS",
},
[234623] = {
"Quickhands Pilferer",
"Fungal Folly",
"enUS",
},
[177889] = {
"Mawforged Souljudge",
"Sanctum of Domination",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
},
[175546] = {
"Timecap'n Hooktail",
"Tazavesh, the Veiled Market",
"enUS",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
},
[219045] = {
"Colossal Spider",
"Nerub-ar Palace",
"enUS",
},
[219301] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[231839] = {
"Scrapmaster",
"Liberation of Undermine",
"enUS",
},
[173714] = {
"Mistveil Nightblossom",
"Mists of Tirna Scithe",
"enUS",
},
[242586] = {
"Arcane Manifestation",
"Manaforge Omega",
"enUS",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
"enUS",
},
[99192] = {
"Shade of Xavius",
"Darkheart Thicket",
},
[219046] = {
"Voracious Worm",
"Nerub-ar Palace",
"enUS",
},
[229537] = {
"Void Emissary",
"Priory of the Sacred Flame",
"enUS",
},
[237981] = {
"Shadowguard Mage",
"Manaforge Omega",
"enUS",
},
[236190] = {
"Frenzied Mite",
"Eco-Dome Al'dani",
"enUS",
},
[242587] = {
"Living Mass",
"Manaforge Omega",
"enUS",
},
[179386] = {
"Corsair Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
},
[75652] = {
"Void Spawn",
"Shadowmoon Burial Grounds",
"enUS",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[168384] = {
"Flesh Construct",
"The Necrotic Wake",
},
[98681] = {
"Rook Spinner",
"Black Rook Hold",
},
[219221] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[234912] = {
"Ravaging Scavenger",
"Eco-Dome Al'dani",
"enUS",
},
[91005] = {
"Naraxas",
"Neltharion's Lair",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
"enUS",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
"enUS",
},
[152009] = {
"Malfunctioning Scrapbot",
"Operation: Mechagon",
"enUS",
},
[226403] = {
"Keeza Quickfuse",
"Operation: Floodgate",
"enUS",
},
[242589] = {
"Void Manifestation",
"Manaforge Omega",
"enUS",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
"enUS",
},
[214443] = {
"Crystal Shard",
"The Stonevault",
"enUS",
},
[163524] = {
"Kyrian Dark-Praetor",
"Spires of Ascension",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
},
[193760] = {
"Surging Ruiner",
"Vault of the Incarnates",
"enUS",
},
[225601] = {
"Mereldar Citizen",
"The Dawnbreaker",
"enUS",
},
[164804] = {
"Droman Oulfarran",
"Mists of Tirna Scithe",
"enUS",
},
[166396] = {
"Noble Skirmisher",
"Sanguine Depths",
},
[234938] = {
"Sprok",
"The Underkeep",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[101549] = {
"Arcane Minion",
"Black Rook Hold",
},
[231176] = {
"Scaffolding",
"Operation: Floodgate",
"enUS",
},
[176575] = {
"Mawsworn Soulwarden",
"Torghast, Tower of the Damned",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
"enUS",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[206699] = {
"War Lynx",
"Priory of the Sacred Flame",
"enUS",
},
[104251] = {
"Duskwatch Sentry",
"Court of Stars",
},
[81603] = {
"Champion Druna",
"Iron Docks",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
"enUS",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
"enUS",
},
[150292] = {
"Mechagon Cavalry",
"Operation: Mechagon",
"enUS",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[91007] = {
"Dargrul",
"Neltharion's Lair",
},
[180159] = {
"Brawling Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[150222] = {
"Gunker",
"Operation: Mechagon",
"enUS",
},
[97788] = {
"Storm Drake",
"Halls of Valor",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[243105] = {
"Anomalous Ectozoon",
"Fungal Folly",
"enUS",
},
[97084] = {
"King Tor",
"Halls of Valor",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
"enUS",
},
[80005] = {
"Skylord Tovra",
"Grimrail Depot",
"enUS",
},
[176959] = {
"Mawsworn Soulmage",
"Sanctum of Domination",
"enUS",
},
[165260] = {
"Oozing Leftovers",
"Theater of Pain",
"enUS",
},
[132056] = {
"Venture Co. Skyscorcher",
"The MOTHERLODE!!",
"enUS",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
"enUS",
},
[234918] = {
"Wastes Creeper",
"Eco-Dome Al'dani",
"enUS",
},
[40484] = {
"Erudax",
"Grim Batol",
"enUS",
},
[190340] = {
"Refti Defender",
"Dragon Isles",
"enUS",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
"enUS",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
"enUS",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
"enUS",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
"enUS",
},
[179334] = {
"Portalmancer Zo'nyy",
"Tazavesh, the Veiled Market",
"enUS",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[176394] = {
"P.O.S.T. Worker",
"Tazavesh, the Veiled Market",
"enUS",
},
[225821] = {
"The Geargrinder",
"Liberation of Undermine",
"enUS",
},
[43875] = {
"Asaad",
"The Vortex Pinnacle",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
},
[167113] = {
"Spinemaw Acidgullet",
"Mists of Tirna Scithe",
"enUS",
},
[189886] = {
"Blazebound Firestorm",
"Ruby Life Pools",
"enUS",
},
[245411] = {
"Ravaging Scavenger",
"Eco-Dome Al'dani",
"enUS",
},
[221103] = {
"Hulking Warshell",
"City of Threads",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[168393] = {
"Plaguebelcher",
"Plaguefall",
},
[164555] = {
"Millificent Manastorm",
"De Other Side",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[208243] = {
"Nerubian Slasher",
"Fungal Folly",
"enUS",
},
[187772] = {
"Opalfang",
"Vault of the Incarnates",
"enUS",
},
[245412] = {
"Voracious Gorger",
"Eco-Dome Al'dani",
"enUS",
},
[234204] = {
"Congealed Clot",
"Excavation Site 9",
"enUS",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[165408] = {
"Halkias",
"Halls of Atonement",
"enUS",
},
[164556] = {
"Millhouse Manastorm",
"De Other Side",
},
[100539] = {
"Taintheart Deadeye",
"Darkheart Thicket",
},
[150739] = {
"Diviner Taz'to",
"Arathi Basin Comp Stomp",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[242209] = {
"Overgorged Mite",
"Eco-Dome Al'dani",
"enUS",
},
[233816] = {
"Soulbinder Naazindhri",
"Manaforge Omega",
"enUS",
},
[178630] = {
"Mawsworn Seeker",
"Sanctum of Domination",
"enUS",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
"enUS",
},
[168907] = {
"Slime Tentacle",
"Plaguefall",
},
[167116] = {
"Spinemaw Reaver",
"Mists of Tirna Scithe",
"enUS",
},
[155090] = {
"Anodized Coilbearer",
"Operation: Mechagon",
"enUS",
},
[245414] = {
"Invading Mite",
"Eco-Dome Al'dani",
"enUS",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[241832] = {
"Shielded Attendant",
"Manaforge Omega",
"enUS",
},
[168396] = {
"Plaguebelcher",
"Plaguefall",
},
[164558] = {
"Hakkar the Soulflayer",
"De Other Side",
},
[213942] = {
"Sludge",
"Throne of the Tides",
},
[179399] = {
"Drunk Pirate",
"Tazavesh, the Veiled Market",
"enUS",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[199703] = {
"Magma Mystic",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[135245] = {
"Bilge Rat Demolisher",
"Siege of Boralus",
"enUS",
},
[82590] = {
"Grimrail Scout",
"Grimrail Depot",
"enUS",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[216341] = {
"Jabbing Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[31216] = {
"Gubffs",
"Manaforge Omega",
"enUS",
},
},
["indicator_scale"] = 0.7999999523162842,
["border_color"] = {
nil,
nil,
nil,
1,
},
["focus_color"] = {
nil,
nil,
nil,
0.5017097592353821,
},
["indicator_anchor"] = {
["y"] = 3,
["x"] = -14,
["side"] = 7,
},
["hide_name_on_game_objects"] = false,
["health_selection_overlay_alpha"] = 0,
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["minor_height_scale"] = 0.9999999403953552,
["bossmod_cooldown_text_size"] = 18,
["aura_padding"] = 1.599999904632568,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
["BScdreverse"] = false,
["BSborderth"] = 0.5,
["BStimer_size"] = 18,
["BSstack_size"] = 12,
["BStimer_color"] = {
1,
1,
1,
1,
},
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    unitFrame.ExtraIconFrame:SetOption (\"text_size\", modTable.config.BStimer_size)\n    unitFrame.ExtraIconFrame:SetOption (\"text_color\", modTable.config.BStimer_color)\n    unitFrame.ExtraIconFrame:SetOption (\"desc_text_size\", modTable.config.BSdesc_size)\n    unitFrame.ExtraIconFrame:SetOption (\"stack_text_size\", modTable.config.BSstack_size)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.auramodifier ()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.auramodifier = function()\n        \n        if modTable.config.BShidefriendl and unitFrame.actorType == \"friendlyplayer\" then\n            unitFrame.ExtraIconFrame:Hide()\n        end      \n        \n        for index, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n            if (auraIcon:IsShown()) then\n                \n                local profile = Plater.db.profile\n                local Anchor = {\n                    side = modTable.config.Descanchor, \n                    x = modTable.config.Descxoff, \n                    y = modTable.config.Descyoff,\n                }              \n                local size = modTable.config.BSborderth\n                \n                if (not auraIcon.PixelPerfectBorder) then\n                    auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n                end\n                \n                local r, g, b = auraIcon:GetBackdropBorderColor()\n                auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n                auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n                auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n                auraIcon.PixelPerfectBorder:UpdateSizes()\n                \n                auraIcon.Texture:SetSize(profile.extra_icon_width - size/2, profile.extra_icon_height - size/2)\n                auraIcon.Texture:ClearAllPoints()\n                auraIcon.Texture:SetAllPoints()\n                auraIcon.Border:Hide() \n                \n                Plater.SetFontOutlineAndShadow (auraIcon.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n                \n                Plater.SetAnchor (auraIcon.Desc, Anchor)\n                auraIcon.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n                auraIcon.Cooldown:SetDrawSwipe (true) \n                if modTable.config.BScdreverse then\n                    auraIcon.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n                end\n                \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1733422469,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Icon"] = 132127,
["Enabled"] = true,
["Revision"] = 484,
["semver"] = "1.0.0",
["Author"] = "Driani-Antonidas",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Buff Special",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Basic Options",
["Name"] = "Basic Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "BShidefriendly",
["Value"] = true,
["Name"] = "Hide Buff Special at Friendly UnitFrame",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Hide Buff Special at Friendly UnitFrame",
},
{
["Type"] = 4,
["Key"] = "BScdreverse",
["Value"] = true,
["Name"] = "Swipe Closure Inverted",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, swipe closure inverted",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set Buff Special border thickness",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 2,
["Name"] = "Border Thickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "BSborderth",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Buff Special Text Options",
["Name"] = "Buff Special Text Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set timer text size",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 14,
["Name"] = "Timer Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "BStimer_size",
},
{
["Type"] = 1,
["Key"] = "BStimer_color",
["Value"] = {
1,
1,
0,
1,
},
["Name"] = "Timer Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Set timer text color",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set stack text size",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 10,
["Name"] = "Stack Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "BSstack_size",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Buff Special Player Name Options",
["Name"] = "Buff Special Player Name Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set player name text size",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 10,
["Name"] = "Player Name Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "BSdesc_size",
},
{
["Type"] = 2,
["Max"] = 8,
["Desc"] = "1(TOP-LEFT) / 2(LEFT) / 3(BOT-LEFT) / 4(BOT) / 5(BOT-RIGHT) / 6(RIGHT) / 7(TOP-RIGHT) / 8(TOP)",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 4,
["Name"] = "Player Name Text Anchor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "Descanchor",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set player name text y-offset",
["Min"] = -100,
["Fraction"] = false,
["Value"] = -2,
["Name"] = "Player Name Text Y-offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "Descyoff",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set player name text x-offset",
["Min"] = -100,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Player Name Text X-offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "Descxoff",
},
},
["LastHookEdited"] = "",
["version"] = 1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = .5 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Time"] = 1759089083,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 2058007,
["Enabled"] = true,
["Revision"] = 235,
["semver"] = "",
["Author"] = "????????-Illidan",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Debuff Border",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = .5 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Initialization",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        --Priest\n        [\"Vampiric Touch\"] = 30,\n        [\"Shadow Word: Pain\"] = 20,\n        [\"Devouring Plague\"] = 10,\n        [\"Mind Flay\"] = 5,\n        \n        --Demon Hunter\n        [\"Burning Wound\"] = 50,\n        \n        --Warrior\n        [\"Rend\"] = 50,\n        [\"Colossus Smash\"] = 51,\n        \n        --Warlock\n        [\"Agony\"] = 50,\n        [\"Corruption\"] = 40,\n        [\"Unstable Affliction\"] = 30,\n        [\"Siphon Life\"] = 20,\n        [\"Shadow Embrace\"] = 10,\n        \n        --Rogue\n        [\"Marked for Death\"] = 101,\n        [\"Ghostly Strike\"] = 100,\n        [\"Vendetta\"] = 98,\n        [\"Shiv\"] = 97,\n        [\"Flagellation\"] = 96,\n        [\"Garrote\"] = 95,\n        [\"Rupture\"] = 94,\n        [\"Deadly Poison\"] = 93,\n        [\"Sinful Revelation\"] = 92,\n        [\"Between the Eyes\"] = 83,\n        [\"Pistol Shot\"] = 82,\n        -- [\"Se\"] =\n        [\"Serrated Bone Spike\"] = 0,\n        \n        --Druid\n        [\"Sunfire\"] = 100,\n        [\"Moonfire\"] = 99,\n        \n        --Monk\n        [\"Mark of the Crane\"] = 59,\n        \n        --Shaman\n        [\"Flame Shock\"] = 100,\n        [\"Lashing Flames\"] = 50,\n        \n        --Dungeon Debuffs\n        [\"Droman's Wrath\"] = 1001,\n        \n        --Dungeon Buffs\n        [\"Bolstering\"] = 2001,\n        [\"Slime Coated\"] = 2002,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1759089065,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 3615519,
["Enabled"] = true,
["Revision"] = 579,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["Name"] = "Aura Reorder",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        --Priest\n        [\"Vampiric Touch\"] = 30,\n        [\"Shadow Word: Pain\"] = 20,\n        [\"Devouring Plague\"] = 10,\n        [\"Mind Flay\"] = 5,\n        \n        --Demon Hunter\n        [\"Burning Wound\"] = 50,\n        \n        --Warrior\n        [\"Rend\"] = 50,\n        [\"Colossus Smash\"] = 51,\n        \n        --Warlock\n        [\"Agony\"] = 50,\n        [\"Corruption\"] = 40,\n        [\"Unstable Affliction\"] = 30,\n        [\"Siphon Life\"] = 20,\n        [\"Shadow Embrace\"] = 10,\n        \n        --Rogue\n        [\"Marked for Death\"] = 101,\n        [\"Ghostly Strike\"] = 100,\n        [\"Vendetta\"] = 98,\n        [\"Shiv\"] = 97,\n        [\"Flagellation\"] = 96,\n        [\"Garrote\"] = 95,\n        [\"Rupture\"] = 94,\n        [\"Deadly Poison\"] = 93,\n        [\"Sinful Revelation\"] = 92,\n        [\"Between the Eyes\"] = 83,\n        [\"Pistol Shot\"] = 82,\n        -- [\"Se\"] =\n        [\"Serrated Bone Spike\"] = 0,\n        \n        --Druid\n        [\"Sunfire\"] = 100,\n        [\"Moonfire\"] = 99,\n        \n        --Monk\n        [\"Mark of the Crane\"] = 59,\n        \n        --Shaman\n        [\"Flame Shock\"] = 100,\n        [\"Lashing Flames\"] = 50,\n        \n        --Dungeon Debuffs\n        [\"Droman's Wrath\"] = 1001,\n        \n        --Dungeon Buffs\n        [\"Bolstering\"] = 2001,\n        [\"Slime Coated\"] = 2002,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["version"] = -1,
},
{
["OptionsValues"] = {
["nameplateFlash"] = false,
["colorTick"] = {
0.6235294342041016,
0.7490196228027344,
1,
1,
},
["colorProtected"] = {
0.7803922295570374,
0.250980406999588,
0.250980406999588,
1,
},
["colorSecondaryInterrupt"] = {
0.1725490242242813,
0.8156863451004028,
1,
1,
},
["replaceName"] = false,
["colorNoInterrupt"] = {
0.4862745404243469,
0.4862745404243469,
0.4862745404243469,
1,
},
["colorInterruptAvailable"] = {
0.6235294342041016,
0.7490196228027344,
1,
1,
},
["colorInterruptSoon"] = {
0.8823530077934265,
0.8823530077934265,
0.8823530077934265,
1,
},
["hideNameSolo"] = false,
["showInterruptColor"] = false,
["showSecondaryInterrupts"] = false,
["hideNameplateFlashSolo"] = true,
},
["LastHookEdited"] = "",
["UID"] = "0x63cc19ce2df2342d",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    if not unitFrame.castBar.tick then\n        unitFrame.castBar.tick = unitFrame.castBar:CreateTexture (nil, \"overlay\")\n        unitFrame.castBar.tick:SetDrawLayer (\"overlay\", 4)\n        unitFrame.castBar.tick:SetBlendMode (\"DISABLE\")\n        --unitFrame.castBar.tick:SetHeight(unitFrame.castBar:GetHeight())\n        unitFrame.castBar.tick:SetHeight(10)\n    end\n    unitFrame.castBar.tick:SetTexture(Plater.SparkTextures[8])\n    unitFrame.castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n    unitFrame.castBar.tick:SetWidth(2)    \n    \n    \n    function envTable.EnhancedCastBar(unitId, castBar)\n        castBar.tick:Hide()\n        \n        if castBar.IsInterrupted then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        \n        if UnitExists(targetUnitId) then\n            local targetName = UnitName(targetUnitId)\n            local spellName = castBar.SpellName\n            local inParty = UnitInParty(\"player\")\n            local inRaid = UnitInRaid(\"player\")\n            castBar.Text:SetText(spellName)    \n            \n            -- Cast is targetting a specific unit\n            if targetName then\n                \n                local isTargettingMe\n                local targetNameByColor\n                \n                -- Determine if the cast is targetting the player character\n                if targetName == UnitName(\"player\") then\n                    isTargettingMe = true\n                else\n                    isTargettingMe = false\n                end\n                \n                -- Nameplate flash options\n                if isTargettingMe then\n                    if envTable.optionsNameplateFlash then\n                        \n                        -- Default value of true since it is turned on in the options\n                        local showNameplateFlash = true\n                        \n                        -- Hide flash when not in a group\n                        if envTable.optionsHideFlashSolo then\n                            if not inParty and not inRaid then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Hide flash when player is a tank specialization\n                        if envTable.optionsHideFlashAsTank then\n                            if GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Show nameplate flash if conditions met\n                        if showNameplateFlash then\n                            Plater.FlashNameplateBody (unitFrame)\n                        end\n                    end\n                end\n                \n                \n                -- Target name in cast bar options\n                if envTable.optionsShowTargetName then\n                    \n                    -- Change character name to \"Me\" if turned on in options\n                    if envTable.optionsReplaceMyName then \n                        if isTargettingMe then\n                            targetName = \"Me\"\n                        end\n                    end                    \n                    \n                    -- Color the target name based on the targets class color\n                    targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                    \n                    -- Shrink the name of the cast bar text if necessary (based on options)\n                    local castBarWidth = castBar:GetWidth()\n                    DetailsFramework:TruncateText (castBar.Text, castBarWidth * (envTable.optionsCastNameSize / 100))\n                    \n                    -- Update the cast bar text\n                    local currentText = castBar.Text:GetText()\n                    if currentText ~= nil and currentText ~= '' then \n                        local castText = currentText .. \" » \" ..  targetNameByColor\n                        \n                        -- Hide self target name when solo\n                        if envTable.optionsHideNameSolo then\n                            if not inParty and not inRaid then\n                                if isTargettingMe then\n                                    castText = currentText\n                                end\n                            end\n                        end\n                        castBar.Text:SetText(castText)\n                        DetailsFramework:TruncateText (castBar.Text, castBarWidth)\n                    end   \n                end\n            end\n            \n            \n            -- Interrupt bar color options\n            if envTable.optionsShowInterruptColor then\n                local canInterrupt = castBar.canInterrupt\n                local castEndTime = castBar.spellEndTime\n                local interruptReadyTime = 0\n                local start\n                local duration\n                local playerIsWarlock\n                \n                if envTable.interruptID ~= nil then\n                    start, duration  = GetSpellCooldown(envTable.interruptID)  --local\n                    interruptReadyTime = start + duration\n                end\n                \n                if canInterrupt then\n                    if envTable.interruptID ~= nil then\n                        \n                        -- Is the player a warlock?\n                        if envTable.class == 9 then\n                            playerIsWarlock = true\n                        else\n                            playerIsWarlock = false\n                        end\n                        \n                        -- Check to see if the spell is known/talented\n                        if IsSpellKnown(envTable.interruptID, playerIsWarlock) then\n                            if interruptReadyTime == 0 then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptAvailable)\n                            elseif envTable.optionsShowSecondaryInterrupts and envTable.class == 2 and IsSpellKnown(31935) and not envTable.isSpellOnCooldown_IgnoreGCD(31935) then\n                                -- Paladin Avenger's Shield\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            elseif interruptReadyTime < (castEndTime - 0.25) then       \n                                castBar.tick:Show()\n                                castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n                                local tickLocation = (start + duration - castBar.spellStartTime) / castBar.maxValue  -- castBar.spellStartTime + 0.25\n                                if castBar.channeling then\n                                    tickLocation = 1 - tickLocation\n                                end                                \n                                castBar.tick:SetPoint (\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                                \n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptSoon)                \n                            elseif interruptReadyTime >= (castEndTime - 0.25) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                            end\n                        else\n                            Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)                \n                        end     \n                    end          \n                else\n                    Plater.SetCastBarColor(unitFrame, envTable.optionsColorProtected)                \n                end\n                \n                \n                -- Spell Reflection coloring\n                if envTable.optionsShowSecondaryInterrupts and IsSpellKnown(23920) and not envTable.isSpellOnCooldown_IgnoreGCD(23920) then\n                    -- Check to see if the ability is targetting the player\n                    if UnitExists(targetUnitId) then\n                        if UnitName(targetUnitId) == UnitName(\"player\") then\n                            -- Color the bar if the spell is reflectable\n                            if envTable.IsSpellReflectable(C_Map.GetBestMapForUnit(\"player\"), modTable.reflectableSpells, castBar.SpellName) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            end\n                        end\n                    end\n                end\n            end\n            \n            \n        end\n    end\n    \n    \n    -- Checks to see if Felgaurd or Felhunter interrupt skill is known and assigns if found\n    function envTable.GetWarlockInterrupt()\n        if IsSpellKnown(89766, true) then\n            -- Felguard: Axe Toss\n            return 89766\n        elseif IsSpellKnown(19647, true) then\n            -- Felhunter: Spell Lock\n            return 19647\n        elseif C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnown(132409, true) then\n            -- Check for Grimoire of Sacrifice\n            return 132409\n        else \n            -- Otherwise no interrupt available    \n            return nil \n        end\n    end\n    \n    \n    -- Checks to see if the spell being cast is reflectable. Checks for a spell name and zone ID match.\n    function envTable.IsSpellReflectable(zoneID, spellList, spellName)\n        for i = 1, #spellList do\n            -- Check for matching spell name\n            for y = 1, #spellList[i][\"spells\"] do\n                if spellList[i][\"spells\"][y] == spellName then \n                    -- Check to see if the player is in one of the supported zones for this spell ID\n                    for z = 1, #spellList[i][\"zones\"] do\n                        if spellList[i][\"zones\"][z] == zoneID then\n                            return true\n                        end\n                    end\n                end\n            end \n        end\n        return false\n    end    \n    \n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    function envTable.isSpellOnCooldown_IgnoreGCD(spellID)\n        local gcdSTART, gcdDUR = GetSpellCooldown(61304) -- GCD\n        local GCD_expirationTime = gcdSTART + gcdDUR\n        local spellStart, spellDuration  = GetSpellCooldown(spellID)\n        local spellReadyTime = spellStart + spellDuration        \n        if spellReadyTime <= GCD_expirationTime then\n            return false\n        else\n            return true\n        end\n    end\n    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- Get players current talent specialization\n    envTable.spec = GetSpecialization()\n    \n    -- Flashing nameplate options\n    envTable.optionsHideFlashSolo = modTable.config.hideNameplateFlashSolo\n    envTable.optionsNameplateFlash = modTable.config.nameplateFlash\n    envTable.optionsHideFlashAsTank = modTable.config.hideFlashAsTank\n    \n    -- Target name options\n    envTable.optionsShowTargetName = modTable.config.showTargetName\n    envTable.optionsReplaceMyName = modTable.config.replaceName\n    envTable.optionsHideNameSolo = modTable.config.hideNameSolo\n    envTable.optionsCastNameSize = modTable.config.castNameSize\n    \n    -- Cast bar interrupt coloring\n    envTable.optionsShowInterruptColor = modTable.config.showInterruptColor\n    envTable.optionsShowSecondaryInterrupts = modTable.config.showSecondaryInterrupts\n    envTable.optionsColorNoInterrupt = modTable.config[\"colorNoInterrupt\"]\n    envTable.optionsColorInterruptAvailable = modTable.config[\"colorInterruptAvailable\"]\n    envTable.optionsColorInterruptSoon = modTable.config[\"colorInterruptSoon\"]\n    envTable.optionsColorSecondaryAvailable = modTable.config[\"colorSecondaryInterrupt\"]\n    envTable.optionsColorProtected = modTable.config[\"colorProtected\"]\n    envTable.optionsColorTick = modTable.config[\"colorTick\"]\n    \n    -- Get the primary interrupt ID of the players current class/spec.\n    -- All non-warlock classes have straight forward primary interrupt skills.\n    if envTable.class ~= 9 then\n        envTable.interruptID = modTable.primaryInterrupts[envTable.class][envTable.spec]\n    else \n        -- Warlock interrupt changes based on pet being used.\n        envTable.interruptID = envTable.GetWarlockInterrupt()\n    end\n    \n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\n    \nend",
["Initialization"] = "function (modTable)\n    \n    -- List of primary interupt skills used by each spec and class\n    -- Does not track secondary interrupt skills (such as Avenger's shield, etc)\n    modTable.primaryInterrupts = {\n        \n        -- Warrior\n        [1] = {\n            [1] = 6552,  -- Pummel (Arms)\n            [2] = 6552,  -- Pummel (Fury)\n            [3] = 6552  --  Pummel (Protection)\n        },\n        \n        -- Paladin\n        [2] = {\n            [1] = 96231,  -- Rebuke (Holy)\n            [2] = 96231,  -- Rebuke (Protection)\n            [3] = 96231  -- Rebuke (Retribution)\n        }, \n        \n        -- Hunter\n        [3] = {\n            [1] = 147362,  -- Counter Shot (Beast Mastery)\n            [2] = 147362,  -- Counter Shot (Marksmanship)\n            [3] = 187707 -- Muzzle (Survival)\n        }, \n        \n        -- Rogue\n        [4] = {\n            [1] = 1766,  -- Kick (Assassination)\n            [2] = 1766,  -- Kick (Outlaw)\n            [3] = 1766  -- Kick (Subtlety)\n        },\n        \n        -- Priest\n        [5] = {\n            [1] = nil, \n            [2] = nil, \n            [3] = 15487 -- Silence (Shadow)\n        },\n        \n        -- Death Knight\n        [6] = {\n            [1] = 47528,  -- Mind Freeze (Blood)\n            [2] = 47528,  -- Mind Freeze (Frost)\n            [3] = 47528  -- Mind Freeze (Unholy)\n        },\n        \n        -- Shaman\n        [7] = {\n            [1] = 57994,  -- Wind Shear (Elemental)\n            [2] = 57994,  -- Wind Shear (Enhancement)\n            [3] = 57994  -- Wind Shear (Restoration)\n        },\n        \n        -- Mage\n        [8] = {\n            [1] = 2139,  -- Counterspell (Arcane)\n            [2] = 2139,  -- Counterspell (Fire)\n            [3] = 2139  -- Counterspell (Frost)\n        }, \n        \n        -- [9] Warlock interrupt depends on pet being used.\n        --  Code for warlock contained in Cast Start hook.\n        \n        -- Monk\n        [10] = {\n            [1] = 116705,  -- Spear Hand Strike (Brewmaster)\n            [2] = 116705,  -- Spear Hand Strike (Mistweaver)\n            [3] = 116705  -- Spear Hand Strike (Windwalker)\n        }, \n        \n        -- Druid\n        [11] = {\n            [1] = 78675,  -- Solar Beam (Balance)\n            [2] = 106839,  -- Skull Bash (Feral)\n            [3] = 106839,  -- Skull Bash (Guardian)\n            [4] = 106839  -- Skull Bash (Restoration)\n        },\n        \n        -- Demon Hunter\n        [12] = {\n            [1] = 183752,  -- Disrupt (Havoc)\n            [2] = 183752  -- Disrupt (Vengeance)\n        }, \n        \n        -- Evoker\n        [13] = {\n            [1] = 351338,  -- Quell (Devastation)\n            [2] = 351338, -- Quell (Preservation)\n            [3] = 351338 -- Quell (Augmentation)\n        }\n    }\n    \n    \n    -- The list of supported spell reflection names and zones.\n    modTable.reflectableSpells = {\n        -- Initial data for reflectable spells credit to: https://docs.google.com/spreadsheets/d/e/2PACX-1vS26lkSc_eaulHX7-UY8Uu-7DAHvkScxh3npd0kQn3uvvWsgsQm9ducLUi4R2mb7ieNluVilyq5sQe5/pubhtml#\n        \n        -- The Azure Vault\n        [1] = {\n            [\"spells\"] = {    \n                \"Infused Strike\",\n                \"Illusionary Bolt\",\n                \"Dragon Strike\",\n                \"Arcane Bolt\",\n                \"Infused Ground\",\n                \"Condensed Frost\",\n                \"Heavy Tome\"\n            },\n            [\"zones\"] = {\n                2073, 2074, 2075, 2076, 2077\n            }\n        },\n        -- Algeth'ar Academy \n        [2] = {\n            [\"spells\"] = {    \n                \"Energy Bomb\",\n                \"Darting Sting\",\n                \"Arcane Missiles\",\n                \"Vicious Ambush\",\n                \"Surge\"\n            },\n            [\"zones\"] = {\n                2097, 2098, 2099\n            }\n        },     \n        -- Court of Stars\n        [3] = {\n            [\"spells\"] = {    \n                \"Drifting Embers\",\n                \"Firebolt\",\n                \"Throw Torch\",\n                \"Vampiric Claws\",\n                \"Suppress\",\n                \"Shadow Slash\",\n                \"Eyestorm\"\n            },\n            [\"zones\"] = {\n                761, 762, 763\n            }\n        },     \n        -- Halls of Valor\n        [4] = {\n            [\"spells\"] = {    \n                \"Arcing Bolt\",\n                \"Searing Light\",\n                \"Etch\",\n                \"Shattered Rune\",\n                \"Thunderous Bolt\"\n            },\n            [\"zones\"] = {\n                703, 704, 705, 829\n            }\n        },    \n        -- Ruby Life Pools\n        [5] = {\n            [\"spells\"] = {    \n                \"Cold Claws\",\n                \"Frigid Shard\",\n                \"Primal Chill\",\n                \"Living Bomb\",\n                \"Icebolt\",\n                \"Cold Claws\",\n                \"Cinderbolt\",\n                \"Flame Dance\",\n                \"Lightning Bolt\",\n                \"Burning Touch\",\n                \"Thunder Bolt\"\n            },\n            [\"zones\"] = {\n                2094, 2095\n            }\n        },\n        -- Shadowmoon Burial Grounds\n        [6] = {\n            [\"spells\"] = {    \n                \"Deathspike\",\n                \"Void Devastation\",\n                \"Death Blast\",\n                \"Plague Spit\",\n                \"Shadow Bolt\",\n                \"Shadow Word: Frailty\",\n                \"Rending Voidlash\",\n                \"Void Bolt\"\n            },\n            [\"zones\"] = {\n                574, 575, 576\n            }\n        },  \n        -- Temple of the Jade Serpent\n        [7] = {\n            [\"spells\"] = {    \n                \"Hydrolance\",\n                \"Agony\",\n                \"Serpent Strike\",\n                \"Jade Serpent Wave\",\n                \"Defiling Mist\",\n                \"Touch of Ruin\",\n                \"Throw Torch\",\n                \"Dark Claw\"\n            },\n            [\"zones\"] = {\n                429, 430, 791, 792\n            }\n        },   \n        -- The Nokhud Offensive\n        [8] = {\n            [\"spells\"] = {    \n                \"Wind Burst\",\n                \"Gale Arrow\",\n                \"Conductive Strike\",\n                \"Storm Shock\",\n                \"Stormbolt\",\n                \"Chain Lightning\",\n                \"Thunderstrike\",\n                \"Death Bolt\",\n                \"Surge\"\n            },\n            [\"zones\"] = {\n                2093\n            }\n        },   \n        -- Vault of the Incarnates\n        [9] = {\n            [\"spells\"] = {    \n                \"Primal Flow\",\n                \"Chain Lightning\",\n                \"Frost Spike\",\n                \"Lightning Bolt\",\n                \"Aerial Buffet\",\n                \"Aerial Slash\",\n                \"Storm Bolt\",\n                \"Ice Barrage\",\n                \"Static Jolt\",\n                \"Uber Strike\" --Spell Reflect testing\n                \n            },\n            [\"zones\"] = {\n                2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 622\n            }\n        },\n        -- Brackenhide Hollow\n        [10] = {\n            [\"spells\"] = {    \n                \"Earth Bolt\",\n                \"Decayed Senses\",\n                \"Touch of Decay\",\n                \"Decay Surge\"\n            },\n            [\"zones\"] = {\n                2096, 2106\n            }\n        },\n        -- Halls of Infusion\n        [11] = {\n            [\"spells\"] = {    \n                \"Purifying Blast\",\n                \"Gulp Swog Toxin\",\n                \"Focused Deluge\",\n                \"Squall Buffet\",\n                \"Containment Beam\",\n                \"Pyretic Burst\",\n                \"Ice Shard\",\n                \"Lightning Blast\",\n                \"Frost Shock\",\n                \"Wind Buffet\"\n            },\n            [\"zones\"] = {\n                2082, 2083\n            }\n        },\n        -- Netharus\n        [12] = {\n            [\"spells\"] = {    \n                \"Grounding Spear\",\n                \"Melt\",\n                \"Lava Bolt\",\n                \"Magma Conflagration\"\n            },\n            [\"zones\"] = {\n                2080, 2081\n            }\n        },\n        -- Uldaman\n        [13] = {\n            [\"spells\"] = {    \n                \"Chain Lightning\",\n                \"Stone Spike\",\n                \"Earthen Shards\",\n                \"Burning Heat\",\n                \"Stone Bolt\",\n                \"Venomous Fangs\",\n                \"Time Sink\",\n                \"Spiked Carapace\",\n                \"Curse of Stone\"\n            },\n            [\"zones\"] = {\n                2071, 2072\n            }\n        },\n        -- Freehold\n        [14] = {\n            [\"spells\"] = {    \n                \"Water Bolt\",\n                \"Lightning Bolt\",\n                \"Infected Wound\",\n                \"Oiled Blade\"\n            },\n            [\"zones\"] = {\n                936\n            }\n        },\n        -- Underrot\n        [15] = {\n            [\"spells\"] = {    \n                \"Blood Bolt\",\n                \"Wicked Embrace\",\n                \"Decaying Mind\",\n                \"Void Spit\"\n            },\n            [\"zones\"] = {\n                1041, 1042\n            }\n        },\n        -- Neltharion's Lair\n        [16] = {\n            [\"spells\"] = {    \n                \"Stone Gaze\",\n                \"Stone Bolt\",\n                \"Toxic Retch\",\n                \"Molten Crash\",\n                \"Piercing Shards\",\n                \"Sunder\"\n            },\n            [\"zones\"] = {\n                731\n            }\n        },\n        -- Vortex Pinnacle\n        [17] = {\n            [\"spells\"] = {    \n                \"Lightning Bolt\",\n                \"Chain Lightning\",\n                \"Rushing Wind\",\n                \"Lightning Lash\",\n                \"Starlight\",\n                \"Holy Smite\",\n                \"Wind Bolt\"\n            },\n            [\"zones\"] = {\n                325, 737\n            }\n        },\n        -- Abberus, the Shadowed Crucible\n        [18] = {\n            [\"spells\"] = {    \n                \"Flame Slash\",\n                \"Shadow Spike\",\n                \"Flaming Cudgel\",\n                \"Lava Bolt\",\n                \"Scorching Detonation\",\n                \"Void Surge\"\n            },\n            [\"zones\"] = {\n                2166, 2167, 2168, 2169, 2170\n            }\n        },\n        -- Dawn of the Infinite\n        [19] = {\n            [\"spells\"] = {    \n                \"Noxious Ejection\",\n                \"Stonebolt\",\n                \"Infinite Bolt\",\n                \"Infinite Blast\",\n                \"Fireball\",\n                \"Immolate\",\n                \"Temporal Blast\",\n                \"Corroding Volley\",\n                \"Epoch Bolt\"\n            },\n            [\"zones\"] = {\n                2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198\n            }\n        },\n        -- Amirdrassil\n        [20] = {\n            [\"spells\"] = {\n                \"Coiling Flames\",\n                \"Twisting Singe\",\n                \"Fyr'alath's Flame\"\n            },\n            [\"zones\"] = {\n                2232, 2240, 2244, 2233, 2234, 2238\n            }\n        },\n        -- Atal'Dazar\n        [21] = {\n            [\"spells\"] = {\n                \"Wildfire\",\n                \"Venomfang Strike\",\n                \"Venom Blast\",\n                \"Soulburn\",\n                \"Wracking Pain\"\n            },\n            [\"zones\"] = {\n                934, 935\n            }\n        },\n        -- Black Rook Hold\n        [22] = {\n            [\"spells\"] = {\n                \"Soul Blast\",\n                \"Arcane Blitz\"\n            },\n            [\"zones\"] = {\n                751, 752, 753, 754, 755, 756\n            }\n        },\n        -- Darkheart Thicket\n        [23] = {\n            [\"spells\"] = {\n                \"Nightmare Bolt\",\n                \"Feed on the Weak\",\n                \"Bloodbolt\",\n                \"Firebolt\",\n                \"Nightmare Toxin\",\n                \"Despair\",\n                \"Unnerving Screech\",\n                \"Tormenting Eye\",\n                \"Shadow Bolt\",\n                \"Darksoul Bite\"\n            },\n            [\"zones\"] = {\n                733\n            }\n        },\n        -- Everbloom\n        [24] = {\n            [\"spells\"] = {\n                \"Nature's Wrath\",\n                \"Water Bolt\",\n                \"Dreadpetal Pollen\",\n                \"Arcane Blast\",\n                \"Fireball\",\n                \"Frostbolt\",\n                \"Choking Vines\",\n                \"Dancing Thorns\",\n                \"Pyroblast\",\n                \"Poisonous Claws\"\n            },\n            [\"zones\"] = {\n                620, 621\n            }\n        },\n        -- Throne of the Tides\n        [25] = {\n            [\"spells\"] = {\n                \"Focused Tempest\",\n                \"Frostbolt\",\n                \"Water Bolt\",\n                \"Flame Shock\",\n                \"Mind Rot\",\n                \"Foul Bolt\",\n                \"Ink Blast\",\n                \"Mind Flay\",\n                \"Aquablast\",\n                \"Hex\",\n                \"Crushing Depths\",\n                \"Lightning Bolt\",\n                \"Lightning Surge\"\n                \n            },\n            [\"zones\"] = {\n                323, 322\n            }\n        },\n        -- Waycrest Manor\n        [26] = {\n            [\"spells\"] = {\n                \"Bramble Bolt\",\n                \"Ruinous Bolt\",\n                \"Soul Bolt\",\n                \"Wasting Strike\",\n                \"Wracking Chord\",\n                \"Virulent Pathogen\",\n                \"Darkened Lighting\",\n                \"Shadow Cleave\",\n                \"Infest\",\n                \"Spit\",\n                \"Etch\",\n                \"Runic Mark\",\n                \"Decaying Touch\",\n                \"Dread Mark\",\n                \"Runic Bolt\",\n                \"Scar Soul\",\n                \"Tearing Strike\",\n                \"Drain Essence\"\n            },\n            [\"zones\"] = {\n                1016, 1015, 1017, 1018, 1029\n            }\n        }\n    }\n    \nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\n    \nend\n\n\n\n\n",
},
["scriptId"] = "table: 00000276C4919590",
["Time"] = 1759089315,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 461115,
["Enabled"] = true,
["Revision"] = 1394,
["semver"] = "",
["Author"] = "Nimeshady-Zul'jin",
["Desc"] = "Shows who a cast is targeting in the cast bar as well as other configurable options.",
["Prio"] = 99,
["Name"] = "Enemy Castbar",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Feature - Custom cast bar coloring:",
["Name"] = "CUSTOM CAST BAR COLORS",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showInterruptColor",
["Value"] = true,
["Name"] = "Enable custom colored enemy cast bars.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting the cast bar will change to the colors below based on the status of you being able to interrupt the cast.",
},
{
["Type"] = 4,
["Key"] = "showSecondaryInterrupts",
["Value"] = true,
["Name"] = "Enable support for secondary interrupts: Avenger's Shield (Paladin), Spell Reflection (Warrior).",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colors casts that can be reflected with Spell Reflection (Warrior) and interrupted with Avenger's Shield (Paladin).",
},
{
["Type"] = 1,
["Key"] = "colorInterruptAvailable",
["Value"] = {
0.10980392992496,
0.63921570777893,
0.1843137294054,
1,
},
["Name"] = "Color when my primary interrupt is available.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt available to interrupt the current cast.",
},
{
["Type"] = 1,
["Key"] = "colorInterruptSoon",
["Value"] = {
0.63921570777893,
0.61568629741669,
0.10980392992496,
1,
},
["Name"] = "Color when my primary interrupt is down but will be available before cast finishes.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt on cooldown but it will be available to interrupt the current cast.",
},
{
["Type"] = 1,
["Key"] = "colorNoInterrupt",
["Value"] = {
0.61960786581039,
0.16862745583057,
0.28627452254295,
1,
},
["Name"] = "Color when my primary interrupt is unavailable.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you do not have an interrupt available to interrupt the current cast",
},
{
["Type"] = 1,
["Key"] = "colorSecondaryInterrupt",
["Value"] = {
0.10980392992496,
0.52156865596771,
0.63921570777893,
1,
},
["Name"] = "Color for secondary interrupts. (Avenger's Shield and Spell Reflection)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast targeting you can be reflected with Spell Reflection or interrupted with Avenger's Shield. Only active when playing the appropriate class with the skill off cooldown.",
},
{
["Type"] = 1,
["Key"] = "colorProtected",
["Value"] = {
0.22352942824364,
0.22352942824364,
0.22352942824364,
1,
},
["Name"] = "Color for casts that are protected/un-interruptable.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast can not be interrupted by a standard interrupt.",
},
{
["Type"] = 1,
["Key"] = "colorTick",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Name"] = "Color of interrupt available tick. (Hover for more info)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "When your interrupt is currently down but will become available before the current cast completes a tick will appear in the cast bar showing you the exact position in the cast you will be able to interrupt the cast. You can customize the color of the tick using this setting.  YOU MUST /RELOAD YOUR UI AFTER CHANGING THIS COLOR.",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Feature - Show name of target in the cast bar:",
["Name"] = "Settings Target Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showTargetName",
["Value"] = true,
["Name"] = "Show the name of cast targets in the cast bar.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting a spell at a target, the targets name will appear in the cast bar.",
},
{
["Type"] = 4,
["Key"] = "hideNameSolo",
["Value"] = true,
["Name"] = "Hide my name when not in a party.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When you are not in a party or raid group casts targetting you will not display your name in the cast bar.",
},
{
["Type"] = 4,
["Key"] = "replaceName",
["Value"] = true,
["Name"] = "Show \"Me\" instead of my character name.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When targetted by casts, instead of showing your character name it will show \"Me\".",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "The relative size (in percentage) that a spell name will take up of the cast bar, not including the target name. Adjust this so that target names fit into the cast bar correctly based on the width and text size of your cast bar. If you find even after adjusting this setting that there is not enough space try decreasing your cast bar text size or making the cast bar wider.",
["Min"] = 30,
["Fraction"] = false,
["Value"] = 60,
["Key"] = "castNameSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Maximum length of a cast name in %. Hover for more info.",
},
{
["Type"] = 5,
["Key"] = "option8",
["Value"] = "Feature - Flash nameplates when a spell targets you:",
["Name"] = "Settings Border Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Namplate Flash",
},
{
["Type"] = 4,
["Key"] = "nameplateFlash",
["Value"] = false,
["Name"] = "Flash the nameplates of enemies that are casting a spell or ability targeting me.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is targetting you with a cast, this option will flash the nameplate of that enemy to indicate that cast is targeting you.",
},
{
["Type"] = 4,
["Key"] = "hideNameplateFlashSolo",
["Value"] = true,
["Name"] = "Hide flash effect when not in a party.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing solo.",
},
{
["Type"] = 4,
["Key"] = "hideFlashAsTank",
["Value"] = true,
["Name"] = "Hide flash effect when I'm playing a tank specialization.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing as a tank specialization.",
},
},
["HooksTemp"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend\n\n\n",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\n    \nend\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- Get players current talent specialization\n    envTable.spec = GetSpecialization()\n    \n    -- Flashing nameplate options\n    envTable.optionsHideFlashSolo = modTable.config.hideNameplateFlashSolo\n    envTable.optionsNameplateFlash = modTable.config.nameplateFlash\n    envTable.optionsHideFlashAsTank = modTable.config.hideFlashAsTank\n    \n    -- Target name options\n    envTable.optionsShowTargetName = modTable.config.showTargetName\n    envTable.optionsReplaceMyName = modTable.config.replaceName\n    envTable.optionsHideNameSolo = modTable.config.hideNameSolo\n    envTable.optionsCastNameSize = modTable.config.castNameSize\n    \n    -- Cast bar interrupt coloring\n    envTable.optionsShowInterruptColor = modTable.config.showInterruptColor\n    envTable.optionsShowSecondaryInterrupts = modTable.config.showSecondaryInterrupts\n    envTable.optionsColorNoInterrupt = modTable.config[\"colorNoInterrupt\"]\n    envTable.optionsColorInterruptAvailable = modTable.config[\"colorInterruptAvailable\"]\n    envTable.optionsColorInterruptSoon = modTable.config[\"colorInterruptSoon\"]\n    envTable.optionsColorSecondaryAvailable = modTable.config[\"colorSecondaryInterrupt\"]\n    envTable.optionsColorProtected = modTable.config[\"colorProtected\"]\n    envTable.optionsColorTick = modTable.config[\"colorTick\"]\n    \n    -- Get the primary interrupt ID of the players current class/spec.\n    -- All non-warlock classes have straight forward primary interrupt skills.\n    if envTable.class ~= 9 then\n        envTable.interruptID = modTable.primaryInterrupts[envTable.class][envTable.spec]\n    else \n        -- Warlock interrupt changes based on pet being used.\n        envTable.interruptID = envTable.GetWarlockInterrupt()\n    end\n    \n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\n    \nend",
["Initialization"] = "function (modTable)\n    \n    -- List of primary interupt skills used by each spec and class\n    -- Does not track secondary interrupt skills (such as Avenger's shield, etc)\n    modTable.primaryInterrupts = {\n        \n        -- Warrior\n        [1] = {\n            [1] = 6552,  -- Pummel (Arms)\n            [2] = 6552,  -- Pummel (Fury)\n            [3] = 6552  --  Pummel (Protection)\n        },\n        \n        -- Paladin\n        [2] = {\n            [1] = 96231,  -- Rebuke (Holy)\n            [2] = 96231,  -- Rebuke (Protection)\n            [3] = 96231  -- Rebuke (Retribution)\n        }, \n        \n        -- Hunter\n        [3] = {\n            [1] = 147362,  -- Counter Shot (Beast Mastery)\n            [2] = 147362,  -- Counter Shot (Marksmanship)\n            [3] = 187707 -- Muzzle (Survival)\n        }, \n        \n        -- Rogue\n        [4] = {\n            [1] = 1766,  -- Kick (Assassination)\n            [2] = 1766,  -- Kick (Outlaw)\n            [3] = 1766  -- Kick (Subtlety)\n        },\n        \n        -- Priest\n        [5] = {\n            [1] = nil, \n            [2] = nil, \n            [3] = 15487 -- Silence (Shadow)\n        },\n        \n        -- Death Knight\n        [6] = {\n            [1] = 47528,  -- Mind Freeze (Blood)\n            [2] = 47528,  -- Mind Freeze (Frost)\n            [3] = 47528  -- Mind Freeze (Unholy)\n        },\n        \n        -- Shaman\n        [7] = {\n            [1] = 57994,  -- Wind Shear (Elemental)\n            [2] = 57994,  -- Wind Shear (Enhancement)\n            [3] = 57994  -- Wind Shear (Restoration)\n        },\n        \n        -- Mage\n        [8] = {\n            [1] = 2139,  -- Counterspell (Arcane)\n            [2] = 2139,  -- Counterspell (Fire)\n            [3] = 2139  -- Counterspell (Frost)\n        }, \n        \n        -- [9] Warlock interrupt depends on pet being used.\n        --  Code for warlock contained in Cast Start hook.\n        \n        -- Monk\n        [10] = {\n            [1] = 116705,  -- Spear Hand Strike (Brewmaster)\n            [2] = 116705,  -- Spear Hand Strike (Mistweaver)\n            [3] = 116705  -- Spear Hand Strike (Windwalker)\n        }, \n        \n        -- Druid\n        [11] = {\n            [1] = 78675,  -- Solar Beam (Balance)\n            [2] = 106839,  -- Skull Bash (Feral)\n            [3] = 106839,  -- Skull Bash (Guardian)\n            [4] = 106839  -- Skull Bash (Restoration)\n        },\n        \n        -- Demon Hunter\n        [12] = {\n            [1] = 183752,  -- Disrupt (Havoc)\n            [2] = 183752  -- Disrupt (Vengeance)\n        }, \n        \n        -- Evoker\n        [13] = {\n            [1] = 351338,  -- Quell (Devastation)\n            [2] = 351338, -- Quell (Preservation)\n            [3] = 351338 -- Quell (Augmentation)\n        }\n    }\n    \n    \n    -- The list of supported spell reflection names and zones.\n    modTable.reflectableSpells = {\n        -- Initial data for reflectable spells credit to: https://docs.google.com/spreadsheets/d/e/2PACX-1vS26lkSc_eaulHX7-UY8Uu-7DAHvkScxh3npd0kQn3uvvWsgsQm9ducLUi4R2mb7ieNluVilyq5sQe5/pubhtml#\n        \n        -- The Azure Vault\n        [1] = {\n            [\"spells\"] = {    \n                \"Infused Strike\",\n                \"Illusionary Bolt\",\n                \"Dragon Strike\",\n                \"Arcane Bolt\",\n                \"Infused Ground\",\n                \"Condensed Frost\",\n                \"Heavy Tome\"\n            },\n            [\"zones\"] = {\n                2073, 2074, 2075, 2076, 2077\n            }\n        },\n        -- Algeth'ar Academy \n        [2] = {\n            [\"spells\"] = {    \n                \"Energy Bomb\",\n                \"Darting Sting\",\n                \"Arcane Missiles\",\n                \"Vicious Ambush\",\n                \"Surge\"\n            },\n            [\"zones\"] = {\n                2097, 2098, 2099\n            }\n        },     \n        -- Court of Stars\n        [3] = {\n            [\"spells\"] = {    \n                \"Drifting Embers\",\n                \"Firebolt\",\n                \"Throw Torch\",\n                \"Vampiric Claws\",\n                \"Suppress\",\n                \"Shadow Slash\",\n                \"Eyestorm\"\n            },\n            [\"zones\"] = {\n                761, 762, 763\n            }\n        },     \n        -- Halls of Valor\n        [4] = {\n            [\"spells\"] = {    \n                \"Arcing Bolt\",\n                \"Searing Light\",\n                \"Etch\",\n                \"Shattered Rune\",\n                \"Thunderous Bolt\"\n            },\n            [\"zones\"] = {\n                703, 704, 705, 829\n            }\n        },    \n        -- Ruby Life Pools\n        [5] = {\n            [\"spells\"] = {    \n                \"Cold Claws\",\n                \"Frigid Shard\",\n                \"Primal Chill\",\n                \"Living Bomb\",\n                \"Icebolt\",\n                \"Cold Claws\",\n                \"Cinderbolt\",\n                \"Flame Dance\",\n                \"Lightning Bolt\",\n                \"Burning Touch\",\n                \"Thunder Bolt\"\n            },\n            [\"zones\"] = {\n                2094, 2095\n            }\n        },\n        -- Shadowmoon Burial Grounds\n        [6] = {\n            [\"spells\"] = {    \n                \"Deathspike\",\n                \"Void Devastation\",\n                \"Death Blast\",\n                \"Plague Spit\",\n                \"Shadow Bolt\",\n                \"Shadow Word: Frailty\",\n                \"Rending Voidlash\",\n                \"Void Bolt\"\n            },\n            [\"zones\"] = {\n                574, 575, 576\n            }\n        },  \n        -- Temple of the Jade Serpent\n        [7] = {\n            [\"spells\"] = {    \n                \"Hydrolance\",\n                \"Agony\",\n                \"Serpent Strike\",\n                \"Jade Serpent Wave\",\n                \"Defiling Mist\",\n                \"Touch of Ruin\",\n                \"Throw Torch\",\n                \"Dark Claw\"\n            },\n            [\"zones\"] = {\n                429, 430, 791, 792\n            }\n        },   \n        -- The Nokhud Offensive\n        [8] = {\n            [\"spells\"] = {    \n                \"Wind Burst\",\n                \"Gale Arrow\",\n                \"Conductive Strike\",\n                \"Storm Shock\",\n                \"Stormbolt\",\n                \"Chain Lightning\",\n                \"Thunderstrike\",\n                \"Death Bolt\",\n                \"Surge\"\n            },\n            [\"zones\"] = {\n                2093\n            }\n        },   \n        -- Vault of the Incarnates\n        [9] = {\n            [\"spells\"] = {    \n                \"Primal Flow\",\n                \"Chain Lightning\",\n                \"Frost Spike\",\n                \"Lightning Bolt\",\n                \"Aerial Buffet\",\n                \"Aerial Slash\",\n                \"Storm Bolt\",\n                \"Ice Barrage\",\n                \"Static Jolt\",\n                \"Uber Strike\" --Spell Reflect testing\n                \n            },\n            [\"zones\"] = {\n                2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126, 622\n            }\n        },\n        -- Brackenhide Hollow\n        [10] = {\n            [\"spells\"] = {    \n                \"Earth Bolt\",\n                \"Decayed Senses\",\n                \"Touch of Decay\",\n                \"Decay Surge\"\n            },\n            [\"zones\"] = {\n                2096, 2106\n            }\n        },\n        -- Halls of Infusion\n        [11] = {\n            [\"spells\"] = {    \n                \"Purifying Blast\",\n                \"Gulp Swog Toxin\",\n                \"Focused Deluge\",\n                \"Squall Buffet\",\n                \"Containment Beam\",\n                \"Pyretic Burst\",\n                \"Ice Shard\",\n                \"Lightning Blast\",\n                \"Frost Shock\",\n                \"Wind Buffet\"\n            },\n            [\"zones\"] = {\n                2082, 2083\n            }\n        },\n        -- Netharus\n        [12] = {\n            [\"spells\"] = {    \n                \"Grounding Spear\",\n                \"Melt\",\n                \"Lava Bolt\",\n                \"Magma Conflagration\"\n            },\n            [\"zones\"] = {\n                2080, 2081\n            }\n        },\n        -- Uldaman\n        [13] = {\n            [\"spells\"] = {    \n                \"Chain Lightning\",\n                \"Stone Spike\",\n                \"Earthen Shards\",\n                \"Burning Heat\",\n                \"Stone Bolt\",\n                \"Venomous Fangs\",\n                \"Time Sink\",\n                \"Spiked Carapace\",\n                \"Curse of Stone\"\n            },\n            [\"zones\"] = {\n                2071, 2072\n            }\n        },\n        -- Freehold\n        [14] = {\n            [\"spells\"] = {    \n                \"Water Bolt\",\n                \"Lightning Bolt\",\n                \"Infected Wound\",\n                \"Oiled Blade\"\n            },\n            [\"zones\"] = {\n                936\n            }\n        },\n        -- Underrot\n        [15] = {\n            [\"spells\"] = {    \n                \"Blood Bolt\",\n                \"Wicked Embrace\",\n                \"Decaying Mind\",\n                \"Void Spit\"\n            },\n            [\"zones\"] = {\n                1041, 1042\n            }\n        },\n        -- Neltharion's Lair\n        [16] = {\n            [\"spells\"] = {    \n                \"Stone Gaze\",\n                \"Stone Bolt\",\n                \"Toxic Retch\",\n                \"Molten Crash\",\n                \"Piercing Shards\",\n                \"Sunder\"\n            },\n            [\"zones\"] = {\n                731\n            }\n        },\n        -- Vortex Pinnacle\n        [17] = {\n            [\"spells\"] = {    \n                \"Lightning Bolt\",\n                \"Chain Lightning\",\n                \"Rushing Wind\",\n                \"Lightning Lash\",\n                \"Starlight\",\n                \"Holy Smite\",\n                \"Wind Bolt\"\n            },\n            [\"zones\"] = {\n                325, 737\n            }\n        },\n        -- Abberus, the Shadowed Crucible\n        [18] = {\n            [\"spells\"] = {    \n                \"Flame Slash\",\n                \"Shadow Spike\",\n                \"Flaming Cudgel\",\n                \"Lava Bolt\",\n                \"Scorching Detonation\",\n                \"Void Surge\"\n            },\n            [\"zones\"] = {\n                2166, 2167, 2168, 2169, 2170\n            }\n        },\n        -- Dawn of the Infinite\n        [19] = {\n            [\"spells\"] = {    \n                \"Noxious Ejection\",\n                \"Stonebolt\",\n                \"Infinite Bolt\",\n                \"Infinite Blast\",\n                \"Fireball\",\n                \"Immolate\",\n                \"Temporal Blast\",\n                \"Corroding Volley\",\n                \"Epoch Bolt\"\n            },\n            [\"zones\"] = {\n                2190, 2191, 2192, 2193, 2194, 2195, 2196, 2197, 2198\n            }\n        },\n        -- Amirdrassil\n        [20] = {\n            [\"spells\"] = {\n                \"Coiling Flames\",\n                \"Twisting Singe\",\n                \"Fyr'alath's Flame\"\n            },\n            [\"zones\"] = {\n                2232, 2240, 2244, 2233, 2234, 2238\n            }\n        },\n        -- Atal'Dazar\n        [21] = {\n            [\"spells\"] = {\n                \"Wildfire\",\n                \"Venomfang Strike\",\n                \"Venom Blast\",\n                \"Soulburn\",\n                \"Wracking Pain\"\n            },\n            [\"zones\"] = {\n                934, 935\n            }\n        },\n        -- Black Rook Hold\n        [22] = {\n            [\"spells\"] = {\n                \"Soul Blast\",\n                \"Arcane Blitz\"\n            },\n            [\"zones\"] = {\n                751, 752, 753, 754, 755, 756\n            }\n        },\n        -- Darkheart Thicket\n        [23] = {\n            [\"spells\"] = {\n                \"Nightmare Bolt\",\n                \"Feed on the Weak\",\n                \"Bloodbolt\",\n                \"Firebolt\",\n                \"Nightmare Toxin\",\n                \"Despair\",\n                \"Unnerving Screech\",\n                \"Tormenting Eye\",\n                \"Shadow Bolt\",\n                \"Darksoul Bite\"\n            },\n            [\"zones\"] = {\n                733\n            }\n        },\n        -- Everbloom\n        [24] = {\n            [\"spells\"] = {\n                \"Nature's Wrath\",\n                \"Water Bolt\",\n                \"Dreadpetal Pollen\",\n                \"Arcane Blast\",\n                \"Fireball\",\n                \"Frostbolt\",\n                \"Choking Vines\",\n                \"Dancing Thorns\",\n                \"Pyroblast\",\n                \"Poisonous Claws\"\n            },\n            [\"zones\"] = {\n                620, 621\n            }\n        },\n        -- Throne of the Tides\n        [25] = {\n            [\"spells\"] = {\n                \"Focused Tempest\",\n                \"Frostbolt\",\n                \"Water Bolt\",\n                \"Flame Shock\",\n                \"Mind Rot\",\n                \"Foul Bolt\",\n                \"Ink Blast\",\n                \"Mind Flay\",\n                \"Aquablast\",\n                \"Hex\",\n                \"Crushing Depths\",\n                \"Lightning Bolt\",\n                \"Lightning Surge\"\n                \n            },\n            [\"zones\"] = {\n                323, 322\n            }\n        },\n        -- Waycrest Manor\n        [26] = {\n            [\"spells\"] = {\n                \"Bramble Bolt\",\n                \"Ruinous Bolt\",\n                \"Soul Bolt\",\n                \"Wasting Strike\",\n                \"Wracking Chord\",\n                \"Virulent Pathogen\",\n                \"Darkened Lighting\",\n                \"Shadow Cleave\",\n                \"Infest\",\n                \"Spit\",\n                \"Etch\",\n                \"Runic Mark\",\n                \"Decaying Touch\",\n                \"Dread Mark\",\n                \"Runic Bolt\",\n                \"Scar Soul\",\n                \"Tearing Strike\",\n                \"Drain Essence\"\n            },\n            [\"zones\"] = {\n                1016, 1015, 1017, 1018, 1029\n            }\n        }\n    }\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    if not unitFrame.castBar.tick then\n        unitFrame.castBar.tick = unitFrame.castBar:CreateTexture (nil, \"overlay\")\n        unitFrame.castBar.tick:SetDrawLayer (\"overlay\", 4)\n        unitFrame.castBar.tick:SetBlendMode (\"DISABLE\")\n        --unitFrame.castBar.tick:SetHeight(unitFrame.castBar:GetHeight())\n        unitFrame.castBar.tick:SetHeight(10)\n    end\n    unitFrame.castBar.tick:SetTexture(Plater.SparkTextures[8])\n    unitFrame.castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n    unitFrame.castBar.tick:SetWidth(2)    \n    \n    \n    function envTable.EnhancedCastBar(unitId, castBar)\n        castBar.tick:Hide()\n        \n        if castBar.IsInterrupted then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        \n        if UnitExists(targetUnitId) then\n            local targetName = UnitName(targetUnitId)\n            local spellName = castBar.SpellName\n            local inParty = UnitInParty(\"player\")\n            local inRaid = UnitInRaid(\"player\")\n            castBar.Text:SetText(spellName)    \n            \n            -- Cast is targetting a specific unit\n            if targetName then\n                \n                local isTargettingMe\n                local targetNameByColor\n                \n                -- Determine if the cast is targetting the player character\n                if targetName == UnitName(\"player\") then\n                    isTargettingMe = true\n                else\n                    isTargettingMe = false\n                end\n                \n                -- Nameplate flash options\n                if isTargettingMe then\n                    if envTable.optionsNameplateFlash then\n                        \n                        -- Default value of true since it is turned on in the options\n                        local showNameplateFlash = true\n                        \n                        -- Hide flash when not in a group\n                        if envTable.optionsHideFlashSolo then\n                            if not inParty and not inRaid then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Hide flash when player is a tank specialization\n                        if envTable.optionsHideFlashAsTank then\n                            if GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Show nameplate flash if conditions met\n                        if showNameplateFlash then\n                            Plater.FlashNameplateBody (unitFrame)\n                        end\n                    end\n                end\n                \n                \n                -- Target name in cast bar options\n                if envTable.optionsShowTargetName then\n                    \n                    -- Change character name to \"Me\" if turned on in options\n                    if envTable.optionsReplaceMyName then \n                        if isTargettingMe then\n                            targetName = \"Me\"\n                        end\n                    end                    \n                    \n                    -- Color the target name based on the targets class color\n                    targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                    \n                    -- Shrink the name of the cast bar text if necessary (based on options)\n                    local castBarWidth = castBar:GetWidth()\n                    DetailsFramework:TruncateText (castBar.Text, castBarWidth * (envTable.optionsCastNameSize / 100))\n                    \n                    -- Update the cast bar text\n                    local currentText = castBar.Text:GetText()\n                    if currentText ~= nil and currentText ~= '' then \n                        local castText = currentText .. \" » \" ..  targetNameByColor\n                        \n                        -- Hide self target name when solo\n                        if envTable.optionsHideNameSolo then\n                            if not inParty and not inRaid then\n                                if isTargettingMe then\n                                    castText = currentText\n                                end\n                            end\n                        end\n                        castBar.Text:SetText(castText)\n                        DetailsFramework:TruncateText (castBar.Text, castBarWidth)\n                    end   \n                end\n            end\n            \n            \n            -- Interrupt bar color options\n            if envTable.optionsShowInterruptColor then\n                local canInterrupt = castBar.canInterrupt\n                local castEndTime = castBar.spellEndTime\n                local interruptReadyTime = 0\n                local start\n                local duration\n                local playerIsWarlock\n                \n                if envTable.interruptID ~= nil then\n                    start, duration  = GetSpellCooldown(envTable.interruptID)  --local\n                    interruptReadyTime = start + duration\n                end\n                \n                if canInterrupt then\n                    if envTable.interruptID ~= nil then\n                        \n                        -- Is the player a warlock?\n                        if envTable.class == 9 then\n                            playerIsWarlock = true\n                        else\n                            playerIsWarlock = false\n                        end\n                        \n                        -- Check to see if the spell is known/talented\n                        if IsSpellKnown(envTable.interruptID, playerIsWarlock) then\n                            if interruptReadyTime == 0 then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptAvailable)\n                            elseif envTable.optionsShowSecondaryInterrupts and envTable.class == 2 and IsSpellKnown(31935) and not envTable.isSpellOnCooldown_IgnoreGCD(31935) then\n                                -- Paladin Avenger's Shield\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            elseif interruptReadyTime < (castEndTime - 0.25) then       \n                                castBar.tick:Show()\n                                castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n                                local tickLocation = (start + duration - castBar.spellStartTime) / castBar.maxValue  -- castBar.spellStartTime + 0.25\n                                if castBar.channeling then\n                                    tickLocation = 1 - tickLocation\n                                end                                \n                                castBar.tick:SetPoint (\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                                \n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptSoon)                \n                            elseif interruptReadyTime >= (castEndTime - 0.25) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                            end\n                        else\n                            Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)                \n                        end     \n                    end          \n                else\n                    Plater.SetCastBarColor(unitFrame, envTable.optionsColorProtected)                \n                end\n                \n                \n                -- Spell Reflection coloring\n                if envTable.optionsShowSecondaryInterrupts and IsSpellKnown(23920) and not envTable.isSpellOnCooldown_IgnoreGCD(23920) then\n                    -- Check to see if the ability is targetting the player\n                    if UnitExists(targetUnitId) then\n                        if UnitName(targetUnitId) == UnitName(\"player\") then\n                            -- Color the bar if the spell is reflectable\n                            if envTable.IsSpellReflectable(C_Map.GetBestMapForUnit(\"player\"), modTable.reflectableSpells, castBar.SpellName) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            end\n                        end\n                    end\n                end\n            end\n            \n            \n        end\n    end\n    \n    \n    -- Checks to see if Felgaurd or Felhunter interrupt skill is known and assigns if found\n    function envTable.GetWarlockInterrupt()\n        if IsSpellKnown(89766, true) then\n            -- Felguard: Axe Toss\n            return 89766\n        elseif IsSpellKnown(19647, true) then\n            -- Felhunter: Spell Lock\n            return 19647\n        elseif C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnown(132409, true) then\n            -- Check for Grimoire of Sacrifice\n            return 132409\n        else \n            -- Otherwise no interrupt available    \n            return nil \n        end\n    end\n    \n    \n    -- Checks to see if the spell being cast is reflectable. Checks for a spell name and zone ID match.\n    function envTable.IsSpellReflectable(zoneID, spellList, spellName)\n        for i = 1, #spellList do\n            -- Check for matching spell name\n            for y = 1, #spellList[i][\"spells\"] do\n                if spellList[i][\"spells\"][y] == spellName then \n                    -- Check to see if the player is in one of the supported zones for this spell ID\n                    for z = 1, #spellList[i][\"zones\"] do\n                        if spellList[i][\"zones\"][z] == zoneID then\n                            return true\n                        end\n                    end\n                end\n            end \n        end\n        return false\n    end    \n    \n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    function envTable.isSpellOnCooldown_IgnoreGCD(spellID)\n        local gcdSTART, gcdDUR = GetSpellCooldown(61304) -- GCD\n        local GCD_expirationTime = gcdSTART + gcdDUR\n        local spellStart, spellDuration  = GetSpellCooldown(spellID)\n        local spellReadyTime = spellStart + spellDuration        \n        if spellReadyTime <= GCD_expirationTime then\n            return false\n        else\n            return true\n        end\n    end\n    \nend",
},
["version"] = -1,
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
["Cast Update"] = "function(self, unitId, unitFrame, envTable)\n    unitFrame.castBar.ScheduleToHide = function(self) self:Hide() end\nend",
},
["Hooks"] = {
["Cast Update"] = "function(self, unitId, unitFrame, envTable)\n    unitFrame.castBar.ScheduleToHide = function(self) self:Hide() end\nend",
},
["Time"] = 1759089085,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 3615519,
["Enabled"] = true,
["Revision"] = 86,
["Options"] = {
},
["Author"] = "Avade-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Hide Interrupted",
["LastHookEdited"] = "",
["semver"] = "",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --if this unit is a player, ignore\n        if (UnitPlayerControlled(unitFrame.unit)) then\n            return\n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1747507059,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
["scenario"] = true,
["raid"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 132293,
["Enabled"] = true,
["Revision"] = 117,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 5,
["Name"] = "Threat Color",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
},
},
{
["OptionsValues"] = {
["color2"] = {
0.8862745761871338,
0.4470588564872742,
0.3568627536296845,
1,
},
["color1"] = {
1,
0.8431373238563538,
0,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x65ecb37a6d7e9053",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local FS = false\n    local LS = false\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame =  unitFrame.BuffFrame.PlaterBuffList[i]\n        if (auraIconFrame:IsShown() ) then \n            if auraIconFrame.SpellId == 188389 then\n                FS = true\n            elseif auraIconFrame.SpellId == 334168 then\n                LS = true\n            end\n        end\n    end\n    if FS then\n        modTable.UpdateColor (unitFrame, LS)\n    end\nend\n\n\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    function modTable.UpdateColor (unitFrame, LS)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end  \n        if LS then\n            Plater.SetNameplateColor (unitFrame, modTable.config.color2)\n        else\n            Plater.SetNameplateColor (unitFrame, modTable.config.color1)\n        end\n        return\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local FS = false\n    local LS = false\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame =  unitFrame.BuffFrame.PlaterBuffList[i]\n        if (auraIconFrame:IsShown() ) then \n            if auraIconFrame.SpellId == 188389 then\n                FS = true\n            elseif auraIconFrame.SpellId == 334168 then\n                LS = true\n            end\n        end\n    end\n    if FS then\n        modTable.UpdateColor (unitFrame, LS)\n    end\nend\n\n\n\n\n\n\n\n\n",
},
["scriptId"] = "table: 00000276C491ADF0",
["Time"] = 1759089315,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["Enabled"] = true,
["263"] = true,
},
},
["url"] = "https://wago.io/0OyMS8oYU/1",
["Icon"] = 618980,
["Enabled"] = false,
["Revision"] = 91,
["semver"] = "1.0.0",
["Author"] = "Reloenh-Illidan",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Flame Shock Color",
["PlaterCore"] = 1,
["version"] = 1,
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local FS = false\n    local LS = false\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame =  unitFrame.BuffFrame.PlaterBuffList[i]\n        if (auraIconFrame:IsShown() ) then \n            if auraIconFrame.SpellId == 188389 then\n                FS = true\n            elseif auraIconFrame.SpellId == 334168 then\n                LS = true\n            end\n        end\n    end\n    if FS then\n        modTable.UpdateColor (unitFrame, LS)\n    end\nend\n\n\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    function modTable.UpdateColor (unitFrame, LS)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end  \n        if LS then\n            Plater.SetNameplateColor (unitFrame, modTable.config.color2)\n        else\n            Plater.SetNameplateColor (unitFrame, modTable.config.color1)\n        end\n        return\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local FS = false\n    local LS = false\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame =  unitFrame.BuffFrame.PlaterBuffList[i]\n        if (auraIconFrame:IsShown() ) then \n            if auraIconFrame.SpellId == 188389 then\n                FS = true\n            elseif auraIconFrame.SpellId == 334168 then\n                LS = true\n            end\n        end\n    end\n    if FS then\n        modTable.UpdateColor (unitFrame, LS)\n    end\nend\n\n\n\n\n\n\n\n\n",
},
["Options"] = {
{
["Type"] = 1,
["Key"] = "color1",
["Value"] = {
0.0078431377187371,
1,
0,
1,
},
["Name"] = "Color Flame Shock but no Lava Lash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color",
},
{
["Type"] = 1,
["Key"] = "color2",
["Value"] = {
0.94509810209274,
1,
0,
1,
},
["Name"] = "Color Flame Shock and Lava Lash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color",
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.healthBar.customShieldHookNeedsUpdate = true\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    local hb = unitFrame.healthBar\n    if hb.customShieldHookNeedsUpdate and hb.displayedUnit then\n        hb:UNIT_MAXHEALTH()\n        hb.customShieldHookNeedsUpdate = false\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.LibSharedMedia = LibStub:GetLibrary (\"LibSharedMedia-3.0\")\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --Disable for classic\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        function envTable.addHook(unitFrame) end\n        return\n    end\n    \n    --settings: (changing this requires a /reload)\n    local shieldTexture = \"\"\n    --local shieldTexture = \"Details Flat\"\n    local useHalfBar = false --use a \"half bar\" overlay if the health+absorb is > 100% of the health\n    local showAlways = false --show absorbs value if health amount is disabled\n    \n    \n    --init\n    local hb = unitFrame.healthBar\n    local unit = hb.displayedUnit\n    if shieldTexture and shieldTexture ~= \"\" then\n        local texture = modTable.LibSharedMedia:Fetch(\"statusbar\", shieldTexture)\n        hb.Settings.ShieldIndicatorTexture = texture or [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture (hb.Settings.ShieldIndicatorTexture, true, true)\n    else\n        hb.Settings.ShieldIndicatorTexture = [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture (hb.Settings.ShieldIndicatorTexture, true, true)\n    end\n    \n    -- ensure settings are up to date... workardound till fix in Plater core.\n    unitFrame.healthBar.Settings.ShowShields = Plater.db.profile.show_shield_prediction\n    \n    -- overwrite to add custom text\n    function Plater.UpdateLifePercentText (healthBar, unitId, showHealthAmount, showPercentAmount, showDecimals) -- ~health\n        \n        --get the cached health amount for performance\n        local currentHealth, maxHealth, absorb = healthBar.CurrentHealth, healthBar.CurrentHealthMax, healthBar.currentAbsorb\n        \n        if (showHealthAmount and showPercentAmount) then\n            local percent = currentHealth / maxHealth * 100\n            \n            if (showDecimals) then\n                if (percent < 10) then\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. format (\"%.2f\", percent) .. \"%)\")\n                    \n                elseif (percent < 99.9) then\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. format (\"%.1f\", percent) .. \"%)\")\n                else\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (100%)\")\n                end\n            else\n                healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. floor (percent) .. \"%)\")\n            end\n            \n        elseif (showHealthAmount) then\n            healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth))\n            \n        elseif (showPercentAmount) then\n            local percent = currentHealth / maxHealth * 100\n            \n            if (showDecimals) then\n                if (percent < 10) then\n                    healthBar.lifePercent:SetText (format (\"%.2f\", percent) .. \"%\")\n                    \n                elseif (percent < 99.9) then\n                    healthBar.lifePercent:SetText (format (\"%.1f\", percent) .. \"%\")\n                else\n                    healthBar.lifePercent:SetText (\"100%\")\n                end\n            else\n                healthBar.lifePercent:SetText (floor (percent) .. \"%\")\n            end\n            \n        else\n            healthBar.lifePercent:SetText (\"\")\n        end\n        \n        \n    end\n    \n    \n    -- overwrite UpdateHealPrediction on the healthBar\n    function envTable.addHook(unitFrame)\n        if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n            return\n        end\n        local hb = unitFrame.healthBar\n        \n        if not hb.isCustomShieldHook then\n            --health and absorbs prediction from Plater core, reworked to integrate shields into the health bar\n            hb.UpdateHealPrediction = function (self)\n                local currentHealth = self.currentHealth\n                local currentHealthMax = self.currentHealthMax\n                local healthPercent = currentHealth / currentHealthMax\n                \n                if (not currentHealthMax or currentHealthMax <= 0) then\n                    return\n                end\n                \n                --order is: the health of the unit > damage absorb > heal absorb > incoming heal\n                local width = self:GetWidth()\n                \n                hb.shieldAbsorbIndicator:Hide()\n                hb.shieldAbsorbGlow:Hide()\n                \n                if not self.displayedUnit then return end\n                \n                if (self.Settings.ShowHealingPrediction) then\n                    --incoming heal on the unit from all sources\n                    local unitHealIncoming = UnitGetIncomingHeals (self.displayedUnit) or 0\n                    --heal absorbs\n                    local unitHealAbsorb = UnitGetTotalHealAbsorbs (self.displayedUnit) or 0\n                    \n                    if (unitHealIncoming > 0) then\n                        --calculate what is the percent of health incoming based on the max health the player has\n                        local incomingPercent = unitHealIncoming / currentHealthMax\n                        self.incomingHealIndicator:Show()\n                        self.incomingHealIndicator:SetWidth (max (1, min (width * incomingPercent, abs (healthPercent - 1) * width)))\n                        self.incomingHealIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                        self.incomingHealIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                    else\n                        self.incomingHealIndicator:Hide()\n                    end\n                    \n                    if (unitHealAbsorb > 0) then\n                        local healAbsorbPercent = unitHealAbsorb / currentHealthMax\n                        self.healAbsorbIndicator:Show()\n                        self.healAbsorbIndicator:SetWidth (max (1, min (width * healAbsorbPercent, abs (healthPercent - 1) * width)))\n                        self.healAbsorbIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                        self.healAbsorbIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                    else\n                        self.healAbsorbIndicator:Hide()\n                    end\n                end\n                \n                if (self.Settings.ShowShields) then\n                    --damage absorbs\n                    local unitDamageAbsorb = UnitGetTotalAbsorbs (self.displayedUnit) or 0\n                    self.currentAbsorb = unitDamageAbsorb\n                    \n                    if (unitDamageAbsorb > 0) then\n                        local curHealthTotal = unitDamageAbsorb + currentHealth\n                        local damageAbsorbPercent\n                        local healthPercentAbsorb\n                        local isHalfBar = false\n                        if curHealthTotal > currentHealthMax then\n                            if useHalfBar then\n                                damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                                if damageAbsorbPercent > 1 then\n                                    damageAbsorbPercent = 1 -- just limit it to the healthbar width...\n                                end\n                                healthPercentAbsorb = 1 - damageAbsorbPercent\n                                self:SetMinMaxValues (0, currentHealthMax)\n                                \n                                isHalfBar = true\n                            else\n                                damageAbsorbPercent = unitDamageAbsorb / curHealthTotal\n                                healthPercentAbsorb = currentHealth / curHealthTotal\n                                self:SetMinMaxValues (0, curHealthTotal)\n                            end\n                        else \n                            damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                            healthPercentAbsorb = currentHealth / currentHealthMax\n                            self:SetMinMaxValues (0, currentHealthMax)\n                        end\n                        --print(healthPercentAbsorb, currentHealth, unitDamageAbsorb, damageAbsorbPercent)\n                        \n                        \n                        self.shieldAbsorbIndicator:SetWidth (width * damageAbsorbPercent)\n                        self.shieldAbsorbIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercentAbsorb, (isHalfBar and (- self:GetHeight() / 2)) or 0)\n                        self.shieldAbsorbIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercentAbsorb, 0)\n                        \n                        self.shieldAbsorbIndicator:Show()\n                        \n                    else\n                        self.shieldAbsorbIndicator:Hide()\n                    end\n                end\n                \n                hb.isCustomShieldHook = true\n            end\n            \n            if hb.displayedUnit then\n                hb.shieldAbsorbIndicator:Hide()\n                hb.shieldAbsorbGlow:Hide()\n                hb:UNIT_MAXHEALTH()\n            else\n                hb.customShieldHookNeedsUpdate = true\n            end\n            \n        end\n    end\n    \nend",
},
["Time"] = 1759089083,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 3615519,
["Enabled"] = true,
["Revision"] = 1274,
["semver"] = "",
["Author"] = "Elaiana-Proudmoore",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Absorb Shield",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.healthBar.customShieldHookNeedsUpdate = true\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    local hb = unitFrame.healthBar\n    if hb.customShieldHookNeedsUpdate and hb.displayedUnit then\n        hb:UNIT_MAXHEALTH()\n        hb.customShieldHookNeedsUpdate = false\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.LibSharedMedia = LibStub:GetLibrary (\"LibSharedMedia-3.0\")\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --Disable for classic\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        function envTable.addHook(unitFrame) end\n        return\n    end\n    \n    --settings: (changing this requires a /reload)\n    local shieldTexture = \"\"\n    --local shieldTexture = \"Details Flat\"\n    local useHalfBar = false --use a \"half bar\" overlay if the health+absorb is > 100% of the health\n    local showAlways = false --show absorbs value if health amount is disabled\n    \n    \n    --init\n    local hb = unitFrame.healthBar\n    local unit = hb.displayedUnit\n    if shieldTexture and shieldTexture ~= \"\" then\n        local texture = modTable.LibSharedMedia:Fetch(\"statusbar\", shieldTexture)\n        hb.Settings.ShieldIndicatorTexture = texture or [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture (hb.Settings.ShieldIndicatorTexture, true, true)\n    else\n        hb.Settings.ShieldIndicatorTexture = [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture (hb.Settings.ShieldIndicatorTexture, true, true)\n    end\n    \n    -- ensure settings are up to date... workardound till fix in Plater core.\n    unitFrame.healthBar.Settings.ShowShields = Plater.db.profile.show_shield_prediction\n    \n    -- overwrite to add custom text\n    function Plater.UpdateLifePercentText (healthBar, unitId, showHealthAmount, showPercentAmount, showDecimals) -- ~health\n        \n        --get the cached health amount for performance\n        local currentHealth, maxHealth, absorb = healthBar.CurrentHealth, healthBar.CurrentHealthMax, healthBar.currentAbsorb\n        \n        if (showHealthAmount and showPercentAmount) then\n            local percent = currentHealth / maxHealth * 100\n            \n            if (showDecimals) then\n                if (percent < 10) then\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. format (\"%.2f\", percent) .. \"%)\")\n                    \n                elseif (percent < 99.9) then\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. format (\"%.1f\", percent) .. \"%)\")\n                else\n                    healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (100%)\")\n                end\n            else\n                healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth) .. \" (\" .. floor (percent) .. \"%)\")\n            end\n            \n        elseif (showHealthAmount) then\n            healthBar.lifePercent:SetText (Plater.FormatNumber (currentHealth))\n            \n        elseif (showPercentAmount) then\n            local percent = currentHealth / maxHealth * 100\n            \n            if (showDecimals) then\n                if (percent < 10) then\n                    healthBar.lifePercent:SetText (format (\"%.2f\", percent) .. \"%\")\n                    \n                elseif (percent < 99.9) then\n                    healthBar.lifePercent:SetText (format (\"%.1f\", percent) .. \"%\")\n                else\n                    healthBar.lifePercent:SetText (\"100%\")\n                end\n            else\n                healthBar.lifePercent:SetText (floor (percent) .. \"%\")\n            end\n            \n        else\n            healthBar.lifePercent:SetText (\"\")\n        end\n        \n        \n    end\n    \n    \n    -- overwrite UpdateHealPrediction on the healthBar\n    function envTable.addHook(unitFrame)\n        if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n            return\n        end\n        local hb = unitFrame.healthBar\n        \n        if not hb.isCustomShieldHook then\n            --health and absorbs prediction from Plater core, reworked to integrate shields into the health bar\n            hb.UpdateHealPrediction = function (self)\n                local currentHealth = self.currentHealth\n                local currentHealthMax = self.currentHealthMax\n                local healthPercent = currentHealth / currentHealthMax\n                \n                if (not currentHealthMax or currentHealthMax <= 0) then\n                    return\n                end\n                \n                --order is: the health of the unit > damage absorb > heal absorb > incoming heal\n                local width = self:GetWidth()\n                \n                hb.shieldAbsorbIndicator:Hide()\n                hb.shieldAbsorbGlow:Hide()\n                \n                if not self.displayedUnit then return end\n                \n                if (self.Settings.ShowHealingPrediction) then\n                    --incoming heal on the unit from all sources\n                    local unitHealIncoming = UnitGetIncomingHeals (self.displayedUnit) or 0\n                    --heal absorbs\n                    local unitHealAbsorb = UnitGetTotalHealAbsorbs (self.displayedUnit) or 0\n                    \n                    if (unitHealIncoming > 0) then\n                        --calculate what is the percent of health incoming based on the max health the player has\n                        local incomingPercent = unitHealIncoming / currentHealthMax\n                        self.incomingHealIndicator:Show()\n                        self.incomingHealIndicator:SetWidth (max (1, min (width * incomingPercent, abs (healthPercent - 1) * width)))\n                        self.incomingHealIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                        self.incomingHealIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                    else\n                        self.incomingHealIndicator:Hide()\n                    end\n                    \n                    if (unitHealAbsorb > 0) then\n                        local healAbsorbPercent = unitHealAbsorb / currentHealthMax\n                        self.healAbsorbIndicator:Show()\n                        self.healAbsorbIndicator:SetWidth (max (1, min (width * healAbsorbPercent, abs (healthPercent - 1) * width)))\n                        self.healAbsorbIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                        self.healAbsorbIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                    else\n                        self.healAbsorbIndicator:Hide()\n                    end\n                end\n                \n                if (self.Settings.ShowShields) then\n                    --damage absorbs\n                    local unitDamageAbsorb = UnitGetTotalAbsorbs (self.displayedUnit) or 0\n                    self.currentAbsorb = unitDamageAbsorb\n                    \n                    if (unitDamageAbsorb > 0) then\n                        local curHealthTotal = unitDamageAbsorb + currentHealth\n                        local damageAbsorbPercent\n                        local healthPercentAbsorb\n                        local isHalfBar = false\n                        if curHealthTotal > currentHealthMax then\n                            if useHalfBar then\n                                damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                                if damageAbsorbPercent > 1 then\n                                    damageAbsorbPercent = 1 -- just limit it to the healthbar width...\n                                end\n                                healthPercentAbsorb = 1 - damageAbsorbPercent\n                                self:SetMinMaxValues (0, currentHealthMax)\n                                \n                                isHalfBar = true\n                            else\n                                damageAbsorbPercent = unitDamageAbsorb / curHealthTotal\n                                healthPercentAbsorb = currentHealth / curHealthTotal\n                                self:SetMinMaxValues (0, curHealthTotal)\n                            end\n                        else \n                            damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                            healthPercentAbsorb = currentHealth / currentHealthMax\n                            self:SetMinMaxValues (0, currentHealthMax)\n                        end\n                        --print(healthPercentAbsorb, currentHealth, unitDamageAbsorb, damageAbsorbPercent)\n                        \n                        \n                        self.shieldAbsorbIndicator:SetWidth (width * damageAbsorbPercent)\n                        self.shieldAbsorbIndicator:SetPoint (\"topleft\", self, \"topleft\", width * healthPercentAbsorb, (isHalfBar and (- self:GetHeight() / 2)) or 0)\n                        self.shieldAbsorbIndicator:SetPoint (\"bottomleft\", self, \"bottomleft\", width * healthPercentAbsorb, 0)\n                        \n                        self.shieldAbsorbIndicator:Show()\n                        \n                    else\n                        self.shieldAbsorbIndicator:Hide()\n                    end\n                end\n                \n                hb.isCustomShieldHook = true\n            end\n            \n            if hb.displayedUnit then\n                hb.shieldAbsorbIndicator:Hide()\n                hb.shieldAbsorbGlow:Hide()\n                hb:UNIT_MAXHEALTH()\n            else\n                hb.customShieldHookNeedsUpdate = true\n            end\n            \n        end\n    end\n    \nend",
},
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options For @scriptname",
["Name"] = "Options Intro",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = "",
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
["touchOption"] = false,
["painOption"] = false,
["plagOption"] = false,
["touchPainColor"] = {
0.8862745761871338,
0.4470588564872742,
0.3568627536296845,
1,
},
["touchPlagColor"] = {
0.8862745761871338,
0.4470588564872742,
0.3568627536296845,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x6490c26f17d91913",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.SetNameplateColors(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    --IDs of dots, you can change them to easier adjust to different classes, change only numbers\n    modTable.pain = 589\n    modTable.touch = 34914\n    modTable.plag = 335467\n    modTable.purge = 204213 -- Only for disc priest, acts like pain\n    \n    -- Function to set blinking\n    local function configureBlinking(item, config)\n        if (config ~= 0 and modTable.blinkOption[item].time == -1) then\n            modTable.blinkOption[item].time = floor(config*10+0.5)\n            local nextSwitch = floor(modTable.blinkOption[item].time - modTable.blinkInterval)\n            \n            local currentState = false\n            for i=modTable.blinkOption[item].time, 1, -1 do --not precise enough with decimals\n                if (nextSwitch == i) then\n                    nextSwitch = floor(nextSwitch - modTable.blinkInterval)\n                    currentState = not currentState\n                end\n                modTable.blinkOption[item][floor(i)] = currentState\n            end\n        end\n    end\n    \n    -- Function to disable blinking\n    local function configureBlinkingBlank(item)\n        modTable.blinkOption[item] = {}\n        modTable.blinkOption[item].time = -1\n    end\n    \n    -- Function to set up border sizes\n    local function formatBorderSize(number)\n        if number == 0 then return Plater.db.profile.border_thickness end\n        if number <= 0.1 then return 0.1 end\n        return floor(number * 10) / 10\n    end\n    \n    modTable.npOption = modTable.config.namePlateOption\n    modTable.bOption = modTable.config.borderOption\n    modTable.nameOption = modTable.config.nameOption\n    modTable.rOption = modTable.config.resetOption\n    modTable.blinkInterval = floor(modTable.config.blinkInterval*10+0.5)\n    modTable.blinkOption = {}\n    \n    if (modTable.blinkInterval == 0) then\n        modTable.blinkEnabled = false\n    else\n        modTable.blinkEnabled = true\n    end\n    \n    configureBlinkingBlank(modTable.touch)\n    configureBlinkingBlank(modTable.plag)\n    configureBlinkingBlank(modTable.pain)\n    configureBlinkingBlank(modTable.purge)\n    \n    if (modTable.blinkEnabled) then\n        configureBlinking(modTable.touch, modTable.config.touchBlink)\n        configureBlinking(modTable.plag, modTable.config.plagBlink)\n        configureBlinking(modTable.pain, modTable.config.painBlink)\n        configureBlinking(modTable.purge, modTable.config.painBlink)\n    end\n    \n    modTable.defaultBorderSize = Plater.db.profile.border_thickness\n    \n    modTable.matchMultipleBuffs = {  --settings for different debuffs\n        { \n            auras = {modTable.touch, modTable.plag}, -- touch + plag\n            nameplateColor = modTable.config.touchPlagColor,\n            option = true,\n            scaling = modTable.config.touchPlagScale\n        },\n        { \n            auras = {modTable.touch, modTable.pain}, -- touch + pain \n            nameplateColor = modTable.config.touchPainColor,\n            option = true,\n            scaling = modTable.config.touchPainScale,\n            borderSize = formatBorderSize(modTable.config.touchPainBorder),\n        },\n        { \n            auras = {modTable.plag}, -- plag\n            nameplateColor = modTable.config.plagColor,\n            option = modTable.config.plagOption,\n            scaling = modTable.config.plagScale,\n            borderSize = formatBorderSize(modTable.config.plagBorder),\n        },\n        { \n            auras = {modTable.touch}, -- touch\n            nameplateColor = modTable.config.touchColor,\n            option = modTable.config.touchOption,\n            scaling = modTable.config.touchScale,\n            borderSize = formatBorderSize(modTable.config.touchBorder),\n        }, \n        { \n            auras = {modTable.pain}, -- pain\n            nameplateColor = modTable.config.painColor,\n            option = modTable.config.painOption,\n            scaling = modTable.config.painScale,\n            borderSize = formatBorderSize(modTable.config.painBorder),\n        },\n        { \n            auras = {modTable.purge}, -- purge, acts like pain\n            nameplateColor = modTable.config.painColor,\n            option = modTable.config.painOption,\n            scaling = modTable.config.painScale,\n            borderSize = formatBorderSize(modTable.config.painBorder),\n        }\n    }\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.aurasExpiration = {}\n    \n    local function findAuras(_, _, _, _, _, expirationTime , source, _, _, spellId, ...)    --function to get expiration time on auras\n        if source == \"player\" then\n            if ((spellId == modTable.pain) or (spellId == modTable.purge) or (spellId == modTable.touch) or (spellId == modTable.plag) ) then -- pain / purge / touch / plag\n                envTable.aurasExpiration[spellId] = floor((expirationTime - GetTime())*10+0.5)\n            end\n        end\n    end\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(modTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                \n                if (modTable.blinkEnabled) then\n                    if (modTable.blinkOption[v.auras[1]].time > 0 or (v.auras[2] and modTable.blinkOption[v.auras[2]].time > 0)) then\n                        \n                        envTable.aurasExpiration[v.auras[1]] = 0\n                        if (v.auras[2]) then\n                            envTable.aurasExpiration[v.auras[2]] = 0\n                        end\n                        AuraUtil.ForEachAura(unitId, \"HARMFUL\", nil, findAuras)\n                    end\n                end\n                if (v.scaling ~= 0) then\n                    Plater.SetNameplateScale(unitFrame, v.scaling)\n                end\n                \n                if not (v.option) then\n                    return\n                end\n                \n                if (modTable.npOption) then\n                    if not (modTable.blinkEnabled) then\n                        Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                    else\n                        envTable.colorWithBlinking(unitFrame, 1, v)\n                    end\n                end\n                \n                if (modTable.bOption) then\n                    unitFrame.healthBar.border:SetBorderSizes(v.borderSize, v.borderSize, v.borderSize, v.borderSize)\n                    if not (modTable.blinkEnabled) then\n                        Plater.SetBorderColor (unitFrame, v.nameplateColor)\n                    else\n                        envTable.colorWithBlinking(unitFrame, 2, v)\n                    end\n                    unitFrame.healthBar.border:UpdateSizes()\n                end\n                \n                if (modTable.nameOption) then\n                    local nameString = unitFrame.healthBar.unitName\n                    if not (modTable.blinkEnabled) then\n                        DF:SetFontColor (nameString, v.nameplateColor)\n                    else\n                        envTable.colorWithBlinking(nameString, 3, v)\n                    end\n                end\n                \n                return\n            else\n                -- reset colour and scale\n                if not ((modTable.config.touchPainScale == 0) or (modTable.config.touchPlagScale == 0) or (modTable.config.painScale == 0) or (modTable.config.touchScale == 0) or (modTable.config.plagScale == 0)) then\n                    Plater.SetNameplateScale(unitFrame)\n                end\n                \n                if (modTable.rOption) then\n                    \n                    if (modTable.npOption) then\n                        local npcColor = Plater.GetNpcColor (unitFrame)\n                        \n                        if npcColor then\n                            Plater.SetNameplateColor (unitFrame, npcColor)\n                        elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\"  then\n                            Plater.FindAndSetNameplateColor (unitFrame)\n                        else\n                            Plater.RefreshNameplateColor (unitFrame)\n                        end\n                    end\n                    \n                    if modTable.bOption then\n                        unitFrame.healthBar.border:SetBorderSizes(modTable.defaultBorderSize, modTable.defaultBorderSize, modTable.defaultBorderSize, modTable.defaultBorderSize)\n                        Plater.SetBorderColor (unitFrame)\n                        unitFrame.healthBar.border:UpdateSizes()\n                    end\n                    \n                    if modTable.nameOption then\n                        local nameString = unitFrame.healthBar.unitName\n                        DF:SetFontColor (nameString, 1,1,1, 1)\n                    end\n                end\n                \n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors(unitFrame)\n        local colored = envTable.matchMultiple(unitFrame)\n    end\n    \n    -- Function to use appropriate colouring method\n    function envTable.universalColor(unitFrame, option, color)\n        if (option == 1) then    -- Nameplate\n            Plater.SetNameplateColor (unitFrame, color)\n        elseif (option == 2) then    -- Border\n            Plater.SetBorderColor (unitFrame, color)\n        else    -- Name\n            DF:SetFontColor (unitFrame, color) -- unitFrame here is nameString\n        end\n    end\n    \n    -- Function to make blinking effect every interval\n    function envTable.colorBlinkingInterval(unitFrame, option, aura, color1, color2)\n        if modTable.blinkOption[aura][envTable.aurasExpiration[aura]] then\n            envTable.universalColor(unitFrame, option, color1)    -- sets configurated colour\n        else\n            envTable.universalColor(unitFrame, option, color2)    -- sets default colour\n        end\n    end\n    \n    -- Check if debuff's time is lower than configured time\n    function envTable.debuffLow(aura)\n        if (envTable.aurasExpiration[aura] and modTable.blinkOption[aura].time) then\n            return (envTable.aurasExpiration[aura] <= modTable.blinkOption[aura].time)\n        end\n    end\n    \n    -- Function to make blinking\n    function envTable.colorWithBlinking(unitFrame, option, v)\n        if not (v.auras[2]) then\n            if (envTable.debuffLow(v.auras[1])) then    -- pain / touch / plag low\n                local tempColor = {1,1,1} \n                if (option ~= 3) then\n                    tempColor = Plater.GetNpcColor(unitFrame)\n                end\n                envTable.colorBlinkingInterval(unitFrame, option, v.auras[1], v.nameplateColor, tempColor)\n            else\n                envTable.universalColor(unitFrame, option, v.nameplateColor)    -- default option\n            end\n        else\n            if (envTable.debuffLow(v.auras[1]) and envTable.debuffLow(v.auras[2])) then    -- both debuffs are low\n                local lowestTime = v.auras[2]\n                if envTable.aurasExpiration[v.auras[1]] < envTable.aurasExpiration[v.auras[2]] then\n                    lowestTime = v.auras[1]\n                end\n                local tempColor = Plater.GetNpcColor(unitFrame)\n                if (option == 3) then\n                    tempColor = {1,1,1}\n                end\n                envTable.colorBlinkingInterval(unitFrame, option, lowestTime, v.nameplateColor, tempColor)\n            else\n                -- one debuff out of two is low\n                if (envTable.debuffLow(modTable.touch)) then    -- touch low with both debuffs up\n                    local tempColor\n                    if (v.auras[2] == modTable.plag) then\n                        tempColor = modTable.config.plagColor    -- sets plag colour\n                    else\n                        tempColor = modTable.config.painColor    -- sets pain colour\n                    end\n                    envTable.colorBlinkingInterval(unitFrame, option, modTable.touch, v.nameplateColor, tempColor)\n                end\n                \n                if (envTable.debuffLow(v.auras[2])) then    -- pain / plag low with both debuffs up\n                    envTable.colorBlinkingInterval(unitFrame, option, v.auras[2], v.nameplateColor, modTable.config.painColor)\n                else\n                    envTable.universalColor(unitFrame, option, v.nameplateColor)    -- default option\n                end\n            end\n        end\n    end\n    \nend",
},
["scriptId"] = "table: 00000276C491BA70",
["Time"] = 1759089319,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["PRIEST"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/4ooNYgwGq/2",
["Icon"] = 618980,
["Enabled"] = false,
["Revision"] = 1270,
["semver"] = "1.0.1",
["Author"] = "Megabelly-Silvermoon",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Pain / Touch / Plague Tracker",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "label1",
["Value"] = "Settings:",
["Name"] = "Settings:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "namePlateOption",
["Value"] = true,
["Name"] = "Colour nameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Adds nameplate colouring",
},
{
["Type"] = 4,
["Key"] = "borderOption",
["Value"] = false,
["Name"] = "Colour border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Adds border colouring",
},
{
["Type"] = 4,
["Key"] = "nameOption",
["Value"] = false,
["Name"] = "Colour name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Adds name colouring",
},
{
["Type"] = 5,
["Key"] = "option24",
["Value"] = "One debuff:",
["Name"] = "One debuff:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "painOption",
["Value"] = true,
["Name"] = "Shadow Word: Pain",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Turn off if you don't want nameplates to change if they only have Shadow Word: Pain.",
},
{
["Type"] = 1,
["Key"] = "painColor",
["Value"] = {
1,
0.50196081399918,
0,
1,
},
["Name"] = "Shadow Word: Pain",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with only Shadow Word: Pain.",
},
{
["Type"] = 2,
["Max"] = 28,
["Desc"] = "Blinking based on remaining time. 0.1 precision; 0 to disable.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 6.3,
["Name"] = "Shadow Word: Pain blinking",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "painBlink",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Option for custom scaling. 0 to disable; 1 is default scale.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Shadow Word: Pain scaling",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "painScale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Option for border size. 0 to use your settings; 1 is default plater border size.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Shadow Word: Pain border size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "painBorder",
},
{
["Type"] = 4,
["Key"] = "touchOption",
["Value"] = true,
["Name"] = "Vampiric Touch",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Turn off if you don't want nameplates to change if they only have Vampiric Touch.",
},
{
["Type"] = 1,
["Key"] = "touchColor",
["Value"] = {
0.60000002384186,
0,
0.20000001788139,
1,
},
["Name"] = "Vampiric Touch",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with only Vampiric Touch.",
},
{
["Type"] = 2,
["Max"] = 28,
["Desc"] = "Blinking based on remaining time. 0.1 presicion; 0 to disable.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 6.3,
["Name"] = "Vampiric Touch blinking",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "touchBlink",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Option for custom scaling. 0 to disable; 1 is default scale.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Vampiric Touch scaling",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "touchScale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Option for border size. 0 to use your settings; 1 is default plater border size.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Vampiric Touch border size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "touchBorder",
},
{
["Type"] = 4,
["Key"] = "plagOption",
["Value"] = true,
["Name"] = "Devouring Plague",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Turn off if you don't want nameplates to change if they only have Devouring Plague.",
},
{
["Type"] = 1,
["Key"] = "plagColor",
["Value"] = {
0.29411765933037,
0,
0.50980395078659,
1,
},
["Name"] = "Devouring Plague",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with only Devouring Plague.",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "Blinking based on remaining time. 0.1 presicion; 0 to disable.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 5.4,
["Name"] = "Devouring Plague blinking",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "plagBlink",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Option for custom scaling. 0 to disable; 1 is default scale.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Devouring Plague scaling",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "plagScale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Option for border size. 0 to use your settings; 1 is default plater border size.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Devouring Plague border size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "plagBorder",
},
{
["Type"] = 5,
["Key"] = "option25",
["Value"] = "Two debuffs:",
["Name"] = "Two debuffs:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "touchPainColor",
["Value"] = {
0.13333334028721,
0.54509806632996,
0.13333334028721,
1,
},
["Name"] = "Vampiric Touch + Shadow Word: Pain",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with both Shadow Word: Pain and Vampiric Touch.",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Option for custom scaling. 0 to disable; 1 is default scale.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Touch + Pain scaling",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "touchPainScale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Option for border size. 0 to use your settings; 1 is default plater border size.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Touch + Pain border size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "touchPainBorder",
},
{
["Type"] = 1,
["Key"] = "touchPlagColor",
["Value"] = {
0,
0,
1,
1,
},
["Name"] = "Vampiric Touch + Devouring Plague",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with both Vampiric Touch and Devouring Plague.",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Option for custom scaling. 0 to disable; 1 is default scale.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Touch + Plague scaling",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "touchPlagScale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Option for border size. 0 to use your settings; 1 is default plater border size.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Touch + Plague border size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "touchPlagBorder",
},
{
["Type"] = 5,
["Key"] = "label4",
["Value"] = "Miscellaneous:",
["Name"] = "Miscellaneous:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "0.1 precision; 0 to disable all blinking",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Blinking interval",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "blinkInterval",
},
{
["Type"] = 4,
["Key"] = "resetOption",
["Value"] = true,
["Name"] = "Reset colour after expire",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Resets colour after debuf expires. Toggling on will prevent sometimes lingering colour on nameplates/borders. Toggling off makes mod compatible with other nameplate colouring mods.",
},
},
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.SetNameplateColors(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    --IDs of dots, you can change them to easier adjust to different classes, change only numbers\n    modTable.pain = 589\n    modTable.touch = 34914\n    modTable.plag = 335467\n    modTable.purge = 204213 -- Only for disc priest, acts like pain\n    \n    -- Function to set blinking\n    local function configureBlinking(item, config)\n        if (config ~= 0 and modTable.blinkOption[item].time == -1) then\n            modTable.blinkOption[item].time = floor(config*10+0.5)\n            local nextSwitch = floor(modTable.blinkOption[item].time - modTable.blinkInterval)\n            \n            local currentState = false\n            for i=modTable.blinkOption[item].time, 1, -1 do --not precise enough with decimals\n                if (nextSwitch == i) then\n                    nextSwitch = floor(nextSwitch - modTable.blinkInterval)\n                    currentState = not currentState\n                end\n                modTable.blinkOption[item][floor(i)] = currentState\n            end\n        end\n    end\n    \n    -- Function to disable blinking\n    local function configureBlinkingBlank(item)\n        modTable.blinkOption[item] = {}\n        modTable.blinkOption[item].time = -1\n    end\n    \n    -- Function to set up border sizes\n    local function formatBorderSize(number)\n        if number == 0 then return Plater.db.profile.border_thickness end\n        if number <= 0.1 then return 0.1 end\n        return floor(number * 10) / 10\n    end\n    \n    modTable.npOption = modTable.config.namePlateOption\n    modTable.bOption = modTable.config.borderOption\n    modTable.nameOption = modTable.config.nameOption\n    modTable.rOption = modTable.config.resetOption\n    modTable.blinkInterval = floor(modTable.config.blinkInterval*10+0.5)\n    modTable.blinkOption = {}\n    \n    if (modTable.blinkInterval == 0) then\n        modTable.blinkEnabled = false\n    else\n        modTable.blinkEnabled = true\n    end\n    \n    configureBlinkingBlank(modTable.touch)\n    configureBlinkingBlank(modTable.plag)\n    configureBlinkingBlank(modTable.pain)\n    configureBlinkingBlank(modTable.purge)\n    \n    if (modTable.blinkEnabled) then\n        configureBlinking(modTable.touch, modTable.config.touchBlink)\n        configureBlinking(modTable.plag, modTable.config.plagBlink)\n        configureBlinking(modTable.pain, modTable.config.painBlink)\n        configureBlinking(modTable.purge, modTable.config.painBlink)\n    end\n    \n    modTable.defaultBorderSize = Plater.db.profile.border_thickness\n    \n    modTable.matchMultipleBuffs = {  --settings for different debuffs\n        { \n            auras = {modTable.touch, modTable.plag}, -- touch + plag\n            nameplateColor = modTable.config.touchPlagColor,\n            option = true,\n            scaling = modTable.config.touchPlagScale\n        },\n        { \n            auras = {modTable.touch, modTable.pain}, -- touch + pain \n            nameplateColor = modTable.config.touchPainColor,\n            option = true,\n            scaling = modTable.config.touchPainScale,\n            borderSize = formatBorderSize(modTable.config.touchPainBorder),\n        },\n        { \n            auras = {modTable.plag}, -- plag\n            nameplateColor = modTable.config.plagColor,\n            option = modTable.config.plagOption,\n            scaling = modTable.config.plagScale,\n            borderSize = formatBorderSize(modTable.config.plagBorder),\n        },\n        { \n            auras = {modTable.touch}, -- touch\n            nameplateColor = modTable.config.touchColor,\n            option = modTable.config.touchOption,\n            scaling = modTable.config.touchScale,\n            borderSize = formatBorderSize(modTable.config.touchBorder),\n        }, \n        { \n            auras = {modTable.pain}, -- pain\n            nameplateColor = modTable.config.painColor,\n            option = modTable.config.painOption,\n            scaling = modTable.config.painScale,\n            borderSize = formatBorderSize(modTable.config.painBorder),\n        },\n        { \n            auras = {modTable.purge}, -- purge, acts like pain\n            nameplateColor = modTable.config.painColor,\n            option = modTable.config.painOption,\n            scaling = modTable.config.painScale,\n            borderSize = formatBorderSize(modTable.config.painBorder),\n        }\n    }\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.aurasExpiration = {}\n    \n    local function findAuras(_, _, _, _, _, expirationTime , source, _, _, spellId, ...)    --function to get expiration time on auras\n        if source == \"player\" then\n            if ((spellId == modTable.pain) or (spellId == modTable.purge) or (spellId == modTable.touch) or (spellId == modTable.plag) ) then -- pain / purge / touch / plag\n                envTable.aurasExpiration[spellId] = floor((expirationTime - GetTime())*10+0.5)\n            end\n        end\n    end\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(modTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                \n                if (modTable.blinkEnabled) then\n                    if (modTable.blinkOption[v.auras[1]].time > 0 or (v.auras[2] and modTable.blinkOption[v.auras[2]].time > 0)) then\n                        \n                        envTable.aurasExpiration[v.auras[1]] = 0\n                        if (v.auras[2]) then\n                            envTable.aurasExpiration[v.auras[2]] = 0\n                        end\n                        AuraUtil.ForEachAura(unitId, \"HARMFUL\", nil, findAuras)\n                    end\n                end\n                if (v.scaling ~= 0) then\n                    Plater.SetNameplateScale(unitFrame, v.scaling)\n                end\n                \n                if not (v.option) then\n                    return\n                end\n                \n                if (modTable.npOption) then\n                    if not (modTable.blinkEnabled) then\n                        Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                    else\n                        envTable.colorWithBlinking(unitFrame, 1, v)\n                    end\n                end\n                \n                if (modTable.bOption) then\n                    unitFrame.healthBar.border:SetBorderSizes(v.borderSize, v.borderSize, v.borderSize, v.borderSize)\n                    if not (modTable.blinkEnabled) then\n                        Plater.SetBorderColor (unitFrame, v.nameplateColor)\n                    else\n                        envTable.colorWithBlinking(unitFrame, 2, v)\n                    end\n                    unitFrame.healthBar.border:UpdateSizes()\n                end\n                \n                if (modTable.nameOption) then\n                    local nameString = unitFrame.healthBar.unitName\n                    if not (modTable.blinkEnabled) then\n                        DF:SetFontColor (nameString, v.nameplateColor)\n                    else\n                        envTable.colorWithBlinking(nameString, 3, v)\n                    end\n                end\n                \n                return\n            else\n                -- reset colour and scale\n                if not ((modTable.config.touchPainScale == 0) or (modTable.config.touchPlagScale == 0) or (modTable.config.painScale == 0) or (modTable.config.touchScale == 0) or (modTable.config.plagScale == 0)) then\n                    Plater.SetNameplateScale(unitFrame)\n                end\n                \n                if (modTable.rOption) then\n                    \n                    if (modTable.npOption) then\n                        local npcColor = Plater.GetNpcColor (unitFrame)\n                        \n                        if npcColor then\n                            Plater.SetNameplateColor (unitFrame, npcColor)\n                        elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\"  then\n                            Plater.FindAndSetNameplateColor (unitFrame)\n                        else\n                            Plater.RefreshNameplateColor (unitFrame)\n                        end\n                    end\n                    \n                    if modTable.bOption then\n                        unitFrame.healthBar.border:SetBorderSizes(modTable.defaultBorderSize, modTable.defaultBorderSize, modTable.defaultBorderSize, modTable.defaultBorderSize)\n                        Plater.SetBorderColor (unitFrame)\n                        unitFrame.healthBar.border:UpdateSizes()\n                    end\n                    \n                    if modTable.nameOption then\n                        local nameString = unitFrame.healthBar.unitName\n                        DF:SetFontColor (nameString, 1,1,1, 1)\n                    end\n                end\n                \n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors(unitFrame)\n        local colored = envTable.matchMultiple(unitFrame)\n    end\n    \n    -- Function to use appropriate colouring method\n    function envTable.universalColor(unitFrame, option, color)\n        if (option == 1) then    -- Nameplate\n            Plater.SetNameplateColor (unitFrame, color)\n        elseif (option == 2) then    -- Border\n            Plater.SetBorderColor (unitFrame, color)\n        else    -- Name\n            DF:SetFontColor (unitFrame, color) -- unitFrame here is nameString\n        end\n    end\n    \n    -- Function to make blinking effect every interval\n    function envTable.colorBlinkingInterval(unitFrame, option, aura, color1, color2)\n        if modTable.blinkOption[aura][envTable.aurasExpiration[aura]] then\n            envTable.universalColor(unitFrame, option, color1)    -- sets configurated colour\n        else\n            envTable.universalColor(unitFrame, option, color2)    -- sets default colour\n        end\n    end\n    \n    -- Check if debuff's time is lower than configured time\n    function envTable.debuffLow(aura)\n        if (envTable.aurasExpiration[aura] and modTable.blinkOption[aura].time) then\n            return (envTable.aurasExpiration[aura] <= modTable.blinkOption[aura].time)\n        end\n    end\n    \n    -- Function to make blinking\n    function envTable.colorWithBlinking(unitFrame, option, v)\n        if not (v.auras[2]) then\n            if (envTable.debuffLow(v.auras[1])) then    -- pain / touch / plag low\n                local tempColor = {1,1,1} \n                if (option ~= 3) then\n                    tempColor = Plater.GetNpcColor(unitFrame)\n                end\n                envTable.colorBlinkingInterval(unitFrame, option, v.auras[1], v.nameplateColor, tempColor)\n            else\n                envTable.universalColor(unitFrame, option, v.nameplateColor)    -- default option\n            end\n        else\n            if (envTable.debuffLow(v.auras[1]) and envTable.debuffLow(v.auras[2])) then    -- both debuffs are low\n                local lowestTime = v.auras[2]\n                if envTable.aurasExpiration[v.auras[1]] < envTable.aurasExpiration[v.auras[2]] then\n                    lowestTime = v.auras[1]\n                end\n                local tempColor = Plater.GetNpcColor(unitFrame)\n                if (option == 3) then\n                    tempColor = {1,1,1}\n                end\n                envTable.colorBlinkingInterval(unitFrame, option, lowestTime, v.nameplateColor, tempColor)\n            else\n                -- one debuff out of two is low\n                if (envTable.debuffLow(modTable.touch)) then    -- touch low with both debuffs up\n                    local tempColor\n                    if (v.auras[2] == modTable.plag) then\n                        tempColor = modTable.config.plagColor    -- sets plag colour\n                    else\n                        tempColor = modTable.config.painColor    -- sets pain colour\n                    end\n                    envTable.colorBlinkingInterval(unitFrame, option, modTable.touch, v.nameplateColor, tempColor)\n                end\n                \n                if (envTable.debuffLow(v.auras[2])) then    -- pain / plag low with both debuffs up\n                    envTable.colorBlinkingInterval(unitFrame, option, v.auras[2], v.nameplateColor, modTable.config.painColor)\n                else\n                    envTable.universalColor(unitFrame, option, v.nameplateColor)    -- default option\n                end\n            end\n        end\n    end\n    \nend",
},
["version"] = 2,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- @unitId  unitID for mob e.g nameplate1\n    -- @marker Raid Target ID\n    -- @nameColouring Enables text to be coloured by raid marker \n    -- @isBoss Boolean for enabling this on boss mobs\n    -- @debugMode Test mode for using dummy's\n    -- @debugEntry Which hook it came from\n    local mark = unitId and GetRaidTargetIndex(unitId)\n    envTable.namer(unitId, mark, true, false, false, \"Created\")\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    -- @unitId  unitID for mob e.g nameplate1\n    -- @marker Raid Target ID\n    -- @nameColouring Enables text to be coloured by raid marker \n    -- @isBoss Boolean for enabling this on boss mobs\n    -- @debugMode Test mode for using dummy's\n    -- @debugEntry Which hook it came from\n    -- Catch all \n    envTable.namer(unitId, GetRaidTargetIndex(unitId), false, false, false, \"Updated\")\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    -- @unitId  unitID for mob e.g nameplate1\n    -- @marker Raid Target ID\n    -- @nameColouring Enables text to be coloured by raid marker \n    -- @isBoss Boolean for enabling this on boss mobs\n    -- @debugMode Test mode for using dummy's\n    -- @debugEntry Which hook it came from\n    envTable.namer(unitId, GetRaidTargetIndex(unitId), false, false, false, \"Added\")\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    -- used for nameColouring\n    -- AARRGGBB\n    local markerToHex = {\n        [1] = \"FFEAEA0D\", -- Yellow 5 Point Star\n        [2] = \"FFEAB10D\", -- Orange Circle\n        [3] = \"FFCD00FF\", -- Purple Diamond\n        [4] = \"FF06D425\", -- Green Triangle\n        [5] = \"FFB3E3D8\", -- Light Blue Moon\n        [6] = \"FF0CD2EA\", -- Blue Square\n        [7] = \"FFD6210B\", -- Red Cross\n        [8] = \"FFFFFFFF\", -- White Skull\n    }\n    \n    -- Makes it so you take their first name e.g Jessie Howlis -> Jessie\n    -- Old way was some degen fucking shit this is easier\n    local nameBlacklist = {\n        [\"the\"] = true,\n        [\"of\"] = true,\n        [\"Tentacle\"] = true,\n        [\"Apprentice\"] = true,  \n        [\"Denizen\"] = true,\n        [\"Emissary\"] = true,\n        [\"Howlis\"] = true, \n        [\"Terror\"] = true, \n        [\"Totem\"] = true, \n        [\"Waycrest\"] = true,\n        --[\"Dummy\"] = true, -- Testing Purposes\n        [\"Aspect\"] = true\n    }\n    \n    \n    -- Override for names, Thanks to Nnoggie for all of the dungeon ones\n    local renameTable = {\n        \n    }\n    \n    \n    -- @unitId  unitID for mob e.g nameplate1\n    -- @marker Raid Target ID\n    -- @nameColouring Enables text to be coloured by raid marker \n    -- @isBoss Boolean for enabling this on boss mobs, Do i want this?? no idea\n    -- @debugMode Test mode for using dummy's\n    -- @debugEntry Which hook it came from\n    function envTable.namer(unitId, marker, nameColouring, isBoss, debugMode, debugEntry)\n        if unitId then\n            \n            local name = UnitName(unitId)\n            local a, b, c, d, e, f = strsplit(' ', name, 5)\n            local unitName\n            -- Testing mode\n            if debugMode then\n                print(\"DebugMode: \"..debugEntry..\" - Checking for dummy name\")\n                if b == \"Dummy\" or c == \"Dummy\" or d == \"Dummy\" or e == \"Dummy\" or f == \"Dummy\" then\n                    local lastName = b:find(\"Dummy\") and b or c:find(\"Dummy\") and c or d:find(\"Dummy\") and d\n                    print(\"DebugMode: \"..debugEntry..\" - Dummy Found!\")\n                    unitName = name ~=nil and lastName\n                end\n            end\n            \n            \n            if nameBlacklist[b] then\n                unitName = name ~=nil and (a or b or c or d or e or f) or nil\n            else\n                unitName = name ~=nil and (f or e or d or c or b or a) or ni\n            end\n            \n            \n            if unitName == nil then\n                unitName = name\n            end\n            \n            \n            if renameTable[name] then\n                unitName = renameTable[name]\n            end\n            \n            if unitId and marker and nameColouring then\n                unitFrame.healthBar.unitName:SetText(WrapTextInColorCode(unitName, markerToHex[marker]))\n            elseif unitId then\n                unitFrame.healthBar.unitName:SetText(unitName)\n            end\n            \n        end   \n    end\nend",
},
["Time"] = 1745292662,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "INTERFACE\\ICONS\\Ability_Monk_Ascension",
["Enabled"] = true,
["Revision"] = 956,
["semver"] = "",
["Author"] = "Rhk-Tarren Mill",
["Desc"] = "Aimed at making calls in dungeons simpler by using the last name of a mob or first name of certains ones i.e Jessie Howlis -> Jessie",
["Prio"] = 99,
["Name"] = "M+ Renamer",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.updateNameplate(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.updateNameplate(unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    local debuffs = {\n        164812,\n        34914,\n        1943\n    }\n    \n    function envTable.updateNameplate(unitFrame)\n        \n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        if (unitFrame.namePlateThreatIsTanking) then\n            Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            \n        else\n            local hasAura = true\n            \n            for _, spellId in ipairs (debuffs) do\n                \n                if Plater.NameplateHasAura (unitFrame, spellId) then\n                    \n                    hasAura = false\n                    break\n                end\n            end\n            \n            if hasAura then\n                \n                Plater.SetNameplateColor(unitFrame, \"gray\") \n            else\n                Plater.SetNameplateColor(unitFrame)\n            end\n            \n            \n            \n        end\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.updateNameplate(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.updateNameplate(unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    local debuffs = {\n        164812,\n        34914,\n        1943\n    }\n    \n    function envTable.updateNameplate(unitFrame)\n        \n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        if (unitFrame.namePlateThreatIsTanking) then\n            Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            \n        else\n            local hasAura = true\n            \n            for _, spellId in ipairs (debuffs) do\n                \n                if Plater.NameplateHasAura (unitFrame, spellId) then\n                    \n                    hasAura = false\n                    break\n                end\n            end\n            \n            if hasAura then\n                \n                Plater.SetNameplateColor(unitFrame, \"gray\") \n            else\n                Plater.SetNameplateColor(unitFrame)\n            end\n            \n            \n            \n        end\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1759089070,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["raid"] = true,
["party"] = true,
},
["class"] = {
["Enabled"] = true,
["PRIEST"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
["261"] = true,
["Enabled"] = true,
["258"] = true,
["102"] = true,
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 3586269,
["Enabled"] = true,
["Revision"] = 388,
["semver"] = "",
["Author"] = "Viash-Thrall",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Aura missing (Dots, SP/Balance)",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
["Player Logon"] = "function ()\n    local DF = _G [\"DetailsFramework\"]\n    Plater.CreateShowAuraIconAnimation =  function (iconFrame)\n        local iconShowInAnimation = DF:CreateAnimationHub (iconFrame)\n        iconFrame.ShowAnimation = iconShowInAnimation\n    end\nend",
},
["Hooks"] = {
["Player Logon"] = "function ()\n    local DF = _G [\"DetailsFramework\"]\n    Plater.CreateShowAuraIconAnimation =  function (iconFrame)\n        local iconShowInAnimation = DF:CreateAnimationHub (iconFrame)\n        iconFrame.ShowAnimation = iconShowInAnimation\n    end\nend",
},
["Time"] = 1759089084,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 519384,
["Enabled"] = true,
["Revision"] = 38,
["semver"] = "",
["Author"] = "Ariani-Antonidas",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Disable Aura Show Animation",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
["lowScale"] = 1.149999976158142,
},
["LastHookEdited"] = "Initialization",
["UID"] = "0x6366dbeb1fda6285",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            local scale = modTable.config.scale\n            local midScale = modTable.config.midScale\n            local lowScale = modTable.config.lowScale\n            local color = modTable.config.color\n            local midColor = modTable.config.midColor\n            local lowColor = modTable.config.lowColor\n            if prio == 1 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, midScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, midColor)\n                end\n            elseif prio == 2 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, lowScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, lowColor)\n                end\n            end    \n        end\n    end\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local npcID = select(6, strsplit(\"-\", UnitGUID(unitId)))\n    if npcID then\n        local prio = modTable[\"npcIDs\"][npcID]\n        if prio then\n            local scale = modTable.config.scale\n            local midScale = modTable.config.midScale\n            local lowScale = modTable.config.lowScale\n            local color = modTable.config.color\n            local midColor = modTable.config.midColor\n            local lowColor = modTable.config.lowColor\n            if prio == 1 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, midScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, midColor)\n                end\n            elseif prio == 2 then\n                if scale then \n                    Plater.SetNameplateScale(unitFrame, lowScale)\n                end\n                if color then\n                    Plater.SetNameplateColor (unitFrame, lowColor)\n                end\n            end    \n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    \n    -- 1 = Smaller , 2 = Bigger\n    \n    modTable[\"npcIDs\"] = {\n        \n        --TEST\n        --[\"160325\"] = 1, --Testing Dummy        \n        -- [198594] = 2, -- Valdrakken Dummy\n        \n        --                                                          DUNGEONS\n        \n        \n        -- Operation: Floodgate\n        [\"231176\"] = 2, --Scaffolding\n        \n        \n        -- Cinderbrew Meadery\n        [\"217126\"] = 1, --Spinemaw Larva\n        [\"210270\"] = 1, --Spinemaw Larva\n        [\"220368\"] = 2, --Spinemaw Larva\n        \n        \n        \n        --Darkflame Cleft\n        [\"210148\"] = 1, --Spinemaw Larva\n        [\"210810\"] = 1, --Spinemaw Larva\n        \n        \n        \n        \n        -- Mists of tirna scithe\n        [\"167117\"] = 1, --Spinemaw Larva\n        \n        \n        --ara-kra\n        [\"216336\"] = 1, --Spinemaw Larva\n        [\"216341\"] = 1, --Spinemaw Larva\n        \n        --Necrotic Wake\n        [\"166264\"] = 1, --Spare Parts\n        [\"171500\"] = 1, --Shuffling Corpse\n        [\"165138\"] = 1, --Blight bag\n        \n        \n        -- Temple of the Jade Serpent\n        [\"58319\"] = 1, --Lesser Sha\n        [\"62358\"] = 1, --Corrupt Droplet\n        \n        \n        -- Atal'Dazar\n        --[\"128435\"] = 1, --Toxic Saurid\n        \n        -- Weycrest Manor\n        [\"135052\"] = 1, --Blight Toad\n        --[\"131669\"] = 1, --Jagged Hound\n        \n        -- Black Rook Hold\n        [\"98677\"] = 1, --Rook Spiderling\n        [\"102781\"] = 1, --Fel Bat Pup\n        \n        -- Darkheart Thicket\n        --[\"100529\"] = 1, --Hatespawn Slime\n        [\"101074\"] = 1, --Hatespawn Whelpling\n        \n        -- Brackenhide Hollow\n        [\"191243\"] = 1, --Wild Lasher\n        [\"189363\"] = 1, --Infected Lasher\n        [\"208994\"] = 1, --Infected Lasher\n        [\"189299\"] = 1, --blob\n        \n        -- Uldaman\n        [\"184134\"] = 1, --Scavenging Leaper\n        \n        -- Neltharius\n        [\"189247\"] = 1, --Tamed Phoenix\n        \n        -- Naltharion's Lair\n        [\"96247\"] = 1, --Vileshard Crawler\n        \n        -- Underrot\n        [\"131402\"] = 1, --Underrot Tick\n        \n        \n        --The Nokhud Offensive\n        [\"195579\"] = 1, --Primal Gust\n        \n        \n        --Court of Stars\n        [\"105703\"] = 1, --Mana Wyrm\n        --[\"104295\"] = 1, --Blazing Imp\n        \n        \n        --Shadowmoon Burial Grounds\n        [\"77006\"] = 1, --Corpse Skitterling\n        --[\"75451\"] = 1, --Defiled Spirit\n        \n        \n        --Algeth'ar Academy\n        [\"196642\"] = 1, --Hungry Lasher\n        [\"197398\"] = 1, --Hungry Lasher\n        --[\"196694\"] = 1, --Arcane Forager\n        --[\"192329\"] = 1, --Territorial Eagle\n        \n        \n        --The Azure Vault\n        [\"191313\"] = 1, -- Volatile Sapling\n        [\"187242\"] = 1, --Tarasek Delver\n        \n        \n        --Halls of Valor\n        \n        \n        --Ruby Life Pools\n        [\"190205\"] = 1, --Scorchling\n        [\"197509\"] = 1, --Primal Thundercloud\n        [\"187894\"] = 1, --Infused Whelp\n        --[\"188011\"] = 1, -- terrasentry test\n        \n        --Karazhan\n        \n        --Tazavesh\n        [\"178163\"] = 1, --Murkbrine Shorerunner\n        \n        --Theater of Pain\n        [\"163089\"] = 1, --Disgusting Refuse\n        \n        \n        --Sanguine Depths\n        [\"171455\"] = 1, --Stonewall Gargon\n        [\"168457\"] = 1, --Stonewall Gargon\n        [\"166589\"] = 1, --Animate Weapon\n        \n        \n        --Plaguefall\n        [\"168969\"] = 1, --Gushing Slime\n        \n        \n        --De Other Side\n        [\"168986\"] = 1, --Skeletal Raptor\n        \n        \n        --Halls of Atonement\n        -- [\"167892\"] = 1, --Tormented Soul\n        \n        \n        --                                                            RAIDS\n        \n        --Vault\n        --[\"194991\"] = 1, --Oathsworn Vanguard\n        --[\"191714\"] = 2, --Seeking Stormling\n        \n        --Sepulcher of the First Ones\n        [\"183669\"] = 1, --Fiendish Soul\n        \n        \n        --Castle Nathria\n        [\"169925\"] = 1, --Begrudging Waiter\n        \n        \n        --Misc\n        [\"144300\"] = 1, -- \n        [\"189707\"] = 1, --Chaotic Motes\n        -- Fodder to the Flame demons\n        [\"169428\"] = 1,\n        [\"169430\"] = 1,\n        [\"169429\"] = 1,\n        [\"169426\"] = 1,\n        [\"169421\"] = 1,\n        [\"169425\"] = 1,\n        [\"168932\"] = 1,    \n    }\nend",
},
["Time"] = 1752320473,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 1041231,
["Enabled"] = true,
["Revision"] = 1414,
["semver"] = "",
["Author"] = "Causese-Valdrakken",
["Desc"] = "Allows you to scale a creatures nameplate based on it's importance in the dungeon.",
["Prio"] = 99,
["Name"] = "Priority based scaling",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 4,
["Name"] = "Enable Scaling",
["Value"] = true,
["Key"] = "scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Allows nameplates to scale based on priority.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set scaling value for mid priority.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.75,
["Key"] = "midScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Smaller",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Set scaling value for low priority.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Key"] = "lowScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Bigger",
},
{
["Type"] = 4,
["Name"] = "Enable Coloring",
["Value"] = false,
["Key"] = "color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Allows nameplates to be colored based on priority.",
},
{
["Type"] = 1,
["Name"] = "Mid prio",
["Value"] = {
1,
0.92941182851791,
0,
1,
},
["Key"] = "midColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Set scaling Set color for mid priority.",
},
{
["Type"] = 1,
["Name"] = "Low prio",
["Value"] = {
0.49803924560547,
0.49803924560547,
0.49803924560547,
1,
},
["Key"] = "lowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Set scaling Set color for low priority.",
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local buffSpecialGlow = true\n    \n    \n    -- functions --\n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        \n        local auraContainer = auraContainers [containerID]\n        \n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsShown() and auraIcon.RemainingTime > 0 and (envTable.glowSpells[auraIcon.spellId] and envTable.glowSpells[auraIcon.spellId] > auraIcon.RemainingTime)) then\n                if not auraIcon.pandemicGlowStarted then\n                    Plater.StartButtonGlow(auraIcon, nil, envTable.options)\n                    auraIcon.pandemicGlowStarted = true\n                end\n            else\n                if auraIcon.pandemicGlowStarted then\n                    Plater.StopButtonGlow(auraIcon, envTable.options.key)\n                    auraIcon.pandemicGlowStarted = false\n                end\n            end                \n        end\n        \n    end\n    \n    if buffSpecialGlow then\n        for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n            if auraIcon:IsShown() then\n                local remainingTime = (auraIcon.startTime + auraIcon.duration - GetTime())\n                if (auraIcon:IsShown() and remainingTime > 0 and (envTable.glowSpells[auraIcon.spellId] and envTable.glowSpells[auraIcon.spellId] > remainingTime)) then\n                    if not auraIcon.pandemicGlowStarted then\n                        Plater.StartButtonGlow(auraIcon, nil, envTable.options)\n                        auraIcon.pandemicGlowStarted = true\n                    end\n                else\n                    if auraIcon.pandemicGlowStarted then\n                        Plater.StopButtonGlow(auraIcon, envTable.options.key)\n                        auraIcon.pandemicGlowStarted = false\n                    end                    \n                end  \n            end\n        end\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- settings:\n    \n    -- spellIDs:\n    envTable.glowSpells = {\n        [164815] = 5.4, -- sunfire\n        [164812] = 6.6, -- moonfire\n        [202347] = 6.3, -- stellar flare\n        [980] = 5.4, -- agony\n        [146739] = 4.2, -- corruption\n        [316099] = 6.3, -- ua1\n        [342938] = 6.3, -- ua2\n        [63106] = 4.5, -- siphon life\n        [157736] = 6.3, -- immolate\n        [34914] = 6.3, -- vampiric touch\n        [589] = 6.3, -- sw: pain\n        [204213] = 6.3, -- purge the wicked\n        [188389] = 5.4, -- flame shock\n        [191587] = 8.1, -- virulent plague\n        [703] = 5.4, -- garrote\n        [1943] = 7.2, -- rupture\n        [121411] = 4.2, -- crimson tempest\n        [346278] = 4.5, -- burning wound\n        [1079] = 5.4, -- rip\n        [155722] = 5.4, -- rake\n        [106830] = 5.4, -- thrash\n        [772] = 4.5, --rend\n    }\n    \n    \n    -- for the LibCustomGlow implementation:\n    envTable.options = {\n        color = \"#e1e1e1\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        frequency = 0.4, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        \n    }\n    \nend",
},
["Time"] = 1745292665,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DEATHKNIGHT"] = true,
["WARLOCK"] = true,
["SHAMAN"] = true,
["ROGUE"] = true,
["DRUID"] = true,
["DEMONHUNTER"] = true,
["PRIEST"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 134400,
["Enabled"] = true,
["Revision"] = 456,
["semver"] = "",
["Author"] = "Viashi-Antonidas",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Pandemic Glow",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["OptionsValues"] = {
["SpellIconOnLeft"] = true,
["ShieldIconOnLeft"] = true,
["TargetBorderSize"] = 1,
["SpellIconXOffset"] = -0.5,
["ReplaceDefaultBorder"] = false,
["SpellIconBorder"] = true,
["SpellIconBorderSize"] = 0.5,
["ShowShieldIcon"] = true,
["SpellIconInCastBar"] = false,
["ShowSpellIcon"] = true,
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.casting = false\n    modTable.UpdateBorder(unitFrame, envTable, modTable)\nend",
["Destructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar.border then unitFrame.healthBar.border:Hide() end\n    if unitFrame.healthBar.targetBorder then unitFrame.healthBar.targetBorder:Hide() end\n    if unitFrame.castBar.border then unitFrame.castBar.border:Hide() end\n    if unitFrame.castBar.Icon then unitFrame.castBar.Icon:Hide() end\n    if unitFrame.castBar.IconBorder then unitFrame.castBar.IconBorder:Hide() end\n    if unitFrame.castBar.BorderShield then unitFrame.castBar.BorderShield:Hide() end\nend",
["Initialization"] = "function (modTable)\n    \n    -- Handle the border anchors that can switch\n    local left  = \"left\"\n    local right = \"right\"\n    local offsetDirection = 1;\n    \n    if modTable.config.SpellIconOnLeft then\n        -- If the spell icon is on the left, reverse the anchors\n        left, right = right, left\n        offsetDirection = -1;\n    end\n    \n    modTable.topleft = string.format(\"top%s\", left)\n    modTable.topright = string.format(\"top%s\", right)\n    modTable.bottomleft = string.format(\"bottom%s\", left)\n    modTable.bottomright = string.format(\"bottom%s\", right)\n    \n    function modTable.UpdateIconPosition(unitFrame, envTable, modTable)\n        local castBar = unitFrame.castBar\n        local icon = unitFrame.castBar.Icon\n        local shield = unitFrame.castBar.BorderShield\n        \n        icon:Hide()\n        castBar.IconBorder:Hide()\n        \n        if modTable.config.ShowSpellIcon then\n            icon:ClearAllPoints()\n            \n            if modTable.config.SpellIconInCastBar then\n                local iconSize = castBar:GetHeight()\n                \n                local iconOffset = 0\n                if modTable.config.SpellIconBorder then\n                    iconOffset = modTable.config.SpellIconBorderSize\n                end\n                \n                local castBarWidth   = unitFrame.healthBar:GetWidth()\n                local castBarYOffset = 0\n                if modTable.config.CastBarBorder then\n                    castBarWidth   = castBarWidth-2*(modTable.config.CastBarBorderSize)\n                    castBarYOffset = -modTable.config.CastBarBorderSize\n                end\n                \n                -- Anchor the Icon to right below the healthbar\n                -- icon:SetPoint(modTable.topleft, unitFrame.healthBar, modTable.bottomleft, 0, -iconOffset)\n                icon:SetPoint(modTable.topright, unitFrame.healthBar, modTable.bottomright, 0, -iconOffset)\n                icon:SetSize(iconSize,iconSize)\n                \n                -- Anchor the cast bar to be next to the icon\n                castBar:ClearAllPoints()\n                castBar:SetPoint(modTable.topright,    icon,                modTable.topleft,    -iconOffset*offsetDirection, 0)\n                castBar:SetPoint(modTable.bottomright, icon,                modTable.bottomleft, -iconOffset*offsetDirection, 0)\n                castBar:SetPoint(modTable.topleft,     unitFrame.healthBar, modTable.bottomleft,  0,                          castBarYOffset)\n            else\n                icon:SetPoint(modTable.topleft,    unitFrame.healthBar, modTable.topright,    modTable.config.SpellIconXOffset, envTable.IconSizeOffset)\n                icon:SetPoint(modTable.bottomleft, unitFrame.castBar,   modTable.bottomright, modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            end\n            \n            icon:Show()\n            \n            if modTable.config.SpellIconBorder then\n                castBar.IconBorder:SetVertexColor(\n                    DetailsFramework:ParseColors(modTable.config.SpellIconBorderColor)\n                )\n                castBar.IconBorder:SetBorderSizes(\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize\n                )\n                castBar.IconBorder:UpdateSizes()\n                castBar.IconBorder:Show()\n            end\n        end\n        \n        if modTable.config.CastBarBorder then\n            castBar.border:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.CastBarBorderColor)\n            )\n            castBar.border:SetBorderSizes(\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize\n            )\n            castBar.border:UpdateSizes()\n            castBar.border:Show()\n        else\n            castBar.border:Hide()\n        end\n        \n        if modTable.config.ShowShieldIcon and not castBar.canInterrupt then\n            shield:Show()\n            shield:SetAlpha(1)\n            shield:SetTexCoord(0, 1, 0, 1)\n            shield:SetVertexColor(1, 1, 1, 1)\n            shield:SetTexture(envTable.ShieldTexture)\n            shield:SetDesaturated(envTable.ShieldDesaturated)\n            \n            if not envTable.ShieldDesaturated then\n                shield:SetVertexColor(DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            \n            shield:SetSize(modTable.config.ShieldIconWidth, modTable.config.ShieldIconHeight)\n            shield:ClearAllPoints()\n            shield:SetPoint(\n                \"center\",\n                castBar,\n                modTable.config.ShieldIconOnLeft and \"left\" or \"right\",\n                modTable.config.ShieldIconXOffset,\n                modTable.config.ShieldIconYOffset\n            )\n        else\n            shield:Hide()\n        end\n    end\n    \n    function modTable.UpdateBorder(unitFrame, envTable, modTable)\n        local healthBar = unitFrame.healthBar\n        local castBar = unitFrame.castBar\n        local targetBorder = unitFrame.healthBar.targetBorder\n        local defaultBorder = unitFrame.healthBar.border\n        \n        targetBorder:Hide()\n        defaultBorder:Hide()\n        \n        if modTable.config.ReplaceDefaultBorder then\n            targetBorder = unitFrame.healthBar.border\n            targetBorder:SetFrameStrata(\"HIGH\")\n            targetBorder:Show()\n        else\n            unitFrame.healthBar.border:Show()\n            if unitFrame.IsTarget then\n                targetBorder:Show()\n            end\n        end\n        \n        targetBorder:ClearAllPoints()\n        \n        -- if casting==true or (castBar and (castBar.casting or castBar.channeling) and not castBar.finished and not castBar.failed) then\n        if envTable.casting then\n            if modTable.config.ShowSpellIcon and modTable.config.ExpandTargetBorder and not modTable.config.SpellIconInCastBar then\n                -- Anchor the top of the border to the top of the cast icon\n                targetBorder:SetPoint(modTable.topright, castBar.Icon, modTable.topright, 0, 0)\n            else\n                -- Anchor the top of the border to the top of the healthbar\n                targetBorder:SetPoint(modTable.topright, healthBar, modTable.topright, 0, 0)\n            end\n            -- targetBorder:SetPoint(modTable.topleft, healthBar, modTable.topleft, 0, 0)\n            \n            if modTable.config.ExpandTargetBorder then\n                targetBorder:SetPoint(modTable.bottomleft, castBar, modTable.bottomleft, 0, 0)\n                if modTable.config.SpellIconInCastBar then\n                    targetBorder:SetPoint(modTable.bottomright, castBar.Icon, modTable.bottomright, 0, 0)\n                end\n            else\n                targetBorder:SetPoint(modTable.bottomleft, healthBar, modTable.bottomleft, 0, 0)\n            end\n        else\n            targetBorder:SetPoint(modTable.topright,   healthBar, modTable.topright,   0, 0)\n            targetBorder:SetPoint(modTable.bottomleft, healthBar, modTable.bottomleft, 0, 0)\n        end\n        \n        if unitFrame.IsTarget then\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.TargetBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize\n            )\n            targetBorder:UpdateSizes()\n        else\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(envTable.DefaultBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize\n            )\n            targetBorder:UpdateSizes()\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.casting = false\n    modTable.UpdateBorder(unitFrame, envTable, modTable)\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.casting = true\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    modTable.UpdateBorder (unitFrame, envTable, modTable)\nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable)\nend",
["Mod Option Changed"] = "function (modTable)\n    local left  = \"left\"\n    local right = \"right\"\n    \n    if modTable.config.SpellIconOnLeft then\n        left, right = right, left\n    end\n    \n    modTable.topleft     = string.format(\"top%s\", left)\n    modTable.topright    = string.format(\"top%s\", right)\n    modTable.bottomleft  = string.format(\"bottom%s\", left)\n    modTable.bottomright = string.format(\"bottom%s\", right)\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = -1\n    modTable.UpdateIconPosition(unitFrame, envTable, modTable)\n    \n    local casting = unitFrame.castBar and (unitFrame.castBar.casting or unitFrame.castBar.channeling)\n    \n    if not envTable.casting or not casting or unitFrame.IsTarget then\n        -- Update on start of cast, end of cast, and always when a target\n        envTable.casting = casting\n        modTable.UpdateBorder(unitFrame, envTable, modTable)\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- Any settings changed here will require you to disable this plater mod,\n    -- then re-enable it by checking the box in the list on the left hand side of the window\n    \n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 0\n    \n    -- Settings for the shield for non interruptible casts\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    \n    envTable.DefaultBorderSize  = Plater.db.profile.border_thickness\n    envTable.DefaultBorderColor = Plater.db.profile.border_color\n    \n    -- Can't rely on the \"Cast start\" hook so gotta manage this ourselves\n    envTable.casting = false\n    \n    -- Create a new health bar target border\n    if not unitFrame.healthBar.targetBorder then\n        unitFrame.healthBar.targetBorder = CreateFrame(\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.healthBar.targetBorder:Hide()\n    end\n    \n    -- Create a frame for the spell icon border\n    if not unitFrame.castBar.IconOverlayFrame then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.IconBorder:SetIgnoreParentScale(false)\n    end\n    \n    -- Create a frame for the cast bar border\n    if not unitFrame.castBar.border then\n        unitFrame.castBar.border = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.border:SetIgnoreParentScale(false)\n    end\n    \n    -- Hook into when the cast bar hides so we can update the border with casting set to false\n    -- Note: This hook needs to be the last thing in the constructor as it may immediately call\n    -- UpdateBorder and we need to make sure all of the frames are created first\n    if not unitFrame.castBar.borderChangeHooked then\n        -- hooksecurefunc(\n        --     unitFrame.castBar,\n        --     \"Hide\",\n        --     function()\n        --         envTable.casting = false\n        --         modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n        --         modTable.UpdateBorder(unitFrame, envTable, modTable)\n        --     end\n        -- )\n        -- hooksecurefunc(\n        --     unitFrame.castBar,\n        --     \"Show\",\n        --     function()\n        --         envTable.casting = true\n        --         modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n        --         modTable.UpdateBorder(unitFrame, envTable, modTable)\n        --     end\n        -- )\n        unitFrame.castBar.borderChangeHooked = true\n    end\nend",
},
["Time"] = 1745292657,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/_xVV5NVNa/15",
["Icon"] = 236188,
["Enabled"] = true,
["Revision"] = 1662,
["semver"] = "1.1.0",
["Author"] = "Vahra-Tichondrius",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate and extend the border around icon and cast bar.",
["Prio"] = 99,
["Name"] = "Dynamic Border and Cast Icon",
["PlaterCore"] = 1,
["version"] = 15,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Border Settings",
["Name"] = "Border Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "TargetBorderColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Target Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of the targeted nameplate",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1.5,
["Key"] = "TargetBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Target Border Size",
},
{
["Type"] = 4,
["Key"] = "ExpandTargetBorder",
["Value"] = true,
["Name"] = "Expand Target Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Expands the target border around the cast icon and cast bar",
},
{
["Type"] = 4,
["Key"] = "ReplaceDefaultBorder",
["Value"] = false,
["Name"] = "Replace Default Border (/reload)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Replace the default border instead of creating a new one. You may have to /reload when changing this option",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Cast Bar Settings",
["Name"] = "Cast Bar Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "hoverInfo",
["Value"] = false,
["Name"] = "< Hover over this box for more info",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Note, to get this to look right you may have to update the Y offset of the cast bar under Plater's \"Enemy Npc\" settings",
},
{
["Type"] = 4,
["Key"] = "CastBarBorder",
["Value"] = true,
["Name"] = "Cast Bar Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show a border around the enemy cast bar",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the enemy cast bar",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Key"] = "CastBarBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Border Size",
},
{
["Type"] = 1,
["Key"] = "CastBarBorderColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Cast Bar Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of enemy cast bar",
},
{
["Type"] = 6,
["Key"] = "option27",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Shield Icon Settings",
["Name"] = "Shield Icon Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "ShowShieldIcon",
["Value"] = false,
["Name"] = "Show Shield Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show a shield icon next to the cast bar for uninterruptable spells",
},
{
["Type"] = 4,
["Key"] = "ShieldIconOnLeft",
["Value"] = true,
["Name"] = "Shield Icon on Left",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the shield icon on the left side of the cast bar. If unchecked it will be on the right.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X offset of the shield icon",
["Min"] = -10,
["Fraction"] = true,
["Value"] = -4.5,
["Key"] = "ShieldIconXOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shield Icon X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The Y offset of the shield icon",
["Min"] = -10,
["Fraction"] = true,
["Value"] = 0,
["Key"] = "ShieldIconYOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shield Icon Y Offset",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The width of the shield icon",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "ShieldIconWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shield Icon Width",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The height of the shield icon",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "ShieldIconHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shield Icon Height",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Cast Icon Settings",
["Name"] = "Cast Icon Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "ShowSpellIcon",
["Value"] = true,
["Name"] = "Show Spell Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show the spell icon of the targets cast",
},
{
["Type"] = 4,
["Key"] = "SpellIconInCastBar",
["Value"] = true,
["Name"] = "Show Cast Icon Next To Cast Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Shows the cast spell icon next to the cast bar. This automatically will set the icon to the size of the cast bar in the \"Enemy NPC\" tab in Plater.",
},
{
["Type"] = 4,
["Key"] = "SpellIconOnLeft",
["Value"] = true,
["Name"] = "Spell Icon On Left",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Move the spell icon to the left side of the nameplate. If unchecked it will show on the right.",
},
{
["Type"] = 4,
["Key"] = "SpellIconBorder",
["Value"] = true,
["Name"] = "Spell Icon Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should Show a border around the spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Key"] = "SpellIconBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Spell Icon Border Size",
},
{
["Type"] = 1,
["Key"] = "SpellIconBorderColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Spell Icon Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of target's spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X Offset of the Spell Icon",
["Min"] = -10,
["Fraction"] = true,
["Value"] = 0.5,
["Key"] = "SpellIconXOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Spell Icon X Offset",
},
},
},
},
["auras_per_row_auto"] = false,
["cast_statusbar_fadeout_time"] = 0.009999999776482582,
["aura_stack_size"] = 7,
["extra_icon_caster_outline"] = "OUTLINE",
["auras_per_row_amount2"] = 2,
["aura_width"] = 15,
["aura_height2"] = 14,
["bossmod_support_enabled"] = false,
["health_statusbar_bgcolor"] = {
0.03137254901960784,
0.03137254901960784,
0.03137254901960784,
0.7000000178813934,
},
["aura_show_crowdcontrol"] = true,
["blizzard_nameplate_large_font_size"] = 10,
["pet_width_scale"] = 0.9999999403953552,
["aura_border_colors"] = {
["steal_or_purge"] = {
0.9019607843137255,
0.9019607843137255,
0.9019607843137255,
},
["offensive"] = {
nil,
0,
0,
},
["crowdcontrol"] = {
0,
0,
0,
},
["defensive"] = {
0.8509803921568627,
0.4509803921568628,
0.1019607843137255,
},
["is_buff"] = {
nil,
0,
0,
},
},
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["script_auto_imported"] = {
["Aura - Is Cast Bar [P]"] = 1,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Shining Green [P]"] = 3,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Unit - Show Energy"] = 11,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Cast - Castbar is Timer [P]"] = 2,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Cast - Circular Swipe"] = 4,
["Cast - Special Ability [P]"] = 3,
["Cast - Tank Interrupt"] = 12,
["Cast - Important by Color [P]"] = 2,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Add - Explode on Die [P]"] = 1,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Cast - AoE Hit All [P]"] = 3,
["Fixate by Unit Buff [P]"] = 2,
["Countdown"] = 12,
["Cast - Shield Interrupt"] = 2,
["Cast - Alert + Timer [P]"] = 4,
["Relics 9.2 M Dungeons"] = 2,
["Cast - On Going Cast [P]"] = 2,
["Aura is Shield [P]"] = 5,
["Add - Warning [P]"] = 5,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Heroic Leap [P]"] = 3,
["Cast - Heal Cut [P]"] = 3,
["Unit - Important"] = 11,
["Spiteful Affix"] = 3,
["Auto Set Skull"] = 11,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Debuff [P]"] = 2,
["Cast - Voidzone [P]"] = 2,
["Cast - Stop Casting"] = 4,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Fixate"] = 11,
["Cast - Quick Flash"] = 2,
["Cast - Very Important"] = 15,
["Cast - Glowing [P]"] = 10,
["Fixate On You"] = 12,
},
["target_highlight_color"] = {
0.9294118285179138,
0.1882353127002716,
0.2431372702121735,
},
["show_healthbars_on_softinteract"] = false,
["extra_icon_anchor"] = {
["y"] = -3.300003051757813,
["x"] = 7.5,
["side"] = 2,
},
["extra_icon_wide_icon"] = false,
["use_playerclass_color"] = false,
["extra_icon_stack_outline"] = "OUTLINE",
["range_check_alpha"] = 0.699999988079071,
["click_space"] = {
125,
25,
},
["extra_icon_auras"] = {
81261,
33786,
5211,
99,
203123,
89766,
6789,
118699,
30283,
5484,
710,
6770,
2094,
2637,
115078,
217832,
51514,
20066,
9484,
853,
105421,
31935,
10326,
24394,
3355,
213691,
1513,
5246,
132169,
199085,
132168,
211881,
179057,
204490,
207685,
221562,
207167,
287254,
108194,
91800,
31661,
118,
82691,
119381,
198909,
408,
1776,
1330,
118905,
197214,
64044,
15487,
8122,
226943,
200200,
"Haymaker",
"Quaking Palm",
"War Stomp",
360806,
},
["aura_show_aura_by_other_npcs"] = false,
["range_check_in_range_or_target_alpha_friendlies"] = 0.8999999761581421,
["aura_frame2_anchor"] = {
["y"] = 1.599990844726563,
["side"] = 7,
},
["cast_statusbar_texture"] = "Soda",
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark8",
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["show_softinteract_icons"] = false,
["debuff_show_cc"] = false,
["extra_icon_height"] = 20,
["aura_x_offset"] = 0,
["first_run3"] = true,
["transparency_behavior"] = 4,
["spell_animations"] = false,
["ui_parent_scale_tune"] = 1.559999942779541,
["debuff_show_cc_border"] = {
0,
0,
0,
},
["aura_consolidate"] = true,
["health_statusbar_bgtexture"] = "Soda",
["indicator_raidmark_anchor"] = {
["side"] = 9,
["x"] = 0,
},
["extra_icon_width"] = 20,
["aura_show_enrage"] = true,
["health_statusbar_texture"] = "Soda",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Execute Range"] = 1,
["Cast Bar Icon Config"] = 2,
["Attacking Specific Unit"] = 2,
["Combo Points"] = 6,
["Extra Border"] = 2,
["Target Color"] = 3,
["Aura Reorder"] = 3,
["Hide Neutral Units"] = 1,
},
["cast_statusbar_color"] = {
nil,
0.7019608020782471,
nil,
1,
},
["update_throttle"] = 0.5,
["minor_width_scale"] = 0.9999999403953552,
["cast_statusbar_bgcolor"] = {
0.03137254901960784,
0.03137254901960784,
0.03137254901960784,
0.4670491218566895,
},
["cast_statusbar_interrupt_anim"] = false,
["cast_statusbar_use_fade_effects"] = false,
["castbar_target_text_size"] = 13,
["border_thickness"] = 0.4999999701976776,
["aura_frame1_anchor"] = {
["y"] = 1.399993896484375,
["side"] = 1,
},
["auras_per_row_amount"] = 6,
["tocversion"] = 110200,
["castbar_icon_show"] = false,
["aura_show_debuff_by_the_unit"] = false,
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
0.9764705882352941,
0.5411764705882353,
0.4745098039215686,
},
["anothertank"] = {
0.7294117647058823,
0.9176470588235294,
},
["aggro"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["noaggro"] = {
0.5058823823928833,
0.4235294461250305,
0.9137255549430847,
},
["nocombat"] = {
0.6352941176470588,
0.2196078431372549,
0.2196078431372549,
},
["pulling"] = {
0.3098039329051971,
0.4509804248809815,
0.6313725709915161,
},
},
},
["castbar_icon_size"] = "same as castbar plus healthbar",
["npc_colors"] = {
[40788] = {
true,
false,
"ROGUE",
},
[190403] = {
true,
false,
"snow",
},
[195265] = {
true,
false,
"snow",
},
[99200] = {
true,
false,
"ROGUE",
},
[166608] = {
true,
false,
"ROGUE",
},
[190405] = {
true,
false,
"snow",
},
[184520] = {
true,
false,
"snow",
},
[164562] = {
true,
false,
"paleturquoise",
},
[230322] = {
true,
false,
"ROGUE",
},
[210108] = {
true,
false,
"ROGUE",
},
[220599] = {
true,
false,
"yellowgreen",
},
[213179] = {
true,
false,
"ROGUE",
},
[210109] = {
true,
false,
"snow",
},
[212412] = {
true,
false,
"deepskyblue",
},
[196548] = {
true,
false,
"yellowgreen",
},
[131812] = {
true,
false,
"deepskyblue",
},
[165076] = {
true,
false,
"deepskyblue",
},
[200387] = {
true,
false,
"snow",
},
[180429] = {
true,
false,
"snow",
},
[217531] = {
true,
false,
"snow",
},
[98691] = {
true,
false,
"peru",
},
[180431] = {
true,
false,
"deepskyblue",
},
[217533] = {
true,
false,
"snow",
},
[174802] = {
true,
false,
"orchid",
},
[211904] = {
true,
false,
"yellowgreen",
},
[230583] = {
true,
false,
"ROGUE",
},
[234933] = {
true,
false,
"yellowgreen",
},
[209090] = {
true,
false,
"ROGUE",
},
[136934] = {
true,
false,
"peru",
},
[180433] = {
true,
false,
"yellowgreen",
},
[131817] = {
true,
false,
"ROGUE",
},
[102019] = {
true,
false,
"yellowgreen",
},
[189901] = {
true,
false,
"ROGUE",
},
[131818] = {
true,
false,
"orchid",
},
[213954] = {
true,
false,
"snow",
},
[98949] = {
true,
false,
"ROGUE",
},
[200137] = {
true,
false,
"deepskyblue",
},
[178388] = {
true,
false,
"peru",
},
[152033] = {
true,
false,
"yellowgreen",
},
[131819] = {
true,
false,
"peru",
},
[228540] = {
true,
false,
"deepskyblue",
},
[196044] = {
true,
false,
"lightcyan",
},
[184018] = {
true,
false,
"ROGUE",
},
[102404] = {
true,
false,
"snow",
},
[223423] = {
true,
false,
"snow",
},
[102788] = {
true,
false,
"snow",
},
[129527] = {
true,
false,
"peachpuff",
},
[59726] = {
true,
false,
"palegoldenrod",
},
[196045] = {
true,
false,
"deepskyblue",
},
[101637] = {
true,
false,
"snow",
},
[175576] = {
true,
false,
"yellowgreen",
},
[184020] = {
true,
false,
"snow",
},
[126969] = {
true,
false,
"ROGUE",
},
[100486] = {
true,
false,
"snow",
},
[44566] = {
true,
false,
"ROGUE",
},
[178392] = {
true,
false,
"snow",
},
[133870] = {
true,
false,
"deepskyblue",
},
[184022] = {
true,
false,
"deepskyblue",
},
[98696] = {
true,
false,
"ROGUE",
},
[129529] = {
true,
false,
"orchid",
},
[113537] = {
true,
false,
"snow",
},
[131825] = {
true,
false,
"palegoldenrod",
},
[244922] = {
true,
false,
"peru",
},
[233152] = {
true,
false,
"snow",
},
[178139] = {
true,
false,
"peru",
},
[133361] = {
true,
false,
"yellowgreen",
},
[164578] = {
true,
false,
"yellowgreen",
},
[150250] = {
true,
false,
"snow",
},
[220616] = {
true,
false,
"peru",
},
[178141] = {
true,
false,
"orchid",
},
[168418] = {
true,
false,
"deepskyblue",
},
[150251] = {
true,
false,
"deepskyblue",
},
[178142] = {
true,
false,
"deepskyblue",
},
[131318] = {
true,
false,
"ROGUE",
},
[150253] = {
true,
false,
"snow",
},
[82579] = {
true,
false,
"deepskyblue",
},
[129788] = {
true,
false,
"deepskyblue",
},
[190426] = {
true,
false,
"yellowgreen",
},
[237763] = {
true,
false,
"ROGUE",
},
[150254] = {
true,
false,
"orchid",
},
[222923] = {
true,
false,
"peru",
},
[168934] = {
true,
false,
"snow",
},
[217039] = {
true,
false,
"snow",
},
[45912] = {
true,
false,
"deepskyblue",
},
[126847] = {
true,
false,
"palegoldenrod",
},
[223181] = {
true,
false,
"cornflowerblue",
},
[190174] = {
true,
false,
"yellowgreen",
},
[223182] = {
true,
false,
"peru",
},
[220368] = {
true,
false,
"yellowgreen",
},
[126848] = {
true,
false,
"ROGUE",
},
[202969] = {
true,
false,
"deepskyblue",
},
[5913] = {
true,
false,
"snow",
},
[229069] = {
true,
false,
"paleturquoise",
},
[186338] = {
true,
false,
"ROGUE",
},
[172265] = {
true,
false,
"deepskyblue",
},
[174568] = {
false,
false,
"azure",
},
[164589] = {
true,
false,
"snow",
},
[242631] = {
true,
false,
"snow",
},
[234955] = {
true,
false,
"snow",
},
[237514] = {
true,
false,
"ROGUE",
},
[174569] = {
false,
false,
"azure",
},
[193760] = {
true,
false,
"snow",
},
[192481] = {
true,
false,
"yellowgreen",
},
[81432] = {
true,
false,
"snow",
},
[114312] = {
true,
false,
"ROGUE",
},
[234957] = {
true,
false,
"paleturquoise",
},
[196576] = {
true,
false,
"orchid",
},
[200926] = {
true,
false,
"ROGUE",
},
[168942] = {
true,
false,
"snow",
},
[165872] = {
true,
false,
"orchid",
},
[200927] = {
true,
false,
"ROGUE",
},
[102287] = {
true,
false,
"snow",
},
[131586] = {
true,
false,
"snow",
},
[101008] = {
true,
false,
"yellowgreen",
},
[135169] = {
true,
false,
"yellowgreen",
},
[191206] = {
true,
false,
"orchid",
},
[57109] = {
true,
false,
"peru",
},
[40925] = {
true,
false,
"snow",
},
[98706] = {
true,
false,
"snow",
},
[234962] = {
true,
false,
"deepskyblue",
},
[162038] = {
true,
false,
"snow",
},
[130435] = {
true,
false,
"peru",
},
[45915] = {
true,
false,
"snow",
},
[81819] = {
true,
false,
"deepskyblue",
},
[184300] = {
true,
false,
"snow",
},
[162039] = {
true,
false,
"deepskyblue",
},
[86809] = {
true,
false,
"deepskyblue",
},
[184301] = {
true,
false,
"deepskyblue",
},
[114316] = {
true,
false,
"snow",
},
[190187] = {
true,
false,
"yellowgreen",
},
[213216] = {
true,
false,
"ROGUE",
},
[173044] = {
true,
false,
"deepskyblue",
},
[224731] = {
true,
false,
"peru",
},
[213217] = {
true,
false,
"palegoldenrod",
},
[131849] = {
true,
false,
"orchid",
},
[114317] = {
true,
false,
"snow",
},
[224732] = {
true,
false,
"deepskyblue",
},
[231385] = {
true,
false,
"peru",
},
[127111] = {
true,
false,
"peru",
},
[131850] = {
true,
false,
"deepskyblue",
},
[98965] = {
true,
false,
"ROGUE",
},
[127879] = {
true,
false,
"orchid",
},
[178165] = {
true,
false,
"snow",
},
[199659] = {
true,
false,
"ROGUE",
},
[86684] = {
true,
false,
"deepskyblue",
},
[212453] = {
true,
false,
"deepskyblue",
},
[39392] = {
true,
false,
"snow",
},
[170490] = {
true,
false,
"deepskyblue",
},
[45917] = {
true,
false,
"snow",
},
[151812] = {
false,
false,
"transparent",
},
[96664] = {
true,
false,
"orchid",
},
[216293] = {
true,
false,
"deepskyblue",
},
[214502] = {
true,
false,
"ROGUE",
},
[129928] = {
true,
false,
"yellowgreen",
},
[101398] = {
true,
false,
"snow",
},
[239834] = {
true,
false,
"snow",
},
[95769] = {
true,
false,
"deepskyblue",
},
[210153] = {
true,
false,
"ROGUE",
},
[205804] = {
true,
false,
"snow",
},
[84767] = {
true,
false,
"snow",
},
[223204] = {
true,
false,
"snow",
},
[239836] = {
true,
false,
"snow",
},
[128650] = {
true,
false,
"ROGUE",
},
[214761] = {
true,
false,
"snow",
},
[178171] = {
true,
false,
"snow",
},
[186615] = {
true,
false,
"ROGUE",
},
[138255] = {
true,
false,
"peru",
},
[210156] = {
true,
false,
"ROGUE",
},
[129802] = {
true,
false,
"yellowgreen",
},
[214762] = {
true,
false,
"snow",
},
[186616] = {
true,
false,
"ROGUE",
},
[191222] = {
true,
false,
"snow",
},
[95771] = {
true,
false,
"orchid",
},
[128651] = {
true,
false,
"ROGUE",
},
[104215] = {
true,
false,
"ROGUE",
},
[59544] = {
true,
false,
"orchid",
},
[163077] = {
true,
false,
"ROGUE",
},
[187897] = {
true,
false,
"snow",
},
[95772] = {
true,
false,
"peru",
},
[191736] = {
true,
false,
"ROGUE",
},
[175616] = {
true,
false,
"ROGUE",
},
[206066] = {
true,
false,
"deepskyblue",
},
[127757] = {
true,
false,
"snow",
},
[131863] = {
true,
false,
"ROGUE",
},
[104217] = {
true,
false,
"ROGUE",
},
[162057] = {
true,
false,
"snow",
},
[131864] = {
true,
false,
"ROGUE",
},
[220141] = {
true,
false,
"deepskyblue",
},
[191739] = {
true,
false,
"snow",
},
[184319] = {
true,
false,
"snow",
},
[162058] = {
true,
false,
"ROGUE",
},
[164873] = {
true,
false,
"snow",
},
[43873] = {
true,
false,
"snow",
},
[104218] = {
true,
false,
"ROGUE",
},
[162059] = {
true,
false,
"ROGUE",
},
[206070] = {
true,
false,
"snow",
},
[190206] = {
true,
false,
"orchid",
},
[162060] = {
true,
false,
"ROGUE",
},
[164363] = {
true,
false,
"yellowgreen",
},
[190207] = {
true,
false,
"deepskyblue",
},
[162061] = {
true,
false,
"ROGUE",
},
[162317] = {
true,
false,
"ROGUE",
},
[57819] = {
true,
false,
"peru",
},
[80935] = {
true,
false,
"deepskyblue",
},
[191232] = {
true,
false,
"deepskyblue",
},
[163086] = {
true,
false,
"snow",
},
[245222] = {
true,
false,
"snow",
},
[184580] = {
true,
false,
"deepskyblue",
},
[187139] = {
true,
false,
"snow",
},
[129552] = {
true,
false,
"snow",
},
[206074] = {
true,
false,
"snow",
},
[56732] = {
true,
false,
"ROGUE",
},
[186116] = {
true,
false,
"ROGUE",
},
[40484] = {
true,
false,
"ROGUE",
},
[194816] = {
true,
false,
"snow",
},
[213751] = {
true,
false,
"yellowgreen",
},
[184582] = {
true,
false,
"ROGUE",
},
[150295] = {
true,
false,
"ROGUE",
},
[129553] = {
true,
false,
"peru",
},
[222964] = {
true,
false,
"paleturquoise",
},
[80937] = {
true,
false,
"orchid",
},
[176395] = {
true,
false,
"snow",
},
[77483] = {
true,
false,
"orchid",
},
[176396] = {
true,
false,
"orchid",
},
[150297] = {
true,
false,
"deepskyblue",
},
[84520] = {
true,
false,
"orchid",
},
[186120] = {
true,
false,
"ROGUE",
},
[80938] = {
true,
false,
"snow",
},
[95779] = {
true,
false,
"snow",
},
[186121] = {
true,
false,
"ROGUE",
},
[186122] = {
true,
false,
"palegoldenrod",
},
[184331] = {
true,
false,
"snow",
},
[153882] = {
true,
false,
"snow",
},
[193799] = {
true,
false,
"yellowgreen",
},
[196102] = {
true,
false,
"deepskyblue",
},
[163862] = {
true,
false,
"orchid",
},
[40166] = {
true,
false,
"snow",
},
[224249] = {
true,
false,
"snow",
},
[186124] = {
true,
false,
"ROGUE",
},
[180495] = {
true,
false,
"snow",
},
[223994] = {
true,
false,
"deepskyblue",
},
[186125] = {
true,
false,
"deepskyblue",
},
[165911] = {
true,
false,
"peru",
},
[162329] = {
true,
false,
"ROGUE",
},
[184335] = {
true,
false,
"deepskyblue",
},
[201223] = {
true,
false,
"deepskyblue",
},
[193291] = {
true,
false,
"snow",
},
[216320] = {
true,
false,
"ROGUE",
},
[194315] = {
true,
false,
"snow",
},
[165913] = {
true,
false,
"yellowgreen",
},
[176404] = {
true,
false,
"snow",
},
[212739] = {
true,
false,
"white",
},
[99365] = {
true,
false,
"peru",
},
[40935] = {
true,
false,
"peru",
},
[138281] = {
true,
false,
"snow",
},
[218370] = {
true,
false,
"ROGUE",
},
[179733] = {
true,
false,
"yellowgreen",
},
[125977] = {
true,
false,
"yellowgreen",
},
[187154] = {
true,
false,
"snow",
},
[43878] = {
true,
false,
"ROGUE",
},
[167964] = {
true,
false,
"snow",
},
[187155] = {
true,
false,
"deepskyblue",
},
[168988] = {
true,
false,
"orchid",
},
[134701] = {
true,
false,
"yellowgreen",
},
[80816] = {
true,
false,
"orchid",
},
[167965] = {
true,
false,
"deepskyblue",
},
[186644] = {
true,
false,
"ROGUE",
},
[40936] = {
true,
false,
"snow",
},
[165919] = {
true,
false,
"snow",
},
[197904] = {
true,
false,
"peru",
},
[165408] = {
true,
false,
"ROGUE",
},
[190484] = {
true,
false,
"ROGUE",
},
[216328] = {
true,
false,
"snow",
},
[163618] = {
true,
false,
"peru",
},
[190485] = {
true,
false,
"palegoldenrod",
},
[192788] = {
true,
false,
"deepskyblue",
},
[213770] = {
true,
false,
"ROGUE",
},
[168992] = {
true,
false,
"deepskyblue",
},
[220423] = {
true,
false,
"snow",
},
[196115] = {
true,
false,
"paleturquoise",
},
[187160] = {
true,
false,
"orchid",
},
[114338] = {
true,
false,
"snow",
},
[196116] = {
true,
false,
"orchid",
},
[204560] = {
true,
false,
"orangered",
},
[75829] = {
true,
false,
"ROGUE",
},
[135474] = {
true,
false,
"deepskyblue",
},
[59552] = {
true,
false,
"deepskyblue",
},
[196117] = {
true,
false,
"snow",
},
[163621] = {
true,
false,
"snow",
},
[198933] = {
true,
false,
"ROGUE",
},
[189466] = {
true,
false,
"snow",
},
[189722] = {
true,
false,
"ROGUE",
},
[165414] = {
true,
false,
"deepskyblue",
},
[133430] = {
true,
false,
"snow",
},
[189467] = {
true,
false,
"orchid",
},
[214287] = {
true,
false,
"yellowgreen",
},
[83763] = {
true,
false,
"snow",
},
[213008] = {
true,
false,
"yellowgreen",
},
[192794] = {
true,
false,
"peru",
},
[59553] = {
true,
false,
"snow",
},
[199703] = {
true,
false,
"yellowgreen",
},
[59873] = {
true,
false,
"snow",
},
[241923] = {
true,
false,
"snow",
},
[197145] = {
true,
false,
"snow",
},
[192796] = {
true,
false,
"orchid",
},
[189470] = {
true,
false,
"deepskyblue",
},
[216337] = {
true,
false,
"peru",
},
[215826] = {
true,
false,
"yellowgreen",
},
[189727] = {
true,
false,
"ROGUE",
},
[83893] = {
true,
false,
"deepskyblue",
},
[201754] = {
true,
false,
"ROGUE",
},
[216339] = {
true,
false,
"deepskyblue",
},
[190496] = {
true,
false,
"ROGUE",
},
[186658] = {
true,
false,
"deepskyblue",
},
[205337] = {
true,
false,
"snow",
},
[216340] = {
true,
false,
"orchid",
},
[220946] = {
true,
false,
"snow",
},
[192800] = {
true,
false,
"snow",
},
[197406] = {
true,
false,
"peru",
},
[240905] = {
true,
false,
"yellowgreen",
},
[245255] = {
true,
false,
"snow",
},
[42859] = {
false,
false,
"snow",
},
[59555] = {
true,
false,
"orchid",
},
[163121] = {
true,
false,
"white",
},
[192803] = {
true,
false,
"yellowgreen",
},
[45930] = {
true,
false,
"snow",
},
[186151] = {
true,
false,
"ROGUE",
},
[223253] = {
true,
false,
"deepskyblue",
},
[162099] = {
true,
false,
"ROGUE",
},
[189478] = {
true,
false,
"ROGUE",
},
[97202] = {
true,
false,
"deepskyblue",
},
[211228] = {
true,
false,
"deepskyblue",
},
[195876] = {
true,
false,
"orchid",
},
[129699] = {
true,
false,
"ROGUE",
},
[175663] = {
true,
false,
"ROGUE",
},
[212765] = {
true,
false,
"snow",
},
[162102] = {
true,
false,
"ROGUE",
},
[246285] = {
true,
false,
"snow",
},
[195878] = {
true,
false,
"peru",
},
[163894] = {
true,
false,
"snow",
},
[162103] = {
true,
false,
"ROGUE",
},
[248589] = {
true,
false,
"yellowgreen",
},
[199717] = {
true,
false,
"snow",
},
[223770] = {
true,
false,
"deepskyblue",
},
[189227] = {
true,
false,
"peru",
},
[203812] = {
true,
false,
"yellowgreen",
},
[163128] = {
true,
false,
"deepskyblue",
},
[137029] = {
true,
false,
"peru",
},
[100531] = {
true,
false,
"snow",
},
[223772] = {
true,
false,
"deepskyblue",
},
[164921] = {
true,
false,
"deepskyblue",
},
[84028] = {
true,
false,
"snow",
},
[100532] = {
true,
false,
"deepskyblue",
},
[223773] = {
true,
false,
"deepskyblue",
},
[208165] = {
true,
false,
"deepskyblue",
},
[177716] = {
true,
false,
"yellowgreen",
},
[165946] = {
true,
false,
"ROGUE",
},
[223774] = {
true,
false,
"deepskyblue",
},
[40943] = {
true,
false,
"deepskyblue",
},
[223775] = {
true,
false,
"deepskyblue",
},
[189232] = {
true,
false,
"ROGUE",
},
[223776] = {
true,
false,
"deepskyblue",
},
[231197] = {
true,
false,
"snow",
},
[164414] = {
true,
false,
"yellowgreen",
},
[189234] = {
true,
false,
"snow",
},
[164926] = {
true,
false,
"snow",
},
[212775] = {
true,
false,
"deepskyblue",
},
[186420] = {
true,
false,
"deepskyblue",
},
[189235] = {
true,
false,
"snow",
},
[75715] = {
true,
false,
"peru",
},
[81984] = {
true,
false,
"snow",
},
[220197] = {
true,
false,
"snow",
},
[95674] = {
true,
false,
"ROGUE",
},
[164929] = {
true,
false,
"snow",
},
[104246] = {
true,
false,
"peru",
},
[81985] = {
true,
false,
"orchid",
},
[131666] = {
true,
false,
"deepskyblue",
},
[40177] = {
true,
false,
"ROGUE",
},
[185656] = {
true,
false,
"deepskyblue",
},
[131667] = {
true,
false,
"ROGUE",
},
[95675] = {
true,
false,
"ROGUE",
},
[104247] = {
true,
false,
"deepskyblue",
},
[97083] = {
true,
false,
"deepskyblue",
},
[176703] = {
true,
false,
"snow",
},
[176959] = {
true,
false,
"snow",
},
[45935] = {
true,
false,
"deepskyblue",
},
[184124] = {
true,
false,
"ROGUE",
},
[213806] = {
true,
false,
"deepskyblue",
},
[216365] = {
true,
false,
"peru",
},
[167493] = {
true,
false,
"orchid",
},
[184125] = {
true,
false,
"ROGUE",
},
[208945] = {
true,
false,
"yellowgreen",
},
[205363] = {
true,
false,
"deepskyblue",
},
[228648] = {
true,
false,
"ROGUE",
},
[133463] = {
true,
false,
"snow",
},
[237861] = {
true,
false,
"ROGUE",
},
[179010] = {
true,
false,
"snow",
},
[134232] = {
true,
false,
"deepskyblue",
},
[218671] = {
true,
false,
"deepskyblue",
},
[212786] = {
true,
false,
"peru",
},
[231977] = {
true,
false,
"deepskyblue",
},
[214066] = {
true,
false,
"paleturquoise",
},
[155215] = {
true,
false,
"orchid",
},
[231978] = {
true,
false,
"orchid",
},
[155216] = {
true,
false,
"orchid",
},
[179269] = {
true,
false,
"snow",
},
[187969] = {
true,
false,
"orchid",
},
[184131] = {
true,
false,
"snow",
},
[101437] = {
true,
false,
"yellowgreen",
},
[131677] = {
true,
false,
"peru",
},
[165197] = {
true,
false,
"snow",
},
[208440] = {
true,
false,
"snow",
},
[184132] = {
true,
false,
"orchid",
},
[92610] = {
true,
false,
"orchid",
},
[201788] = {
true,
false,
"ROGUE",
},
[155219] = {
true,
false,
"orchid",
},
[101438] = {
true,
false,
"orchid",
},
[170572] = {
true,
false,
"snow",
},
[208698] = {
true,
false,
"deepskyblue",
},
[98368] = {
true,
false,
"peru",
},
[201790] = {
true,
false,
"palegoldenrod",
},
[171341] = {
true,
false,
"yellowgreen",
},
[155221] = {
true,
false,
"orchid",
},
[214840] = {
true,
false,
"peru",
},
[135263] = {
true,
false,
"peru",
},
[197697] = {
true,
false,
"snow",
},
[199233] = {
true,
false,
"deepskyblue",
},
[92612] = {
true,
false,
"snow",
},
[197698] = {
true,
false,
"snow",
},
[208445] = {
true,
false,
"ROGUE",
},
[186696] = {
true,
false,
"yellowgreen",
},
[98370] = {
true,
false,
"deepskyblue",
},
[162133] = {
true,
false,
"ROGUE",
},
[217658] = {
true,
false,
"snow",
},
[163157] = {
true,
false,
"ROGUE",
},
[155225] = {
true,
false,
"orchid",
},
[97219] = {
true,
false,
"ROGUE",
},
[211262] = {
true,
false,
"snow",
},
[199748] = {
true,
false,
"deepskyblue",
},
[155226] = {
true,
false,
"orchid",
},
[98243] = {
true,
false,
"snow",
},
[229686] = {
true,
false,
"deepskyblue",
},
[193352] = {
true,
false,
"yellowgreen",
},
[44404] = {
true,
false,
"deepskyblue",
},
[198214] = {
true,
false,
"snow",
},
[136549] = {
true,
false,
"yellowgreen",
},
[208450] = {
true,
false,
"white",
},
[231223] = {
true,
false,
"deepskyblue",
},
[168022] = {
true,
false,
"snow",
},
[184910] = {
true,
false,
"darkorange",
},
[207939] = {
true,
false,
"ROGUE",
},
[115388] = {
true,
false,
"snow",
},
[219198] = {
true,
false,
"yellowgreen",
},
[164185] = {
true,
false,
"ROGUE",
},
[137830] = {
true,
false,
"orchid",
},
[207940] = {
true,
false,
"ROGUE",
},
[132713] = {
true,
false,
"ROGUE",
},
[107073] = {
true,
false,
"deepskyblue",
},
[192333] = {
true,
false,
"snow",
},
[151649] = {
true,
false,
"peru",
},
[173655] = {
true,
false,
"snow",
},
[131436] = {
true,
false,
"snow",
},
[205384] = {
true,
false,
"deepskyblue",
},
[194894] = {
true,
false,
"deepskyblue",
},
[189265] = {
true,
false,
"deepskyblue",
},
[240952] = {
true,
false,
"yellowgreen",
},
[208456] = {
true,
false,
"deepskyblue",
},
[129208] = {
true,
false,
"ROGUE",
},
[222786] = {
true,
false,
"snow",
},
[180567] = {
true,
false,
"peru",
},
[130488] = {
true,
false,
"orchid",
},
[207946] = {
true,
false,
"ROGUE",
},
[114624] = {
true,
false,
"snow",
},
[194897] = {
true,
false,
"yellowgreen",
},
[208459] = {
true,
false,
"snow",
},
[229953] = {
true,
false,
"ROGUE",
},
[216648] = {
true,
false,
"ROGUE",
},
[164450] = {
true,
false,
"ROGUE",
},
[216649] = {
true,
false,
"yellow",
},
[151657] = {
true,
false,
"deepskyblue",
},
[225605] = {
true,
false,
"paleturquoise",
},
[164451] = {
true,
false,
"ROGUE",
},
[164707] = {
true,
false,
"orchid",
},
[40825] = {
true,
false,
"ROGUE",
},
[114626] = {
true,
false,
"deepskyblue",
},
[174175] = {
true,
false,
"peru",
},
[209230] = {
true,
false,
"ROGUE",
},
[96587] = {
true,
false,
"snow",
},
[203857] = {
true,
false,
"deepskyblue",
},
[83026] = {
true,
false,
"snow",
},
[198996] = {
true,
false,
"ROGUE",
},
[170850] = {
true,
false,
"snow",
},
[208208] = {
true,
false,
"snow",
},
[198997] = {
true,
false,
"ROGUE",
},
[219723] = {
true,
false,
"snow",
},
[214350] = {
true,
false,
"deepskyblue",
},
[198998] = {
true,
false,
"ROGUE",
},
[81236] = {
true,
false,
"deepskyblue",
},
[228424] = {
true,
false,
"yellowgreen",
},
[195928] = {
true,
false,
"snow",
},
[188252] = {
true,
false,
"ROGUE",
},
[198999] = {
true,
false,
"ROGUE",
},
[141939] = {
true,
false,
"peru",
},
[203861] = {
true,
false,
"snow",
},
[195929] = {
true,
false,
"snow",
},
[214608] = {
true,
false,
"deepskyblue",
},
[231496] = {
true,
false,
"paleturquoise",
},
[199000] = {
true,
false,
"ROGUE",
},
[195930] = {
true,
false,
"snow",
},
[129214] = {
true,
false,
"ROGUE",
},
[219983] = {
true,
false,
"snow",
},
[186208] = {
true,
false,
"snow",
},
[193373] = {
true,
false,
"deepskyblue",
},
[116549] = {
true,
false,
"orchid",
},
[5925] = {
true,
false,
"snow",
},
[164461] = {
true,
false,
"deepskyblue",
},
[134012] = {
true,
false,
"snow",
},
[181861] = {
true,
false,
"ROGUE",
},
[144248] = {
true,
false,
"ROGUE",
},
[129600] = {
true,
false,
"deepskyblue",
},
[210264] = {
true,
false,
"paleturquoise",
},
[157810] = {
true,
false,
"snow",
},
[164463] = {
true,
false,
"yellow",
},
[114632] = {
true,
false,
"snow",
},
[184422] = {
true,
false,
"ROGUE",
},
[211289] = {
true,
false,
"snow",
},
[180840] = {
true,
false,
"snow",
},
[206172] = {
true,
false,
"ROGUE",
},
[101839] = {
true,
false,
"yellowgreen",
},
[210267] = {
true,
false,
"ROGUE",
},
[167536] = {
true,
false,
"snow",
},
[114633] = {
true,
false,
"orchid",
},
[213338] = {
true,
false,
"deepskyblue",
},
[129602] = {
true,
false,
"snow",
},
[111563] = {
true,
false,
"peru",
},
[223318] = {
true,
false,
"snow",
},
[207198] = {
true,
false,
"deepskyblue",
},
[197219] = {
true,
false,
"snow",
},
[187240] = {
true,
false,
"snow",
},
[40765] = {
true,
false,
"ROGUE",
},
[210269] = {
true,
false,
"peru",
},
[208478] = {
true,
false,
"ROGUE",
},
[114634] = {
true,
false,
"deepskyblue",
},
[207199] = {
true,
false,
"paleturquoise",
},
[59764] = {
true,
false,
"snow",
},
[179821] = {
true,
false,
"snow",
},
[244302] = {
true,
false,
"yellowgreen",
},
[150396] = {
true,
false,
"ROGUE",
},
[210271] = {
true,
false,
"ROGUE",
},
[115019] = {
true,
false,
"snow",
},
[207969] = {
true,
false,
"deepskyblue",
},
[212831] = {
true,
false,
"white",
},
[213343] = {
true,
false,
"snow",
},
[150142] = {
true,
false,
"snow",
},
[104273] = {
true,
false,
"snow",
},
[126918] = {
true,
false,
"orchid",
},
[180336] = {
true,
false,
"deepskyblue",
},
[233814] = {
true,
false,
"ROGUE",
},
[101075] = {
true,
false,
"yellowgreen",
},
[233815] = {
true,
false,
"ROGUE",
},
[187246] = {
true,
false,
"orchid",
},
[104274] = {
true,
false,
"snow",
},
[126919] = {
true,
false,
"deepskyblue",
},
[174197] = {
true,
false,
"deepskyblue",
},
[164218] = {
true,
false,
"ROGUE",
},
[226396] = {
true,
false,
"ROGUE",
},
[40319] = {
true,
false,
"ROGUE",
},
[196203] = {
true,
false,
"orchid",
},
[206694] = {
true,
false,
"orchid",
},
[233817] = {
true,
false,
"ROGUE",
},
[113998] = {
true,
false,
"snow",
},
[177269] = {
true,
false,
"ROGUE",
},
[104275] = {
true,
false,
"snow",
},
[229212] = {
true,
false,
"orchid",
},
[186737] = {
true,
false,
"ROGUE",
},
[226398] = {
true,
false,
"ROGUE",
},
[115406] = {
true,
false,
"snow",
},
[84957] = {
true,
false,
"snow",
},
[186738] = {
true,
false,
"ROGUE",
},
[166524] = {
true,
false,
"yellowgreen",
},
[214117] = {
true,
false,
"yellowgreen",
},
[206697] = {
true,
false,
"deepskyblue",
},
[186739] = {
true,
false,
"ROGUE",
},
[168572] = {
true,
false,
"snow",
},
[224609] = {
true,
false,
"snow",
},
[208745] = {
true,
false,
"ROGUE",
},
[189555] = {
true,
false,
"orchid",
},
[186229] = {
true,
false,
"snow",
},
[237660] = {
true,
false,
"ROGUE",
},
[168318] = {
true,
false,
"snow",
},
[168574] = {
true,
false,
"orchid",
},
[162689] = {
true,
false,
"ROGUE",
},
[226402] = {
true,
false,
"ROGUE",
},
[208747] = {
true,
false,
"ROGUE",
},
[237661] = {
true,
false,
"deepskyblue",
},
[233823] = {
true,
false,
"yellow",
},
[223844] = {
true,
false,
"deepskyblue",
},
[164737] = {
true,
false,
"snow",
},
[226403] = {
true,
false,
"yellow",
},
[210539] = {
true,
false,
"peru",
},
[137103] = {
true,
false,
"yellowgreen",
},
[237662] = {
true,
false,
"snow",
},
[98521] = {
true,
false,
"snow",
},
[215657] = {
true,
false,
"ROGUE",
},
[162691] = {
true,
false,
"ROGUE",
},
[226404] = {
true,
false,
"ROGUE",
},
[187767] = {
true,
false,
"ROGUE",
},
[180091] = {
true,
false,
"deepskyblue",
},
[53115] = {
true,
false,
"snow",
},
[210797] = {
true,
false,
"ROGUE",
},
[180348] = {
true,
false,
"snow",
},
[166275] = {
true,
false,
"paleturquoise",
},
[168578] = {
true,
false,
"deepskyblue",
},
[162693] = {
true,
false,
"ROGUE",
},
[189816] = {
true,
false,
"snow",
},
[179837] = {
true,
false,
"snow",
},
[206704] = {
true,
false,
"peru",
},
[166276] = {
true,
false,
"peru",
},
[170882] = {
true,
false,
"paleturquoise",
},
[130635] = {
true,
false,
"paleturquoise",
},
[224616] = {
true,
false,
"yellowgreen",
},
[188026] = {
true,
false,
"yellowgreen",
},
[215405] = {
true,
false,
"ROGUE",
},
[168580] = {
true,
false,
"orchid",
},
[187771] = {
true,
false,
"deepskyblue",
},
[56762] = {
true,
false,
"ROGUE",
},
[129996] = {
true,
false,
"peachpuff",
},
[174210] = {
true,
false,
"deepskyblue",
},
[187772] = {
true,
false,
"snow",
},
[169861] = {
true,
false,
"snow",
},
[215407] = {
true,
false,
"ROGUE",
},
[150159] = {
true,
false,
"ROGUE",
},
[183423] = {
true,
false,
"snow",
},
[179841] = {
true,
false,
"deepskyblue",
},
[150160] = {
true,
false,
"snow",
},
[228458] = {
true,
false,
"ROGUE",
},
[208244] = {
true,
false,
"deepskyblue",
},
[179842] = {
true,
false,
"snow",
},
[204918] = {
true,
false,
"yellowgreen",
},
[134041] = {
true,
false,
"peru",
},
[206710] = {
true,
false,
"darkseagreen",
},
[231531] = {
true,
false,
"orchid",
},
[129231] = {
true,
false,
"ROGUE",
},
[165260] = {
true,
false,
"yellowgreen",
},
[168843] = {
true,
false,
"snow",
},
[179334] = {
true,
false,
"snow",
},
[79720] = {
true,
false,
"deepskyblue",
},
[182149] = {
true,
false,
"darkorange",
},
[122963] = {
true,
false,
"ROGUE",
},
[199037] = {
true,
false,
"deepskyblue",
},
[150165] = {
true,
false,
"deepskyblue",
},
[168844] = {
true,
false,
"orchid",
},
[182150] = {
true,
false,
"darkorange",
},
[205435] = {
true,
false,
"snow",
},
[168845] = {
true,
false,
"snow",
},
[130896] = {
true,
false,
"yellowgreen",
},
[180104] = {
true,
false,
"snow",
},
[186246] = {
true,
false,
"deepskyblue",
},
[150168] = {
true,
false,
"snow",
},
[95842] = {
true,
false,
"deepskyblue",
},
[196482] = {
true,
false,
"ROGUE",
},
[122965] = {
true,
false,
"ROGUE",
},
[150169] = {
true,
false,
"orchid",
},
[165010] = {
true,
false,
"orchid",
},
[241517] = {
true,
false,
"ROGUE",
},
[135329] = {
true,
false,
"snow",
},
[114266] = {
true,
false,
"snow",
},
[194181] = {
true,
false,
"ROGUE",
},
[131492] = {
true,
false,
"deepskyblue",
},
[168594] = {
true,
false,
"snow",
},
[164501] = {
true,
false,
"ROGUE",
},
[213885] = {
true,
false,
"snow",
},
[98275] = {
true,
false,
"orchid",
},
[153755] = {
true,
false,
"ROGUE",
},
[154011] = {
true,
false,
"orchid",
},
[184972] = {
true,
false,
"ROGUE",
},
[177808] = {
true,
false,
"peru",
},
[213119] = {
true,
false,
"ROGUE",
},
[122968] = {
true,
false,
"ROGUE",
},
[210818] = {
true,
false,
"orchid",
},
[154014] = {
true,
false,
"orchid",
},
[118491] = {
true,
false,
"snow",
},
[165529] = {
true,
false,
"orchid",
},
[122969] = {
true,
false,
"deepskyblue",
},
[154015] = {
true,
false,
"orchid",
},
[164506] = {
true,
false,
"peru",
},
[101476] = {
true,
false,
"yellowgreen",
},
[154016] = {
true,
false,
"orchid",
},
[144293] = {
true,
false,
"snow",
},
[166299] = {
true,
false,
"deepskyblue",
},
[129367] = {
true,
false,
"deepskyblue",
},
[144294] = {
true,
false,
"deepskyblue",
},
[173720] = {
true,
false,
"snow",
},
[154018] = {
true,
false,
"orchid",
},
[213893] = {
true,
false,
"paleturquoise",
},
[210966] = {
true,
false,
"snow",
},
[214661] = {
true,
false,
"ROGUE",
},
[189729] = {
true,
false,
"ROGUE",
},
[122971] = {
true,
false,
"orchid",
},
[56448] = {
true,
false,
"ROGUE",
},
[164510] = {
true,
false,
"orchid",
},
[167731] = {
true,
false,
"snow",
},
[242209] = {
true,
false,
"deepskyblue",
},
[184023] = {
true,
false,
"orchid",
},
[220195] = {
true,
false,
"deepskyblue",
},
[135245] = {
true,
false,
"snow",
},
[236033] = {
true,
false,
"peru",
},
[164255] = {
true,
false,
"ROGUE",
},
[224271] = {
true,
false,
"deepskyblue",
},
[209801] = {
true,
false,
"snow",
},
[164558] = {
true,
false,
"ROGUE",
},
[168396] = {
true,
false,
"snow",
},
[177817] = {
true,
false,
"deepskyblue",
},
[98280] = {
true,
false,
"deepskyblue",
},
[122972] = {
true,
false,
"deepskyblue",
},
[41096] = {
true,
false,
"deepskyblue",
},
[129369] = {
true,
false,
"snow",
},
[144298] = {
true,
false,
"snow",
},
[225821] = {
true,
false,
"ROGUE",
},
[204931] = {
true,
false,
"ROGUE",
},
[194316] = {
true,
false,
"snow",
},
[167532] = {
true,
false,
"snow",
},
[173360] = {
true,
false,
"snow",
},
[156212] = {
true,
false,
"snow",
},
[39625] = {
true,
false,
"ROGUE",
},
[104251] = {
true,
false,
"orchid",
},
[101991] = {
true,
false,
"deepskyblue",
},
[201222] = {
true,
false,
"snow",
},
[233816] = {
true,
false,
"ROGUE",
},
[97720] = {
true,
false,
"yellowgreen",
},
[122973] = {
true,
false,
"peru",
},
[210812] = {
true,
false,
"deepskyblue",
},
[129370] = {
true,
false,
"deepskyblue",
},
[216338] = {
true,
false,
"snow",
},
[187967] = {
true,
false,
"ROGUE",
},
[137521] = {
true,
false,
"orchid",
},
[99358] = {
true,
false,
"orchid",
},
[229251] = {
true,
false,
"snow",
},
[76057] = {
true,
false,
"snow",
},
[211263] = {
true,
false,
"snow",
},
[167998] = {
true,
false,
"snow",
},
[173016] = {
true,
false,
"deepskyblue",
},
[81522] = {
true,
false,
"ROGUE",
},
[75509] = {
true,
false,
"ROGUE",
},
[165410] = {
true,
false,
"ROGUE",
},
[204030] = {
true,
false,
"yellowgreen",
},
[187033] = {
true,
false,
"snow",
},
[98538] = {
true,
false,
"snow",
},
[184986] = {
true,
false,
"ROGUE",
},
[163126] = {
true,
false,
"yellowgreen",
},
[168393] = {
true,
false,
"snow",
},
[183707] = {
true,
false,
"deepskyblue",
},
[131009] = {
true,
false,
"yellowgreen",
},
[221103] = {
true,
false,
"snow",
},
[208363] = {
true,
false,
"ROGUE",
},
[189886] = {
true,
false,
"yellowgreen",
},
[164517] = {
true,
false,
"ROGUE",
},
[205158] = {
true,
false,
"snow",
},
[165251] = {
true,
false,
"yellowgreen",
},
[234883] = {
true,
false,
"peru",
},
[190342] = {
true,
false,
"deepskyblue",
},
[162047] = {
true,
false,
"snow",
},
[211087] = {
true,
false,
"ROGUE",
},
[189531] = {
true,
false,
"peru",
},
[129372] = {
true,
false,
"orchid",
},
[189338] = {
true,
false,
"snow",
},
[221102] = {
true,
false,
"snow",
},
[193944] = {
true,
false,
"deepskyblue",
},
[214506] = {
true,
false,
"ROGUE",
},
[190362] = {
true,
false,
"orchid",
},
[56439] = {
true,
false,
"ROGUE",
},
[40586] = {
true,
false,
"ROGUE",
},
[184581] = {
true,
false,
"palegoldenrod",
},
[213937] = {
true,
false,
"ROGUE",
},
[43875] = {
true,
false,
"ROGUE",
},
[131545] = {
true,
false,
"deepskyblue",
},
[97084] = {
true,
false,
"snow",
},
[169893] = {
true,
false,
"peru",
},
[211089] = {
true,
false,
"ROGUE",
},
[206698] = {
true,
false,
"paleturquoise",
},
[208365] = {
true,
false,
"orchid",
},
[189340] = {
true,
false,
"ROGUE",
},
[76407] = {
true,
false,
"ROGUE",
},
[95676] = {
true,
false,
"ROGUE",
},
[185534] = {
true,
false,
"peru",
},
[196202] = {
true,
false,
"deepskyblue",
},
[144295] = {
true,
false,
"orchid",
},
[145185] = {
true,
false,
"ROGUE",
},
[80005] = {
true,
false,
"ROGUE",
},
[213905] = {
true,
false,
"yellowgreen",
},
[84400] = {
true,
false,
"yellowgreen",
},
[45919] = {
true,
false,
"snow",
},
[130909] = {
true,
false,
"orchid",
},
[133432] = {
true,
false,
"deepskyblue",
},
[129232] = {
true,
false,
"ROGUE",
},
[164266] = {
true,
false,
"ROGUE",
},
[129374] = {
true,
false,
"peru",
},
[189719] = {
true,
false,
"ROGUE",
},
[212826] = {
true,
false,
"snow",
},
[230740] = {
true,
false,
"snow",
},
[220815] = {
true,
false,
"deepskyblue",
},
[206696] = {
true,
false,
"peru",
},
[212827] = {
true,
false,
"snow",
},
[164267] = {
true,
false,
"ROGUE",
},
[127315] = {
true,
false,
"yellowgreen",
},
[176705] = {
true,
false,
"ROGUE",
},
[216364] = {
true,
false,
"deepskyblue",
},
[214419] = {
true,
false,
"peru",
},
[237192] = {
true,
false,
"deepskyblue",
},
[75452] = {
true,
false,
"ROGUE",
},
[241798] = {
true,
false,
"deepskyblue",
},
[98542] = {
true,
false,
"ROGUE",
},
[156226] = {
true,
false,
"snow",
},
[218002] = {
true,
false,
"ROGUE",
},
[131824] = {
true,
false,
"ROGUE",
},
[94960] = {
true,
false,
"ROGUE",
},
[201792] = {
true,
false,
"ROGUE",
},
[120651] = {
true,
false,
"orangered",
},
[176551] = {
true,
false,
"yellowgreen",
},
[217491] = {
true,
false,
"yellow",
},
[212793] = {
true,
false,
"deepskyblue",
},
[144246] = {
true,
false,
"ROGUE",
},
[190034] = {
true,
false,
"snow",
},
[214421] = {
true,
false,
"snow",
},
[104300] = {
true,
false,
"orchid",
},
[82039] = {
true,
false,
"peru",
},
[241800] = {
true,
false,
"snow",
},
[164567] = {
true,
false,
"ROGUE",
},
[199325] = {
true,
false,
"snow",
},
[81603] = {
true,
false,
"snow",
},
[185508] = {
true,
false,
"orchid",
},
[186220] = {
true,
false,
"deepskyblue",
},
[188067] = {
true,
false,
"deepskyblue",
},
[190370] = {
true,
false,
"snow",
},
[168109] = {
true,
false,
"snow",
},
[197535] = {
true,
false,
"snow",
},
[130400] = {
true,
false,
"snow",
},
[205723] = {
true,
false,
"deepskyblue",
},
[144569] = {
true,
false,
"snow",
},
[194317] = {
true,
false,
"snow",
},
[98810] = {
true,
false,
"snow",
},
[193462] = {
true,
false,
"snow",
},
[137405] = {
true,
false,
"yellowgreen",
},
[205212] = {
true,
false,
"yellowgreen",
},
[206140] = {
true,
false,
"snow",
},
[224962] = {
true,
false,
"deepskyblue",
},
[183463] = {
true,
false,
"snow",
},
[154744] = {
true,
false,
"snow",
},
[203678] = {
true,
false,
"ROGUE",
},
[231312] = {
true,
false,
"deepskyblue",
},
[241803] = {
true,
false,
"deepskyblue",
},
[176555] = {
true,
false,
"yellow",
},
[163524] = {
true,
false,
"orchid",
},
[213913] = {
true,
false,
"paleturquoise",
},
[150712] = {
true,
false,
"ROGUE",
},
[155830] = {
true,
false,
"snow",
},
[235151] = {
true,
false,
"orchid",
},
[190373] = {
true,
false,
"orchid",
},
[168112] = {
false,
false,
"transparent",
},
[176556] = {
true,
false,
"ROGUE",
},
[185529] = {
true,
false,
"snow",
},
[203679] = {
true,
false,
"ROGUE",
},
[170147] = {
true,
false,
"yellowgreen",
},
[59051] = {
true,
false,
"ROGUE",
},
[90997] = {
true,
false,
"snow",
},
[190340] = {
true,
false,
"orchid",
},
[164967] = {
true,
false,
"ROGUE",
},
[197985] = {
true,
false,
"deepskyblue",
},
[184107] = {
true,
false,
"snow",
},
[122967] = {
true,
false,
"ROGUE",
},
[163458] = {
true,
false,
"deepskyblue",
},
[75899] = {
true,
false,
"yellowgreen",
},
[101549] = {
true,
false,
"paleturquoise",
},
[169905] = {
true,
false,
"snow",
},
[166396] = {
true,
false,
"snow",
},
[133007] = {
true,
false,
"ROGUE",
},
[99891] = {
true,
false,
"snow",
},
[75652] = {
true,
false,
"snow",
},
[204206] = {
true,
false,
"snow",
},
[82682] = {
true,
false,
"ROGUE",
},
[90998] = {
true,
false,
"deepskyblue",
},
[160495] = {
true,
false,
"deepskyblue",
},
[188244] = {
true,
false,
"snow",
},
[154758] = {
true,
false,
"snow",
},
[168627] = {
true,
false,
"deepskyblue",
},
[234935] = {
true,
false,
"ROGUE",
},
[208193] = {
true,
false,
"snow",
},
[136643] = {
true,
false,
"snow",
},
[165824] = {
true,
false,
"snow",
},
[190377] = {
true,
false,
"deepskyblue",
},
[192680] = {
true,
false,
"snow",
},
[99192] = {
true,
false,
"ROGUE",
},
[199333] = {
true,
false,
"snow",
},
[114783] = {
true,
false,
"snow",
},
[157572] = {
true,
false,
"snow",
},
[128969] = {
true,
false,
"cornflowerblue",
},
[157571] = {
true,
false,
"snow",
},
[194896] = {
true,
false,
"peru",
},
[135365] = {
true,
false,
"snow",
},
[131527] = {
true,
false,
"ROGUE",
},
[130404] = {
true,
false,
"snow",
},
[162744] = {
true,
false,
"snow",
},
[234478] = {
true,
false,
"ROGUE",
},
[131383] = {
true,
false,
"ROGUE",
},
[163520] = {
true,
false,
"snow",
},
[175546] = {
true,
false,
"ROGUE",
},
[122984] = {
true,
false,
"snow",
},
[83894] = {
true,
false,
"ROGUE",
},
[177889] = {
true,
false,
"snow",
},
[168886] = {
true,
false,
"snow",
},
[177892] = {
true,
false,
"orchid",
},
[91000] = {
true,
false,
"snow",
},
[167607] = {
true,
false,
"peru",
},
[75966] = {
true,
false,
"yellowgreen",
},
[208438] = {
true,
false,
"snow",
},
[176563] = {
true,
false,
"ROGUE",
},
[134284] = {
true,
false,
"orchid",
},
[172981] = {
true,
false,
"snow",
},
[130661] = {
true,
false,
"deepskyblue",
},
[212673] = {
true,
false,
"snow",
},
[179890] = {
true,
false,
"darkorange",
},
[190381] = {
true,
false,
"yellowgreen",
},
[224368] = {
true,
false,
"peru",
},
[138187] = {
true,
false,
"deepskyblue",
},
[231176] = {
true,
false,
"yellowgreen",
},
[218016] = {
true,
false,
"yellowgreen",
},
[114796] = {
true,
false,
"deepskyblue",
},
[97197] = {
true,
false,
"deepskyblue",
},
[179891] = {
true,
false,
"darkorange",
},
[129227] = {
true,
false,
"ROGUE",
},
[198995] = {
true,
false,
"ROGUE",
},
[176565] = {
true,
false,
"deepskyblue",
},
[136470] = {
true,
false,
"paleturquoise",
},
[198870] = {
true,
false,
"deepskyblue",
},
[136139] = {
true,
false,
"snow",
},
[207177] = {
true,
false,
"snow",
},
[179892] = {
true,
false,
"darkorange",
},
[105715] = {
true,
false,
"deepskyblue",
},
[137614] = {
true,
false,
"ROGUE",
},
[105699] = {
true,
false,
"yellowgreen",
},
[221760] = {
true,
false,
"paleturquoise",
},
[150146] = {
true,
false,
"deepskyblue",
},
[218324] = {
true,
false,
"snow",
},
[212389] = {
true,
false,
"paleturquoise",
},
[190128] = {
true,
false,
"ROGUE",
},
[97068] = {
true,
false,
"snow",
},
[167538] = {
true,
false,
"snow",
},
[194990] = {
true,
false,
"deepskyblue",
},
[144071] = {
true,
false,
"deepskyblue",
},
[168891] = {
true,
false,
"orchid",
},
[195927] = {
true,
false,
"snow",
},
[75713] = {
true,
false,
"deepskyblue",
},
[167612] = {
true,
false,
"snow",
},
[231325] = {
true,
false,
"snow",
},
[214209] = {
true,
false,
"snow",
},
[81212] = {
true,
false,
"snow",
},
[92538] = {
true,
false,
"yellowgreen",
},
[187315] = {
true,
false,
"peru",
},
[220730] = {
true,
false,
"snow",
},
[162100] = {
true,
false,
"ROGUE",
},
[91003] = {
true,
false,
"ROGUE",
},
[84990] = {
true,
false,
"deepskyblue",
},
[190609] = {
true,
false,
"ROGUE",
},
[165560] = {
true,
false,
"yellowgreen",
},
[186339] = {
true,
false,
"palegoldenrod",
},
[166301] = {
true,
false,
"orchid",
},
[228539] = {
true,
false,
"paleturquoise",
},
[214439] = {
true,
false,
"deepskyblue",
},
[114544] = {
true,
false,
"snow",
},
[219045] = {
true,
false,
"snow",
},
[219301] = {
true,
false,
"yellowgreen",
},
[231839] = {
true,
false,
"deepskyblue",
},
[99366] = {
true,
false,
"deepskyblue",
},
[86526] = {
true,
false,
"snow",
},
[154020] = {
true,
false,
"orchid",
},
[98792] = {
true,
false,
"orchid",
},
[91004] = {
true,
false,
"ROGUE",
},
[219046] = {
true,
false,
"deepskyblue",
},
[129879] = {
true,
false,
"peachpuff",
},
[237981] = {
true,
false,
"deepskyblue",
},
[236190] = {
true,
false,
"yellowgreen",
},
[242587] = {
true,
false,
"yellowgreen",
},
[179386] = {
true,
false,
"peru",
},
[214441] = {
true,
false,
"yellowgreen",
},
[214697] = {
true,
false,
"snow",
},
[211261] = {
true,
false,
"snow",
},
[239833] = {
true,
false,
"snow",
},
[168384] = {
true,
false,
"snow",
},
[98681] = {
true,
false,
"snow",
},
[212411] = {
true,
false,
"snow",
},
[185528] = {
true,
false,
"deepskyblue",
},
[189878] = {
true,
false,
"darkorange",
},
[91005] = {
true,
false,
"ROGUE",
},
[82597] = {
true,
false,
"snow",
},
[185683] = {
true,
false,
"peru",
},
[152009] = {
true,
false,
"snow",
},
[162309] = {
true,
false,
"ROGUE",
},
[221979] = {
true,
false,
"peru",
},
[179388] = {
true,
false,
"deepskyblue",
},
[214443] = {
true,
false,
"yellowgreen",
},
[175806] = {
true,
false,
"ROGUE",
},
[231075] = {
true,
false,
"ROGUE",
},
[77700] = {
true,
false,
"deepskyblue",
},
[213892] = {
true,
false,
"deepskyblue",
},
[205152] = {
true,
false,
"snow",
},
[164804] = {
true,
false,
"yellowgreen",
},
[126983] = {
true,
false,
"ROGUE",
},
[76104] = {
true,
false,
"deepskyblue",
},
[91006] = {
true,
false,
"peru",
},
[179446] = {
true,
false,
"darkorange",
},
[216658] = {
true,
false,
"ROGUE",
},
[176575] = {
true,
false,
"snow",
},
[170690] = {
true,
false,
"paleturquoise",
},
[163620] = {
true,
false,
"snow",
},
[135552] = {
true,
false,
"yellowgreen",
},
[150292] = {
true,
false,
"snow",
},
[96574] = {
true,
false,
"snow",
},
[167876] = {
true,
false,
"snow",
},
[114803] = {
true,
false,
"deepskyblue",
},
[233824] = {
true,
false,
"ROGUE",
},
[136330] = {
true,
false,
"yellowgreen",
},
[213934] = {
true,
false,
"peru",
},
[186226] = {
true,
false,
"snow",
},
[144244] = {
true,
false,
"yellow",
},
[91007] = {
true,
false,
"ROGUE",
},
[217489] = {
true,
false,
"ROGUE",
},
[236995] = {
true,
false,
"snow",
},
[179963] = {
true,
false,
"deepskyblue",
},
[150222] = {
true,
false,
"ROGUE",
},
[97788] = {
true,
false,
"snow",
},
[171376] = {
true,
false,
"snow",
},
[216619] = {
true,
false,
"ROGUE",
},
[214673] = {
true,
false,
"paleturquoise",
},
[151659] = {
true,
false,
"orchid",
},
[211121] = {
true,
false,
"snow",
},
[168717] = {
true,
false,
"deepskyblue",
},
[186741] = {
true,
false,
"paleturquoise",
},
[132056] = {
true,
false,
"yellowgreen",
},
[167111] = {
true,
false,
"deepskyblue",
},
[182152] = {
true,
false,
"darkorange",
},
[130012] = {
true,
false,
"peachpuff",
},
[224219] = {
true,
false,
"deepskyblue",
},
[207207] = {
true,
false,
"ROGUE",
},
[192955] = {
true,
false,
"yellowgreen",
},
[191164] = {
true,
false,
"paleturquoise",
},
[207796] = {
true,
false,
"snow",
},
[196671] = {
true,
false,
"snow",
},
[165137] = {
true,
false,
"peru",
},
[199368] = {
true,
false,
"yellowgreen",
},
[169927] = {
true,
false,
"peru",
},
[208367] = {
true,
false,
"deepskyblue",
},
[173714] = {
true,
false,
"snow",
},
[103344] = {
true,
false,
"ROGUE",
},
[98813] = {
true,
false,
"deepskyblue",
},
[167113] = {
true,
false,
"orchid",
},
[212403] = {
true,
false,
"paleturquoise",
},
[206068] = {
true,
false,
"peru",
},
[223150] = {
true,
false,
"snow",
},
[187768] = {
true,
false,
"orchid",
},
[209333] = {
true,
false,
"ROGUE",
},
[164555] = {
true,
false,
"ROGUE",
},
[191847] = {
true,
false,
"snow",
},
[166302] = {
true,
false,
"deepskyblue",
},
[184140] = {
true,
false,
"snow",
},
[126832] = {
true,
false,
"ROGUE",
},
[195842] = {
true,
false,
"deepskyblue",
},
[100539] = {
true,
false,
"orchid",
},
[56792] = {
true,
false,
"peru",
},
[164556] = {
true,
false,
"ROGUE",
},
[45922] = {
true,
false,
"snow",
},
[150739] = {
true,
false,
"snow",
},
[223777] = {
true,
false,
"deepskyblue",
},
[206351] = {
true,
false,
"deepskyblue",
},
[40633] = {
true,
false,
"snow",
},
[175646] = {
true,
false,
"ROGUE",
},
[178630] = {
true,
false,
"snow",
},
[164557] = {
true,
false,
"snow",
},
[168907] = {
true,
false,
"snow",
},
[167116] = {
true,
false,
"peru",
},
[155090] = {
true,
false,
"snow",
},
[83846] = {
true,
false,
"ROGUE",
},
[190401] = {
true,
false,
"snow",
},
[196798] = {
true,
false,
"deepskyblue",
},
[96512] = {
true,
false,
"ROGUE",
},
[228015] = {
true,
false,
"snow",
},
[213942] = {
true,
false,
"yellowgreen",
},
[135241] = {
true,
false,
"paleturquoise",
},
[207205] = {
true,
false,
"ROGUE",
},
[228361] = {
true,
false,
"cornflowerblue",
},
[208743] = {
true,
false,
"ROGUE",
},
[197905] = {
true,
false,
"orchid",
},
[230748] = {
true,
false,
"snow",
},
[82590] = {
true,
false,
"orchid",
},
[138465] = {
true,
false,
"peachpuff",
},
},
["aura_show_debuffs_personal"] = false,
["aura_timer_text_font"] = "Expressway",
["aura_grow_direction"] = 3,
["extra_icon_timer_font"] = "Expressway",
["extra_icon_timer_size"] = 7,
["not_affecting_combat_alpha"] = 0.3999999761581421,
["aura_show_offensive_cd"] = true,
["aura_show_important"] = false,
["extra_icon_stack_font"] = "Expressway",
["aura_alpha"] = 1,
["aura_height"] = 13,
["resources"] = {
["scale"] = 0.800000011920929,
},
["castbar_target_font"] = "Expressway",
["cast_statusbar_bgtexture"] = "Soda",
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["pet_height_scale"] = 0.9999999403953552,
["target_highlight"] = false,
["cast_statusbar_spark_filloninterrupt"] = false,
["ui_parent_target_strata"] = "BACKGROUND",
["extra_icon_stack_size"] = 7,
["aura_show_buff_by_the_unit"] = false,
["health_selection_overlay"] = "Atrocity",
["target_shady_alpha"] = 0.2800000011920929,
["target_shady_enabled"] = false,
["tap_denied_color"] = {
0.6,
0.6,
0.6,
},
["bossmod_icons_anchor"] = {
["y"] = 0,
},
["hover_highlight_alpha"] = 0.3499999940395355,
["aura_sort"] = true,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "1.5",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "0",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateNotSelectedAlpha"] = "1",
["clampTargetNameplateToScreen"] = "1",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1",
["nameplateTargetBehindMaxDistance"] = "30",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "1",
["nameplateShowPersonalCooldowns"] = "0",
["nameplateSelfTopInset"] = "0",
["nameplateMotionSpeed"] = "0.019491784274578",
["nameplateGlobalScale"] = "1",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowEnemyPets"] = "0",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1",
["nameplateShowFriends"] = "0",
["nameplateMotion"] = "1",
["nameplateOverlapH"] = "0.79999995231628",
["nameplateMinScale"] = "1",
["nameplateLargeTopInset"] = "0.029999999329448",
["nameplateOtherTopInset"] = "0.029999999329448",
["ShowClassColorInNameplate"] = "1",
["nameplateSelfBottomInset"] = "0.3",
["nameplateShowEnemyTotems"] = "0",
["nameplateShowFriendlyGuardians"] = "0",
["NamePlateHorizontalScale"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateSelfAlpha"] = "0",
["nameplateShowFriendlyBuffs"] = "0",
["nameplateShowDebuffsOnFriendly"] = "0",
},
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["aura_cooldown_show_swipe"] = false,
["login_counter"] = 50832,
["extra_icon_caster_name"] = false,
["click_space_friendly"] = {
1,
1,
},
["profile_name"] = "Default",
["target_highlight_height"] = 11,
["extra_icon_use_blizzard_border_color"] = false,
["focus_as_target_alpha"] = true,
["target_highlight_alpha"] = 1,
["patch_version"] = 39,
["indicator_extra_raidmark"] = false,
["aura_stack_font"] = "Expressway",
["cast_statusbar_color_interrupted"] = {
0.7803921568627451,
0.2509803921568627,
0.2509803921568627,
},
["blizzard_nameplate_font"] = "Expressway",
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 8,
["extra_icon_show_timer"] = false,
["show_health_prediction"] = false,
["number_region_first_run"] = true,
["aura_timer"] = false,
["range_check_enabled"] = false,
["extra_icon_timer_outline"] = "OUTLINE",
["extra_icon_caster_font"] = "Expressway",
["aura_tracker"] = {
["buff_tracked"] = {
[336451] = false,
[330545] = false,
[213602] = false,
[336499] = false,
[462704] = false,
[338610] = false,
[333241] = false,
[344739] = false,
[343558] = false,
[389029] = false,
[343496] = true,
[312926] = true,
[166591] = true,
[317936] = false,
[197690] = false,
[1217685] = false,
[321402] = false,
[343484] = true,
[227931] = true,
[322569] = false,
[297133] = true,
[343470] = false,
[343502] = false,
[271698] = false,
[338510] = false,
[340873] = false,
[257597] = false,
[376705] = false,
[152262] = false,
[333737] = false,
[321754] = false,
[355790] = false,
[163689] = true,
[327416] = false,
[324046] = false,
[233210] = true,
[342073] = true,
[326450] = false,
[303941] = true,
[465420] = false,
},
["debuff_banned"] = {
[324260] = true,
[356995] = false,
[279303] = false,
[356329] = true,
[275335] = false,
[391191] = false,
[378015] = false,
[228354] = false,
[281242] = true,
[377540] = false,
[377445] = false,
[289467] = true,
[445836] = false,
[396719] = true,
[393957] = false,
[394021] = true,
[454029] = false,
[390276] = false,
[454824] = false,
[450538] = false,
[435203] = false,
[306965] = true,
[273977] = false,
[342240] = false,
[300013] = true,
[354052] = true,
[458478] = false,
[353354] = false,
[444826] = false,
[360277] = true,
[356372] = false,
[377359] = false,
[444828] = false,
[346562] = true,
[390155] = false,
[389806] = true,
[391140] = false,
[375583] = true,
[344754] = true,
[375901] = false,
[204167] = false,
[444633] = false,
[459560] = false,
[30213] = false,
[457133] = false,
[451531] = false,
[376974] = false,
[390271] = false,
[115804] = false,
[443404] = false,
[431625] = false,
[228600] = false,
[204206] = false,
[374557] = false,
[444834] = false,
[358379] = true,
[204301] = false,
[359078] = true,
[2818] = false,
[205708] = false,
[449217] = false,
[370898] = false,
[440772] = false,
[279426] = true,
[473602] = false,
[269576] = false,
[458169] = false,
[55078] = false,
[321330] = true,
[453599] = false,
[459941] = false,
[391403] = true,
[454025] = false,
[58180] = false,
[392388] = true,
[352534] = true,
[55095] = false,
[331016] = false,
[294934] = true,
[394036] = false,
[387881] = true,
[258883] = false,
[271049] = false,
[425154] = false,
[273836] = true,
[331653] = true,
[390232] = false,
[394328] = true,
[211793] = false,
[452229] = false,
[256148] = true,
[387096] = false,
[383312] = false,
[283649] = true,
[390181] = false,
[391356] = false,
[391568] = true,
[430589] = false,
[196840] = false,
[321538] = false,
[420144] = false,
[392490] = false,
[410790] = false,
[115994] = false,
},
["buff_banned"] = {
[333579] = true,
[338857] = true,
[302564] = true,
[414661] = true,
[236502] = true,
[359078] = true,
[396109] = true,
[216777] = true,
[209746] = true,
[333575] = true,
[383648] = true,
[343553] = true,
[432778] = true,
[344240] = true,
[292664] = true,
[434745] = false,
[343613] = false,
[286145] = true,
[327416] = true,
[344426] = true,
[323961] = true,
[375583] = true,
[396113] = true,
[373305] = true,
[396098] = true,
[396106] = true,
},
["debuff_tracked"] = {
[462704] = false,
[114404] = false,
[442204] = true,
[439208] = false,
[322557] = false,
[461904] = false,
[323059] = false,
[453] = false,
[335372] = false,
[355689] = false,
},
},
["hide_friendly_castbars"] = true,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1.25,
},
},
["bossmod_cooldown_text_enabled"] = false,
["cast_statusbar_color_channeling"] = {
1,
0.7019608020782471,
nil,
1,
},
["indicator_elite"] = false,
["dps"] = {
["colors"] = {
["solo"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["notontank"] = {
0.5058823823928833,
0.4235294461250305,
0.9137255549430847,
},
["aggro"] = {
0.5058823823928833,
0.4235294461250305,
0.9137255549430847,
},
["noaggro"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["pulling"] = {
nil,
0.7725490196078432,
0.6588235294117647,
},
},
},
["cast_statusbar_color_finished"] = {
0.392156862745098,
0.996078431372549,
0.6392156862745098,
},
["aura2_grow_direction"] = 1,
["indicator_faction"] = false,
["range_check_alpha_friendlies"] = 0.8999999761581421,
["aura_width2"] = 16,
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["auto_toggle_stacking"] = {
["party"] = false,
["raid"] = false,
["arena"] = false,
["world"] = false,
},
["indicator_pet"] = false,
["cast_statusbar_spark_width"] = 8,
["auto_toggle_enemy"] = {
["party"] = false,
["raid"] = false,
["arena"] = false,
["world"] = false,
},
},
["Default"] = {
["focus_as_target_alpha"] = true,
["extra_icon_use_blizzard_border_color"] = false,
["aura_sort"] = true,
["npcs_renamed"] = {
[173044] = "Stitcher",
[190381] = "Rotburst",
[216340] = "Sentry",
[179733] = "Fish Stick",
[207796] = "Burning",
[230740] = "Shreddinator",
[114632] = "Attendant",
[214012] = "Dark ",
[204560] = "Incorporeal",
[214287] = "Bad Totem",
[194897] = "Stormsurge Totem",
[164707] = "Purple Slime",
[227300] = "Big Spawn",
[197219] = "Big Lasher",
[214350] = "Turned",
[151657] = "Bomb",
[144298] = "Mk III",
[165010] = "Purple Slime",
[192333] = "Alpha",
[114627] = "Terror",
[176523] = "Painsmith",
[229537] = "Emissary",
[199368] = "Big Crystal",
[174843] = "Maitre D",
[220401] = "Detector",
[98521] = "Etheldrin",
},
["saved_cvars_last_change"] = {
["nameplateShowOnlyNames"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateLargeTopInset"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateShowPersonalCooldowns"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplatePersonalShowAlways"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateMotionSpeed"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateShowFriendlyNPCs"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateSelectedScale"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateOverlapH"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateShowFriendlyBuffs"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateOverlapV"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateMotion"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateShowSelf"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateLargerScale"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateOtherTopInset"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateSelfScale"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateSelfBottomInset"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplatePlayerMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateSelfTopInset"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateOccludedAlphaMult"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateSelfAlpha"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateShowEnemies"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateShowFriends"] = "Interface/AddOns/Plater/Plater.lua:1611",
["NamePlateVerticalScale"] = "Interface/AddOns/Plater/Plater.lua:1611",
},
["aura_cache_by_name"] = {
},
["blizzard_nameplate_font_override_enabled"] = true,
["target_shady_enabled"] = false,
["aura2_y_offset"] = 3,
["extra_icon_caster_size"] = 12,
["buffs_on_aura2"] = true,
["health_selection_overlay"] = "Melli",
["expansion_triggerwipe"] = {
[10] = true,
[9] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.7803922295570374,
0.250980406999588,
0.250980406999588,
1,
},
["bossmod_support_bars_enabled"] = false,
["color_override_colors"] = {
[3] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
[4] = {
0.8509804606437683,
0.8156863451004028,
0.5882353186607361,
},
[5] = {
0.5058823823928833,
0.7803922295570374,
0.5137255191802979,
},
},
["npc_cache"] = {
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
"enUS",
},
[194241] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
},
[183495] = {
"Twisted Worldeater",
"Sepulcher of the First Ones",
},
[190404] = {
"Subterranean Proto-Dragon",
"Halls of Infusion",
},
[185032] = {
"Taskmaster Xy'pro",
"Sepulcher of the First Ones",
},
[183497] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[164563] = {
"Vicious Gargon",
"Halls of Atonement",
"enUS",
},
[210109] = {
"Earth Infused Golem",
"The Rookery",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[200387] = {
"Shambling Infester",
"Temple of the Jade Serpent",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[167892] = {
"Tormented Soul",
"Halls of Atonement",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
},
[151773] = {
"Junkyard D.0.G.",
"Operation: Mechagon",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
},
[211904] = {
"Tainted Treant",
"Amirdrassil, the Dream's Hope",
},
[227513] = {
"Tala",
"The Spiral Weave",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[180433] = {
"Wandering Pulsar",
"Tazavesh, the Veiled Market",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
"enUS",
},
[168153] = {
"Plagueroc",
"Plaguefall",
},
[152033] = {
"Inconspicuous Plant",
"Operation: Mechagon",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
},
[102404] = {
"Stoneclaw Grubmaster",
"Neltharion's Lair",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
},
[176598] = {
"Torment Golem",
"Torghast, Tower of the Damned",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
},
[129527] = {
"Bilge Rat Buccaneer",
"Freehold",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[101637] = {
"Valarjar Aspirant",
"Halls of Valor",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
},
[175576] = {
"Containment Cell",
"Tazavesh, the Veiled Market",
"enUS",
},
[184020] = {
"Hulking Berserker",
"Uldaman: Legacy of Tyr",
},
[168156] = {
"Remornia",
"Castle Nathria",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
"enUS",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
},
[244922] = {
"Shadowguard Phaseblade",
"Manaforge Omega",
"enUS",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
"enUS",
},
[164578] = {
"Stitchflesh's Creation",
"The Necrotic Wake",
},
[150250] = {
"Pistonhead Blaster",
"Operation: Mechagon",
},
[220616] = {
"Corridor Sleeper",
"Darkflame Cleft",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
"enUS",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[215755] = {
"Ascended Overseer",
"Khaz Algar",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
"enUS",
},
[225479] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[199124] = {
"Primalist Chillblaster",
"Vault of the Incarnates",
},
[215756] = {
"Ascended Webwarden",
"Khaz Algar",
},
[198869] = {
"Sundered Devastator",
"Aberrus, the Shadowed Crucible",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[150253] = {
"Weaponized Crawler",
"Operation: Mechagon",
},
[82579] = {
"Grom'kar Far Seer",
"Grimrail Depot",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[190426] = {
"Decay Totem",
"Brackenhide Hollow",
},
[198870] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
},
[177889] = {
"Mawforged Souljudge",
"Sanctum of Domination",
},
[84499] = {
"Entanglement",
"The Everbloom",
},
[217039] = {
"Nerubian Hauler",
"Ara-Kara, City of Echoes",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
"enUS",
},
[177891] = {
"Mawforged Summoner",
"Sanctum of Domination",
},
[190174] = {
"Hypnosis Bat",
"Tazavesh, the Veiled Market",
},
[190686] = {
"Frozen Destroyer",
"Vault of the Incarnates",
},
[168425] = {
"Forsworn Annihilator",
"Spires of Ascension",
},
[197595] = {
"Earthwrought Smasher",
"Vault of the Incarnates",
},
[220368] = {
"Failed Batch",
"Cinderbrew Meadery",
},
[222927] = {
"Sacred Flame Vintner",
"Priory of the Sacred Flame",
"enUS",
},
[94224] = {
"Petrifying Totem",
"Neltharion's Lair",
},
[202969] = {
"Empty Recollection",
"Aberrus, the Shadowed Crucible",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
"enUS",
},
[190688] = {
"Blazing Fiend",
"Vault of the Incarnates",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
},
[242631] = {
"Overcharged Sentinel",
"Eco-Dome Al'dani",
"enUS",
},
[234955] = {
"Wastelander Pactspeaker",
"Eco-Dome Al'dani",
"enUS",
},
[202971] = {
"Null Glimmer",
"Aberrus, the Shadowed Crucible",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[190690] = {
"Thundering Ravager",
"Vault of the Incarnates",
},
[81432] = {
"Grom'kar Technician",
"Iron Docks",
},
[234957] = {
"Wastelander Ritualist",
"Eco-Dome Al'dani",
"enUS",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
},
[203230] = {
"Dragonfire Golem",
"Aberrus, the Shadowed Crucible",
},
[197857] = {
"Gutstabber",
"Brackenhide Hollow",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[101008] = {
"Stinging Swarm",
"Black Rook Hold",
},
[135169] = {
"Spirit Drain Totem",
"The Underrot",
},
[170480] = {
"Atal'ai Deathwalker",
"De Other Side",
},
[191206] = {
"Primalist Mage",
"Vault of the Incarnates",
},
[222167] = {
"Brood Infuser",
"Nerub-ar Palace",
},
[40925] = {
"Tainted Sentry",
"Throne of the Tides",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
},
[234962] = {
"Wastelander Farstalker",
"Eco-Dome Al'dani",
"enUS",
},
[231380] = {
"Undercrawler",
"Operation: Floodgate",
"enUS",
},
[162038] = {
"Regal Mistdancer",
"Sanguine Depths",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[45915] = {
"Armored Mistral",
"The Vortex Pinnacle",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
},
[184300] = {
"Ebonstone Golem",
"Uldaman: Legacy of Tyr",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[170483] = {
"Atal'ai Deathwalker's Spirit",
"De Other Side",
},
[76446] = {
"Shadowmoon Enslaver",
"Shadowmoon Burial Grounds",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[114316] = {
"Baroness Dorothea Millstipe",
"Return to Karazhan",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
},
[224731] = {
"Web Marauder",
"City of Threads",
},
[184303] = {
"Skittering Crawler",
"Uldaman: Legacy of Tyr",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
},
[156157] = {
"Coldheart Ascendant",
"Torghast, Tower of the Damned",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
},
[114317] = {
"Lady Catriona Von'Indi",
"Return to Karazhan",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[224221] = {
"Twilight Overseer",
"Grim Batol",
},
[175861] = {
"Glacial Spike",
"Sanctum of Domination",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
"enUS",
},
[86684] = {
"Feral Lasher",
"The Everbloom",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
},
[39392] = {
"Faceless Corruptor",
"Grim Batol",
},
[170234] = {
"Oppressive Banner",
"Theater of Pain",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[164861] = {
"Spriggan Barkbinder",
"De Other Side",
},
[114319] = {
"Lady Keira Berrybuck",
"Return to Karazhan",
},
[239833] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
"enUS",
},
[242648] = {
"Nascent Shadowguard",
"Manaforge Omega",
"enUS",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[56792] = {
"Figment of Doubt",
"Temple of the Jade Serpent",
"enUS",
},
[239834] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[221667] = {
"Lost Watcher",
"Nerub-ar Palace",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
},
[155908] = {
"Deathspeaker",
"Torghast, Tower of the Damned",
},
[174843] = {
"Stoneborn Maitre D'",
"Castle Nathria",
},
[205804] = {
"Risen Dragon",
"Dawn of the Infinite",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[102295] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[178171] = {
"Stormforged Guardian",
"Tazavesh, the Veiled Market",
"enUS",
},
[180474] = {
"Soul Reaver",
"Sanctum of Domination",
},
[183033] = {
"Grim Reflection",
"Sepulcher of the First Ones",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[227300] = {
"Bile-Soaked Spawn",
"Nerub-ar Palace",
},
[182778] = {
"Collapsing Quasar",
"Sepulcher of the First Ones",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
},
[59544] = {
"The Nodding Tiger",
"Temple of the Jade Serpent",
"enUS",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
},
[213741] = {
"Voidstone Awakened",
"The Rookery",
"enUS",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
"enUS",
},
[191225] = {
"Tarasek Earthreaver",
"Vault of the Incarnates",
},
[129548] = {
"Blacktooth Brute",
"Freehold",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
},
[196856] = {
"Primal Stormsentry",
"Vault of the Incarnates",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[80805] = {
"Makogg Emberblade",
"Iron Docks",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
},
[223724] = {
"Backfill Barrel",
"Liberation of Undermine",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[164873] = {
"Runestag Elderhorn",
"De Other Side",
},
[82597] = {
"Grom'kar Captain",
"Grimrail Depot",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
},
[164363] = {
"Undying Stonefiend",
"Halls of Atonement",
"enUS",
},
[191230] = {
"Dragonspawn Flamebender",
"Vault of the Incarnates",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[220401] = {
"Pale Priest",
"City of Threads",
},
[80935] = {
"Grom'kar Boomer",
"Grimrail Depot",
},
[192767] = {
"Primal Icebulk",
"Vault of the Incarnates",
},
[191232] = {
"Drakonid Stormbringer",
"Vault of the Incarnates",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
},
[129552] = {
"Monzumi",
"Atal'Dazar",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
},
[80936] = {
"Grom'kar Grenadier",
"Grimrail Depot",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
},
[213751] = {
"Dynamite Mine Cart",
"Darkflame Cleft",
},
[114584] = {
"Phantom Crew",
"Return to Karazhan",
},
[59547] = {
"Jiang",
"Temple of the Jade Serpent",
"enUS",
},
[168718] = {
"Forsworn Warden",
"Spires of Ascension",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
"enUS",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
},
[98081] = {
"Bellowing Idol",
"Neltharion's Lair",
},
[150297] = {
"Mechagon Renormalizer",
"Operation: Mechagon",
},
[84520] = {
"Pitwarden Gwarnok",
"Iron Docks",
},
[40357] = {
"Invoked Shadowflame Spirit",
"Grim Batol",
},
[80938] = {
"Grom'kar Hulk",
"Grimrail Depot",
},
[229619] = {
"Blazing Fueldemon",
"Liberation of Undermine",
"enUS",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
},
[227573] = {
"Anub'vir",
"Earthcrawl Mines",
},
[214012] = {
"Dark Colossus",
"Amirdrassil, the Dream's Hope",
},
[184331] = {
"Infinite Timereaver",
"Uldaman: Legacy of Tyr",
},
[153882] = {
"Deadsoul Spirit",
"Torghast, Tower of the Damned",
},
[221945] = {
"Forgotten Harbinger",
"Nerub-ar Palace",
},
[193799] = {
"Rotchanting Totem",
"Brackenhide Hollow",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
},
[163862] = {
"Defender of Many Eyes",
"Plaguefall",
},
[227575] = {
"Armored Shellguard",
"Earthcrawl Mines",
},
[40166] = {
"Molten Giant",
"Grim Batol",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
},
[189706] = {
"Chaotic Essence",
"Castle Nathria",
},
[151325] = {
"Alarm-o-Bot",
"Operation: Mechagon",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
"enUS",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
},
[165911] = {
"Loyal Creation",
"The Necrotic Wake",
},
[238068] = {
"Geargrinder Rager",
"Liberation of Undermine",
"enUS",
},
[184335] = {
"Infinite Agent",
"Uldaman: Legacy of Tyr",
},
[227578] = {
"Nerubian Webcaster",
"Earthcrawl Mines",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
},
[193291] = {
"Apex Blazewing",
"Neltharus",
},
[45924] = {
"Turbulent Squall",
"The Vortex Pinnacle",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
},
[165913] = {
"Ghastly Parishioner",
"Halls of Atonement",
"enUS",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
},
[114334] = {
"Damaged Golem",
"Return to Karazhan",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
},
[227581] = {
"Nerubian Oracle",
"Earthcrawl Mines",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
},
[45477] = {
"Gust Soldier",
"The Vortex Pinnacle",
"enUS",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[187154] = {
"Unstable Curator",
"The Azure Vault",
},
[167964] = {
"4.RF-4.RF",
"De Other Side",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
},
[168988] = {
"Overgrowth",
"Mists of Tirna Scithe",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[80816] = {
"Ahri'ok Dugru",
"Iron Docks",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
},
[40936] = {
"Faceless Watcher",
"Throne of the Tides",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
},
[192786] = {
"Qalashi Plunderer",
"Neltharus",
},
[197904] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
},
[115488] = {
"Infused Pyromancer",
"Return to Karazhan",
},
[171805] = {
"Research Scribe",
"Sanguine Depths",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[192787] = {
"Qalashi Spinecrusher",
"Neltharus",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
},
[205326] = {
"Gust Soldier",
"The Vortex Pinnacle",
},
[84400] = {
"Gnarled Ancient",
"The Everbloom",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
},
[204560] = {
"Incorporeal Being",
"The Azure Vault",
},
[233474] = {
"Gallagio Goon",
"Liberation of Undermine",
},
[135474] = {
"Thistle Acolyte",
"UNKNOWN",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
},
[196117] = {
"Crystal Thrasher",
"The Azure Vault",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
},
[192791] = {
"Nokhud Warspear",
"The Nokhud Offensive",
},
[182045] = {
"Necrotic Ritualist",
"Sepulcher of the First Ones",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[189466] = {
"Irontorch Commander",
"Neltharus",
},
[97068] = {
"Storm Drake",
"Halls of Valor",
"enUS",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
"enUS",
},
[135989] = {
"Shieldbearer of Zul",
"Atal'Dazar",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
},
[214287] = {
"Earth Burst Totem",
"The Stonevault",
},
[83763] = {
"Grom'kar Technician",
"Iron Docks",
},
[59553] = {
"The Songbird Queen",
"Temple of the Jade Serpent",
},
[199703] = {
"Magma Mystic",
"Aberrus, the Shadowed Crucible",
},
[59873] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
"enUS",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[197145] = {
"Colossal Stormfiend",
"Vault of the Incarnates",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
},
[197146] = {
"Qalashi Emissary",
"Vault of the Incarnates",
},
[189470] = {
"Lava Flare",
"Neltharus",
},
[188703] = {
"Protoform Barrier",
"Castle Nathria",
},
[189471] = {
"Qalashi Blacksmith",
"Neltharus",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
},
[168747] = {
"Venomfang",
"Plaguefall",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[100526] = {
"Tormented Bloodseeker",
"Darkheart Thicket",
},
[197406] = {
"Aggravated Skitterfly",
"Algeth'ar Academy",
},
[240905] = {
"Arcane Collector",
"Manaforge Omega",
"enUS",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
},
[156212] = {
"Coldheart Agent",
"Torghast, Tower of the Damned",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[162099] = {
"General Kaal",
"Sanguine Depths",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
},
[212765] = {
"Void Bound Despoiler",
"The Stonevault",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
},
[163894] = {
"Blighted Spinebreaker",
"Plaguefall",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[180015] = {
"Burly Deckhand",
"Tazavesh, the Veiled Market",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
},
[197671] = {
"Volatile Infuser",
"Vault of the Incarnates",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
},
[135240] = {
"Soul Essence",
"Waycrest Manor",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[166969] = {
"Baroness Frieda",
"Castle Nathria",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
},
[177716] = {
"So' Cartel Assassin",
"Tazavesh, the Veiled Market",
"enUS",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[83389] = {
"Ironwing Flamespitter",
"Iron Docks",
},
[166970] = {
"Lord Stavros",
"Castle Nathria",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[166971] = {
"Castellan Niklaus",
"Castle Nathria",
},
[152898] = {
"Deadsoul Chorus",
"Torghast, Tower of the Damned",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[83390] = {
"Thunderlord Wrangler",
"Iron Docks",
},
[231197] = {
"Bubbles",
"Operation: Floodgate",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[189234] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[198702] = {
"Unstable Frost",
"Vault of the Incarnates",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[167998] = {
"Portal Guardian",
"Theater of Pain",
},
[235805] = {
"Shadowguard Darkmage",
"Manaforge Omega",
"enUS",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
},
[104246] = {
"Duskwatch Guard",
"Court of Stars",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
},
[235807] = {
"Shadowguard Acolyte",
"Manaforge Omega",
"enUS",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
},
[65317] = {
"Xiang",
"Temple of the Jade Serpent",
"enUS",
},
[152905] = {
"Tower Sentinel",
"Torghast, Tower of the Damned",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[97083] = {
"King Ranulf",
"Halls of Valor",
},
[176959] = {
"Mawsworn Soulmage",
"Sanctum of Domination",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
"enUS",
},
[198709] = {
"Unstable Earth",
"Vault of the Incarnates",
},
[205618] = {
"Thorak Greenscale",
"Aberrus, the Shadowed Crucible",
},
[216621] = {
"Nerubian Webspinner",
"Earthcrawl Mines",
"enUS",
},
[242209] = {
"Overgorged Mite",
"Eco-Dome Al'dani",
"enUS",
},
[205619] = {
"Sarek Cinderbreath",
"Aberrus, the Shadowed Crucible",
},
[133463] = {
"Venture Co. War Machine",
"The MOTHERLODE!!",
},
[205620] = {
"Malgosa Spellbinder",
"Aberrus, the Shadowed Crucible",
},
[168007] = {
"Empowered Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[237861] = {
"Fractillus",
"Manaforge Omega",
"enUS",
},
[179010] = {
"Fatespawn Anomaly",
"Sanctum of Domination",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[220974] = {
"Bazaar Guard",
"Khaz Algar",
},
[96574] = {
"Stormforged Sentinel",
"Halls of Valor",
"enUS",
},
[205622] = {
"Krono Sandtongue",
"Aberrus, the Shadowed Crucible",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
},
[115765] = {
"Abstract Nullifier",
"Return to Karazhan",
},
[231978] = {
"Sharpshot Sentry",
"Liberation of Undermine",
},
[205623] = {
"Drazos Blackwing",
"Aberrus, the Shadowed Crucible",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
},
[98366] = {
"Ghostly Retainer",
"Black Rook Hold",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[240935] = {
"Nascent Shadowguard",
"Manaforge Omega",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
},
[184131] = {
"Earthen Guardian",
"Uldaman: Legacy of Tyr",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[165197] = {
"Skeletal Monstrosity",
"The Necrotic Wake",
},
[208440] = {
"Infinite Slayer",
"Dawn of the Infinite",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
},
[195135] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[92610] = {
"Understone Drummer",
"Neltharion's Lair",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
},
[227632] = {
"Venombite",
"Earthcrawl Mines",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[243241] = {
"Volatile Manifestation",
"Manaforge Omega",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
},
[98368] = {
"Ghostly Protector",
"Black Rook Hold",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[156244] = {
"Winged Automaton",
"Torghast, Tower of the Damned",
},
[171341] = {
"Bladebeak Hatchling",
"De Other Side",
},
[151127] = {
"Lord of Torment",
"Torghast, Tower of the Damned",
},
[115640] = {
"Fuming Imp",
"Faronaar",
},
[156245] = {
"Grand Automaton",
"Torghast, Tower of the Damned",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
},
[227635] = {
"Kas'dru",
"Earthcrawl Mines",
},
[199233] = {
"Flamescale Captain",
"Vault of the Incarnates",
},
[92612] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
},
[171343] = {
"Bladebeak Matriarch",
"De Other Side",
},
[186696] = {
"Quaking Totem",
"Uldaman: Legacy of Tyr",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
},
[162133] = {
"General Kaal",
"Sanguine Depths",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[176974] = {
"Soul Reaver",
"Sanctum of Domination",
},
[115642] = {
"Umbral Imp",
"Faronaar",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
},
[157017] = {
"Lithic Watcher",
"Torghast, Tower of the Damned",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
},
[184140] = {
"Xy Acolyte",
"Sepulcher of the First Ones",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[193352] = {
"Hextrick Totem",
"Brackenhide Hollow",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
},
[198214] = {
"Broodguardian Ziruss",
"Vault of the Incarnates",
},
[85194] = {
"Entanglement",
"The Everbloom",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
},
[231223] = {
"Disturbed Kelp",
"Operation: Floodgate",
"enUS",
},
[207939] = {
"Baron Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[115388] = {
"King",
"Return to Karazhan",
},
[229433] = {
"Skiggy Muckheimer",
"Liberation of Undermine",
"enUS",
},
[164185] = {
"Echelon",
"Halls of Atonement",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
},
[229434] = {
"Melbo the Magnificent",
"Liberation of Undermine",
},
[201288] = {
"Sundered Champion",
"Aberrus, the Shadowed Crucible",
},
[107073] = {
"Duskwatch Reinforcement",
"Court of Stars",
},
[127799] = {
"Dazar'ai Honor Guard",
"Atal'Dazar",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
},
[151649] = {
"Defense Bot Mk I",
"Operation: Mechagon",
"enUS",
},
[234041] = {
"Forge Sentinel",
"Manaforge Omega",
"enUS",
},
[248626] = {
"Nascent Darkmage",
"Manaforge Omega",
"enUS",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[207943] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[207177] = {
"Infinite Watchkeeper",
"Dawn of the Infinite",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
},
[190034] = {
"Blazebound Destroyer",
"Ruby Life Pools",
},
[178008] = {
"Decrepit Orb",
"Sanctum of Domination",
},
[234557] = {
"Support Rig",
"Liberation of Undermine",
},
[165471] = {
"Nathrian Duelist",
"Castle Nathria",
},
[114624] = {
"Arcane Warden",
"Return to Karazhan",
},
[194897] = {
"Stormsurge Totem",
"The Nokhud Offensive",
},
[208459] = {
"Fiery Treant",
"Amirdrassil, the Dream's Hope",
},
[194898] = {
"Primalist Arcblade",
"The Nokhud Offensive",
},
[52019] = {
"Skyfall Star",
"The Vortex Pinnacle",
},
[220742] = {
"Guardian Tentacle",
"The Sinkhole",
},
[207949] = {
"Zealous Templar",
"Priory of the Sacred Flame",
"enUS",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[164451] = {
"Dessia the Decapitator",
"Theater of Pain",
},
[187224] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
},
[96587] = {
"Felsworn Infester",
"Vault of the Wardens",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
},
[83026] = {
"Siegemaster Olugar",
"Iron Docks",
},
[234051] = {
"Netherfang Soulbarker",
"Manaforge Omega",
"enUS",
},
[170850] = {
"Raging Bloodhorn",
"Theater of Pain",
},
[208208] = {
"Alliance Destroyer",
"Dawn of the Infinite",
},
[114627] = {
"Shrieking Terror",
"Return to Karazhan",
},
[115395] = {
"Queen",
"Return to Karazhan",
},
[81236] = {
"Grimrail Technician",
"Grimrail Depot",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
},
[165479] = {
"Court Enforcer",
"Castle Nathria",
},
[203861] = {
"Horde Destroyer",
"Dawn of the Infinite",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
},
[214608] = {
"Screaming Soul",
"Amirdrassil, the Dream's Hope",
},
[186206] = {
"Bonecrusher",
"Brackenhide Hollow",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
},
[186208] = {
"Rotbow Stalker",
"Brackenhide Hollow",
},
[180323] = {
"Fatespawn Monstrosity",
"Sanctum of Domination",
},
[223822] = {
"Queen's Guard Re'zah",
"Nerub-ar Palace",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[87252] = {
"Unruly Ogron",
"Iron Docks",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
},
[134012] = {
"Taskmaster Askari",
"The MOTHERLODE!!",
},
[167532] = {
"Heavin the Breaker",
"Theater of Pain",
},
[180070] = {
"Mawsworn Scryer",
"Sanctum of Domination",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
},
[167533] = {
"Advent Nevermore",
"Theater of Pain",
},
[101326] = {
"Honored Ancestor",
"Halls of Valor",
},
[157810] = {
"Mawsworn Endbringer",
"Torghast, Tower of the Damned",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
},
[102094] = {
"Risen Swordsman",
"Black Rook Hold",
},
[167534] = {
"Rek the Hardened",
"Theater of Pain",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
},
[235853] = {
"Waygate Watcher",
"Manaforge Omega",
"enUS",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[102095] = {
"Risen Lancer",
"Black Rook Hold",
},
[167536] = {
"Harugia the Bloodthirsty",
"Theater of Pain",
},
[114633] = {
"Spectral Valet",
"Return to Karazhan",
},
[211291] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[111563] = {
"Duskwatch Guard",
"Court of Stars",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[197219] = {
"Vile Lasher",
"Algeth'ar Academy",
},
[187240] = {
"Drakonid Breaker",
"The Azure Vault",
},
[154744] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[167538] = {
"Dokigg the Brutalizer",
"Theater of Pain",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
},
[205408] = {
"Infinite Timeslicer",
"Dawn of the Infinite",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
"enUS",
},
[198500] = {
"Council Earthcaller",
"Vault of the Incarnates",
},
[196198] = {
"Algeth'ar Security",
"Algeth'ar Academy",
},
[198501] = {
"Council Icecaller",
"Vault of the Incarnates",
},
[115019] = {
"Coldmist Widow",
"Return to Karazhan",
},
[198502] = {
"Council Stormcaller",
"Vault of the Incarnates",
},
[180335] = {
"Cartel Smuggler",
"Tazavesh, the Veiled Market",
"enUS",
},
[213343] = {
"Forge Loader",
"The Stonevault",
},
[150142] = {
"Scrapbone Trashtosser",
"Operation: Mechagon",
},
[196200] = {
"Algeth'ar Enforcer",
"Algeth'ar Academy",
},
[198503] = {
"Council Flamecaller",
"Vault of the Incarnates",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
"enUS",
},
[168310] = {
"Plagueroc",
"Plaguefall",
},
[115020] = {
"Arcanid",
"Return to Karazhan",
},
[101075] = {
"Wormspeaker Devout",
"Neltharion's Lair",
},
[233815] = {
"Loom'ithar",
"Manaforge Omega",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
},
[196203] = {
"Ethereal Restorer",
"Algeth'ar Academy",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
"enUS",
},
[239702] = {
"Watcher Gaz'Kreth",
"Manaforge Omega",
"enUS",
},
[233817] = {
"Forgeweaver Araz",
"Manaforge Omega",
"enUS",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[171384] = {
"Research Scribe",
"Sanguine Depths",
},
[120651] = {
"Explosives",
"Operation: Mechagon",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[115406] = {
"Knight",
"Return to Karazhan",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
},
[166524] = {
"Deathwalker",
"Theater of Pain",
},
[95832] = {
"Valarjar Shieldmaiden",
"Halls of Valor",
"enUS",
},
[234843] = {
"Phase Stalker",
"Manaforge Omega",
"enUS",
},
[241240] = {
"Budding Silkgrub",
"Manaforge Omega",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[224609] = {
"Twilight Destroyer",
"Grim Batol",
},
[206698] = {
"Fanatical Conjuror",
"Priory of the Sacred Flame",
"enUS",
},
[186740] = {
"Arcane Construct",
"The Azure Vault",
},
[211816] = {
"Bazaar Sentry",
"Khaz Algar",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
},
[241242] = {
"Shadowguard Harvester",
"Manaforge Omega",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[183671] = {
"Monstrous Soul",
"Sepulcher of the First Ones",
},
[157572] = {
"Mawsworn Firecaller",
"Torghast, Tower of the Damned",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
},
[164737] = {
"Brood Ambusher",
"Plaguefall",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
},
[246874] = {
"Influx Warden",
"Manaforge Omega",
"enUS",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[165762] = {
"Soul Infuser",
"Castle Nathria",
},
[40577] = {
"Naz'jar Sentinel",
"Throne of the Tides",
"enUS",
},
[187768] = {
"Dathea Stormlash",
"Vault of the Incarnates",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[165763] = {
"Vile Occultist",
"Castle Nathria",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[189816] = {
"Dathea Stormlash",
"Vault of the Incarnates",
},
[179837] = {
"Tracker Zo'korss",
"Tazavesh, the Veiled Market",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[130635] = {
"Stonefury",
"The MOTHERLODE!!",
},
[188026] = {
"Frost Tomb",
"Vault of the Incarnates",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[76518] = {
"Ritual of Bones",
"Shadowmoon Burial Grounds",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[198263] = {
"Stalwart Broodwarden",
"Vault of the Incarnates",
},
[169861] = {
"Ickor Bileflesh",
"Plaguefall",
},
[180864] = {
"High Torturer",
"Sanctum of Domination",
},
[183423] = {
"Reformed Bachelor",
"Return to Karazhan",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
"enUS",
},
[190588] = {
"Tectonic Crusher",
"Vault of the Incarnates",
},
[150160] = {
"Scrapbone Bully",
"Operation: Mechagon",
},
[173189] = {
"Nathrian Hawkeye",
"Castle Nathria",
},
[208244] = {
"Nerubian Threadmancer",
"Skittering Breach",
"enUS",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
"enUS",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
},
[183425] = {
"Wholesome Host",
"Return to Karazhan",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[245092] = {
"Burrowing Creeper",
"Eco-Dome Al'dani",
"enUS",
},
[165515] = {
"Depraved Darkblade",
"Halls of Atonement",
"enUS",
},
[126928] = {
"Irontide Corsair",
"Freehold",
},
[88163] = {
"Grom'kar Cinderseer",
"Grimrail Depot",
},
[86372] = {
"Melded Berserker",
"The Everbloom",
},
[199547] = {
"Frostforged Zealot",
"Vault of the Incarnates",
},
[186242] = {
"Gutstabber",
"Brackenhide Hollow",
},
[179334] = {
"Portalmancer Zo'honn",
"Tazavesh, the Veiled Market",
"enUS",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
},
[150165] = {
"Slime Elemental",
"Operation: Mechagon",
},
[199549] = {
"Flamesworn Herald",
"Vault of the Incarnates",
},
[228463] = {
"Flame Reel Assistant",
"Liberation of Undermine",
},
[179847] = {
"Shadowsteel Horror",
"Sanctum of Domination",
},
[176521] = {
"Stygian Abductor",
"Sanctum of Domination",
},
[205435] = {
"Epoch Ripper",
"Dawn of the Infinite",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
},
[180104] = {
"Tangling Bloom",
"The Shadowlands",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
},
[176523] = {
"Painsmith Raznal",
"Sanctum of Domination",
},
[150168] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
"enUS",
},
[150169] = {
"Toxic Lurker",
"Operation: Mechagon",
},
[165010] = {
"Congealed Slime",
"Plaguefall",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[114266] = {
"Shoreline Tidespeaker",
"Return to Karazhan",
},
[179852] = {
"Soulless Vengeance",
"The Shadowlands",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[214140] = {
"Naz'jar Sentinel",
"Throne of the Tides",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
"enUS",
},
[118489] = {
"Corrupted Risen Soldier",
"Black Rook Hold - Artifact Challenge",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
},
[200836] = {
"Obsidian Guard",
"Aberrus, the Shadowed Crucible",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[154014] = {
"Imprisoned Cabalist",
"Torghast, Tower of the Damned",
},
[118491] = {
"Corrupted Risen Mage",
"Black Rook Hold - Artifact Challenge",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
"enUS",
},
[188302] = {
"Reconfiguration Emitter",
"Castle Nathria",
},
[200840] = {
"Flamebound Huntsman",
"Aberrus, the Shadowed Crucible",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
},
[206214] = {
"Infinite Infiltrator",
"Dawn of the Infinite",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[122970] = {
"Shadowblade Stalker",
"Atal'Dazar",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
},
[144295] = {
"Mechagon Mechanic",
"Operation: Mechagon",
},
[75506] = {
"Shadowmoon Loyalist",
"Shadowmoon Burial Grounds",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
},
[164510] = {
"Shambling Arbalest",
"Theater of Pain",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
},
[155812] = {
"Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[129369] = {
"Irontide Raider",
"Siege of Boralus",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
},
[211140] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[212835] = {
"Risen Footman",
"Priory of the Sacred Flame",
"enUS",
},
[212838] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[206699] = {
"War Lynx",
"Priory of the Sacred Flame",
"enUS",
},
[164218] = {
"Lord Chamberlain",
"Halls of Atonement",
"enUS",
},
[167898] = {
"Manifestation of Envy",
"Halls of Atonement",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
},
[236995] = {
"Ravenous Destroyer",
"Eco-Dome Al'dani",
"enUS",
},
[96640] = {
"Valarjar Marksman",
"Halls of Valor",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[165415] = {
"Toiling Groundskeeper",
"Halls of Atonement",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[241832] = {
"Shielded Attendant",
"Manaforge Omega",
"enUS",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
"enUS",
},
[175517] = {
"Symbiotic Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[231176] = {
"Scaffolding",
"Operation: Floodgate",
"enUS",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[164926] = {
"Drust Boughbreaker",
"Mists of Tirna Scithe",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
},
[242649] = {
"Nascent Acolyte",
"Manaforge Omega",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
},
[165408] = {
"Halkias",
"Halls of Atonement",
"enUS",
},
[229252] = {
"Darkfuse Hyena",
"Operation: Floodgate",
"enUS",
},
[237871] = {
"Unbound Assassin",
"Manaforge Omega",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
},
[241923] = {
"Arcane Echo",
"Manaforge Omega",
"enUS",
},
[233816] = {
"Soulbinder Naazindhri",
"Manaforge Omega",
"enUS",
},
[183707] = {
"Xy Spellslinger",
"Sepulcher of the First Ones",
},
[180432] = {
"Devoted Accomplice",
"Tazavesh, the Veiled Market",
"enUS",
},
[130011] = {
"Irontide Buccaneer",
"Freehold",
},
[237872] = {
"Unbound Mage",
"Manaforge Omega",
"enUS",
},
[197149] = {
"Qalashi Lavamancer",
"Vault of the Incarnates",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
},
[115407] = {
"Rook",
"Return to Karazhan",
},
[135245] = {
"Bilge Rat Demolisher",
"Siege of Boralus",
},
[173729] = {
"Manifestation of Pride",
"Halls of Atonement",
},
[156226] = {
"Coldheart Binder",
"Torghast, Tower of the Damned",
},
[218884] = {
"Shattershell Scarab",
"Nerub-ar Palace",
"enUS",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[129372] = {
"Blacktar Bomber",
"Siege of Boralus",
},
[189338] = {
"Riverbend Chomper",
"Dragon Isles",
},
[196116] = {
"Crystal Fury",
"The Azure Vault",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
},
[212739] = {
"Consuming Voidstone",
"The Rookery",
"enUS",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
},
[223150] = {
"Ascended Voidspeaker",
"Nerub-ar Palace",
"enUS",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[100486] = {
"Risen Arcanist",
"Black Rook Hold",
},
[83761] = {
"Ogron Laborer",
"Iron Docks",
},
[231531] = {
"Territorial Bombshell",
"Liberation of Undermine",
},
[162763] = {
"Soulforged Bonereaver",
"Theater of Pain",
},
[201222] = {
"Valow, Timesworn Keeper",
"Dawn of the Infinite",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
},
[150251] = {
"Pistonhead Mechanic",
"Operation: Mechagon",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
},
[190359] = {
"Skulking Zealot",
"Halls of Infusion",
},
[97720] = {
"Blightshard Skitter",
"Neltharion's Lair",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[45926] = {
"Servant of Asaad",
"The Vortex Pinnacle",
"enUS",
},
[45704] = {
"Lurking Tempest",
"The Vortex Pinnacle",
"enUS",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
},
[220978] = {
"Skeins Guard",
"Khaz Algar",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
"enUS",
},
[127879] = {
"Shieldbearer of Zul",
"Atal'Dazar",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[114804] = {
"Spectral Charger",
"Return to Karazhan",
},
[206230] = {
"Infinite Diversionist",
"Dawn of the Infinite",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
},
[104251] = {
"Duskwatch Sentry",
"Court of Stars",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
},
[163620] = {
"Rotspew",
"The Necrotic Wake",
},
[214419] = {
"Void Cursed Crusher",
"The Rookery",
},
[237192] = {
"Giga-Juiced Technician",
"Liberation of Undermine",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[241798] = {
"Nexus-Prince Xevvos",
"Manaforge Omega",
"enUS",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
},
[184107] = {
"Runic Protector",
"Uldaman: Legacy of Tyr",
},
[173714] = {
"Mistveil Nightblossom",
"Mists of Tirna Scithe",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[176551] = {
"Vault Purifier",
"Tazavesh, the Veiled Market",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
},
[165805] = {
"Shade of Kael'thas",
"Castle Nathria",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
"enUS",
},
[214421] = {
"Coalescing Void Diffuser",
"The Rookery",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
},
[241800] = {
"Manaforged Titan",
"Manaforge Omega",
"enUS",
},
[115757] = {
"Wrathguard Flamebringer",
"Return to Karazhan",
},
[199325] = {
"Nokhud Stormcaller",
"The Nokhud Offensive",
},
[154020] = {
"Prisonbreak Cursewalker",
"Torghast, Tower of the Damned",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
},
[150143] = {
"Scrapbone Grinder",
"Operation: Mechagon",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
},
[190370] = {
"Squallbringer Cyraz",
"Halls of Infusion",
},
[168109] = {
"Empowered Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[83894] = {
"Dulhu",
"The Everbloom",
},
[130400] = {
"Irontide Crusher",
"Freehold",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
},
[240974] = {
"Shadowguard Weavemaster",
"Manaforge Omega",
"enUS",
},
[190371] = {
"Primalist Earthshaker",
"Halls of Infusion",
},
[75899] = {
"Possessed Soul",
"Shadowmoon Burial Grounds",
},
[205212] = {
"Infinite Keeper",
"Dawn of the Infinite",
},
[203812] = {
"Voice From Beyond",
"Aberrus, the Shadowed Crucible",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
},
[132820] = {
"Mudsnout Piglet",
"Skittering Hollow (Islands 5)",
},
[220986] = {
"Hollows Sentry",
"Khaz Algar",
},
[220976] = {
"Hollows Guard",
"Khaz Algar",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[241803] = {
"Nexus-Prince Ky'vor",
"Manaforge Omega",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
},
[130012] = {
"Irontide Ravager",
"Freehold",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
},
[235151] = {
"K'aresh Elemental",
"Eco-Dome Al'dani",
"enUS",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
},
[155830] = {
"Mawsworn Disciple",
"Torghast, Tower of the Damned",
},
[200943] = {
"Electrified Colossal Stormfiend",
"Vault of the Incarnates",
},
[163524] = {
"Kyrian Dark-Praetor",
"Spires of Ascension",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
"enUS",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
},
[155831] = {
"Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[237967] = {
"Discharged Giga Bomb",
"Liberation of Undermine",
},
[98810] = {
"Wrathguard Bladelord",
"Black Rook Hold",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
},
[171184] = {
"Mythresh, Sky's Talons",
"De Other Side",
},
[157571] = {
"Mawsworn Flametender",
"Torghast, Tower of the Damned",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
},
[169905] = {
"Risen Warlord",
"De Other Side",
},
[193760] = {
"Surging Ruiner",
"Vault of the Incarnates",
},
[192934] = {
"Volatile Infuser",
"Vault of the Incarnates",
},
[166396] = {
"Noble Skirmisher",
"Sanguine Depths",
},
[168882] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[165556] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[198868] = {
"Primalist Voltweaver",
"Vault of the Incarnates",
},
[195119] = {
"Primalist Shockcaster",
"Ruby Life Pools",
},
[220988] = {
"Skeins Sentry",
"Khaz Algar",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
"enUS",
},
[83578] = {
"Ogron Laborer",
"Iron Docks",
},
[236946] = {
"Wasteland Creeper",
"Manaforge Omega",
"enUS",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
"enUS",
},
[168717] = {
"Forsworn Justicar",
"Spires of Ascension",
},
[226200] = {
"Chamber Acolyte",
"Nerub-ar Palace",
},
[162047] = {
"Insatiable Brute",
"Sanguine Depths",
},
[236947] = {
"Burrowing Creeper",
"Manaforge Omega",
"enUS",
},
[196263] = {
"Nokhud Neophyte",
"The Nokhud Offensive",
},
[186284] = {
"Gutchewer Bear",
"Brackenhide Hollow",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[81984] = {
"Gnarlroot",
"The Everbloom",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[162744] = {
"Nekthara the Mangler",
"Theater of Pain",
},
[197799] = {
"Quarry Infuser",
"Vault of the Incarnates",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[198311] = {
"Flamewrought Eradicator",
"Vault of the Incarnates",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
},
[114796] = {
"Wholesome Hostess",
"Return to Karazhan",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
},
[57109] = {
"Minion of Doubt",
"Temple of the Jade Serpent",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
"enUS",
},
[242586] = {
"Arcane Manifestation",
"Manaforge Omega",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
},
[233623] = {
"Pyrotechnics",
"Liberation of Undermine",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
},
[172981] = {
"Kyrian Stitchwerk",
"The Necrotic Wake",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[175992] = {
"Dutiful Attendant",
"Castle Nathria",
},
[163520] = {
"Forsworn Squad-Leader",
"Spires of Ascension",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[105705] = {
"Bound Energy",
"Court of Stars",
},
[173190] = {
"Court Hawkeye",
"Castle Nathria",
},
[81603] = {
"Champion Druna",
"Iron Docks",
},
[189555] = {
"Astral Attendant",
"The Azure Vault",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
},
[157634] = {
"Flameforge Enforcer",
"Torghast, Tower of the Damned",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
},
[205735] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[167610] = {
"Stonefiend Anklebiter",
"Halls of Atonement",
"enUS",
},
[92538] = {
"Tarspitter Grub",
"Neltharion's Lair",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[199595] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
},
[167611] = {
"Stoneborn Eviscerator",
"Halls of Atonement",
"enUS",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
"enUS",
},
[194990] = {
"Stormseeker Acolyte",
"Vault of the Incarnates",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
},
[241304] = {
"Shadowguard Infuser",
"Manaforge Omega",
"enUS",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
},
[114542] = {
"Ghostly Philanthropist",
"Return to Karazhan",
},
[166589] = {
"Animated Weapon",
"Sanguine Depths",
},
[187315] = {
"Disease Slasher",
"Brackenhide Hollow",
},
[180091] = {
"Ancient Core Hound",
"Tazavesh, the Veiled Market",
"enUS",
},
[220626] = {
"Blood Parasite",
"Nerub-ar Palace",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
},
[180473] = {
"Unstoppable Abomination",
"Sanctum of Domination",
},
[99891] = {
"Storm Drake",
"Halls of Valor",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[234443] = {
"Triplefive",
"Theater of Pain",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
},
[45917] = {
"Cloud Prince",
"The Vortex Pinnacle",
"enUS",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[231839] = {
"Scrapmaster",
"Liberation of Undermine",
},
[207202] = {
"Void Fragment",
"The Rookery",
},
[86526] = {
"Grom'kar Chainmaster",
"Iron Docks",
},
[227514] = {
"Velo",
"The Spiral Weave",
},
[82590] = {
"Grimrail Scout",
"Grimrail Depot",
},
[167615] = {
"Depraved Darkblade",
"Halls of Atonement",
"enUS",
},
[219046] = {
"Voracious Worm",
"Nerub-ar Palace",
},
[229537] = {
"Void Emissary",
"Eco-Dome Al'dani",
"enUS",
},
[237981] = {
"Shadowguard Mage",
"Manaforge Omega",
"enUS",
},
[212831] = {
"Forge Master Damian",
"Priory of the Sacred Flame",
"enUS",
},
[150292] = {
"Mechagon Cavalry",
"Operation: Mechagon",
},
[228514] = {
"Pit Mechanic",
"Liberation of Undermine",
},
[214441] = {
"Scorched Treant",
"Amirdrassil, the Dream's Hope",
},
[75652] = {
"Void Spawn",
"Shadowmoon Burial Grounds",
},
[198577] = {
"Unstable Flame",
"Vault of the Incarnates",
},
[154758] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[168384] = {
"Flesh Construct",
"The Necrotic Wake",
},
[114783] = {
"Reformed Maiden",
"Return to Karazhan",
},
[198308] = {
"Frostwrought Dominator",
"Vault of the Incarnates",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
},
[189878] = {
"Nathrezim Infiltrator",
"Operation: Mechagon",
},
[212981] = {
"Hapless Assistant",
"The Everbloom",
},
[229283] = {
"Scraps",
"Liberation of Undermine",
},
[65362] = {
"Minion of Doubt",
"Temple of the Jade Serpent",
},
[176573] = {
"Mawsworn Woebringer",
"Torghast, Tower of the Damned",
},
[221863] = {
"Summoned Acolyte",
"Nerub-ar Palace",
},
[242589] = {
"Void Manifestation",
"Manaforge Omega",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[175550] = {
"Volatile Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[77700] = {
"Shadowmoon Exhumer",
"Shadowmoon Burial Grounds",
},
[229284] = {
"Guk Boomdog",
"Liberation of Undermine",
},
[98538] = {
"Lady Velandras Ravencrest",
"Black Rook Hold",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
"enUS",
},
[188673] = {
"Smoldering Colossus",
"Vault of the Incarnates",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[168658] = {
"Forsworn Devastator",
"Spires of Ascension",
},
[81212] = {
"Grimrail Overseer",
"Grimrail Depot",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[150146] = {
"Scrapbone Shaman",
"Operation: Mechagon",
},
[176575] = {
"Mawsworn Soulwarden",
"Torghast, Tower of the Damned",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
"enUS",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
},
[194487] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
},
[177892] = {
"Mawforged Goliath",
"Sanctum of Domination",
},
[130909] = {
"Fetid Maggot",
"The Underrot",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
},
[198326] = {
"Stormwrought Despoiler",
"Vault of the Incarnates",
},
[169924] = {
"Veteran Stoneguard",
"Castle Nathria",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
},
[155824] = {
"Lumbering Creation",
"Torghast, Tower of the Damned",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[97788] = {
"Storm Drake",
"Halls of Valor",
"enUS",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
},
[165483] = {
"Court Hierarch",
"Castle Nathria",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[229288] = {
"King Flamespite",
"Liberation of Undermine",
"enUS",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[231977] = {
"Darkfuse Technician",
"Liberation of Undermine",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
"enUS",
},
[168934] = {
"Enraged Spirit",
"De Other Side",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
},
[198716] = {
"Unstable Storm",
"Vault of the Incarnates",
},
[188244] = {
"Primal Juggernaut",
"Ruby Life Pools",
},
[83025] = {
"Grom'kar Battlemaster",
"Iron Docks",
},
[187771] = {
"Kadros Icewrath",
"Vault of the Incarnates",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
"enUS",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
},
[207796] = {
"Burning Colossus",
"Amirdrassil, the Dream's Hope",
},
[169159] = {
"Unstable Canister",
"Plaguefall",
},
[189227] = {
"Qalashi Hunter",
"Neltharus",
},
[164702] = {
"Carrion Worm",
"The Necrotic Wake",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
},
[236033] = {
"Metal Gunk",
"Operation: Mechagon",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
},
[167113] = {
"Spinemaw Acidgullet",
"Mists of Tirna Scithe",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
},
[221103] = {
"Hulking Warshell",
"City of Threads",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[164707] = {
"Congealed Slime",
"Plaguefall",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[185537] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[171376] = {
"Head Custodian Javlin",
"Sanguine Depths",
},
[233814] = {
"Plexus Sentinel",
"Manaforge Omega",
"enUS",
},
[239454] = {
"Darkmage Zadus",
"Manaforge Omega",
"enUS",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[234050] = {
"Shadowguard Soldier",
"Manaforge Omega",
"enUS",
},
[155221] = {
"Faeleaf Tender",
"Torghast, Tower of the Damned",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
},
[216328] = {
"Unstable Test Subject",
"City of Threads",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[236072] = {
"Unbound Entity",
"Manaforge Omega",
"enUS",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[198424] = {
"Primalist Frostsculptor",
"Vault of the Incarnates",
},
[178630] = {
"Mawsworn Seeker",
"Sanctum of Domination",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
"enUS",
},
[245008] = {
"Unbound Phaseblade",
"Manaforge Omega",
"enUS",
},
[167116] = {
"Spinemaw Reaver",
"Mists of Tirna Scithe",
},
[155090] = {
"Anodized Coilbearer",
"Operation: Mechagon",
},
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[168396] = {
"Plaguebelcher",
"Plaguefall",
},
[228015] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[237897] = {
"Shadowguard Assassin",
"Manaforge Omega",
"enUS",
},
[245173] = {
"Infused Tangle",
"Manaforge Omega",
"enUS",
},
[237132] = {
"Shadowguard Technomancer",
"Manaforge Omega",
"enUS",
},
[234833] = {
"Unstable Mana",
"Manaforge Omega",
"enUS",
},
[115486] = {
"Erudite Slayer",
"Return to Karazhan",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
},
[234842] = {
"Voidveil Manta",
"Manaforge Omega",
"enUS",
},
[245617] = {
"The Bone Melter",
"Manaforge Omega",
"enUS",
},
[236549] = {
"Crystalline Golem",
"Manaforge Omega",
"enUS",
},
},
["aura_grow_direction"] = 1,
["indicator_anchor"] = {
["y"] = -5,
["x"] = 1,
["side"] = 1,
},
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.99999994039536,
["aura_padding"] = 3,
["indicator_worldboss"] = false,
["aura_stack_size"] = 12,
["aura_height2"] = 26,
["cast_colors"] = {
[420907] = {
false,
"white",
"",
},
},
["aura_border_colors"] = {
["enrage"] = {
1,
0,
0.1607843190431595,
},
["steal_or_purge"] = {
nil,
1,
0.9450981020927429,
},
["crowdcontrol"] = {
0,
0,
0,
},
["offensive"] = {
nil,
0,
0,
},
["is_show_all"] = {
0,
0,
0,
},
["defensive"] = {
0,
0,
0,
},
["is_buff"] = {
nil,
0,
0,
},
},
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["extra_icon_anchor"] = {
["x"] = 0,
["side"] = 2,
},
["extra_icon_wide_icon"] = false,
["range_check_alpha"] = 0.699999988079071,
["semver"] = "1.0.10",
["bossmod_aura_glow_expiring"] = true,
["aura_frame2_anchor"] = {
["y"] = 3,
["side"] = 1,
},
["use_name_translit"] = true,
["cast_statusbar_texture"] = "Melli",
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["transparency_behavior"] = 2,
["spell_animations"] = false,
["debuff_show_cc_border"] = {
0,
0,
0,
},
["aura_consolidate"] = true,
["extra_icon_width"] = 34,
["health_statusbar_texture"] = "Melli",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Combo Points"] = 6,
["Cast Bar Icon Config"] = 2,
["Attacking Specific Unit"] = 2,
["Extra Border"] = 2,
["Hide Neutral Units"] = 1,
["Target Color"] = 3,
["Aura Reorder"] = 3,
["Execute Range"] = 1,
},
["minor_width_scale"] = 0.99999994039536,
["castbar_target_text_size"] = 11,
["extra_icon_show_defensive_border"] = {
0,
0,
0,
},
["aura_frame1_anchor"] = {
["y"] = 3,
["side"] = 7,
},
["indicator_rare"] = false,
["cast_statusbar_color_finished"] = {
0.3921568989753723,
0.9960784912109375,
0.6392157077789307,
},
["extra_icon_stack_font"] = "Friz Quadrata TT",
["aura_height"] = 26,
["non_targeted_alpha_enabled"] = true,
["cast_statusbar_bgtexture"] = "Melli",
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["extra_icon_stack_size"] = 12,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateLargeTopInset"] = "0.049999997019768",
["nameplateShowPersonalCooldowns"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.024999998509884",
["nameplateShowFriendlyNPCs"] = "1",
["nameplateSelectedScale"] = "1.1000000238419",
["nameplateOverlapH"] = "0.79999995231628",
["nameplateShowFriendlyBuffs"] = "0",
["nameplateSelfTopInset"] = "0",
["nameplateMinAlpha"] = "0.90135484",
["nameplateShowFriends"] = "0",
["nameplateMotion"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateLargerScale"] = "1",
["nameplateMaxDistance"] = "60",
["nameplateOtherTopInset"] = "0.049999997019768",
["nameplateSelfScale"] = "1",
["nameplateSelfBottomInset"] = "0.3",
["nameplatePlayerMaxDistance"] = "40",
["nameplateOccludedAlphaMult"] = "0.59999996423721",
["nameplateSelfAlpha"] = "0",
["nameplateShowSelf"] = "0",
["nameplateShowEnemies"] = "1",
["nameplateOverlapV"] = "1.2000000476837",
["NamePlateVerticalScale"] = "1",
},
["login_counter"] = 17217,
["extra_icon_caster_name"] = false,
["aura_stack_font"] = "Friz Quadrata TT",
["blizzard_nameplate_font"] = "Friz Quadrata TT",
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["bossmod_cooldown_text_enabled"] = false,
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 5,
["blizzard_nameplate_large_font"] = "Friz Quadrata TT",
["aura_stack_anchor"] = {
["y"] = 15,
["side"] = 5,
},
["plate_config"] = {
["player"] = {
["module_enabled"] = false,
["level_text_alpha"] = 0.3,
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
210,
22,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
0,
0,
0,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["mana_incombat"] = {
nil,
4,
},
["all_names"] = true,
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["spellpercent_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 11,
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["spellname_text_font"] = "Friz Quadrata TT",
["cast_incombat"] = {
210,
22,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["mana"] = {
nil,
4,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["castbar_offset"] = -1,
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["spellpercent_text_enabled"] = true,
["percent_text_ooc"] = true,
["percent_text_font"] = "Friz Quadrata TT",
["buff_frame_y_offset"] = 0,
["quest_enabled"] = true,
["health_incombat"] = {
232,
32,
},
["quest_color_enabled"] = true,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_size"] = 12,
["health"] = {
232,
32,
},
["level_text_alpha"] = 0.2999999821186066,
["percent_text_enabled"] = true,
["percent_text_size"] = 12,
["actorname_text_size"] = 12,
},
["friendlynpc"] = {
["castbar_offset"] = -1,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
210,
22,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["spellpercent_text_size"] = 12,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 11,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["cast_incombat"] = {
210,
22,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellname_text_font"] = "Friz Quadrata TT",
["big_actortitle_text_size"] = 12,
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["actorname_text_size"] = 12,
["percent_text_ooc"] = true,
["big_actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_size"] = 12,
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["spellpercent_text_enabled"] = true,
["level_text_outline"] = "OUTLINE",
["percent_text_font"] = "Friz Quadrata TT",
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
232,
32,
},
["health"] = {
232,
32,
},
["percent_text_enabled"] = true,
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 12,
["spellname_text_size"] = 12,
},
["enemynpc"] = {
["big_actorname_text_size"] = 11,
["spellpercent_text_font"] = "Friz Quadrata TT",
["cast"] = {
178,
16,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["quest_color_enemy"] = {
0.4000000357627869,
0.8666667342185974,
0.6666666865348816,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["cast_incombat"] = {
178,
16,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_neutral"] = {
0.4000000357627869,
0.8666667342185974,
0.7843137979507446,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 11,
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["percent_text_size"] = 11,
["percent_text_show_decimals"] = false,
["percent_text_font"] = "Friz Quadrata TT",
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
176,
24,
},
["health"] = {
176,
24,
},
["level_text_alpha"] = 0.2999999821186066,
["spellname_text_font"] = "Friz Quadrata TT",
["spellname_text_size"] = 11,
["level_text_enabled"] = false,
},
["global_health_width"] = 224,
["enemyplayer"] = {
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
232,
22,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["spellpercent_text_size"] = 12,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["cast_incombat"] = {
232,
22,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["level_text_outline"] = "OUTLINE",
["big_actorname_text_size"] = 12,
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 12,
["big_actortitle_text_size"] = 12,
["percent_text_font"] = "Friz Quadrata TT",
["percent_text_show_decimals"] = false,
["quest_enabled"] = true,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
232,
32,
},
["health"] = {
232,
32,
},
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["spellname_text_size"] = 12,
["quest_color_enabled"] = true,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_enabled"] = false,
},
["global_health_height"] = 28,
},
["aura_y_offset"] = 3,
["use_ui_parent"] = true,
["cast_statusbar_bgcolor"] = {
0.13333334028721,
0.13333334028721,
0.13333334028721,
1,
},
["cast_statusbar_use_fade_effects"] = false,
["indicator_spec"] = false,
["border_thickness"] = 0.4999999701976776,
["resources_settings"] = {
["global_settings"] = {
["show_depleted"] = false,
},
["chr"] = {
["Player-3674-0B4CEAF6"] = "HolyPower",
["Player-3674-0B10664D"] = "Runes",
["Player-3674-0B7E99BA"] = "Chi",
["Player-3674-0ABC0676"] = "ArcaneCharges",
["Player-3674-0B6F6C67"] = "ComboPoints",
["Player-3674-0B54DA49"] = "Runes",
["Player-3674-0B1BB2A3"] = "ComboPoints",
["Player-3674-0B7EE2CB"] = "Chi",
["Player-3666-073F2CE7"] = "Chi",
["Player-3674-0B7DEF79"] = "Chi",
["Player-3674-0B0A2407"] = "Essence",
["Player-3674-0B733AA8"] = "Runes",
["Player-3674-0B7DA606"] = "Chi",
["Player-3674-0B290529"] = "Chi",
["Player-3674-0B7429F4"] = "Runes",
["Player-3674-0B267A73"] = "HolyPower",
["Player-3702-063B3452"] = "ComboPoints",
["Player-3674-0B6950F5"] = "ComboPoints",
["Player-3674-0B7AA5AA"] = "Chi",
["Player-5764-00087D02"] = "Chi",
["Player-3674-0B782F56"] = "Runes",
["Player-3674-0B436FA0"] = "ComboPoints",
["Player-3674-0B5833AE"] = "Chi",
["Player-3674-0B25F50F"] = "ComboPoints",
["Player-3674-0B1E76C1"] = "SoulShards",
["Player-3674-0B82DA01"] = "HolyPower",
},
},
["indicator_scale"] = 1.200000047683716,
["border_color"] = {
nil,
nil,
nil,
1,
},
["focus_color"] = {
0.07450980693101883,
0.988235354423523,
nil,
0.501960813999176,
},
["castbar_icon_size"] = "same as castbar plus healthbar",
["npc_colors"] = {
[99358] = {
true,
false,
"deeppink",
},
[198716] = {
true,
false,
"peachpuff",
},
[196798] = {
true,
false,
"snow",
},
[186696] = {
true,
false,
"cyan",
},
[194241] = {
true,
false,
"cyan",
},
[231197] = {
true,
false,
"slateblue",
},
[231325] = {
true,
false,
"slateblue",
},
[95842] = {
true,
false,
"snow",
},
[180431] = {
true,
false,
"snow",
},
[115407] = {
true,
false,
"peachpuff",
},
[221863] = {
true,
false,
"snow",
},
[205623] = {
true,
false,
"slateblue",
},
[99359] = {
true,
false,
"cyan",
},
[168156] = {
true,
false,
"deeppink",
},
[173655] = {
true,
false,
"slateblue",
},
[173016] = {
true,
false,
"snow",
},
[129602] = {
true,
false,
"WARRIOR",
},
[180433] = {
true,
false,
"deeppink",
},
[98081] = {
true,
false,
"deeppink",
},
[120651] = {
true,
false,
"gold",
},
[212786] = {
true,
false,
"slateblue",
},
[197697] = {
true,
false,
"WARRIOR",
},
[212403] = {
true,
false,
"peachpuff",
},
[164578] = {
true,
false,
"slateblue",
},
[190404] = {
true,
false,
"WARRIOR",
},
[229283] = {
true,
false,
"slateblue",
},
[214066] = {
true,
false,
"peachpuff",
},
[150251] = {
true,
false,
"peachpuff",
},
[150253] = {
true,
false,
"slateblue",
},
[175576] = {
true,
false,
"yellow",
},
[164451] = {
true,
false,
"slateblue",
},
[126918] = {
true,
false,
"lime",
},
[164707] = {
true,
false,
"slateblue",
},
[229284] = {
true,
false,
"slateblue",
},
[131587] = {
true,
false,
"WARRIOR",
},
[168153] = {
true,
false,
"deeppink",
},
[135552] = {
true,
false,
"peachpuff",
},
[129600] = {
true,
false,
"magenta",
},
[218671] = {
true,
false,
"peachpuff",
},
[84400] = {
true,
false,
"slateblue",
},
[193352] = {
true,
false,
"peachpuff",
},
[135169] = {
true,
false,
"deeppink",
},
[190403] = {
true,
false,
"lime",
},
[237981] = {
true,
false,
"snow",
},
[206140] = {
true,
false,
"magenta",
},
[83761] = {
true,
false,
"slateblue",
},
[150250] = {
true,
false,
"snow",
},
[178008] = {
true,
false,
"yellow",
},
[98275] = {
true,
false,
"peachpuff",
},
[221102] = {
true,
false,
"snow",
},
[127111] = {
true,
false,
"peachpuff",
},
[178392] = {
true,
false,
"deeppink",
},
[196671] = {
true,
false,
"slateblue",
},
[168418] = {
true,
false,
"snow",
},
[183497] = {
true,
false,
"peachpuff",
},
[200387] = {
true,
false,
"slateblue",
},
[126919] = {
true,
false,
"magenta",
},
[221103] = {
true,
false,
"slateblue",
},
[199748] = {
true,
false,
"magenta",
},
[165471] = {
true,
false,
"peachpuff",
},
[165222] = {
true,
false,
"magenta",
},
[127879] = {
true,
false,
"WARRIOR",
},
[198214] = {
true,
false,
"deeppink",
},
[184020] = {
true,
false,
"WARRIOR",
},
[220976] = {
true,
false,
"deeppink",
},
[223150] = {
true,
false,
"snow",
},
[199749] = {
true,
false,
"WARRIOR",
},
[176598] = {
true,
false,
"peachpuff",
},
[205363] = {
true,
false,
"PALADIN",
},
[168420] = {
true,
false,
"peachpuff",
},
[165479] = {
true,
false,
"slateblue",
},
[170850] = {
true,
false,
"deeppink",
},
[212793] = {
true,
false,
"deeppink",
},
[178139] = {
true,
false,
"peachpuff",
},
[197698] = {
true,
false,
"WARRIOR",
},
[178141] = {
true,
false,
"deeppink",
},
[194894] = {
true,
false,
"magenta",
},
[83763] = {
true,
false,
"snow",
},
[196044] = {
true,
false,
"lime",
},
[184022] = {
true,
false,
"magenta",
},
[220978] = {
true,
false,
"deeppink",
},
[176974] = {
true,
false,
"deeppink",
},
[75899] = {
true,
false,
"deeppink",
},
[210109] = {
true,
false,
"slateblue",
},
[83892] = {
true,
false,
"snow",
},
[212411] = {
true,
false,
"slateblue",
},
[223776] = {
true,
false,
"peachpuff",
},
[184023] = {
true,
false,
"PALADIN",
},
[189266] = {
true,
false,
"WARRIOR",
},
[168934] = {
true,
false,
"deeppink",
},
[231978] = {
true,
false,
"snow",
},
[200137] = {
true,
false,
"lime",
},
[211261] = {
true,
false,
"deeppink",
},
[212412] = {
true,
false,
"deeppink",
},
[231977] = {
true,
false,
"peachpuff",
},
[160495] = {
true,
false,
"snow",
},
[188244] = {
true,
false,
"slateblue",
},
[178142] = {
true,
false,
"snow",
},
[157810] = {
true,
false,
"snow",
},
[201288] = {
true,
false,
"deeppink",
},
[211262] = {
true,
false,
"deeppink",
},
[196045] = {
true,
false,
"snow",
},
[165483] = {
true,
false,
"deeppink",
},
[130435] = {
true,
false,
"slateblue",
},
[131586] = {
true,
false,
"cyan",
},
[229288] = {
true,
false,
"slateblue",
},
[211263] = {
true,
false,
"deeppink",
},
[242209] = {
true,
false,
"snow",
},
[194895] = {
true,
false,
"lime",
},
[168425] = {
true,
false,
"deeppink",
},
[164461] = {
true,
false,
"snow",
},
[83893] = {
true,
false,
"peachpuff",
},
[128969] = {
true,
false,
"deeppink",
},
[99366] = {
true,
false,
"magenta",
},
[40634] = {
true,
false,
"snow",
},
[208698] = {
true,
false,
"magenta",
},
[227632] = {
true,
false,
"deeppink",
},
[220599] = {
true,
false,
"snow",
},
[217658] = {
true,
false,
"deeppink",
},
[177889] = {
true,
false,
"deeppink",
},
[187224] = {
true,
false,
"cyan",
},
[211904] = {
true,
false,
"deeppink",
},
[154744] = {
true,
false,
"deeppink",
},
[114584] = {
true,
false,
"slateblue",
},
[194897] = {
true,
false,
"deeppink",
},
[217531] = {
true,
false,
"deeppink",
},
[164463] = {
true,
false,
"snow",
},
[83894] = {
true,
false,
"slateblue",
},
[98280] = {
true,
false,
"snow",
},
[228015] = {
true,
false,
"slateblue",
},
[150142] = {
true,
false,
"snow",
},
[205384] = {
true,
false,
"PALADIN",
},
[194898] = {
true,
false,
"WARRIOR",
},
[223774] = {
true,
false,
"peachpuff",
},
[167533] = {
true,
false,
"slateblue",
},
[212673] = {
true,
false,
"WARRIOR",
},
[98792] = {
true,
false,
"lime",
},
[115020] = {
true,
false,
"slateblue",
},
[167534] = {
true,
false,
"slateblue",
},
[172265] = {
true,
false,
"snow",
},
[227635] = {
true,
false,
"snow",
},
[217533] = {
true,
false,
"deeppink",
},
[220730] = {
true,
false,
"slateblue",
},
[177892] = {
true,
false,
"peachpuff",
},
[220986] = {
true,
false,
"deeppink",
},
[165872] = {
true,
false,
"deeppink",
},
[205622] = {
true,
false,
"slateblue",
},
[214209] = {
true,
false,
"snow",
},
[200126] = {
true,
false,
"magenta",
},
[114266] = {
true,
false,
"snow",
},
[45912] = {
true,
false,
"PALADIN",
},
[131858] = {
true,
false,
"slateblue",
},
[101991] = {
true,
false,
"PALADIN",
},
[168942] = {
true,
false,
"peachpuff",
},
[180323] = {
true,
false,
"deeppink",
},
[198326] = {
true,
false,
"slateblue",
},
[207177] = {
true,
false,
"slateblue",
},
[127757] = {
true,
false,
"cyan",
},
[208456] = {
true,
false,
"peachpuff",
},
[104278] = {
true,
false,
"lime",
},
[186206] = {
true,
false,
"WARRIOR",
},
[190426] = {
true,
false,
"cyan",
},
[189531] = {
true,
false,
"lime",
},
[162038] = {
true,
false,
"slateblue",
},
[98538] = {
true,
false,
"cyan",
},
[180070] = {
true,
false,
"deeppink",
},
[150146] = {
true,
false,
"deeppink",
},
[198868] = {
true,
false,
"snow",
},
[137103] = {
true,
false,
"lime",
},
[129548] = {
true,
false,
"WARRIOR",
},
[130635] = {
true,
false,
"snow",
},
[162039] = {
true,
false,
"snow",
},
[241803] = {
true,
false,
"snow",
},
[156157] = {
true,
false,
"peachpuff",
},
[167538] = {
true,
false,
"slateblue",
},
[75713] = {
true,
false,
"magenta",
},
[186208] = {
true,
false,
"DRUID",
},
[229686] = {
true,
false,
"snow",
},
[170480] = {
true,
false,
"slateblue",
},
[162040] = {
true,
false,
"deeppink",
},
[195927] = {
true,
false,
"dodgerblue",
},
[199124] = {
true,
false,
"snow",
},
[208459] = {
true,
false,
"snow",
},
[212775] = {
true,
false,
"magenta",
},
[168658] = {
true,
false,
"deeppink",
},
[52019] = {
true,
false,
"deeppink",
},
[83578] = {
true,
false,
"slateblue",
},
[227513] = {
true,
false,
"snow",
},
[195928] = {
true,
false,
"dodgerblue",
},
[223772] = {
true,
false,
"peachpuff",
},
[136470] = {
true,
false,
"snow",
},
[97197] = {
true,
false,
"dodgerblue",
},
[126928] = {
true,
false,
"DRUID",
},
[118489] = {
true,
false,
"deeppink",
},
[203857] = {
true,
false,
"snow",
},
[227514] = {
true,
false,
"deeppink",
},
[195929] = {
true,
false,
"dodgerblue",
},
[228539] = {
true,
false,
"snow",
},
[221760] = {
true,
false,
"peachpuff",
},
[228540] = {
true,
false,
"snow",
},
[231223] = {
true,
false,
"snow",
},
[226200] = {
true,
false,
"peachpuff",
},
[229433] = {
true,
false,
"slateblue",
},
[223423] = {
true,
false,
"slateblue",
},
[195930] = {
true,
false,
"dodgerblue",
},
[170483] = {
true,
false,
"deeppink",
},
[39392] = {
true,
false,
"slateblue",
},
[196576] = {
true,
false,
"magenta",
},
[193373] = {
true,
false,
"lime",
},
[190690] = {
true,
false,
"slateblue",
},
[229434] = {
true,
false,
"slateblue",
},
[190688] = {
true,
false,
"slateblue",
},
[168310] = {
true,
false,
"deeppink",
},
[215755] = {
true,
false,
"deeppink",
},
[152033] = {
true,
false,
"deeppink",
},
[133912] = {
true,
false,
"magenta",
},
[215756] = {
true,
false,
"deeppink",
},
[129553] = {
true,
false,
"magenta",
},
[180335] = {
true,
false,
"peachpuff",
},
[114334] = {
true,
false,
"slateblue",
},
[208208] = {
true,
false,
"slateblue",
},
[194487] = {
true,
false,
"cyan",
},
[75652] = {
true,
false,
"deeppink",
},
[84990] = {
true,
false,
"peachpuff",
},
[184300] = {
true,
false,
"slateblue",
},
[197595] = {
true,
false,
"slateblue",
},
[203861] = {
true,
false,
"slateblue",
},
[155908] = {
true,
false,
"deeppink",
},
[100526] = {
true,
false,
"WARRIOR",
},
[59555] = {
true,
false,
"magenta",
},
[179821] = {
true,
false,
"deeppink",
},
[83389] = {
true,
false,
"slateblue",
},
[157571] = {
true,
false,
"snow",
},
[173044] = {
true,
false,
"snow",
},
[154758] = {
true,
false,
"deeppink",
},
[162047] = {
true,
false,
"slateblue",
},
[118491] = {
true,
false,
"snow",
},
[115486] = {
true,
false,
"slateblue",
},
[220742] = {
true,
false,
"deeppink",
},
[224962] = {
true,
false,
"snow",
},
[157572] = {
true,
false,
"snow",
},
[164861] = {
true,
false,
"peachpuff",
},
[114783] = {
true,
false,
"snow",
},
[163458] = {
true,
false,
"snow",
},
[105704] = {
true,
false,
"magenta",
},
[166396] = {
true,
false,
"peachpuff",
},
[166524] = {
true,
false,
"snow",
},
[83390] = {
true,
false,
"snow",
},
[187240] = {
true,
false,
"slateblue",
},
[132126] = {
true,
false,
"peachpuff",
},
[174197] = {
true,
false,
"snow",
},
[202969] = {
true,
false,
"deeppink",
},
[214350] = {
true,
false,
"snow",
},
[168443] = {
true,
false,
"peachpuff",
},
[77700] = {
true,
false,
"snow",
},
[164737] = {
true,
false,
"deeppink",
},
[84989] = {
true,
false,
"magenta",
},
[81984] = {
true,
false,
"slateblue",
},
[180336] = {
true,
false,
"snow",
},
[170234] = {
true,
false,
"deeppink",
},
[105705] = {
true,
false,
"WARRIOR",
},
[170490] = {
true,
false,
"snow",
},
[168572] = {
true,
false,
"peachpuff",
},
[175861] = {
true,
false,
"deeppink",
},
[122969] = {
true,
false,
"PALADIN",
},
[184301] = {
true,
false,
"PALADIN",
},
[100527] = {
true,
false,
"PALADIN",
},
[202971] = {
true,
false,
"snow",
},
[225605] = {
true,
false,
"snow",
},
[115488] = {
true,
false,
"peachpuff",
},
[91000] = {
true,
false,
"WARRIOR",
},
[168318] = {
true,
false,
"slateblue",
},
[186220] = {
true,
false,
"PALADIN",
},
[81985] = {
true,
false,
"snow",
},
[234557] = {
true,
false,
"deeppink",
},
[197857] = {
true,
false,
"lime",
},
[197985] = {
true,
false,
"magenta",
},
[163459] = {
true,
false,
"peachpuff",
},
[150160] = {
true,
false,
"slateblue",
},
[44404] = {
true,
false,
"snow",
},
[178165] = {
true,
false,
"slateblue",
},
[217039] = {
true,
false,
"slateblue",
},
[91001] = {
true,
false,
"lime",
},
[225479] = {
true,
false,
"peachpuff",
},
[197219] = {
true,
false,
"slateblue",
},
[175992] = {
true,
false,
"deeppink",
},
[104300] = {
true,
false,
"WARRIOR",
},
[220060] = {
true,
false,
"snow",
},
[165762] = {
true,
false,
"deeppink",
},
[203230] = {
true,
false,
"peachpuff",
},
[122970] = {
true,
false,
"lime",
},
[86526] = {
true,
false,
"peachpuff",
},
[131492] = {
true,
false,
"magenta",
},
[76104] = {
true,
false,
"magenta",
},
[210264] = {
true,
false,
"peachpuff",
},
[198501] = {
true,
false,
"snow",
},
[165763] = {
true,
false,
"snow",
},
[157017] = {
true,
false,
"peachpuff",
},
[135329] = {
true,
false,
"deeppink",
},
[81603] = {
true,
false,
"slateblue",
},
[166275] = {
true,
false,
"snow",
},
[45917] = {
true,
false,
"cyan",
},
[196198] = {
true,
false,
"peachpuff",
},
[174843] = {
true,
false,
"slateblue",
},
[219983] = {
true,
false,
"slateblue",
},
[205151] = {
true,
false,
"WARRIOR",
},
[122971] = {
true,
false,
"slateblue",
},
[231312] = {
true,
false,
"snow",
},
[166276] = {
true,
false,
"slateblue",
},
[196200] = {
true,
false,
"lime",
},
[168578] = {
true,
false,
"snow",
},
[150292] = {
true,
false,
"deeppink",
},
[218961] = {
true,
false,
"deeppink",
},
[211290] = {
true,
false,
"deeppink",
},
[228424] = {
true,
false,
"snow",
},
[162057] = {
true,
false,
"slateblue",
},
[211289] = {
true,
false,
"deeppink",
},
[205408] = {
true,
false,
"WARRIOR",
},
[150165] = {
true,
false,
"snow",
},
[150168] = {
true,
false,
"deeppink",
},
[186226] = {
true,
false,
"magenta",
},
[180473] = {
true,
false,
"peachpuff",
},
[122972] = {
true,
false,
"magenta",
},
[212827] = {
true,
false,
"deeppink",
},
[207198] = {
true,
false,
"snow",
},
[75979] = {
true,
false,
"lime",
},
[92538] = {
true,
false,
"lime",
},
[186740] = {
true,
false,
"WARRIOR",
},
[170882] = {
true,
false,
"peachpuff",
},
[178171] = {
true,
false,
"deeppink",
},
[196203] = {
true,
false,
"snow",
},
[218324] = {
true,
false,
"deeppink",
},
[207199] = {
true,
false,
"peachpuff",
},
[220626] = {
true,
false,
"orange",
},
[196202] = {
true,
false,
"peachpuff",
},
[169861] = {
true,
false,
"peachpuff",
},
[212826] = {
true,
false,
"deeppink",
},
[164873] = {
true,
false,
"deeppink",
},
[231496] = {
true,
false,
"peachpuff",
},
[100531] = {
true,
false,
"WARRIOR",
},
[213338] = {
true,
false,
"snow",
},
[236995] = {
true,
false,
"slateblue",
},
[129367] = {
true,
false,
"peachpuff",
},
[180091] = {
true,
false,
"deeppink",
},
[186229] = {
true,
false,
"magenta",
},
[129559] = {
true,
false,
"lime",
},
[214608] = {
true,
false,
"snow",
},
[183033] = {
true,
false,
"slateblue",
},
[186741] = {
true,
false,
"magenta",
},
[164363] = {
true,
false,
"peachpuff",
},
[150169] = {
true,
false,
"peachpuff",
},
[150297] = {
true,
false,
"peachpuff",
},
[174210] = {
true,
false,
"snow",
},
[180348] = {
true,
false,
"slateblue",
},
[189555] = {
true,
false,
"snow",
},
[100532] = {
true,
false,
"deeppink",
},
[207202] = {
true,
false,
"snow",
},
[182778] = {
true,
false,
"deeppink",
},
[179837] = {
true,
false,
"slateblue",
},
[229069] = {
true,
false,
"snow",
},
[223822] = {
true,
false,
"deeppink",
},
[114632] = {
true,
false,
"snow",
},
[234443] = {
true,
false,
"deeppink",
},
[163086] = {
true,
false,
"slateblue",
},
[195696] = {
true,
false,
"magenta",
},
[45919] = {
true,
false,
"cyan",
},
[91006] = {
true,
false,
"PALADIN",
},
[144295] = {
true,
false,
"peachpuff",
},
[45935] = {
true,
false,
"magenta",
},
[95834] = {
true,
false,
"magenta",
},
[173189] = {
true,
false,
"snow",
},
[206697] = {
true,
false,
"snow",
},
[205158] = {
true,
false,
"cyan",
},
[179841] = {
true,
false,
"snow",
},
[129369] = {
true,
false,
"deeppink",
},
[97720] = {
true,
false,
"deeppink",
},
[212831] = {
true,
false,
"deeppink",
},
[189816] = {
true,
false,
"snow",
},
[173190] = {
true,
false,
"snow",
},
[144293] = {
true,
false,
"slateblue",
},
[213343] = {
true,
false,
"slateblue",
},
[231380] = {
true,
false,
"snow",
},
[57109] = {
true,
false,
"WARRIOR",
},
[211816] = {
true,
false,
"deeppink",
},
[206698] = {
true,
false,
"peachpuff",
},
[222167] = {
true,
false,
"snow",
},
[199595] = {
true,
false,
"magenta",
},
[153882] = {
true,
false,
"snow",
},
[154014] = {
true,
false,
"snow",
},
[187897] = {
true,
false,
"deeppink",
},
[129370] = {
true,
false,
"snow",
},
[151325] = {
true,
false,
"deeppink",
},
[164557] = {
true,
false,
"slateblue",
},
[195119] = {
true,
false,
"magenta",
},
[129372] = {
true,
false,
"peachpuff",
},
[213217] = {
true,
false,
"snow",
},
[207207] = {
true,
false,
"orange",
},
[230740] = {
true,
false,
"deeppink",
},
[188026] = {
true,
false,
"deeppink",
},
[168717] = {
true,
false,
"snow",
},
[206696] = {
true,
false,
"slateblue",
},
[224732] = {
true,
false,
"snow",
},
[183423] = {
true,
false,
"snow",
},
[165137] = {
true,
false,
"slateblue",
},
[187771] = {
true,
false,
"peachpuff",
},
[234957] = {
true,
false,
"snow",
},
[163862] = {
true,
false,
"peachpuff",
},
[168718] = {
true,
false,
"peachpuff",
},
[144294] = {
true,
false,
"snow",
},
[184319] = {
true,
false,
"lime",
},
[165010] = {
true,
false,
"slateblue",
},
[200943] = {
true,
false,
"slateblue",
},
[169927] = {
true,
false,
"deeppink",
},
[97083] = {
true,
false,
"magenta",
},
[179847] = {
true,
false,
"deeppink",
},
[191225] = {
true,
false,
"slateblue",
},
[130011] = {
true,
false,
"lime",
},
[242631] = {
true,
false,
"deeppink",
},
[183425] = {
true,
false,
"peachpuff",
},
[97788] = {
true,
false,
"WARRIOR",
},
[105715] = {
true,
false,
"lime",
},
[212453] = {
true,
false,
"snow",
},
[40166] = {
true,
false,
"slateblue",
},
[137830] = {
true,
false,
"lime",
},
[144296] = {
true,
false,
"slateblue",
},
[205804] = {
true,
false,
"WARRIOR",
},
[179334] = {
true,
false,
"deeppink",
},
[59553] = {
true,
false,
"lime",
},
[176521] = {
true,
false,
"peachpuff",
},
[133685] = {
true,
false,
"cyan",
},
[169159] = {
true,
false,
"gold",
},
[234962] = {
true,
false,
"peachpuff",
},
[130012] = {
true,
false,
"PALADIN",
},
[224219] = {
true,
false,
"snow",
},
[190588] = {
true,
false,
"slateblue",
},
[135474] = {
true,
false,
"peachpuff",
},
[180104] = {
true,
false,
"snow",
},
[224731] = {
true,
false,
"slateblue",
},
[168594] = {
true,
false,
"slateblue",
},
[176959] = {
true,
false,
"snow",
},
[144298] = {
true,
false,
"deeppink",
},
[198263] = {
true,
false,
"slateblue",
},
[40167] = {
true,
false,
"peachpuff",
},
[176395] = {
true,
false,
"peachpuff",
},
[176523] = {
true,
false,
"slateblue",
},
[104246] = {
true,
false,
"WARRIOR",
},
[206064] = {
true,
false,
"peachpuff",
},
[190206] = {
true,
false,
"lime",
},
[186242] = {
true,
false,
"lime",
},
[224221] = {
true,
false,
"slateblue",
},
[114796] = {
true,
false,
"peachpuff",
},
[216293] = {
true,
false,
"peachpuff",
},
[164506] = {
true,
false,
"deeppink",
},
[96574] = {
true,
false,
"slateblue",
},
[210539] = {
true,
false,
"slateblue",
},
[92610] = {
true,
false,
"lime",
},
[169875] = {
true,
false,
"peachpuff",
},
[165911] = {
true,
false,
"deeppink",
},
[179388] = {
true,
false,
"snow",
},
[184581] = {
true,
false,
"WARRIOR",
},
[203812] = {
true,
false,
"deeppink",
},
[104247] = {
true,
false,
"magenta",
},
[130909] = {
true,
false,
"lime",
},
[135989] = {
true,
false,
"WARRIOR",
},
[206704] = {
true,
false,
"slateblue",
},
[214761] = {
true,
false,
"slateblue",
},
[206066] = {
true,
false,
"PALADIN",
},
[133432] = {
true,
false,
"snow",
},
[154020] = {
true,
false,
"snow",
},
[179852] = {
true,
false,
"peachpuff",
},
[165529] = {
true,
false,
"peachpuff",
},
[191232] = {
true,
false,
"peachpuff",
},
[98813] = {
true,
false,
"snow",
},
[165913] = {
true,
false,
"deeppink",
},
[45922] = {
true,
false,
"WARRIOR",
},
[192767] = {
true,
false,
"slateblue",
},
[98366] = {
true,
false,
"lime",
},
[221667] = {
true,
false,
"snow",
},
[40935] = {
true,
false,
"lime",
},
[214762] = {
true,
false,
"deeppink",
},
[229212] = {
true,
false,
"orange",
},
[115757] = {
true,
false,
"slateblue",
},
[155812] = {
true,
false,
"peachpuff",
},
[187315] = {
true,
false,
"WARRIOR",
},
[224609] = {
true,
false,
"deeppink",
},
[136549] = {
true,
false,
"deeppink",
},
[96640] = {
true,
false,
"lime",
},
[92612] = {
true,
false,
"WARRIOR",
},
[166299] = {
true,
false,
"peachpuff",
},
[186420] = {
true,
false,
"lime",
},
[213913] = {
true,
false,
"snow",
},
[231176] = {
true,
false,
"yellow",
},
[230748] = {
true,
false,
"deeppink",
},
[190340] = {
true,
false,
"WARRIOR",
},
[56792] = {
true,
false,
"deeppink",
},
[213741] = {
true,
false,
"orange",
},
[199547] = {
true,
false,
"deeppink",
},
[102232] = {
true,
false,
"magenta",
},
[204918] = {
true,
false,
"magenta",
},
[176573] = {
true,
false,
"deeppink",
},
[164510] = {
true,
false,
"peachpuff",
},
[167963] = {
true,
false,
"peachpuff",
},
[130400] = {
true,
false,
"slateblue",
},
[171799] = {
true,
false,
"deeppink",
},
[199037] = {
true,
false,
"PALADIN",
},
[184331] = {
true,
false,
"slateblue",
},
[190342] = {
true,
false,
"PALADIN",
},
[180495] = {
true,
false,
"slateblue",
},
[208244] = {
true,
false,
"snow",
},
[101437] = {
true,
false,
"peachpuff",
},
[114544] = {
true,
false,
"deeppink",
},
[198311] = {
true,
false,
"slateblue",
},
[199549] = {
true,
false,
"deeppink",
},
[98368] = {
true,
false,
"WARRIOR",
},
[122984] = {
true,
false,
"deeppink",
},
[41096] = {
true,
false,
"magenta",
},
[166302] = {
true,
false,
"snow",
},
[190686] = {
true,
false,
"peachpuff",
},
[184580] = {
true,
false,
"magenta",
},
[165919] = {
true,
false,
"slateblue",
},
[167965] = {
true,
false,
"peachpuff",
},
[168988] = {
true,
false,
"deeppink",
},
[199717] = {
true,
false,
"magenta",
},
[195842] = {
true,
false,
"lime",
},
[167876] = {
true,
false,
"deeppink",
},
[104251] = {
true,
false,
"lime",
},
[173720] = {
true,
false,
"slateblue",
},
[163618] = {
true,
false,
"peachpuff",
},
[101438] = {
true,
false,
"peachpuff",
},
[227300] = {
true,
false,
"slateblue",
},
[186191] = {
true,
false,
"magenta",
},
[104270] = {
true,
false,
"magenta",
},
[90998] = {
true,
false,
"magenta",
},
[216340] = {
true,
false,
"deeppink",
},
[206074] = {
true,
false,
"snow",
},
[186125] = {
true,
false,
"magenta",
},
[83025] = {
true,
false,
"peachpuff",
},
[184335] = {
true,
false,
"WARRIOR",
},
[45924] = {
true,
false,
"PALADIN",
},
[189706] = {
true,
false,
"yellow",
},
[190381] = {
true,
false,
"deeppink",
},
[165410] = {
true,
false,
"slateblue",
},
[205435] = {
true,
false,
"slateblue",
},
[163620] = {
true,
false,
"slateblue",
},
[205691] = {
true,
false,
"magenta",
},
[220141] = {
true,
false,
"snow",
},
[193799] = {
true,
false,
"cyan",
},
[239834] = {
true,
false,
"deeppink",
},
[196263] = {
true,
false,
"snow",
},
[179733] = {
true,
false,
"yellow",
},
[196856] = {
true,
false,
"slateblue",
},
[163621] = {
true,
false,
"slateblue",
},
[212981] = {
true,
false,
"WARRIOR",
},
[168992] = {
true,
false,
"snow",
},
[186246] = {
true,
false,
"PALADIN",
},
[81236] = {
true,
false,
"snow",
},
[45477] = {
true,
false,
"lime",
},
[196102] = {
true,
false,
"magenta",
},
[177816] = {
true,
false,
"snow",
},
[98243] = {
true,
false,
"WARRIOR",
},
[188302] = {
true,
false,
"yellow",
},
[83026] = {
true,
false,
"slateblue",
},
[114803] = {
true,
false,
"snow",
},
[239836] = {
true,
false,
"deeppink",
},
[98691] = {
true,
false,
"lime",
},
[223724] = {
true,
false,
"yellow",
},
[177817] = {
true,
false,
"peachpuff",
},
[195878] = {
true,
false,
"magenta",
},
[193291] = {
true,
false,
"deeppink",
},
[198308] = {
true,
false,
"slateblue",
},
[82579] = {
true,
false,
"snow",
},
[59544] = {
true,
false,
"magenta",
},
[200836] = {
true,
false,
"slateblue",
},
[165414] = {
true,
false,
"snow",
},
[216338] = {
true,
false,
"slateblue",
},
[213751] = {
true,
false,
"yellow",
},
[151476] = {
true,
false,
"slateblue",
},
[136643] = {
true,
false,
"slateblue",
},
[114804] = {
true,
false,
"peachpuff",
},
[220401] = {
true,
false,
"deeppink",
},
[175517] = {
true,
false,
"peachpuff",
},
[171376] = {
true,
false,
"peachpuff",
},
[192333] = {
true,
false,
"slateblue",
},
[187154] = {
true,
false,
"deeppink",
},
[130661] = {
true,
false,
"peachpuff",
},
[98706] = {
true,
false,
"WARRIOR",
},
[135365] = {
true,
false,
"deeppink",
},
[168384] = {
true,
false,
"peachpuff",
},
[205212] = {
true,
false,
"deeppink",
},
[236033] = {
true,
false,
"peachpuff",
},
[193293] = {
true,
false,
"WARRIOR",
},
[187155] = {
true,
false,
"magenta",
},
[210812] = {
true,
false,
"snow",
},
[163882] = {
true,
false,
"slateblue",
},
[122973] = {
true,
false,
"peachpuff",
},
[195851] = {
true,
false,
"lime",
},
[169893] = {
true,
false,
"deeppink",
},
[201222] = {
true,
false,
"cyan",
},
[173729] = {
true,
false,
"deeppink",
},
[194317] = {
true,
false,
"slateblue",
},
[84499] = {
true,
false,
"deeppink",
},
[189227] = {
true,
false,
"lime",
},
[45926] = {
true,
false,
"WARRIOR",
},
[191206] = {
true,
false,
"snow",
},
[168007] = {
true,
false,
"peachpuff",
},
[201223] = {
true,
false,
"PALADIN",
},
[180429] = {
true,
false,
"slateblue",
},
[195876] = {
true,
false,
"WARRIOR",
},
[75459] = {
true,
false,
"lime",
},
[115765] = {
true,
false,
"deeppink",
},
[200840] = {
true,
false,
"slateblue",
},
[129552] = {
true,
false,
"WARRIOR",
},
[229251] = {
true,
false,
"slateblue",
},
[156212] = {
true,
false,
"snow",
},
[210269] = {
true,
false,
"slateblue",
},
[129374] = {
true,
false,
"slateblue",
},
[214012] = {
true,
false,
"slateblue",
},
[135241] = {
true,
false,
"snow",
},
[231531] = {
true,
false,
"deeppink",
},
[190034] = {
true,
false,
"slateblue",
},
[190207] = {
true,
false,
"magenta",
},
[165805] = {
true,
false,
"slateblue",
},
[133835] = {
true,
false,
"magenta",
},
[222964] = {
true,
false,
"peachpuff",
},
[213885] = {
true,
false,
"deeppink",
},
[167998] = {
true,
false,
"slateblue",
},
[155830] = {
true,
false,
"snow",
},
[195855] = {
true,
false,
"WARRIOR",
},
[183707] = {
true,
false,
"snow",
},
[165824] = {
true,
false,
"deeppink",
},
[102404] = {
true,
false,
"slateblue",
},
[187160] = {
true,
false,
"lime",
},
[81432] = {
true,
false,
"snow",
},
[163121] = {
true,
false,
"peachpuff",
},
[155831] = {
true,
false,
"deeppink",
},
[192787] = {
true,
false,
"WARRIOR",
},
[206214] = {
true,
false,
"slateblue",
},
[177716] = {
true,
false,
"snow",
},
[187033] = {
true,
false,
"slateblue",
},
[168747] = {
true,
false,
"deeppink",
},
[210818] = {
true,
false,
"peachpuff",
},
[101637] = {
true,
false,
"slateblue",
},
[100486] = {
true,
false,
"snow",
},
[192788] = {
true,
false,
"magenta",
},
[59546] = {
true,
false,
"magenta",
},
[76446] = {
true,
false,
"magenta",
},
[102788] = {
true,
false,
"PALADIN",
},
[197904] = {
true,
false,
"snow",
},
[190359] = {
true,
false,
"WARRIOR",
},
[189464] = {
true,
false,
"magenta",
},
[168109] = {
true,
false,
"snow",
},
[162099] = {
true,
false,
"deeppink",
},
[198869] = {
true,
false,
"snow",
},
[183671] = {
true,
false,
"deeppink",
},
[182045] = {
true,
false,
"deeppink",
},
[115640] = {
true,
false,
"deeppink",
},
[138187] = {
true,
false,
"PALADIN",
},
[45704] = {
true,
false,
"dimgray",
},
[196115] = {
true,
false,
"deeppink",
},
[87252] = {
true,
false,
"slateblue",
},
[227573] = {
true,
false,
"slateblue",
},
[96587] = {
true,
false,
"snow",
},
[245092] = {
true,
false,
"slateblue",
},
[212739] = {
true,
false,
"slateblue",
},
[189338] = {
true,
false,
"magenta",
},
[189466] = {
true,
false,
"cyan",
},
[45928] = {
true,
false,
"DRUID",
},
[192791] = {
true,
false,
"deeppink",
},
[176551] = {
true,
false,
"snow",
},
[196116] = {
true,
false,
"lime",
},
[144071] = {
true,
false,
"snow",
},
[163520] = {
true,
false,
"slateblue",
},
[190362] = {
true,
false,
"magenta",
},
[189467] = {
true,
false,
"DRUID",
},
[166589] = {
true,
false,
"deeppink",
},
[163126] = {
true,
false,
"snow",
},
[59547] = {
true,
false,
"slateblue",
},
[196117] = {
true,
false,
"slateblue",
},
[84957] = {
true,
false,
"PALADIN",
},
[223994] = {
true,
false,
"snow",
},
[213892] = {
true,
false,
"snow",
},
[199325] = {
true,
false,
"snow",
},
[165556] = {
true,
false,
"deeppink",
},
[227575] = {
true,
false,
"peachpuff",
},
[193944] = {
true,
false,
"magenta",
},
[213893] = {
true,
false,
"snow",
},
[81819] = {
true,
false,
"magenta",
},
[115642] = {
true,
false,
"peachpuff",
},
[209801] = {
true,
false,
"deeppink",
},
[163894] = {
true,
false,
"peachpuff",
},
[188703] = {
true,
false,
"yellow",
},
[128434] = {
true,
false,
"PALADIN",
},
[162744] = {
true,
false,
"slateblue",
},
[205326] = {
true,
false,
"lime",
},
[152898] = {
true,
false,
"deeppink",
},
[197406] = {
true,
false,
"deeppink",
},
[169905] = {
true,
false,
"peachpuff",
},
[189470] = {
true,
false,
"snow",
},
[171184] = {
true,
false,
"slateblue",
},
[163128] = {
true,
false,
"snow",
},
[129788] = {
true,
false,
"PALADIN",
},
[168627] = {
true,
false,
"snow",
},
[81820] = {
true,
false,
"PALADIN",
},
[204560] = {
true,
false,
"yellow",
},
[94224] = {
true,
false,
"deeppink",
},
[189471] = {
true,
false,
"WARRIOR",
},
[227578] = {
true,
false,
"snow",
},
[186658] = {
true,
false,
"magenta",
},
[133430] = {
true,
false,
"slateblue",
},
[206351] = {
true,
false,
"snow",
},
[220368] = {
true,
false,
"yellow",
},
[167964] = {
true,
false,
"deeppink",
},
[177891] = {
true,
false,
"slateblue",
},
[216326] = {
true,
false,
"snow",
},
[185508] = {
true,
false,
"lime",
},
[115388] = {
true,
false,
"deeppink",
},
[199703] = {
true,
false,
"deeppink",
},
[197145] = {
true,
false,
"slateblue",
},
[131677] = {
true,
false,
"deeppink",
},
[198424] = {
true,
false,
"peachpuff",
},
[190368] = {
true,
false,
"magenta",
},
[164921] = {
true,
false,
"snow",
},
[65317] = {
true,
false,
"slateblue",
},
[197146] = {
true,
false,
"slateblue",
},
[188067] = {
true,
false,
"magenta",
},
[156226] = {
true,
false,
"snow",
},
[167607] = {
true,
false,
"deeppink",
},
[227581] = {
true,
false,
"snow",
},
[168886] = {
true,
false,
"snow",
},
[134232] = {
true,
false,
"peachpuff",
},
[45930] = {
true,
false,
"cyan",
},
[216328] = {
true,
false,
"deeppink",
},
[211341] = {
true,
false,
"slateblue",
},
[85194] = {
true,
false,
"deeppink",
},
[40943] = {
true,
false,
"PALADIN",
},
[190370] = {
true,
false,
"slateblue",
},
[157634] = {
true,
false,
"peachpuff",
},
[166969] = {
true,
false,
"snow",
},
[134284] = {
true,
false,
"WARRIOR",
},
[192800] = {
true,
false,
"magenta",
},
[167536] = {
true,
false,
"slateblue",
},
[238068] = {
true,
false,
"deeppink",
},
[197905] = {
true,
false,
"magenta",
},
[198502] = {
true,
false,
"snow",
},
[190371] = {
true,
false,
"WARRIOR",
},
[166970] = {
true,
false,
"peachpuff",
},
[82590] = {
true,
false,
"peachpuff",
},
[135245] = {
true,
false,
"slateblue",
},
[131821] = {
true,
false,
"magenta",
},
[197149] = {
true,
false,
"snow",
},
[218884] = {
true,
false,
"deeppink",
},
[133463] = {
true,
false,
"slateblue",
},
[172981] = {
true,
false,
"slateblue",
},
[166971] = {
true,
false,
"deeppink",
},
[196577] = {
true,
false,
"snow",
},
[152905] = {
true,
false,
"deeppink",
},
[192796] = {
true,
false,
"lime",
},
[164414] = {
true,
false,
"snow",
},
[192786] = {
true,
false,
"lime",
},
[180015] = {
true,
false,
"peachpuff",
},
[190373] = {
true,
false,
"magenta",
},
[164926] = {
true,
false,
"deeppink",
},
[184107] = {
true,
false,
"WARRIOR",
},
[168882] = {
true,
false,
"deeppink",
},
[206230] = {
true,
false,
"deeppink",
},
[132820] = {
true,
false,
"WARRIOR",
},
[113537] = {
true,
false,
"cyan",
},
[114624] = {
true,
false,
"slateblue",
},
[197535] = {
true,
false,
"dodgerblue",
},
[167612] = {
true,
false,
"slateblue",
},
[224249] = {
true,
false,
"deeppink",
},
[214287] = {
true,
false,
"yellow",
},
[198047] = {
true,
false,
"dodgerblue",
},
[107073] = {
true,
false,
"magenta",
},
[131666] = {
true,
false,
"magenta",
},
[229619] = {
true,
false,
"deeppink",
},
[221945] = {
true,
false,
"deeppink",
},
[114542] = {
true,
false,
"peachpuff",
},
[86684] = {
true,
false,
"snow",
},
[76518] = {
true,
false,
"deeppink",
},
[176565] = {
true,
false,
"snow",
},
[205337] = {
true,
false,
"deeppink",
},
[136139] = {
true,
false,
"deeppink",
},
[101326] = {
true,
false,
"deeppink",
},
[186284] = {
true,
false,
"WARRIOR",
},
[164929] = {
true,
false,
"peachpuff",
},
[228463] = {
true,
false,
"snow",
},
[100485] = {
true,
false,
"slateblue",
},
[192934] = {
true,
false,
"peachpuff",
},
[214140] = {
true,
false,
"slateblue",
},
[214673] = {
true,
false,
"peachpuff",
},
[162763] = {
true,
false,
"slateblue",
},
[190377] = {
true,
false,
"lime",
},
[95779] = {
true,
false,
"slateblue",
},
[135240] = {
true,
false,
"PALADIN",
},
[102094] = {
true,
false,
"WARRIOR",
},
[84767] = {
true,
false,
"WARRIOR",
},
[199233] = {
true,
false,
"slateblue",
},
[163524] = {
true,
false,
"deeppink",
},
[114626] = {
true,
false,
"deeppink",
},
[229252] = {
true,
false,
"peachpuff",
},
[210966] = {
true,
false,
"peachpuff",
},
[194316] = {
true,
false,
"slateblue",
},
[195877] = {
true,
false,
"magenta",
},
[214419] = {
true,
false,
"peachpuff",
},
[231839] = {
true,
false,
"snow",
},
[131812] = {
true,
false,
"magenta",
},
[213806] = {
true,
false,
"snow",
},
[194315] = {
true,
false,
"slateblue",
},
[216621] = {
true,
false,
"deeppink",
},
[101008] = {
true,
false,
"deeppink",
},
[102095] = {
true,
false,
"lime",
},
[155824] = {
true,
false,
"peachpuff",
},
[131685] = {
true,
false,
"snow",
},
[102287] = {
true,
false,
"cyan",
},
[114627] = {
true,
false,
"peachpuff",
},
[65362] = {
true,
false,
"WARRIOR",
},
[233474] = {
true,
false,
"snow",
},
[130404] = {
true,
false,
"cyan",
},
[216339] = {
true,
false,
"peachpuff",
},
[214421] = {
true,
false,
"slateblue",
},
[171805] = {
true,
false,
"peachpuff",
},
[220815] = {
true,
false,
"peachpuff",
},
[184140] = {
true,
false,
"deeppink",
},
[95766] = {
true,
false,
"WARRIOR",
},
[98370] = {
true,
false,
"snow",
},
[239833] = {
true,
false,
"deeppink",
},
[115395] = {
true,
false,
"slateblue",
},
[167967] = {
true,
false,
"peachpuff",
},
[127799] = {
true,
false,
"WARRIOR",
},
[80805] = {
true,
false,
"slateblue",
},
[116549] = {
true,
false,
"snow",
},
[205727] = {
true,
false,
"magenta",
},
[197671] = {
true,
false,
"peachpuff",
},
[197799] = {
true,
false,
"snow",
},
[179842] = {
true,
false,
"deeppink",
},
[59552] = {
true,
false,
"peachpuff",
},
[97068] = {
true,
false,
"WARRIOR",
},
[170690] = {
true,
false,
"peachpuff",
},
[130485] = {
true,
false,
"deeppink",
},
[40936] = {
true,
false,
"WARRIOR",
},
[166301] = {
true,
false,
"deeppink",
},
[223844] = {
true,
false,
"snow",
},
[40925] = {
true,
false,
"cyan",
},
[175550] = {
true,
false,
"deeppink",
},
[155090] = {
true,
false,
"snow",
},
[177808] = {
true,
false,
"slateblue",
},
[220946] = {
true,
false,
"slateblue",
},
[169924] = {
true,
false,
"slateblue",
},
[224271] = {
true,
false,
"snow",
},
[167111] = {
true,
false,
"snow",
},
[211228] = {
true,
false,
"peachpuff",
},
[114629] = {
true,
false,
"peachpuff",
},
[151127] = {
true,
false,
"deeppink",
},
[173714] = {
true,
false,
"slateblue",
},
[189234] = {
true,
false,
"deeppink",
},
[129527] = {
true,
false,
"WARRIOR",
},
[95832] = {
true,
false,
"WARRIOR",
},
[82597] = {
true,
false,
"deeppink",
},
[101075] = {
true,
false,
"deeppink",
},
[176575] = {
true,
false,
"snow",
},
[191230] = {
true,
false,
"deeppink",
},
[131819] = {
true,
false,
"snow",
},
[189235] = {
true,
false,
"cyan",
},
[80935] = {
true,
false,
"snow",
},
[188673] = {
true,
false,
"slateblue",
},
[167113] = {
true,
false,
"peachpuff",
},
[131436] = {
true,
false,
"slateblue",
},
[41139] = {
true,
false,
"peachpuff",
},
[155221] = {
true,
false,
"snow",
},
[96664] = {
true,
false,
"magenta",
},
[212765] = {
true,
false,
"slateblue",
},
[95769] = {
true,
false,
"magenta",
},
[191739] = {
true,
false,
"WARRIOR",
},
[185528] = {
true,
false,
"PALADIN",
},
[185656] = {
true,
false,
"snow",
},
[194990] = {
true,
false,
"snow",
},
[156245] = {
true,
false,
"slateblue",
},
[59873] = {
true,
false,
"slateblue",
},
[98810] = {
true,
false,
"WARRIOR",
},
[80936] = {
true,
false,
"peachpuff",
},
[156244] = {
true,
false,
"slateblue",
},
[185529] = {
true,
false,
"cyan",
},
[165197] = {
true,
false,
"deeppink",
},
[40357] = {
true,
false,
"deeppink",
},
[180864] = {
true,
false,
"deeppink",
},
[134701] = {
true,
false,
"magenta",
},
[138281] = {
true,
false,
"WARRIOR",
},
[129529] = {
true,
false,
"lime",
},
[223253] = {
true,
false,
"snow",
},
[167116] = {
true,
false,
"deeppink",
},
[187768] = {
true,
false,
"snow",
},
[189878] = {
true,
false,
"yellow",
},
[234955] = {
true,
false,
"deeppink",
},
[237192] = {
true,
false,
"deeppink",
},
[111563] = {
true,
false,
"WARRIOR",
},
[205735] = {
true,
false,
"peachpuff",
},
[198702] = {
true,
false,
"slateblue",
},
[171384] = {
true,
false,
"peachpuff",
},
[208165] = {
true,
false,
"snow",
},
[168396] = {
true,
false,
"slateblue",
},
[86372] = {
true,
false,
"cyan",
},
[133870] = {
true,
false,
"PALADIN",
},
[179010] = {
true,
false,
"snow",
},
[95771] = {
true,
false,
"PALADIN",
},
[180474] = {
true,
false,
"deeppink",
},
[151773] = {
true,
false,
"peachpuff",
},
[211291] = {
true,
false,
"deeppink",
},
[99891] = {
true,
false,
"WARRIOR",
},
[198503] = {
true,
false,
"snow",
},
[205152] = {
true,
false,
"cyan",
},
[114633] = {
true,
false,
"slateblue",
},
[80938] = {
true,
false,
"slateblue",
},
[88163] = {
true,
false,
"deeppink",
},
[241798] = {
true,
false,
"snow",
},
[98521] = {
true,
false,
"deeppink",
},
[198500] = {
true,
false,
"snow",
},
[170572] = {
true,
false,
"peachpuff",
},
[164562] = {
true,
false,
"peachpuff",
},
[191847] = {
true,
false,
"magenta",
},
[193462] = {
true,
false,
"magenta",
},
[198577] = {
true,
false,
"peachpuff",
},
[185534] = {
true,
false,
"lime",
},
[162133] = {
true,
false,
"deeppink",
},
[184303] = {
true,
false,
"lime",
},
[198870] = {
true,
false,
"peachpuff",
},
[164563] = {
true,
false,
"peachpuff",
},
[221979] = {
true,
false,
"deeppink",
},
[40577] = {
true,
false,
"slateblue",
},
[179269] = {
true,
false,
"deeppink",
},
[241800] = {
true,
false,
"slateblue",
},
[171341] = {
true,
false,
"snow",
},
[212389] = {
true,
false,
"peachpuff",
},
[223770] = {
true,
false,
"peachpuff",
},
[235151] = {
true,
false,
"peachpuff",
},
[220616] = {
true,
false,
"slateblue",
},
[84520] = {
true,
false,
"slateblue",
},
[151649] = {
true,
false,
"orange",
},
[165076] = {
true,
false,
"peachpuff",
},
[193760] = {
true,
false,
"slateblue",
},
[204206] = {
true,
false,
"peachpuff",
},
[178630] = {
true,
false,
"snow",
},
[102295] = {
true,
false,
"cyan",
},
[184130] = {
true,
false,
"WARRIOR",
},
[90997] = {
true,
false,
"WARRIOR",
},
[45915] = {
true,
false,
"WARRIOR",
},
[185537] = {
true,
false,
"peachpuff",
},
[171343] = {
true,
false,
"deeppink",
},
[190174] = {
true,
false,
"deeppink",
},
[115019] = {
true,
false,
"snow",
},
[191164] = {
true,
false,
"deeppink",
},
[184131] = {
true,
false,
"cyan",
},
[81212] = {
true,
false,
"slateblue",
},
[198709] = {
true,
false,
"slateblue",
},
[114316] = {
true,
false,
"snow",
},
[75506] = {
true,
false,
"snow",
},
[237967] = {
true,
false,
"yellow",
},
[223773] = {
true,
false,
"peachpuff",
},
[164567] = {
true,
false,
"snow",
},
[184132] = {
true,
false,
"magenta",
},
[220988] = {
true,
false,
"deeppink",
},
[213954] = {
true,
false,
"slateblue",
},
[229537] = {
true,
false,
"yellow",
},
[150143] = {
true,
false,
"peachpuff",
},
[214439] = {
true,
false,
"snow",
},
[187969] = {
true,
false,
"lime",
},
[208440] = {
true,
false,
"slateblue",
},
[98406] = {
true,
false,
"cyan",
},
[180432] = {
true,
false,
"peachpuff",
},
[195265] = {
true,
false,
"slateblue",
},
[114317] = {
true,
false,
"snow",
},
[167532] = {
true,
false,
"slateblue",
},
[208438] = {
true,
false,
"slateblue",
},
[223775] = {
true,
false,
"peachpuff",
},
[208450] = {
true,
false,
"slateblue",
},
[189265] = {
true,
false,
"PALADIN",
},
[199368] = {
true,
false,
"deeppink",
},
[220195] = {
true,
false,
"snow",
},
[183495] = {
true,
false,
"slateblue",
},
[208193] = {
true,
false,
"peachpuff",
},
[214441] = {
true,
false,
"deeppink",
},
[113998] = {
true,
false,
"WARRIOR",
},
[214697] = {
true,
false,
"deeppink",
},
[205618] = {
true,
false,
"slateblue",
},
[190401] = {
true,
false,
"magenta",
},
[220196] = {
true,
false,
"deeppink",
},
[233623] = {
true,
false,
"deeppink",
},
[211121] = {
true,
false,
"slateblue",
},
[196548] = {
true,
false,
"snow",
},
[223777] = {
true,
false,
"peachpuff",
},
[220974] = {
true,
false,
"deeppink",
},
[205619] = {
true,
false,
"slateblue",
},
[219046] = {
true,
false,
"snow",
},
[220197] = {
true,
false,
"slateblue",
},
[127106] = {
true,
false,
"WARRIOR",
},
[134012] = {
true,
false,
"slateblue",
},
[164702] = {
true,
false,
"deeppink",
},
[228514] = {
true,
false,
"snow",
},
[185032] = {
true,
false,
"slateblue",
},
[205620] = {
true,
false,
"slateblue",
},
[213932] = {
true,
false,
"slateblue",
},
[151657] = {
true,
false,
"snow",
},
[114319] = {
true,
false,
"peachpuff",
},
[115406] = {
true,
false,
"snow",
},
[207796] = {
true,
false,
"deeppink",
},
[195135] = {
true,
false,
"cyan",
},
[80816] = {
true,
false,
"snow",
},
[216364] = {
true,
false,
"deeppink",
},
},
["extra_icon_show_enrage_border"] = {
0,
0,
0,
},
["extra_icon_caster_font"] = "Friz Quadrata TT",
["hook_data"] = {
{
["OptionsValues"] = {
["nameplateFlash"] = true,
["colorTick"] = {
1,
1,
1,
1,
},
["colorProtected"] = {
1,
0.25098040699959,
0.25098040699959,
1,
},
["colorSecondaryInterrupt"] = {
1,
0.50196081399918,
0.50196081399918,
1,
},
["replaceName"] = false,
["castNameSize"] = 40,
["colorNoInterrupt"] = {
0.80000007152557,
0.80000007152557,
0.80000007152557,
1,
},
["colorInterruptAvailable"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
["colorInterruptSoon"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
["hideNameSolo"] = true,
},
["HooksTemp"] = {
},
["UID"] = "0x63cc19ce2df2342d",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend\n\n\n",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Get players current talent specialization\n    envTable.spec = GetSpecialization()\n    \n    -- Flashing nameplate options\n    envTable.optionsHideFlashSolo = modTable.config.hideNameplateFlashSolo\n    envTable.optionsNameplateFlash = modTable.config.nameplateFlash\n    envTable.optionsHideFlashAsTank = modTable.config.hideFlashAsTank\n    \n    -- Target name options\n    envTable.optionsShowTargetName = modTable.config.showTargetName\n    envTable.optionsReplaceMyName = modTable.config.replaceName\n    envTable.optionsHideNameSolo = modTable.config.hideNameSolo\n    envTable.optionsCastNameSize = modTable.config.castNameSize\n    \n    -- Cast bar interrupt coloring\n    envTable.optionsShowInterruptColor = modTable.config.showInterruptColor\n    envTable.optionsShowSecondaryInterrupts = modTable.config.showSecondaryInterrupts\n    envTable.optionsColorNoInterrupt = modTable.config[\"colorNoInterrupt\"]\n    envTable.optionsColorInterruptAvailable = modTable.config[\"colorInterruptAvailable\"]\n    envTable.optionsColorInterruptSoon = modTable.config[\"colorInterruptSoon\"]\n    envTable.optionsColorSecondaryAvailable = modTable.config[\"colorSecondaryInterrupt\"]\n    envTable.optionsColorProtected = modTable.config[\"colorProtected\"]\n    envTable.optionsColorTick = modTable.config[\"colorTick\"]\n    \n    -- Get the primary interrupt ID of the players current class/spec.\n    -- All non-warlock classes have straight forward primary interrupt skills.\n    if envTable.class ~= 9 then\n        envTable.interruptID = modTable.primaryInterrupts[envTable.class][envTable.spec]\n    else\n        -- Warlock interrupt changes based on pet being used.\n        envTable.interruptID = envTable.GetWarlockInterrupt()\n    end\n    \n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend",
["Initialization"] = "function (modTable)\n    -- List of primary interupt skills used by each spec and class\n    -- Does not track secondary interrupt skills (such as Avenger's shield, etc)\n    modTable.primaryInterrupts =\n    {\n        \n        -- Warrior\n        [1] =\n        {\n            [1] = 6552, -- Pummel (Arms)\n            [2] = 6552, -- Pummel (Fury)\n            [3] = 6552 --  Pummel (Protection)\n        },\n        \n        -- Paladin\n        [2] =\n        {\n            [1] = 96231, -- Rebuke (Holy)\n            [2] = 96231, -- Rebuke (Protection)\n            [3] = 96231 -- Rebuke (Retribution)\n        },\n        \n        -- Hunter\n        [3] =\n        {\n            [1] = 147362, -- Counter Shot (Beast Mastery)\n            [2] = 147362, -- Counter Shot (Marksmanship)\n            [3] = 187707 -- Muzzle (Survival)\n        },\n        \n        -- Rogue\n        [4] =\n        {\n            [1] = 1766, -- Kick (Assassination)\n            [2] = 1766, -- Kick (Outlaw)\n            [3] = 1766 -- Kick (Subtlety)\n        },\n        \n        -- Priest\n        [5] =\n        {\n            [1] = nil,\n            [2] = nil,\n            [3] = 15487 -- Silence (Shadow)\n        },\n        \n        -- Death Knight\n        [6] =\n        {\n            [1] = 47528, -- Mind Freeze (Blood)\n            [2] = 47528, -- Mind Freeze (Frost)\n            [3] = 47528 -- Mind Freeze (Unholy)\n        },\n        \n        -- Shaman\n        [7] =\n        {\n            [1] = 57994, -- Wind Shear (Elemental)\n            [2] = 57994, -- Wind Shear (Enhancement)\n            [3] = 57994 -- Wind Shear (Restoration)\n        },\n        \n        -- Mage\n        [8] =\n        {\n            [1] = 2139, -- Counterspell (Arcane)\n            [2] = 2139, -- Counterspell (Fire)\n            [3] = 2139 -- Counterspell (Frost)\n        },\n        \n        -- [9] Warlock interrupt depends on pet being used.\n        --  Code for warlock contained in Cast Start hook.\n        \n        -- Monk\n        [10] =\n        {\n            [1] = 116705, -- Spear Hand Strike (Brewmaster)\n            [2] = 116705, -- Spear Hand Strike (Mistweaver)\n            [3] = 116705 -- Spear Hand Strike (Windwalker)\n        },\n        \n        -- Druid\n        [11] =\n        {\n            [1] = 78675, -- Solar Beam (Balance)\n            [2] = 106839, -- Skull Bash (Feral)\n            [3] = 106839, -- Skull Bash (Guardian)\n            [4] = 106839 -- Skull Bash (Restoration)\n        },\n        \n        -- Demon Hunter\n        [12] =\n        {\n            [1] = 183752, -- Disrupt (Havoc)\n            [2] = 183752 -- Disrupt (Vengeance)\n        },\n        \n        -- Evoker\n        [13] =\n        {\n            [1] = 351338, -- Quell (Devastation)\n            [2] = 351338 -- Quell (Preservation)\n        }\n    }\n    \nend\n\n\n",
["Constructor"] = "function(self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    if not unitFrame.castBar.tick then\n        unitFrame.castBar.tick = unitFrame.castBar:CreateTexture (nil, \"overlay\")\n        unitFrame.castBar.tick:SetDrawLayer (\"overlay\", 4)\n        unitFrame.castBar.tick:SetBlendMode (\"DISABLE\")\n        unitFrame.castBar.tick:SetHeight(unitFrame.castBar:GetHeight())\n    end\n    unitFrame.castBar.tick:SetTexture(Plater.SparkTextures[8])\n    unitFrame.castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n    unitFrame.castBar.tick:SetWidth(2)\n    \n    \n    function envTable.EnhancedCastBar(unitId, castBar)\n        castBar.tick:Hide()\n        \n        if castBar.IsInterrupted then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        \n        if UnitExists(targetUnitId) then\n            local targetName = UnitName(targetUnitId)\n            local spellID = castBar.SpellID\n            if BigWigsAPI then\n                spellName =  BigWigsAPI.GetSpellRename(spellID) or castBar.spellName\n            else\n                spellName = castBar.spellName\n            end\n            local inParty = UnitInParty(\"player\")\n            local inRaid = UnitInRaid(\"player\")\n            castBar.Text:SetText(spellName)\n            \n            -- Cast is targetting a specific unit\n            if targetName then\n                \n                local isTargettingMe\n                local targetNameByColor\n                \n                -- Determine if the cast is targetting the player character\n                if targetName == UnitName(\"player\") then\n                    isTargettingMe = true\n                else\n                    isTargettingMe = false\n                end\n                \n                -- Nameplate flash options\n                if isTargettingMe then\n                    if envTable.optionsNameplateFlash then\n                        \n                        -- Default value of true since it is turned on in the options\n                        local showNameplateFlash = true\n                        \n                        -- Hide flash when not in a group\n                        if envTable.optionsHideFlashSolo then\n                            if not inParty and not inRaid then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Hide flash when player is a tank specialization\n                        if envTable.optionsHideFlashAsTank then\n                            if GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Show nameplate flash if conditions met\n                        if showNameplateFlash then\n                            Plater.FlashNameplateBody (unitFrame)\n                        end\n                    end\n                end\n                \n                \n                -- Target name in cast bar options\n                if envTable.optionsShowTargetName then\n                    \n                    -- Change character name to \"Me\" if turned on in options\n                    if envTable.optionsReplaceMyName then\n                        if isTargettingMe then\n                            targetName = \"Me\"\n                        end\n                    end\n                    \n                    -- Color the target name based on the targets class color\n                    targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                    \n                    -- Shrink the name of the cast bar text if necessary (based on options)\n                    local castBarWidth = castBar:GetWidth()\n                    DetailsFramework:TruncateText (castBar.Text, castBarWidth * (envTable.optionsCastNameSize / 100))\n                    \n                    -- Update the cast bar text\n                    local currentText = castBar.Text:GetText()\n                    if currentText ~= nil and currentText ~= '' then\n                        local castText = currentText .. \" - \" ..  targetNameByColor\n                        \n                        -- Hide self target name when solo\n                        if envTable.optionsHideNameSolo then\n                            if not inParty and not inRaid then\n                                if isTargettingMe then\n                                    castText = currentText\n                                end\n                            end\n                        end\n                        castBar.Text:SetText(castText)\n                        DetailsFramework:TruncateText (castBar.Text, castBarWidth)\n                    end\n                end\n            end\n            \n            \n            -- Interrupt bar color options\n            if envTable.optionsShowInterruptColor then\n                local canInterrupt = castBar.canInterrupt\n                local castEndTime = castBar.spellEndTime\n                local interruptReadyTime = 0\n                local start\n                local duration\n                local playerIsWarlock\n                \n                if envTable.interruptID ~= nil then\n                    local cd = C_Spell.GetSpellCooldown(envTable.interruptID)  --local\n                    start, duration  =  cd.startTime, cd.duration\n                    interruptReadyTime = start + duration\n                end\n                \n                if canInterrupt then\n                    if envTable.interruptID ~= nil then\n                        \n                        -- Is the player a warlock?\n                        if envTable.class == 9 then\n                            playerIsWarlock = true\n                        else\n                            playerIsWarlock = false\n                        end\n                        \n                        -- Check to see if the spell is known/talented\n                        if IsSpellKnown(envTable.interruptID, playerIsWarlock) then\n                            if interruptReadyTime == 0 then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptAvailable)\n                            elseif envTable.optionsShowSecondaryInterrupts and envTable.class == 2 and IsSpellKnown(31935) and not envTable.isSpellOnCooldown_IgnoreGCD(31935) then\n                                -- Paladin Avenger's Shield\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            elseif interruptReadyTime < (castEndTime - 0.25) then\n                                castBar.tick:Show()\n                                castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n                                local tickLocation = (start + duration - castBar.spellStartTime) / castBar.maxValue  -- castBar.spellStartTime + 0.25\n                                if castBar.channeling then\n                                    tickLocation = 1 - tickLocation\n                                end\n                                castBar.tick:SetPoint (\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                                \n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptSoon)\n                            elseif interruptReadyTime >= (castEndTime - 0.25) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                            end\n                        else\n                            Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                        end\n                    end\n                else\n                    Plater.SetCastBarColor(unitFrame, envTable.optionsColorProtected)\n                end\n                \n            end\n            \n        end\n    end\n    \n    \n    -- Checks to see if Felgaurd or Felhunter interrupt skill is known and assigns if found\n    function envTable.GetWarlockInterrupt()\n        if IsSpellKnown(89766, true) then\n            -- Felguard: Axe Toss\n            return 89766\n        elseif IsSpellKnown(19647, true) then\n            -- Felhunter: Spell Lock\n            return 19647\n        elseif C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnown(132409, true) then\n            -- Check for Grimoire of Sacrifice\n            return 132409\n        else\n            -- Otherwise no interrupt available    \n            return nil\n        end\n    end\n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    function envTable.isSpellOnCooldown_IgnoreGCD(spellID)\n        local GCD=C_Spell.GetSpellCooldown(61304) -- GCD\n        local gcdSTART, gcdDUR = GCD.startTime, GCD.duration\n        local GCD_expirationTime = gcdSTART + gcdDUR\n        local info = C_Spell.GetSpellCooldown(spellID)\n        local spellStart, spellDuration  = info.startTime, info.duration\n        local spellReadyTime = spellStart + spellDuration\n        if spellReadyTime <= GCD_expirationTime then\n            return false\n        else\n            return true\n        end\n    end\n    \nend",
},
["Time"] = 1759090907,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/L6ZlsbPEC/9",
["Icon"] = 429383,
["Enabled"] = true,
["Revision"] = 1359,
["semver"] = "1.2.3",
["Author"] = "Nimeshady-Zul'jin",
["Desc"] = "Shows who a cast is targeting in the cast bar as well as other configurable options.",
["Prio"] = 99,
["version"] = 9,
["PlaterCore"] = 1,
["Name"] = "Enhanced Enemy Castbar",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Feature - Custom cast bar coloring:",
["Name"] = "CUSTOM CAST BAR COLORS",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showInterruptColor",
["Value"] = true,
["Name"] = "Enable custom colored enemy cast bars.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting the cast bar will change to the colors below based on the status of you being able to interrupt the cast.",
},
{
["Type"] = 4,
["Key"] = "showSecondaryInterrupts",
["Value"] = true,
["Name"] = "Enable support for secondary interrupts: Avenger's Shield (Paladin), Spell Reflection (Warrior).",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colors casts that can be reflected with Spell Reflection (Warrior) and interrupted with Avenger's Shield (Paladin).",
},
{
["Type"] = 1,
["Key"] = "colorInterruptAvailable",
["Value"] = {
0.10980392992496,
0.63921570777893,
0.1843137294054,
1,
},
["Name"] = "Color when my primary interrupt is available.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt available to interrupt the current cast.",
},
{
["Type"] = 1,
["Key"] = "colorInterruptSoon",
["Value"] = {
0.63921570777893,
0.61568629741669,
0.10980392992496,
1,
},
["Name"] = "Color when my primary interrupt is down but will be available before cast finishes.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt on cooldown but it will be available to interrupt the current cast.",
},
{
["Type"] = 1,
["Key"] = "colorNoInterrupt",
["Value"] = {
0.61960786581039,
0.16862745583057,
0.28627452254295,
1,
},
["Name"] = "Color when my primary interrupt is unavailable.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you do not have an interrupt available to interrupt the current cast",
},
{
["Type"] = 1,
["Key"] = "colorSecondaryInterrupt",
["Value"] = {
0.10980392992496,
0.52156865596771,
0.63921570777893,
1,
},
["Name"] = "Color for secondary interrupts. (Avenger's Shield and Spell Reflection)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast targeting you can be reflected with Spell Reflection or interrupted with Avenger's Shield. Only active when playing the appropriate class with the skill off cooldown.",
},
{
["Type"] = 1,
["Key"] = "colorProtected",
["Value"] = {
0.22352942824364,
0.22352942824364,
0.22352942824364,
1,
},
["Name"] = "Color for casts that are protected/un-interruptable.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast can not be interrupted by a standard interrupt.",
},
{
["Type"] = 1,
["Key"] = "colorTick",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Name"] = "Color of interrupt available tick. (Hover for more info)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "When your interrupt is currently down but will become available before the current cast completes a tick will appear in the cast bar showing you the exact position in the cast you will be able to interrupt the cast. You can customize the color of the tick using this setting.  YOU MUST /RELOAD YOUR UI AFTER CHANGING THIS COLOR.",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Feature - Show name of target in the cast bar:",
["Name"] = "Settings Target Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showTargetName",
["Value"] = true,
["Name"] = "Show the name of cast targets in the cast bar.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting a spell at a target, the targets name will appear in the cast bar.",
},
{
["Type"] = 4,
["Key"] = "hideNameSolo",
["Value"] = true,
["Name"] = "Hide my name when not in a party.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When you are not in a party or raid group casts targetting you will not display your name in the cast bar.",
},
{
["Type"] = 4,
["Key"] = "replaceName",
["Value"] = true,
["Name"] = "Show \"Me\" instead of my character name.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When targetted by casts, instead of showing your character name it will show \"Me\".",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "The relative size (in percentage) that a spell name will take up of the cast bar, not including the target name. Adjust this so that target names fit into the cast bar correctly based on the width and text size of your cast bar. If you find even after adjusting this setting that there is not enough space try decreasing your cast bar text size or making the cast bar wider.",
["Min"] = 30,
["Fraction"] = false,
["Value"] = 60,
["Name"] = "Maximum length of a cast name in %. Hover for more info.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castNameSize",
},
{
["Type"] = 5,
["Key"] = "option8",
["Value"] = "Feature - Flash nameplates when a spell targets you:",
["Name"] = "Settings Border Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Namplate Flash",
},
{
["Type"] = 4,
["Key"] = "nameplateFlash",
["Value"] = false,
["Name"] = "Flash the nameplates of enemies that are casting a spell or ability targeting me.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is targetting you with a cast, this option will flash the nameplate of that enemy to indicate that cast is targeting you.",
},
{
["Type"] = 4,
["Key"] = "hideNameplateFlashSolo",
["Value"] = true,
["Name"] = "Hide flash effect when not in a party.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing solo.",
},
{
["Type"] = 4,
["Key"] = "hideFlashAsTank",
["Value"] = true,
["Name"] = "Hide flash effect when I'm playing a tank specialization.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing as a tank specialization.",
},
},
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --ensure reload updates existing\n    modTable.updateExisting(unitFrame)\nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    \n    -- settings:\n    local formatAuraTimers = modTable.config.formatAuraTimers\n    local formatBuffSpecialTimers = modTable.config.formatBuffSpecialTimers\n    \n    \n    -- time formatting function: (can be adjusted)\n    Plater.FormatTimeNew = function (s)\n        if s < 5 then\n            return (\"%.1f\"):format(s)\n        elseif s < 60 then\n            return (\"%d\"):format(s)\n        elseif s < 3600 then\n            return (\"%d:%02d\"):format(s/60%60, s%60)\n        elseif s < 86400 then\n            return (\"%dh %02dm\"):format(s/(3600), s/60%60)\n        else\n            return (\"%dd %02dh\"):format(s/86400, (s /3600) - (floor(s/86400) * 24))\n        end\n    end\n    Plater.FormatTimeOrig = Plater.FormatTimeOrig or Plater.FormatTime\n    \n    local DF = _G[\"DetailsFramework\"]\n    local IconRowFunctions = DF.IconRowFunctions or DF.IconMixin\n    IconRowFunctions.FormatCooldownTimeOrig = IconRowFunctions.FormatCooldownTimeOrig or IconRowFunctions.FormatCooldownTime\n    \n    \n    -- exchange formatting:\n    function modTable.hookTimeFormat()\n        if formatAuraTimers then\n            Plater.FormatTime = Plater.FormatTimeNew\n        else\n            Plater.FormatTime = Plater.FormatTimeOrig\n        end\n        \n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                IconRowFunctions.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n        else\n            -- no buff special\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            end\n        end\n    end\n    \n    function modTable.updateExisting(unitFrame)\n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        else\n            \n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeOrig (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        end\n        \n    end\n    \n    \n    modTable.hookTimeFormat()\n    for _, plateFrame in ipairs (Plater.GetAllShownPlates()) do\n        modTable.updateExisting(plateFrame.unitFrame)\n    end\n    \nend",
["Player Logon"] = "function(modTable)\n    modTable.hookTimeFormat()\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1759090429,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/mULsbUUxJ/13",
["Icon"] = "INTERFACE\\ICONS\\Ability_BossMagistrix_TimeWarp2",
["Enabled"] = true,
["Revision"] = 256,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Overwrites the Plater time formatting to show second fractions.",
["Prio"] = 99,
["version"] = 13,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "formatAuraTimers",
["Value"] = true,
["Name"] = "Format Aura Timers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "formatBuffSpecialTimers",
["Value"] = true,
["Name"] = "Format Buff Special Timers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["LastHookEdited"] = "",
["Name"] = "Detailed Time Format",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsVisible()) then\n                if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n                end \n            end\n            \n        end\n    end\n    \n    \n    for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        if auraIcon:IsShown() then\n            if (auraIcon:IsVisible()) then\n                local remainingTime = (auraIcon.startTime + auraIcon.duration - GetTime())\n                if (remainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.okay)\n                end\n            end\n        end\n    end\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"#FF4040\",\n        okay = \"#FFFFFF\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 5.0,\n    }\n    \nend\n\n\n",
},
["Time"] = 1759090413,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/CjOSTakvH/1",
["Icon"] = "Interface\\Timer\\Challenges-Logo",
["Enabled"] = true,
["Revision"] = 129,
["semver"] = "1.0.0",
["Author"] = "Ditador-Azralon",
["Desc"] = "Change the color of the aura timer by it's time left",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Paint Aura Timers",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = .5 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Time"] = 1759090801,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 134400,
["Enabled"] = true,
["Revision"] = 208,
["semver"] = "",
["Author"] = "????????-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Debuff Border",
},
{
["OptionsValues"] = {
["showBigIcon"] = true,
["ShowShieldIcon"] = false,
["ReplaceDefaultBorder"] = false,
["ExpandTargetBorder"] = true,
["SpellIconBorderSize"] = 0.5,
["SpellIconXOffset"] = 0,
["CastBarBorder"] = true,
["TargetBorderSize"] = 1.5,
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Destructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar.border then unitFrame.healthBar.border:Hide() end\n    if unitFrame.healthBar.targetBorder then unitFrame.healthBar.targetBorder:Hide() end\n    if unitFrame.castBar.border then unitFrame.castBar.border:Hide() end\n    if unitFrame.castBar.Icon then unitFrame.castBar.Icon:Hide() end\n    if unitFrame.castBar.IconBorder then unitFrame.castBar.IconBorder:Hide() end\n    if unitFrame.castBar.BorderShield then unitFrame.castBar.BorderShield:Hide() end\nend",
["Initialization"] = "function (modTable)\n    \n    function modTable.UpdateIconPosition(unitFrame, envTable, modTable)\n        local castBar = unitFrame.castBar\n        local icon = unitFrame.castBar.Icon\n        local shield = unitFrame.castBar.BorderShield\n        icon:Hide()\n        castBar.IconBorder:Hide()\n        if (modTable.config.ShowSpellIcon) then\n            icon:ClearAllPoints()\n            if (modTable.config.showBigIcon) then\n                icon:SetPoint(\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetPoint(\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            else\n                icon:SetPoint(\"topright\", unitFrame.castBar, \"topleft\", modTable.config.SpellIconXOffset, envTable.IconSizeOffset)\n                icon:SetPoint(\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            end\n            icon:Show()\n            if modTable.config.SpellIconBorder then\n                castBar.IconBorder:SetVertexColor(\n                    DetailsFramework:ParseColors(modTable.config.SpellIconBorderColor)\n                )\n                castBar.IconBorder:SetBorderSizes(\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize\n                )\n                castBar.IconBorder:UpdateSizes()\n                castBar.IconBorder:Show()\n            end\n        end\n        \n        if modTable.config.CastBarBorder then\n            castBar.border:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.CastBarBorderColor)\n            )\n            castBar.border:SetBorderSizes(\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize\n            )\n            castBar.border:UpdateSizes()\n            castBar.border:Show()\n        else\n            castBar.border:Hide()\n        end\n        \n        if (modTable.config.ShowShieldIcon and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            shield:SetSize(modTable.config.ShieldIconWidth, modTable.config.ShieldIconHeight)\n            shield:ClearAllPoints()\n            shield:SetPoint( \"center\", castBar, \"left\", modTable.config.ShieldIconXOffset, modTable.config.ShieldIconYOffset )\n        else\n            shield:Hide()\n        end\n    end\n    \n    function modTable.UpdateBorder(unitFrame, envTable, modTable, casting)\n        local healthBar = unitFrame.healthBar\n        local castBar = unitFrame.castBar\n        local targetBorder = unitFrame.healthBar.targetBorder\n        local defaultBorder = unitFrame.healthBar.border\n        \n        targetBorder:Hide()\n        defaultBorder:Hide()\n        \n        if modTable.config.ReplaceDefaultBorder then\n            targetBorder = unitFrame.healthBar.border\n            targetBorder:SetFrameStrata(\"HIGH\")\n            targetBorder:Show()\n        else\n            unitFrame.healthBar.border:Show()\n            if unitFrame.IsTarget then\n                targetBorder:Show()\n            end\n        end\n        \n        if casting==true then\n            if modTable.config.ShowSpellIcon then\n                targetBorder:ClearAllPoints()\n                if modTable.config.ExpandTargetBorder then\n                    if modTable.config.showBigIcon then\n                        targetBorder:SetPoint(\"topleft\", castBar.Icon, \"topleft\", 0, 0)\n                    else\n                        targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                    end\n                else\n                    targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                end\n                if modTable.config.ExpandTargetBorder then\n                    targetBorder:SetPoint(\"bottomright\", castBar, \"bottomright\", 0, 0)\n                else\n                    targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0)\n                end\n            else\n                targetBorder:ClearAllPoints()\n                targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0)\n            end\n            \n        elseif casting==false then\n            targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n            targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0) \n        end\n        \n        if unitFrame.IsTarget then\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.TargetBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize\n            )\n            targetBorder:UpdateSizes()\n        else\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(envTable.DefaultBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize\n            )\n            targetBorder:UpdateSizes()\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    modTable.UpdateBorder (unitFrame, envTable, modTable, true)\nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    self.ThrottleUpdate = -1\nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- Any settings changed here will require you to disable this plater mod,\n    -- then re-enable it by checking the box in the list on the left hand side of the window\n    \n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 0\n    \n    -- Settings for the shield for non interruptible casts\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    \n    envTable.DefaultBorderSize  = Plater.db.profile.border_thickness\n    envTable.DefaultBorderColor = Plater.db.profile.border_color\n    \n    -- Create a new health bar target border\n    if not unitFrame.healthBar.targetBorder then\n        unitFrame.healthBar.targetBorder = CreateFrame(\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.healthBar.targetBorder:Hide()\n    end\n    \n    -- Create a frame for the spell icon border\n    if not unitFrame.castBar.IconOverlayFrame then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.IconBorder:SetIgnoreParentScale(false)\n    end\n    \n    -- Create a frame for the cast bar border\n    if not unitFrame.castBar.border then\n        unitFrame.castBar.border = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.border:SetIgnoreParentScale(false)\n    end\n    \n    -- Hook into when the cast bar hides so we can update the border with casting set to false\n    -- Note: This hook needs to be the last thing in the constructor as it may immediately call\n    -- UpdateBorder and we need to make sure all of the frames are created first\n    if not unitFrame.castBar.borderChangeHooked then\n        hooksecurefunc(\n            unitFrame.castBar, \n            \"Hide\",\n            function()\n                modTable.UpdateBorder(unitFrame, envTable, modTable, false)\n            end\n        )\n        unitFrame.castBar.borderChangeHooked = true\n    end\nend",
},
["Time"] = 1759090411,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 1664,
["semver"] = "",
["Author"] = "Vahra-Tichondrius",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate and extend the border around icon and cast bar.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Border Settings",
["Name"] = "Border Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "TargetBorderColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Target Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of the targeted nameplate",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Target Border Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "TargetBorderSize",
},
{
["Type"] = 4,
["Key"] = "ExpandTargetBorder",
["Value"] = true,
["Name"] = "Expand Target Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Expands the target border around the cast icon and cast bar",
},
{
["Type"] = 4,
["Key"] = "ReplaceDefaultBorder",
["Value"] = true,
["Name"] = "Replace Default Border (/reload)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Replace the default border instead of creating a new one. You may have to /reload when changing this option",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Cast Bar Settings",
["Name"] = "Cast Bar Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Note, to get this to look right you may have",
["Name"] = "Note",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "to update the Y offset of the cast bar",
["Name"] = "Note",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "under Plater's \"Enemy Npc\" settings",
["Name"] = "Note",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "CastBarBorder",
["Value"] = true,
["Name"] = "Cast Bar Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show a border around the enemy cast bar",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the enemy cast bar",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Name"] = "Cast Bar Border Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "CastBarBorderSize",
},
{
["Type"] = 1,
["Key"] = "CastBarBorderColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Cast Bar Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of enemy cast bar",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Cast Icon Settings",
["Name"] = "Cast Icon Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "ShowSpellIcon",
["Value"] = true,
["Name"] = "Show Spell Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show the spell icon of the targets cast",
},
{
["Type"] = 4,
["Key"] = "showBigIcon",
["Value"] = false,
["Name"] = "Show Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "SpellIconBorder",
["Value"] = true,
["Name"] = "Spell Icon Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should Show a border around the spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Name"] = "Spell Icon Border Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "SpellIconBorderSize",
},
{
["Type"] = 1,
["Key"] = "SpellIconBorderColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Spell Icon Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of target's spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X Offset of the Spell Icon",
["Min"] = -10,
["Fraction"] = true,
["Value"] = 0.5,
["Name"] = "Spell Icon X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "SpellIconXOffset",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Shield Icon Settings",
["Name"] = "Shield Icon Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "ShowShieldIcon",
["Value"] = false,
["Name"] = "Show Shield Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show a shield icon next to the cast bar for uninterruptable spells",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X offset of the shield icon",
["Min"] = -10,
["Fraction"] = true,
["Value"] = -4.5,
["Name"] = "Shield Icon X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconXOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The Y offset of the shield icon",
["Min"] = -10,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Shield Icon Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconYOffset",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The width of the shield icon",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shield Icon Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconWidth",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The height of the shield icon",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shield Icon Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconHeight",
},
},
["HooksTemp"] = {
},
["Name"] = "Target Border",
},
{
["OptionsValues"] = {
["colour_names"] = false,
["show_elite"] = false,
["show_elite_text"] = false,
["short_names"] = true,
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Initialization"] = "function(modTable)\n    \n    -- used for nameColouring\n    -- AARRGGBB\n    local markerToHex = {\n        [1] = \"FFEAEA0D\", -- Yellow 5 Point Star\n        [2] = \"FFEAB10D\", -- Orange Circle\n        [3] = \"FFCD00FF\", -- Purple Diamond\n        [4] = \"FF06D425\", -- Green Triangle\n        [5] = \"FFB3E3D8\", -- Light Blue Moon\n        [6] = \"FF0CD2EA\", -- Blue Square\n        [7] = \"FFD6210B\", -- Red Cross\n        [8] = \"FFFFFFFF\", -- White Skull\n    }\n    \n    local eliteToHex = {\n        [1] = \"FFFFCC00\", -- Elite\n        [2] = \"FFCCCCCC\", -- Rare\n        [3] = \"FFFF8040\", -- Rare Elite\n    }\n    \n    -- Makes it so you take their first name e.g Jessie Howlis -> Jessie\n    local nameBlacklist = {\n        [\"the\"] = true,\n        [\"of\"] = true,\n        [\"Tentacle\"] = true,\n        [\"Apprentice\"] = true,\n        [\"Denizen\"] = true,\n        [\"Emissary\"] = true,\n        [\"Howlis\"] = true,\n        [\"Terror\"] = true,\n        [\"Totem\"] = true,\n        [\"Waycrest\"] = true,\n        [\"Aspect\"] = true\n    }\n    \n    \n    -- @unitId  unitID for mob e.g nameplate1\n    function modTable.renamer(unitFrame, unitId)\n        \n        if not (unitId and unitFrame) then\n            return\n        end\n        \n        local name = unitFrame.namePlateUnitName or UnitName(unitId) or \"\"\n        \n        -- 1) shorten\n        if modTable.config[\"short_names\"] and not unitFrame.unitName.isRenamed then\n            local unitName\n            local a, b, c, d, e, f = strsplit(' ', name, 5)\n            if nameBlacklist[b] then\n                unitName = a or b or c or d or e or f\n            else\n                unitName = f or e or d or c or b or a\n            end\n            name = unitName or name\n        end -- if short_names\n        \n        \n        -- 2) Coloring\n        if modTable.config[\"colour_names\"] then\n            local marker = GetRaidTargetIndex(unitId)\n            if marker then\n                local color = markerToHex[marker or 8]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        -- 3) Rare / Elite Addition\n        if modTable.config[\"show_elite\"] then\n            local eliteType = UnitClassification(unitId)\n            if eliteType == \"elite\" then\n                local color = eliteToHex[1]\n                name = WrapTextInColorCode(name, color)\n            elseif eliteType == \"rare\" then\n                local color = eliteToHex[2]\n                name = WrapTextInColorCode(name, color)\n            elseif eliteType == \"rareelite\" then\n                local color = eliteToHex[3]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        if modTable.config[\"show_elite_text\"] then\n            local eliteType = UnitClassification(unitId)\n            if eliteType == \"elite\" and not IsInRaid() then\n                name = name .. \" [E]\"\n            elseif eliteType == \"rare\" and not IsInRaid() then\n                name = name .. \" [R]\"\n            elseif eliteType == \"rareelite\" and not IsInRaid() then\n                name = name .. \" [RE]\"\n            end\n        end\n        \n        -- 4) Apply\n        unitFrame.healthBar.unitName:SetText(name)\n    end -- envTable.namer\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend\n\n\n\n",
},
["Time"] = 1759090174,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 390,
["semver"] = "",
["Author"] = "Rhk-Tarren Mill",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "short_names",
["Value"] = true,
["Name"] = "Shorten Names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Shortens NPC Names. eg.: \"Murkbrine Fishmancer\" -> \"Fishmancer\"",
},
{
["Type"] = 4,
["Key"] = "colour_names",
["Value"] = true,
["Name"] = "Colour by Raidmark",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colours the Name by the assigned Raidmark. eg.: Triangle --> Green Name",
},
{
["Type"] = 4,
["Key"] = "show_elite",
["Value"] = true,
["Name"] = "Colour by Unit Status",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Concatenate Name with Unit Status",
["Value"] = true,
["Key"] = "show_elite_text",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["Name"] = "Name Shortener",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Cast Update"] = "function(self, unitId, unitFrame, envTable)\n    unitFrame.castBar.ScheduleToHide = function(self) self:Hide() end\nend",
},
["Time"] = 1759090859,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Avade-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Hide Interrupted",
},
{
["OptionsValues"] = {
["raidMarkerXOff"] = 1,
["unitNameXOffRaidMarker"] = 3,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.updatePosition = function(unitFrame)\n        local unitNameXOff = modTable.config.unitNameXOff -- Unit Name X Offset\n        local unitNameXOffRaidMarker = modTable.config.unitNameXOffRaidMarker -- Unit Name X Offset with Raid Marker\n        local raidMarkerXOff = modTable.config.raidMarkerXOff\n        local hasRaidTarget = unitFrame.PlaterRaidTargetFrame.RaidTargetIcon:IsShown() and unitFrame.PlaterRaidTargetFrame\n        if hasRaidTarget then\n            unitFrame.PlaterRaidTargetFrame:ClearAllPoints()\n            unitFrame.PlaterRaidTargetFrame:SetPoint(\"LEFT\", unitFrame.healthBar, \"LEFT\", raidMarkerXOff, 0)\n            unitFrame.PlaterRaidTargetFrame:SetSize(18, 18)\n            unitFrame.unitName:SetPoint(\"LEFT\", unitFrame.PlaterRaidTargetFrame, \"RIGHT\", unitNameXOffRaidMarker, 0)\n        else\n            unitFrame.unitName:ClearAllPoints()\n            unitFrame.unitName:SetPoint(\"LEFT\", unitFrame.healthBar, \"LEFT\", unitNameXOff, 0)\n        end\n    end\nend",
["Raid Target"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
},
["Time"] = 1759090409,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
["raid"] = true,
["none"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 458724,
["Enabled"] = true,
["Revision"] = 1182,
["semver"] = "",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "Aligns Raid Marker to the Left of the Unit Name.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset without Raid Marker",
["Min"] = -99,
["Fraction"] = false,
["Value"] = 1,
["Name"] = "Unit Name (No Raid Marker)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "unitNameXOff",
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset with Raid Marker",
["Min"] = -99,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Unit Name (Raid Marker)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "unitNameXOffRaidMarker",
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset for Raid Marker",
["Min"] = -99,
["Fraction"] = false,
["Value"] = 1,
["Name"] = "Raid Marker",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "raidMarkerXOff",
},
},
["LastHookEdited"] = "",
["Name"] = "Target Marker",
},
{
["OptionsValues"] = {
["oneColor"] = {
0,
1,
0.01176470704376698,
1,
},
["twoColor"] = {
0,
0.501960813999176,
1,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x6490c26f17d91913",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.SetNameplateColors(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    --IDs of dots, you can change them to easier adjust to different classes, change only numbers\n    modTable.doubleDebuffs = {\n        {34914, 335467}, --Vampiric Touch + Devouring Plague\n        {188389, 334168}, --Flame Shock + Lashing Flames\n        {164815, 164812}, --Sunfire + Moonfire\n        {703, 1943}, --Garrote + Rupture\n        {980, 146739}, --Agony + Corruption\n        {980, 445474}, --Agony + Wither\n    }\n    \n    modTable.singleDebuffs = {\n        34914, --Vampiric Touch\n        589,--Shadow Word: Pain\n        20421, --Purge the Wicked\n        188389, --Flame Shock\n        157736, --Immolate\n        217200, --Barbed Shot\n        228287, --Mark of the Crane\n        445474, --Wither\n        164815, --Sunfire\n        164812, --Moonfire\n        155722, --Rake\n        980, --Agony\n        146739, --Corruption\n        460553, --Doom\n    }\n    \n    modTable.rOption = modTable.config.resetOption\n    \n    modTable.matchMultipleBuffs = {}\n    \n    for _, v in ipairs (modTable.doubleDebuffs) do\n        local buff = {\n            auras = v,\n            nameplateColor = modTable.config.twoColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\n    \n    for _, v in ipairs (modTable.singleDebuffs) do\n        local buff = {\n            auras = {v},\n            nameplateColor = modTable.config.oneColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\nend\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(modTable.matchMultipleBuffs) do      \n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, v.nameplateColor)\n                \n                return\n            else\n                -- reset colour\n                if (modTable.rOption) then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, 1,1,1, 1)\n                end\n                \n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors(unitFrame)\n        local colored = envTable.matchMultiple(unitFrame)\n    end\n    \nend",
},
["Time"] = 1759090433,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/-OwVE8C1v/1",
["Enabled"] = true,
["Revision"] = 1547,
["semver"] = "1.0.0",
["Author"] = "Megabelly-Silvermoon",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Debuff Name Color Change",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Settings:",
["Value"] = "Settings:",
["Key"] = "label1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "One Debuff",
["Value"] = {
1,
0.50196081399918,
0,
1,
},
["Key"] = "oneColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with 1 debuff",
},
{
["Type"] = 1,
["Name"] = "Two Debuffs",
["Value"] = {
0.13333334028721,
0.54509806632996,
0.13333334028721,
1,
},
["Key"] = "twoColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with a set of 2 debuffs",
},
{
["Type"] = 5,
["Name"] = "Miscellaneous:",
["Value"] = "Miscellaneous:",
["Key"] = "label4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Reset colour after expire",
["Value"] = true,
["Key"] = "resetOption",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Resets colour after debuf expires. Toggling on will prevent sometimes lingering colour on nameplates/borders. Toggling off makes mod compatible with other nameplate colouring mods.",
},
},
["HooksTemp"] = {
},
["version"] = 1,
},
},
["auras_per_row_auto"] = false,
["extra_icon_caster_outline"] = "OUTLINE",
["auras_per_row_amount2"] = 5,
["disable_omnicc_on_auras"] = true,
["ghost_auras"] = {
["enabled"] = true,
["height"] = 28,
["auras"] = {
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
["WARLOCK"] = {
{
[980] = true,
[172] = true,
},
},
},
["width"] = 28,
},
["blizzard_nameplate_large_font_size"] = 12,
["pet_width_scale"] = 0.99999994039536,
["health_statusbar_bgcolor"] = {
0.1647058874368668,
0.1647058874368668,
0.1647058874368668,
1,
},
["quick_hide"] = true,
["target_highlight_color"] = {
0.5647059082984924,
0.8117647767066956,
},
["cast_statusbar_fadeout_time"] = 0.4999999701976776,
["indicator_elite"] = false,
["health_selection_overlay_alpha"] = 0,
["cast_statusbar_spark_hideoninterrupt"] = false,
["extra_icon_stack_outline"] = "OUTLINE",
["castbar_target_font"] = "Expressway",
["range_check_in_range_or_target_alpha_friendlies"] = 1,
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark8",
["indicator_raidmark_scale"] = 0.9999999403953552,
["hover_highlight_alpha"] = 0.5,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["ScriptType"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Time"] = 1759090138,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["url"] = "https://wago.io/Dq5DaC3b4/8",
["Icon"] = 135964,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Revision"] = 121,
["semver"] = "1.0.7",
["NpcNames"] = {
},
["Enabled"] = true,
["Author"] = "Duracell",
["Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["SpellIds"] = {
383840,
379256,
388084,
369031,
336499,
347097,
328921,
329636,
350857,
365381,
367573,
361934,
362020,
352016,
260189,
261265,
261266,
271590,
202455,
197422,
232156,
229489,
235308,
235089,
376705,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["version"] = 8,
["PlaterCore"] = 1,
["Prio"] = 99,
["Name"] = "Invalid Target",
["Desc"] = "",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
["indicatorAlpha"] = 0.75,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1759090234,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 167,
["semver"] = "",
["NpcNames"] = {
"214840",
},
["Enabled"] = true,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Prio"] = 99,
["Name"] = "Add - Health Markers [P]",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1759090139,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["Icon"] = 610472,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Revision"] = 99,
["semver"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
343470,
423228,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["version"] = -1,
["PlaterCore"] = 1,
["Prio"] = 99,
["Name"] = "Aura is Shield [P]",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1759090139,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["Revision"] = 1292,
["semver"] = "",
["Enabled"] = true,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Abilities casted on the tank.",
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Name"] = "Cast - Tankbuster [P]",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.1,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 2,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 10,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["NpcNames"] = {
},
},
},
["target_shady_combat_only"] = false,
["pet_height_scale"] = 0.99999994039536,
["aura_x_offset"] = 0,
["first_run3"] = true,
["ui_parent_scale_tune"] = 1,
["profile_name"] = "Default",
["health_statusbar_bgtexture"] = "Melli",
["indicator_raidmark_anchor"] = {
["x"] = 0,
["side"] = 9,
},
["aura_show_enrage"] = true,
["aura_tracker"] = {
["buff_banned"] = {
["333553"] = true,
["61573"] = true,
["206150"] = true,
["299450"] = true,
["411635"] = true,
["352854"] = true,
["61574"] = true,
},
["buff"] = {
412012,
412695,
},
["debuff_banned"] = {
["355759"] = true,
["280494"] = true,
["331934"] = true,
["331016"] = true,
["345801"] = true,
["345219"] = true,
["368802"] = true,
["359168"] = true,
["345547"] = true,
["328287"] = true,
["420092"] = true,
["284678"] = true,
["359078"] = true,
["359180"] = true,
["317583"] = true,
["411717"] = true,
["375583"] = true,
["381743"] = true,
["356372"] = true,
["356181"] = true,
["391568"] = true,
["270569"] = true,
["344748"] = true,
["376974"] = true,
["428103"] = true,
["426534"] = true,
["426783"] = true,
["417419"] = true,
["436582"] = true,
["420054"] = true,
["392885"] = true,
["390155"] = true,
["390276"] = true,
["283649"] = true,
["115994"] = true,
["410790"] = true,
["440339"] = true,
["430184"] = true,
["340007"] = true,
["372127"] = true,
["425180"] = true,
["394453"] = true,
["403952"] = true,
["353773"] = true,
["403696"] = true,
["435476"] = true,
["373305"] = true,
["356329"] = true,
["302564"] = true,
["379021"] = true,
["394327"] = true,
["440340"] = true,
["333526"] = true,
["269576"] = true,
["411715"] = true,
["329449"] = true,
["324260"] = true,
["392566"] = true,
["390271"] = true,
["258883"] = true,
["367902"] = true,
["353793"] = true,
["418339"] = true,
},
["debuff_tracked"] = {
["292451"] = true,
["389809"] = true,
["312595"] = true,
},
["debuff"] = {
217200,
371472,
292626,
422683,
},
["buff_tracked"] = {
["166591"] = true,
["273432"] = true,
["312926"] = true,
["262092"] = true,
["303941"] = true,
["265160"] = true,
["209859"] = true,
["233210"] = true,
["342073"] = true,
},
},
["extra_icon_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["cast_statusbar_color"] = {
0.8549020290374756,
0.7725490927696228,
0.3607843220233917,
1,
},
["update_throttle"] = 0.5,
["cast_statusbar_interrupt_anim"] = false,
["tocversion"] = 110200,
["indicator_extra_raidmark"] = false,
["extra_icon_timer_font"] = "Friz Quadrata TT",
["not_affecting_combat_alpha"] = 1,
["aura_timer_text_font"] = "Friz Quadrata TT",
["target_highlight_alpha"] = 1,
["extra_icon_show_offensive_border"] = {
nil,
0,
0,
},
["cast_statusbar_spark_filloninterrupt"] = false,
["aura_breakline_space"] = 3,
["target_shady_alpha"] = 0.3499999940395355,
["url"] = "https://wago.io/tA5ADNfDG/11",
["tap_denied_color"] = {
0.40000003576279,
0.40000003576279,
0.40000003576279,
},
["bossmod_icons_anchor"] = {
["y"] = 30,
["x"] = 0,
["side"] = 8,
},
["target_highlight_height"] = 25,
["cast_statusbar_fadein_time"] = 0.01999999955296516,
["cast_statusbar_spark_alpha"] = 0,
["version"] = 11,
["indicator_quest"] = false,
["blizzard_nameplate_font_size"] = 10,
["hide_blizzard_castbar"] = true,
["health_animation_time_dilatation"] = 2.6199998855591,
["cast_statusbar_color_interrupted"] = {
0.7803922295570374,
0.250980406999588,
0.250980406999588,
},
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 12,
["range_check_enabled"] = false,
["number_region_first_run"] = true,
["script_auto_imported"] = {
["Aura - Is Cast Bar [P]"] = 1,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Heroic Leap [P]"] = 3,
["Fixate On You"] = 12,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - Shining Green [P]"] = 3,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Explosion Affix M+"] = 14,
["Cast - Important by Color [P]"] = 2,
["Fixate"] = 11,
["Cast - Very Important"] = 15,
["Cast - AoE Hit All [P]"] = 3,
["Cast - Stop Casting"] = 4,
["Fixate by Unit Buff [P]"] = 2,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Countdown"] = 12,
["Cast - Heal Cut [P]"] = 3,
["Auto Set Skull"] = 11,
["Spiteful Affix"] = 3,
["Cast - Alert + Timer [P]"] = 4,
["Add - Non Elite Trash [P]"] = 4,
["Add - Warning [P]"] = 5,
["Cast - Glowing [P]"] = 10,
["Cast - On Going Cast [P]"] = 2,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Add - Explode on Die [P]"] = 1,
["Cast - Voidzone [P]"] = 2,
["Cast - Shield Interrupt"] = 2,
["Cast - Quick Flash"] = 2,
["Unit - Show Energy"] = 11,
},
["cast_statusbar_color_channeling"] = {
nil,
nil,
nil,
1,
},
["patch_version"] = 39,
["health_cutoff_upper"] = false,
["aura2_grow_direction"] = 3,
["extra_icon_timer_outline"] = "OUTLINE",
["aura_alpha"] = 1,
["indicator_faction"] = false,
["extra_icon_height"] = 34,
["dps"] = {
["colors"] = {
["solo"] = {
0.501960813999176,
0.501960813999176,
},
["notontank"] = {
0.501960813999176,
0.501960813999176,
},
["aggro"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["noaggro"] = {
0.5058823823928833,
0.4235294461250305,
0.9137255549430847,
},
["pulling"] = {
nil,
0.7725490927696228,
0.658823549747467,
},
},
},
["range_check_alpha_friendlies"] = 0.5,
["ui_parent_target_strata"] = "BACKGROUND",
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
0.9764706492424011,
0.5411764979362488,
0.4745098352432251,
},
["anothertank"] = {
0.729411780834198,
0.917647123336792,
},
["aggro"] = {
0.5058823823928833,
0.4235294461250305,
0.9137255549430847,
},
["nocombat"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["noaggro"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["pulling"] = {
0.3098039329051971,
0.4509804248809815,
0.6313725709915161,
},
},
},
["indicator_pet"] = false,
["extra_icon_show_purge_border"] = {
nil,
0,
0,
},
["cast_statusbar_spark_width"] = 4,
},
["alex_plater"] = {
["focus_as_target_alpha"] = true,
["aura_breakline_space"] = 3,
["aura_sort"] = true,
["npcs_renamed"] = {
[173044] = "Stitcher",
[190381] = "Rotburst",
[216340] = "Sentry",
[179733] = "Fish Stick",
[207796] = "Burning",
[230740] = "Shreddinator",
[214287] = "Bad Totem",
[214012] = "Dark ",
[98521] = "Etheldrin",
[220401] = "Detector",
[194897] = "Stormsurge Totem",
[164707] = "Purple Slime",
[227300] = "Big Spawn",
[174843] = "Maitre D",
[214350] = "Turned",
[199368] = "Big Crystal",
[144298] = "Mk III",
[197219] = "Big Lasher",
[176523] = "Painsmith",
[151657] = "Bomb",
[192333] = "Alpha",
[229537] = "Emissary",
[114627] = "Terror",
[165010] = "Purple Slime",
[114632] = "Attendant",
[204560] = "Incorporeal",
},
["blizzard_nameplate_large_font"] = "Friz Quadrata TT",
["aura_cache_by_name"] = {
},
["url"] = "https://wago.io/tA5ADNfDG/11",
["blizzard_nameplate_font_override_enabled"] = true,
["hover_highlight_alpha"] = 0.5,
["cast_statusbar_fadein_time"] = 0.01999999955296516,
["indicator_raidmark_scale"] = 0.9999999403953552,
["cast_statusbar_spark_alpha"] = 0,
["aura2_y_offset"] = 3,
["extra_icon_caster_size"] = 12,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["level_text_alpha"] = 0.3,
["module_enabled"] = false,
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
210,
22,
},
["spellpercent_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 12,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
210,
22,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
0,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = -1,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["mana_incombat"] = {
nil,
4,
},
["actorname_text_size"] = 12,
["percent_text_enabled"] = true,
["big_actorname_text_font"] = "Friz Quadrata TT",
["all_names"] = true,
["mana"] = {
nil,
4,
},
["big_actortitle_text_outline"] = "OUTLINE",
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 12,
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["spellname_text_size"] = 12,
["spellpercent_text_enabled"] = true,
["actorname_text_spacing"] = 11,
["percent_text_font"] = "Friz Quadrata TT",
["buff_frame_y_offset"] = 0,
["quest_color_enabled"] = true,
["quest_enabled"] = true,
["castbar_offset"] = -1,
["percent_text_ooc"] = true,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
232,
32,
},
["health"] = {
232,
32,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_font"] = "Friz Quadrata TT",
["castbar_offset_x"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
},
["friendlynpc"] = {
["castbar_offset"] = -1,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
210,
22,
},
["spellpercent_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
210,
22,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = -1,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["actorname_text_size"] = 12,
["percent_text_enabled"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["spellpercent_text_enabled"] = true,
["percent_text_size"] = 12,
["actorname_text_spacing"] = 11,
["percent_text_font"] = "Friz Quadrata TT",
["level_text_alpha"] = 0.2999999821186066,
["percent_text_ooc"] = true,
["big_actorname_text_size"] = 12,
["big_actorname_text_font"] = "Friz Quadrata TT",
["spellname_text_size"] = 12,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
232,
32,
},
["health"] = {
232,
32,
},
["big_actortitle_text_size"] = 12,
["spellname_text_font"] = "Friz Quadrata TT",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
},
["global_health_height"] = 28,
["global_health_width"] = 224,
["enemyplayer"] = {
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
232,
22,
},
["spellpercent_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
232,
22,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = -1,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["percent_text_size"] = 12,
["actorname_text_spacing"] = 11,
["percent_text_font"] = "Friz Quadrata TT",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_enabled"] = true,
["spellname_text_font"] = "Friz Quadrata TT",
["quest_color_enabled"] = true,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
232,
32,
},
["health"] = {
232,
32,
},
["spellname_text_size"] = 12,
["level_text_alpha"] = 0.2999999821186066,
["big_actortitle_text_size"] = 12,
["big_actorname_text_size"] = 12,
["level_text_enabled"] = false,
},
["enemynpc"] = {
["quest_color_enemy"] = {
0.4000000357627869,
0.8666667342185974,
0.6666666865348816,
},
["spellpercent_text_font"] = "Friz Quadrata TT",
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
163,
16,
},
["spellpercent_text_size"] = 10,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
163,
16,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = -1,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
0.4000000357627869,
0.8666667342185974,
0.7843137979507446,
},
["actorname_text_size"] = 10,
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Friz Quadrata TT",
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
163,
22,
},
["health"] = {
163,
22,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_font"] = "Friz Quadrata TT",
["spellname_text_size"] = 10,
["level_text_alpha"] = 0.2999999821186066,
["level_text_enabled"] = false,
},
},
["health_selection_overlay"] = "Atrocity",
["aura_y_offset"] = 3,
["use_ui_parent"] = true,
["expansion_triggerwipe"] = {
[10] = true,
[9] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.7803922295570374,
0.250980406999588,
0.250980406999588,
1,
},
["cast_statusbar_use_fade_effects"] = false,
["bossmod_support_bars_enabled"] = false,
["color_override_colors"] = {
[3] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
[4] = {
0.8509804606437683,
0.8156863451004028,
0.5882353186607361,
},
[5] = {
0.5058823823928833,
0.7803922295570374,
0.5137255191802979,
},
},
["resources_settings"] = {
["chr"] = {
["Player-3674-0B4CEAF6"] = "HolyPower",
["Player-3674-0B10664D"] = "Runes",
["Player-3674-0B7E99BA"] = "Chi",
["Player-3674-0B290529"] = "Chi",
["Player-3674-0B6F6C67"] = "ComboPoints",
["Player-3674-0B54DA49"] = "Runes",
["Player-3674-0B1BB2A3"] = "ComboPoints",
["Player-3666-073F2CE7"] = "Chi",
["Player-3674-0B7DEF79"] = "Chi",
["Player-3674-0B1E76C1"] = "SoulShards",
["Player-3674-0B0A2407"] = "Essence",
["Player-3674-0B733AA8"] = "Runes",
["Player-3674-0B7DA606"] = "Chi",
["Player-3674-0ABC0676"] = "ArcaneCharges",
["Player-3674-0B5833AE"] = "Chi",
["Player-3674-0B436FA0"] = "ComboPoints",
["Player-3702-063B3452"] = "ComboPoints",
["Player-3674-0B782F56"] = "Runes",
["Player-3674-0B7AA5AA"] = "Chi",
["Player-5764-00087D02"] = "Chi",
["Player-3674-0B6950F5"] = "ComboPoints",
["Player-3674-0B267A73"] = "HolyPower",
["Player-3674-0B7429F4"] = "Runes",
["Player-3674-0B25F50F"] = "ComboPoints",
["Player-3674-0B7EE2CB"] = "Chi",
["Player-3674-0B82DA01"] = "HolyPower",
},
["global_settings"] = {
["show_depleted"] = false,
},
},
["health_animation_time_dilatation"] = 2.6199998855591,
["npc_cache"] = {
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
},
[198716] = {
"Unstable Storm",
"Vault of the Incarnates",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[186696] = {
"Quaking Totem",
"Uldaman: Legacy of Tyr",
},
[194241] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[231197] = {
"Bubbles",
"Operation: Floodgate",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
"enUS",
},
[115407] = {
"Rook",
"Return to Karazhan",
},
[221863] = {
"Summoned Acolyte",
"Nerub-ar Palace",
},
[205623] = {
"Drazos Blackwing",
"Aberrus, the Shadowed Crucible",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
},
[168156] = {
"Remornia",
"Castle Nathria",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[180433] = {
"Wandering Pulsar",
"Tazavesh, the Veiled Market",
"enUS",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
"enUS",
},
[120651] = {
"Explosives",
"Operation: Mechagon",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
},
[176598] = {
"Torment Golem",
"Torghast, Tower of the Damned",
},
[164578] = {
"Stitchflesh's Creation",
"The Necrotic Wake",
},
[228514] = {
"Pit Mechanic",
"Liberation of Undermine",
},
[229283] = {
"Scraps",
"Liberation of Undermine",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
},
[150251] = {
"Pistonhead Mechanic",
"Operation: Mechagon",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[175576] = {
"Containment Cell",
"Tazavesh, the Veiled Market",
"enUS",
},
[164451] = {
"Dessia the Decapitator",
"Theater of Pain",
},
[229284] = {
"Guk Boomdog",
"Liberation of Undermine",
},
[164707] = {
"Congealed Slime",
"Plaguefall",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[84400] = {
"Gnarled Ancient",
"The Everbloom",
},
[193352] = {
"Hextrick Totem",
"Brackenhide Hollow",
},
[135169] = {
"Spirit Drain Totem",
"The Underrot",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
},
[180432] = {
"Devoted Accomplice",
"Tazavesh, the Veiled Market",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
},
[237981] = {
"Shadowguard Mage",
"Manaforge Omega",
"enUS",
},
[150250] = {
"Pistonhead Blaster",
"Operation: Mechagon",
},
[220974] = {
"Bazaar Guard",
"Khaz Algar",
},
[178008] = {
"Decrepit Orb",
"Sanctum of Domination",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
},
[229537] = {
"Void Emissary",
"Eco-Dome Al'dani",
"enUS",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
"enUS",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[183497] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[200387] = {
"Shambling Infester",
"Temple of the Jade Serpent",
},
[164702] = {
"Carrion Worm",
"The Necrotic Wake",
},
[221103] = {
"Hulking Warshell",
"City of Threads",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
},
[223150] = {
"Ascended Voidspeaker",
"Nerub-ar Palace",
"enUS",
},
[198214] = {
"Broodguardian Ziruss",
"Vault of the Incarnates",
},
[184020] = {
"Hulking Berserker",
"Uldaman: Legacy of Tyr",
},
[220976] = {
"Hollows Guard",
"Khaz Algar",
},
[229288] = {
"King Flamespite",
"Liberation of Undermine",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
},
[150253] = {
"Weaponized Crawler",
"Operation: Mechagon",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[165479] = {
"Court Enforcer",
"Castle Nathria",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
},
[170850] = {
"Raging Bloodhorn",
"Theater of Pain",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
"enUS",
},
[207796] = {
"Burning Colossus",
"Amirdrassil, the Dream's Hope",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
},
[83763] = {
"Grom'kar Technician",
"Iron Docks",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
},
[220978] = {
"Skeins Guard",
"Khaz Algar",
},
[176974] = {
"Soul Reaver",
"Sanctum of Domination",
},
[75899] = {
"Possessed Soul",
"Shadowmoon Burial Grounds",
},
[210109] = {
"Earth Infused Golem",
"The Rookery",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
},
[168934] = {
"Enraged Spirit",
"De Other Side",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
"enUS",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[231977] = {
"Darkfuse Technician",
"Liberation of Undermine",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
},
[188244] = {
"Primal Juggernaut",
"Ruby Life Pools",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
"enUS",
},
[157810] = {
"Mawsworn Endbringer",
"Torghast, Tower of the Damned",
},
[201288] = {
"Sundered Champion",
"Aberrus, the Shadowed Crucible",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[231978] = {
"Sharpshot Sentry",
"Liberation of Undermine",
},
[98081] = {
"Bellowing Idol",
"Neltharion's Lair",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
},
[168425] = {
"Forsworn Annihilator",
"Spires of Ascension",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
},
[228015] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
},
[127879] = {
"Shieldbearer of Zul",
"Atal'Dazar",
},
[227632] = {
"Venombite",
"Earthcrawl Mines",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[177889] = {
"Mawforged Souljudge",
"Sanctum of Domination",
},
[187224] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[211904] = {
"Tainted Treant",
"Amirdrassil, the Dream's Hope",
},
[154744] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[114584] = {
"Phantom Crew",
"Return to Karazhan",
},
[194897] = {
"Stormsurge Totem",
"The Nokhud Offensive",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[167532] = {
"Heavin the Breaker",
"Theater of Pain",
},
[83894] = {
"Dulhu",
"The Everbloom",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[167533] = {
"Advent Nevermore",
"Theater of Pain",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
},
[194898] = {
"Primalist Arcblade",
"The Nokhud Offensive",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
},
[150142] = {
"Scrapbone Trashtosser",
"Operation: Mechagon",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[167534] = {
"Rek the Hardened",
"Theater of Pain",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[227635] = {
"Kas'dru",
"Earthcrawl Mines",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[150143] = {
"Scrapbone Grinder",
"Operation: Mechagon",
},
[177892] = {
"Mawforged Goliath",
"Sanctum of Domination",
},
[220986] = {
"Hollows Sentry",
"Khaz Algar",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
"enUS",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[114266] = {
"Shoreline Tidespeaker",
"Return to Karazhan",
},
[130635] = {
"Stonefury",
"The MOTHERLODE!!",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
"enUS",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
},
[180323] = {
"Fatespawn Monstrosity",
"Sanctum of Domination",
},
[198326] = {
"Stormwrought Despoiler",
"Vault of the Incarnates",
},
[207177] = {
"Infinite Watchkeeper",
"Dawn of the Infinite",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[186206] = {
"Bonecrusher",
"Brackenhide Hollow",
},
[190426] = {
"Decay Totem",
"Brackenhide Hollow",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
},
[162038] = {
"Regal Mistdancer",
"Sanguine Depths",
},
[98538] = {
"Lady Velandras Ravencrest",
"Black Rook Hold",
},
[186208] = {
"Rotbow Stalker",
"Brackenhide Hollow",
},
[150146] = {
"Scrapbone Shaman",
"Operation: Mechagon",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[129548] = {
"Blacktooth Brute",
"Freehold",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[241803] = {
"Nexus-Prince Ky'vor",
"Manaforge Omega",
"enUS",
},
[156157] = {
"Coldheart Ascendant",
"Torghast, Tower of the Damned",
},
[167538] = {
"Dokigg the Brutalizer",
"Theater of Pain",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[180070] = {
"Mawsworn Scryer",
"Sanctum of Domination",
},
[199124] = {
"Primalist Chillblaster",
"Vault of the Incarnates",
},
[81212] = {
"Grimrail Overseer",
"Grimrail Depot",
},
[198868] = {
"Primalist Voltweaver",
"Vault of the Incarnates",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
},
[170480] = {
"Atal'ai Deathwalker",
"De Other Side",
},
[208459] = {
"Fiery Treant",
"Amirdrassil, the Dream's Hope",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[168658] = {
"Forsworn Devastator",
"Spires of Ascension",
},
[52019] = {
"Skyfall Star",
"The Vortex Pinnacle",
},
[83578] = {
"Ogron Laborer",
"Iron Docks",
},
[227513] = {
"Tala",
"The Spiral Weave",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[45915] = {
"Armored Mistral",
"The Vortex Pinnacle",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
"enUS",
},
[126928] = {
"Irontide Corsair",
"Freehold",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
},
[198870] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[231223] = {
"Disturbed Kelp",
"Operation: Floodgate",
"enUS",
},
[190690] = {
"Thundering Ravager",
"Vault of the Incarnates",
},
[229433] = {
"Skiggy Muckheimer",
"Liberation of Undermine",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[118489] = {
"Corrupted Risen Soldier",
"Black Rook Hold - Artifact Challenge",
},
[170483] = {
"Atal'ai Deathwalker's Spirit",
"De Other Side",
},
[39392] = {
"Faceless Corruptor",
"Grim Batol",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
},
[178630] = {
"Mawsworn Seeker",
"Sanctum of Domination",
},
[229434] = {
"Melbo the Magnificent",
"Liberation of Undermine",
},
[190688] = {
"Blazing Fiend",
"Vault of the Incarnates",
},
[168310] = {
"Plagueroc",
"Plaguefall",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
},
[152033] = {
"Inconspicuous Plant",
"Operation: Mechagon",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
},
[114334] = {
"Damaged Golem",
"Return to Karazhan",
},
[208208] = {
"Alliance Destroyer",
"Dawn of the Infinite",
},
[194487] = {
"Vile Rothexer",
"Brackenhide Hollow",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[81984] = {
"Gnarlroot",
"The Everbloom",
},
[170234] = {
"Oppressive Banner",
"Theater of Pain",
},
[197595] = {
"Earthwrought Smasher",
"Vault of the Incarnates",
},
[203861] = {
"Horde Destroyer",
"Dawn of the Infinite",
},
[155908] = {
"Deathspeaker",
"Torghast, Tower of the Damned",
},
[214608] = {
"Screaming Soul",
"Amirdrassil, the Dream's Hope",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
"enUS",
},
[83389] = {
"Ironwing Flamespitter",
"Iron Docks",
},
[157571] = {
"Mawsworn Flametender",
"Torghast, Tower of the Damned",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
},
[154758] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[193760] = {
"Surging Ruiner",
"Vault of the Incarnates",
},
[118491] = {
"Corrupted Risen Mage",
"Black Rook Hold - Artifact Challenge",
},
[115486] = {
"Erudite Slayer",
"Return to Karazhan",
},
[220742] = {
"Guardian Tentacle",
"The Sinkhole",
},
[215755] = {
"Ascended Overseer",
"Khaz Algar",
},
[157572] = {
"Mawsworn Firecaller",
"Torghast, Tower of the Damned",
},
[164861] = {
"Spriggan Barkbinder",
"De Other Side",
},
[114783] = {
"Reformed Maiden",
"Return to Karazhan",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[166396] = {
"Noble Skirmisher",
"Sanguine Depths",
},
[166524] = {
"Deathwalker",
"Theater of Pain",
},
[83390] = {
"Thunderlord Wrangler",
"Iron Docks",
},
[187240] = {
"Drakonid Breaker",
"The Azure Vault",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
},
[180335] = {
"Cartel Smuggler",
"Tazavesh, the Veiled Market",
"enUS",
},
[202969] = {
"Empty Recollection",
"Aberrus, the Shadowed Crucible",
},
[171384] = {
"Research Scribe",
"Sanguine Depths",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[77700] = {
"Shadowmoon Exhumer",
"Shadowmoon Burial Grounds",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
},
[184300] = {
"Ebonstone Golem",
"Uldaman: Legacy of Tyr",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
"enUS",
},
[100526] = {
"Tormented Bloodseeker",
"Darkheart Thicket",
},
[105705] = {
"Bound Energy",
"Court of Stars",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[175861] = {
"Glacial Spike",
"Sanctum of Domination",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
},
[40577] = {
"Naz'jar Sentinel",
"Throne of the Tides",
"enUS",
},
[202971] = {
"Null Glimmer",
"Aberrus, the Shadowed Crucible",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[115488] = {
"Infused Pyromancer",
"Return to Karazhan",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
},
[234557] = {
"Support Rig",
"Liberation of Undermine",
},
[197857] = {
"Gutstabber",
"Brackenhide Hollow",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
},
[150160] = {
"Scrapbone Bully",
"Operation: Mechagon",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[184303] = {
"Skittering Crawler",
"Uldaman: Legacy of Tyr",
},
[217039] = {
"Nerubian Hauler",
"Ara-Kara, City of Echoes",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[225479] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[197219] = {
"Vile Lasher",
"Algeth'ar Academy",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
},
[165762] = {
"Soul Infuser",
"Castle Nathria",
},
[86526] = {
"Grom'kar Chainmaster",
"Iron Docks",
},
[122970] = {
"Shadowblade Stalker",
"Atal'Dazar",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[203230] = {
"Dragonfire Golem",
"Aberrus, the Shadowed Crucible",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[165763] = {
"Vile Occultist",
"Castle Nathria",
},
[157017] = {
"Lithic Watcher",
"Torghast, Tower of the Damned",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[81603] = {
"Champion Druna",
"Iron Docks",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
},
[45917] = {
"Cloud Prince",
"The Vortex Pinnacle",
"enUS",
},
[196198] = {
"Algeth'ar Security",
"Algeth'ar Academy",
},
[174843] = {
"Stoneborn Maitre D'",
"Castle Nathria",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[150292] = {
"Mechagon Cavalry",
"Operation: Mechagon",
},
[198501] = {
"Council Icecaller",
"Vault of the Incarnates",
},
[196200] = {
"Algeth'ar Enforcer",
"Algeth'ar Academy",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
"enUS",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
},
[150165] = {
"Slime Elemental",
"Operation: Mechagon",
},
[205408] = {
"Infinite Timeslicer",
"Dawn of the Infinite",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
},
[178171] = {
"Stormforged Guardian",
"Tazavesh, the Veiled Market",
"enUS",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[180091] = {
"Ancient Core Hound",
"Tazavesh, the Veiled Market",
"enUS",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[223822] = {
"Queen's Guard Re'zah",
"Nerub-ar Palace",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[99891] = {
"Storm Drake",
"Halls of Valor",
},
[196203] = {
"Ethereal Restorer",
"Algeth'ar Academy",
},
[180473] = {
"Unstoppable Abomination",
"Sanctum of Domination",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
},
[220626] = {
"Blood Parasite",
"Nerub-ar Palace",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[164873] = {
"Runestag Elderhorn",
"De Other Side",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
"enUS",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
},
[186740] = {
"Arcane Construct",
"The Azure Vault",
},
[236995] = {
"Ravenous Destroyer",
"Eco-Dome Al'dani",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[169861] = {
"Ickor Bileflesh",
"Plaguefall",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[40925] = {
"Tainted Sentry",
"Throne of the Tides",
"enUS",
},
[183033] = {
"Grim Reflection",
"Sepulcher of the First Ones",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
},
[164363] = {
"Undying Stonefiend",
"Halls of Atonement",
"enUS",
},
[150169] = {
"Toxic Lurker",
"Operation: Mechagon",
},
[150297] = {
"Mechagon Renormalizer",
"Operation: Mechagon",
},
[190404] = {
"Subterranean Proto-Dragon",
"Halls of Infusion",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
},
[207202] = {
"Void Fragment",
"The Rookery",
},
[182778] = {
"Collapsing Quasar",
"Sepulcher of the First Ones",
},
[179837] = {
"Tracker Zo'korss",
"Tazavesh, the Veiled Market",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
"enUS",
},
[234955] = {
"Wastelander Pactspeaker",
"Eco-Dome Al'dani",
"enUS",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
},
[173190] = {
"Court Hawkeye",
"Castle Nathria",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[234443] = {
"Triplefive",
"Theater of Pain",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
"enUS",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
"enUS",
},
[173189] = {
"Nathrian Hawkeye",
"Castle Nathria",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
},
[180864] = {
"High Torturer",
"Sanctum of Domination",
},
[129369] = {
"Irontide Raider",
"Siege of Boralus",
},
[97720] = {
"Blightshard Skitter",
"Neltharion's Lair",
},
[212831] = {
"Forge Master Damian",
"Priory of the Sacred Flame",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[187768] = {
"Dathea Stormlash",
"Vault of the Incarnates",
},
[231380] = {
"Undercrawler",
"Operation: Floodgate",
"enUS",
},
[57109] = {
"Minion of Doubt",
"Temple of the Jade Serpent",
},
[130011] = {
"Irontide Buccaneer",
"Freehold",
},
[97788] = {
"Storm Drake",
"Halls of Valor",
"enUS",
},
[222167] = {
"Brood Infuser",
"Nerub-ar Palace",
},
[199595] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[153882] = {
"Deadsoul Spirit",
"Torghast, Tower of the Damned",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[151325] = {
"Alarm-o-Bot",
"Operation: Mechagon",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
"enUS",
},
[195119] = {
"Primalist Shockcaster",
"Ruby Life Pools",
},
[129372] = {
"Blacktar Bomber",
"Siege of Boralus",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
},
[40357] = {
"Invoked Shadowflame Spirit",
"Grim Batol",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[188026] = {
"Frost Tomb",
"Vault of the Incarnates",
},
[168717] = {
"Forsworn Justicar",
"Spires of Ascension",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"UNKNOWN",
},
[183423] = {
"Reformed Bachelor",
"Return to Karazhan",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
},
[187771] = {
"Kadros Icewrath",
"Vault of the Incarnates",
},
[234957] = {
"Wastelander Ritualist",
"Eco-Dome Al'dani",
"enUS",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
},
[168718] = {
"Forsworn Warden",
"Spires of Ascension",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
},
[165010] = {
"Congealed Slime",
"Plaguefall",
},
[200943] = {
"Electrified Colossal Stormfiend",
"Vault of the Incarnates",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
},
[97083] = {
"King Ranulf",
"Halls of Valor",
},
[179847] = {
"Shadowsteel Horror",
"Sanctum of Domination",
},
[191225] = {
"Tarasek Earthreaver",
"Vault of the Incarnates",
},
[144295] = {
"Mechagon Mechanic",
"Operation: Mechagon",
},
[242631] = {
"Overcharged Sentinel",
"Eco-Dome Al'dani",
"enUS",
},
[183425] = {
"Wholesome Host",
"Return to Karazhan",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
},
[154014] = {
"Imprisoned Cabalist",
"Torghast, Tower of the Damned",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
},
[40166] = {
"Molten Giant",
"Grim Batol",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[98810] = {
"Wrathguard Bladelord",
"Black Rook Hold",
},
[205804] = {
"Risen Dragon",
"Dawn of the Infinite",
},
[179334] = {
"Portalmancer Zo'honn",
"Tazavesh, the Veiled Market",
"enUS",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
},
[176521] = {
"Stygian Abductor",
"Sanctum of Domination",
},
[234962] = {
"Wastelander Farstalker",
"Eco-Dome Al'dani",
"enUS",
},
[169159] = {
"Unstable Canister",
"Plaguefall",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
},
[130012] = {
"Irontide Ravager",
"Freehold",
},
[163862] = {
"Defender of Many Eyes",
"Plaguefall",
},
[190588] = {
"Tectonic Crusher",
"Vault of the Incarnates",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
},
[198263] = {
"Stalwart Broodwarden",
"Vault of the Incarnates",
},
[224731] = {
"Web Marauder",
"City of Threads",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[176959] = {
"Mawsworn Soulmage",
"Sanctum of Domination",
},
[211816] = {
"Bazaar Sentry",
"Khaz Algar",
},
[92610] = {
"Understone Drummer",
"Neltharion's Lair",
},
[188673] = {
"Smoldering Colossus",
"Vault of the Incarnates",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
"enUS",
},
[176523] = {
"Painsmith Raznal",
"Sanctum of Domination",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
},
[186242] = {
"Gutstabber",
"Brackenhide Hollow",
},
[224221] = {
"Twilight Overseer",
"Grim Batol",
},
[114796] = {
"Wholesome Hostess",
"Return to Karazhan",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[191232] = {
"Drakonid Stormbringer",
"Vault of the Incarnates",
},
[96574] = {
"Stormforged Sentinel",
"Halls of Valor",
"enUS",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
},
[191230] = {
"Dragonspawn Flamebender",
"Vault of the Incarnates",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
},
[165911] = {
"Loyal Creation",
"The Necrotic Wake",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
"enUS",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
},
[203812] = {
"Voice From Beyond",
"Aberrus, the Shadowed Crucible",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[130909] = {
"Fetid Maggot",
"The Underrot",
},
[135989] = {
"Shieldbearer of Zul",
"Atal'Dazar",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[192767] = {
"Primal Icebulk",
"Vault of the Incarnates",
},
[173714] = {
"Mistveil Nightblossom",
"Mists of Tirna Scithe",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[154020] = {
"Prisonbreak Cursewalker",
"Torghast, Tower of the Damned",
},
[179852] = {
"Soulless Vengeance",
"The Shadowlands",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
},
[165913] = {
"Ghastly Parishioner",
"Halls of Atonement",
"enUS",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
"enUS",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
},
[169924] = {
"Veteran Stoneguard",
"Castle Nathria",
},
[221667] = {
"Lost Watcher",
"Nerub-ar Palace",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[115757] = {
"Wrathguard Flamebringer",
"Return to Karazhan",
},
[155812] = {
"Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[231176] = {
"Scaffolding",
"Operation: Floodgate",
"enUS",
},
[224609] = {
"Twilight Destroyer",
"Grim Batol",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
},
[96640] = {
"Valarjar Marksman",
"Halls of Valor",
"enUS",
},
[92612] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[56792] = {
"Figment of Doubt",
"Temple of the Jade Serpent",
"enUS",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
},
[187315] = {
"Disease Slasher",
"Brackenhide Hollow",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[213741] = {
"Voidstone Awakened",
"The Rookery",
"enUS",
},
[199547] = {
"Frostforged Zealot",
"Vault of the Incarnates",
},
[211291] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
},
[176573] = {
"Mawsworn Woebringer",
"Torghast, Tower of the Damned",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
},
[220616] = {
"Corridor Sleeper",
"Darkflame Cleft",
},
[130400] = {
"Irontide Crusher",
"Freehold",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
},
[184331] = {
"Infinite Timereaver",
"Uldaman: Legacy of Tyr",
},
[199549] = {
"Flamesworn Herald",
"Vault of the Incarnates",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
"enUS",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[40936] = {
"Faceless Watcher",
"Throne of the Tides",
"enUS",
},
[198311] = {
"Flamewrought Eradicator",
"Vault of the Incarnates",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
},
[98368] = {
"Ghostly Protector",
"Black Rook Hold",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
},
[190686] = {
"Frozen Destroyer",
"Vault of the Incarnates",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
},
[168988] = {
"Overgrowth",
"Mists of Tirna Scithe",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
"enUS",
},
[104251] = {
"Duskwatch Sentry",
"Court of Stars",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[227300] = {
"Bile-Soaked Spawn",
"Nerub-ar Palace",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[189706] = {
"Chaotic Essence",
"Castle Nathria",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[45924] = {
"Turbulent Squall",
"The Vortex Pinnacle",
"enUS",
},
[239833] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
"enUS",
},
[205435] = {
"Epoch Ripper",
"Dawn of the Infinite",
},
[163620] = {
"Rotspew",
"The Necrotic Wake",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
},
[239834] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[193799] = {
"Rotchanting Totem",
"Brackenhide Hollow",
},
[196263] = {
"Nokhud Neophyte",
"The Nokhud Offensive",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
"enUS",
},
[196856] = {
"Primal Stormsentry",
"Vault of the Incarnates",
},
[171805] = {
"Research Scribe",
"Sanguine Depths",
},
[212981] = {
"Hapless Assistant",
"The Everbloom",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
},
[223724] = {
"Backfill Barrel",
"Liberation of Undermine",
},
[45477] = {
"Gust Soldier",
"The Vortex Pinnacle",
"enUS",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
},
[188302] = {
"Reconfiguration Emitter",
"Castle Nathria",
},
[83026] = {
"Siegemaster Olugar",
"Iron Docks",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
},
[81236] = {
"Grimrail Technician",
"Grimrail Depot",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[193291] = {
"Apex Blazewing",
"Neltharus",
},
[198308] = {
"Frostwrought Dominator",
"Vault of the Incarnates",
},
[65362] = {
"Minion of Doubt",
"Temple of the Jade Serpent",
},
[175517] = {
"Symbiotic Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[114804] = {
"Spectral Charger",
"Return to Karazhan",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
},
[213751] = {
"Dynamite Mine Cart",
"Darkflame Cleft",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
},
[59544] = {
"The Nodding Tiger",
"Temple of the Jade Serpent",
"enUS",
},
[155824] = {
"Lumbering Creation",
"Torghast, Tower of the Damned",
},
[220401] = {
"Pale Priest",
"City of Threads",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
"enUS",
},
[171376] = {
"Head Custodian Javlin",
"Sanguine Depths",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[205212] = {
"Infinite Keeper",
"Dawn of the Infinite",
},
[168384] = {
"Flesh Construct",
"The Necrotic Wake",
},
[236033] = {
"Metal Gunk",
"Operation: Mechagon",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
},
[201222] = {
"Valow, Timesworn Keeper",
"Dawn of the Infinite",
},
[173729] = {
"Manifestation of Pride",
"Halls of Atonement",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
},
[84499] = {
"Entanglement",
"The Everbloom",
},
[189227] = {
"Qalashi Hunter",
"Neltharus",
},
[45926] = {
"Servant of Asaad",
"The Vortex Pinnacle",
"enUS",
},
[191206] = {
"Primalist Mage",
"Vault of the Incarnates",
},
[168007] = {
"Empowered Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[135240] = {
"Soul Essence",
"Waycrest Manor",
},
[200840] = {
"Flamebound Huntsman",
"Aberrus, the Shadowed Crucible",
},
[129552] = {
"Monzumi",
"Atal'Dazar",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[156212] = {
"Coldheart Agent",
"Torghast, Tower of the Damned",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
},
[214012] = {
"Dark Colossus",
"Amirdrassil, the Dream's Hope",
},
[214140] = {
"Naz'jar Sentinel",
"Throne of the Tides",
},
[190034] = {
"Blazebound Destroyer",
"Ruby Life Pools",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
},
[81432] = {
"Grom'kar Technician",
"Iron Docks",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
"enUS",
},
[167998] = {
"Portal Guardian",
"Theater of Pain",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
},
[183707] = {
"Xy Spellslinger",
"Sepulcher of the First Ones",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
},
[165805] = {
"Shade of Kael'thas",
"Castle Nathria",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
},
[155831] = {
"Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[192787] = {
"Qalashi Spinecrusher",
"Neltharus",
},
[206214] = {
"Infinite Infiltrator",
"Dawn of the Infinite",
},
[177716] = {
"So' Cartel Assassin",
"Tazavesh, the Veiled Market",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
},
[168747] = {
"Venomfang",
"Plaguefall",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[101637] = {
"Valarjar Aspirant",
"Halls of Valor",
"enUS",
},
[100486] = {
"Risen Arcanist",
"Black Rook Hold",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[76446] = {
"Shadowmoon Enslaver",
"Shadowmoon Burial Grounds",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
},
[197904] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
},
[190359] = {
"Skulking Zealot",
"Halls of Infusion",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
},
[168109] = {
"Empowered Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[162099] = {
"General Kaal",
"Sanguine Depths",
},
[198869] = {
"Sundered Devastator",
"Aberrus, the Shadowed Crucible",
},
[183671] = {
"Monstrous Soul",
"Sepulcher of the First Ones",
},
[182045] = {
"Necrotic Ritualist",
"Sepulcher of the First Ones",
},
[221945] = {
"Forgotten Harbinger",
"Nerub-ar Palace",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[87252] = {
"Unruly Ogron",
"Iron Docks",
},
[96587] = {
"Felsworn Infester",
"Vault of the Wardens",
},
[45704] = {
"Lurking Tempest",
"The Vortex Pinnacle",
"enUS",
},
[227573] = {
"Anub'vir",
"Earthcrawl Mines",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[245092] = {
"Burrowing Creeper",
"Eco-Dome Al'dani",
"enUS",
},
[212739] = {
"Consuming Voidstone",
"The Rookery",
"enUS",
},
[189338] = {
"Riverbend Chomper",
"Dragon Isles",
},
[107073] = {
"Duskwatch Reinforcement",
"Court of Stars",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
"enUS",
},
[229619] = {
"Blazing Fueldemon",
"Liberation of Undermine",
"enUS",
},
[176551] = {
"Vault Purifier",
"Tazavesh, the Veiled Market",
"enUS",
},
[196116] = {
"Crystal Fury",
"The Azure Vault",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[166589] = {
"Animated Weapon",
"Sanguine Depths",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
},
[199325] = {
"Nokhud Stormcaller",
"The Nokhud Offensive",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
},
[59547] = {
"Jiang",
"Temple of the Jade Serpent",
"enUS",
},
[196117] = {
"Crystal Thrasher",
"The Azure Vault",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[163520] = {
"Forsworn Squad-Leader",
"Spires of Ascension",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
},
[227575] = {
"Armored Shellguard",
"Earthcrawl Mines",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[132820] = {
"Mudsnout Piglet",
"Skittering Hollow (Islands 5)",
},
[115642] = {
"Umbral Imp",
"Faronaar",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[163894] = {
"Blighted Spinebreaker",
"Plaguefall",
},
[152898] = {
"Deadsoul Chorus",
"Torghast, Tower of the Damned",
},
[197406] = {
"Aggravated Skitterfly",
"Algeth'ar Academy",
},
[162744] = {
"Nekthara the Mangler",
"Theater of Pain",
},
[205326] = {
"Gust Soldier",
"The Vortex Pinnacle",
},
[188703] = {
"Protoform Barrier",
"Castle Nathria",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
},
[168882] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[189470] = {
"Lava Flare",
"Neltharus",
},
[171184] = {
"Mythresh, Sky's Talons",
"De Other Side",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
},
[204560] = {
"Incorporeal Being",
"The Azure Vault",
},
[94224] = {
"Petrifying Totem",
"Neltharion's Lair",
},
[189471] = {
"Qalashi Blacksmith",
"Neltharus",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
"enUS",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
},
[220368] = {
"Failed Batch",
"Cinderbrew Meadery",
},
[167964] = {
"4.RF-4.RF",
"De Other Side",
},
[177891] = {
"Mawforged Summoner",
"Sanctum of Domination",
},
[115388] = {
"King",
"Return to Karazhan",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
},
[133463] = {
"Venture Co. War Machine",
"The MOTHERLODE!!",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
},
[197145] = {
"Colossal Stormfiend",
"Vault of the Incarnates",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[218884] = {
"Shattershell Scarab",
"Nerub-ar Palace",
"enUS",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
},
[199703] = {
"Magma Mystic",
"Aberrus, the Shadowed Crucible",
},
[65317] = {
"Xiang",
"Temple of the Jade Serpent",
"enUS",
},
[156226] = {
"Coldheart Binder",
"Torghast, Tower of the Damned",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
},
[197146] = {
"Qalashi Emissary",
"Vault of the Incarnates",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
"enUS",
},
[227581] = {
"Nerubian Oracle",
"Earthcrawl Mines",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
"enUS",
},
[216328] = {
"Unstable Test Subject",
"City of Threads",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[85194] = {
"Entanglement",
"The Everbloom",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[157634] = {
"Flameforge Enforcer",
"Torghast, Tower of the Damned",
},
[190370] = {
"Squallbringer Cyraz",
"Halls of Infusion",
},
[166969] = {
"Baroness Frieda",
"Castle Nathria",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
},
[167536] = {
"Harugia the Bloodthirsty",
"Theater of Pain",
},
[238068] = {
"Geargrinder Rager",
"Liberation of Undermine",
"enUS",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[198502] = {
"Council Stormcaller",
"Vault of the Incarnates",
},
[190371] = {
"Primalist Earthshaker",
"Halls of Infusion",
},
[166970] = {
"Lord Stavros",
"Castle Nathria",
},
[82590] = {
"Grimrail Scout",
"Grimrail Depot",
},
[135245] = {
"Bilge Rat Demolisher",
"Siege of Boralus",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
},
[197149] = {
"Qalashi Lavamancer",
"Vault of the Incarnates",
},
[198424] = {
"Primalist Frostsculptor",
"Vault of the Incarnates",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
},
[172981] = {
"Kyrian Stitchwerk",
"The Necrotic Wake",
},
[166971] = {
"Castellan Niklaus",
"Castle Nathria",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
},
[152905] = {
"Tower Sentinel",
"Torghast, Tower of the Damned",
},
[227578] = {
"Nerubian Webcaster",
"Earthcrawl Mines",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
},
[192786] = {
"Qalashi Plunderer",
"Neltharus",
},
[184107] = {
"Runic Protector",
"Uldaman: Legacy of Tyr",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
},
[164926] = {
"Drust Boughbreaker",
"Mists of Tirna Scithe",
},
[180015] = {
"Burly Deckhand",
"Tazavesh, the Veiled Market",
"enUS",
},
[169905] = {
"Risen Warlord",
"De Other Side",
},
[206230] = {
"Infinite Diversionist",
"Dawn of the Infinite",
},
[165556] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
"enUS",
},
[114624] = {
"Arcane Warden",
"Return to Karazhan",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
},
[214287] = {
"Earth Burst Totem",
"The Stonevault",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
},
[189466] = {
"Irontorch Commander",
"Neltharus",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
},
[192791] = {
"Nokhud Warspear",
"The Nokhud Offensive",
},
[115640] = {
"Fuming Imp",
"Faronaar",
},
[114542] = {
"Ghostly Philanthropist",
"Return to Karazhan",
},
[86684] = {
"Feral Lasher",
"The Everbloom",
},
[76518] = {
"Ritual of Bones",
"Shadowmoon Burial Grounds",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
},
[102404] = {
"Stoneclaw Grubmaster",
"Neltharion's Lair",
},
[101326] = {
"Honored Ancestor",
"Halls of Valor",
},
[186284] = {
"Gutchewer Bear",
"Brackenhide Hollow",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
},
[155830] = {
"Mawsworn Disciple",
"Torghast, Tower of the Damned",
},
[228463] = {
"Flame Reel Assistant",
"Liberation of Undermine",
},
[192934] = {
"Volatile Infuser",
"Vault of the Incarnates",
},
[231531] = {
"Territorial Bombshell",
"Liberation of Undermine",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
},
[162763] = {
"Soulforged Bonereaver",
"Theater of Pain",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
},
[115765] = {
"Abstract Nullifier",
"Return to Karazhan",
},
[102094] = {
"Risen Swordsman",
"Black Rook Hold",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
},
[199233] = {
"Flamescale Captain",
"Vault of the Incarnates",
},
[163524] = {
"Kyrian Dark-Praetor",
"Spires of Ascension",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
},
[229252] = {
"Darkfuse Hyena",
"Operation: Floodgate",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
},
[214419] = {
"Void Cursed Crusher",
"The Rookery",
},
[231839] = {
"Scrapmaster",
"Liberation of Undermine",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[187154] = {
"Unstable Curator",
"The Azure Vault",
},
[216621] = {
"Nerubian Webspinner",
"Earthcrawl Mines",
"enUS",
},
[101008] = {
"Stinging Swarm",
"Black Rook Hold",
},
[102095] = {
"Risen Lancer",
"Black Rook Hold",
},
[200836] = {
"Obsidian Guard",
"Aberrus, the Shadowed Crucible",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[114627] = {
"Shrieking Terror",
"Return to Karazhan",
},
[82579] = {
"Grom'kar Far Seer",
"Grimrail Depot",
},
[233474] = {
"Gallagio Goon",
"Liberation of Undermine",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
},
[214421] = {
"Coalescing Void Diffuser",
"The Rookery",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[184140] = {
"Xy Acolyte",
"Sepulcher of the First Ones",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
},
[83025] = {
"Grom'kar Battlemaster",
"Iron Docks",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
},
[115395] = {
"Queen",
"Return to Karazhan",
},
[184335] = {
"Infinite Agent",
"Uldaman: Legacy of Tyr",
},
[127799] = {
"Dazar'ai Honor Guard",
"Atal'Dazar",
},
[80805] = {
"Makogg Emberblade",
"Iron Docks",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
},
[197671] = {
"Volatile Infuser",
"Vault of the Incarnates",
},
[197799] = {
"Quarry Infuser",
"Vault of the Incarnates",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[97068] = {
"Storm Drake",
"Halls of Valor",
"enUS",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
},
[208244] = {
"Nerubian Threadmancer",
"Skittering Breach",
"enUS",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[164510] = {
"Shambling Arbalest",
"Theater of Pain",
},
[155090] = {
"Anodized Coilbearer",
"Operation: Mechagon",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
},
[175550] = {
"Volatile Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[151127] = {
"Lord of Torment",
"Torghast, Tower of the Damned",
},
[98366] = {
"Ghostly Retainer",
"Black Rook Hold",
},
[189234] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
},
[129527] = {
"Bilge Rat Buccaneer",
"Freehold",
},
[95832] = {
"Valarjar Shieldmaiden",
"Halls of Valor",
"enUS",
},
[82597] = {
"Grom'kar Captain",
"Grimrail Depot",
},
[101075] = {
"Wormspeaker Devout",
"Neltharion's Lair",
},
[176575] = {
"Mawsworn Soulwarden",
"Torghast, Tower of the Damned",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
},
[80935] = {
"Grom'kar Boomer",
"Grimrail Depot",
},
[180104] = {
"Tangling Bloom",
"The Shadowlands",
},
[167113] = {
"Spinemaw Acidgullet",
"Mists of Tirna Scithe",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[59553] = {
"The Songbird Queen",
"Temple of the Jade Serpent",
},
[156244] = {
"Winged Automaton",
"Torghast, Tower of the Damned",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
"enUS",
},
[212765] = {
"Void Bound Despoiler",
"The Stonevault",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
},
[194990] = {
"Stormseeker Acolyte",
"Vault of the Incarnates",
},
[156245] = {
"Grand Automaton",
"Torghast, Tower of the Damned",
},
[59873] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
"enUS",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
},
[80936] = {
"Grom'kar Grenadier",
"Grimrail Depot",
},
[155221] = {
"Faeleaf Tender",
"Torghast, Tower of the Damned",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[165197] = {
"Skeletal Monstrosity",
"The Necrotic Wake",
},
[104246] = {
"Duskwatch Guard",
"Court of Stars",
},
[189816] = {
"Dathea Stormlash",
"Vault of the Incarnates",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[167116] = {
"Spinemaw Reaver",
"Mists of Tirna Scithe",
},
[206698] = {
"Fanatical Conjuror",
"Priory of the Sacred Flame",
"enUS",
},
[189878] = {
"Nathrezim Infiltrator",
"Operation: Mechagon",
},
[213343] = {
"Forge Loader",
"The Stonevault",
},
[237192] = {
"Giga-Juiced Technician",
"Liberation of Undermine",
},
[111563] = {
"Duskwatch Guard",
"Court of Stars",
},
[205735] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
},
[198702] = {
"Unstable Frost",
"Vault of the Incarnates",
},
[189555] = {
"Astral Attendant",
"The Azure Vault",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
},
[168396] = {
"Plaguebelcher",
"Plaguefall",
},
[86372] = {
"Melded Berserker",
"The Everbloom",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[179010] = {
"Fatespawn Anomaly",
"Sanctum of Domination",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
},
[180474] = {
"Soul Reaver",
"Sanctum of Domination",
},
[151773] = {
"Junkyard D.0.G.",
"Operation: Mechagon",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[150168] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[198503] = {
"Council Flamecaller",
"Vault of the Incarnates",
},
[92538] = {
"Tarspitter Grub",
"Neltharion's Lair",
},
[114633] = {
"Spectral Valet",
"Return to Karazhan",
},
[80938] = {
"Grom'kar Hulk",
"Grimrail Depot",
},
[88163] = {
"Grom'kar Cinderseer",
"Grimrail Depot",
},
[241798] = {
"Nexus-Prince Xevvos",
"Manaforge Omega",
"enUS",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
},
[198500] = {
"Council Earthcaller",
"Vault of the Incarnates",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
"enUS",
},
[175992] = {
"Dutiful Attendant",
"Castle Nathria",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
},
[198577] = {
"Unstable Flame",
"Vault of the Incarnates",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
},
[162133] = {
"General Kaal",
"Sanguine Depths",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
"enUS",
},
[83761] = {
"Ogron Laborer",
"Iron Docks",
},
[164563] = {
"Vicious Gargon",
"Halls of Atonement",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[241800] = {
"Manaforged Titan",
"Manaforge Omega",
"enUS",
},
[171341] = {
"Bladebeak Hatchling",
"De Other Side",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[235151] = {
"K'aresh Elemental",
"Eco-Dome Al'dani",
"enUS",
},
[164737] = {
"Brood Ambusher",
"Plaguefall",
},
[226200] = {
"Chamber Acolyte",
"Nerub-ar Palace",
},
[151649] = {
"Defense Bot Mk I",
"Operation: Mechagon",
"enUS",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[215756] = {
"Ascended Webwarden",
"Khaz Algar",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
},
[162047] = {
"Insatiable Brute",
"Sanguine Depths",
},
[102295] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
},
[75652] = {
"Void Spawn",
"Shadowmoon Burial Grounds",
},
[84520] = {
"Pitwarden Gwarnok",
"Iron Docks",
},
[185537] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[171343] = {
"Bladebeak Matriarch",
"De Other Side",
},
[227514] = {
"Velo",
"The Spiral Weave",
},
[115019] = {
"Coldmist Widow",
"Return to Karazhan",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
},
[184131] = {
"Earthen Guardian",
"Uldaman: Legacy of Tyr",
},
[190174] = {
"Hypnosis Bat",
"Tazavesh, the Veiled Market",
},
[198709] = {
"Unstable Earth",
"Vault of the Incarnates",
},
[114316] = {
"Baroness Dorothea Millstipe",
"Return to Karazhan",
},
[75506] = {
"Shadowmoon Loyalist",
"Shadowmoon Burial Grounds",
},
[237967] = {
"Discharged Giga Bomb",
"Liberation of Undermine",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
},
[220988] = {
"Skeins Sentry",
"Khaz Algar",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
"enUS",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
},
[115020] = {
"Arcanid",
"Return to Karazhan",
},
[242209] = {
"Overgorged Mite",
"Eco-Dome Al'dani",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[165471] = {
"Nathrian Duelist",
"Castle Nathria",
},
[114317] = {
"Lady Catriona Von'Indi",
"Return to Karazhan",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
},
[134012] = {
"Taskmaster Askari",
"The MOTHERLODE!!",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[165483] = {
"Court Hierarch",
"Castle Nathria",
},
[205622] = {
"Krono Sandtongue",
"Aberrus, the Shadowed Crucible",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[183495] = {
"Twisted Worldeater",
"Sepulcher of the First Ones",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
"enUS",
},
[214441] = {
"Scorched Treant",
"Amirdrassil, the Dream's Hope",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[205618] = {
"Thorak Greenscale",
"Aberrus, the Shadowed Crucible",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[233623] = {
"Pyrotechnics",
"Liberation of Undermine",
},
[208440] = {
"Infinite Slayer",
"Dawn of the Infinite",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[205619] = {
"Sarek Cinderbreath",
"Aberrus, the Shadowed Crucible",
},
[219046] = {
"Voracious Worm",
"Nerub-ar Palace",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[168153] = {
"Plagueroc",
"Plaguefall",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
},
[185032] = {
"Taskmaster Xy'pro",
"Sepulcher of the First Ones",
},
[205620] = {
"Malgosa Spellbinder",
"Aberrus, the Shadowed Crucible",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
},
[114319] = {
"Lady Keira Berrybuck",
"Return to Karazhan",
},
[115406] = {
"Knight",
"Return to Karazhan",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
},
[195135] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[80816] = {
"Ahri'ok Dugru",
"Iron Docks",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
},
["indicator_scale"] = 1.200000047683716,
["aura_grow_direction"] = 1,
["focus_color"] = {
0.07450980693101883,
0.988235354423523,
nil,
0.501960813999176,
},
["indicator_anchor"] = {
["y"] = -5,
["x"] = 1,
["side"] = 1,
},
["health_selection_overlay_alpha"] = 0,
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.99999994039536,
["extra_icon_show_enrage_border"] = {
0,
0,
0,
},
["aura_padding"] = 3,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
["nameplateFlash"] = true,
["colorTick"] = {
1,
1,
1,
1,
},
["colorProtected"] = {
1,
0.25098040699959,
0.25098040699959,
1,
},
["colorSecondaryInterrupt"] = {
1,
0.50196081399918,
0.50196081399918,
1,
},
["replaceName"] = false,
["castNameSize"] = 40,
["colorNoInterrupt"] = {
0.80000007152557,
0.80000007152557,
0.80000007152557,
1,
},
["colorInterruptAvailable"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
["hideNameSolo"] = true,
["colorInterruptSoon"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
},
["HooksTemp"] = {
},
["UID"] = "0x63cc19ce2df2342d",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend\n\n\n",
["Constructor"] = "function(self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    if not unitFrame.castBar.tick then\n        unitFrame.castBar.tick = unitFrame.castBar:CreateTexture (nil, \"overlay\")\n        unitFrame.castBar.tick:SetDrawLayer (\"overlay\", 4)\n        unitFrame.castBar.tick:SetBlendMode (\"DISABLE\")\n        unitFrame.castBar.tick:SetHeight(unitFrame.castBar:GetHeight())\n    end\n    unitFrame.castBar.tick:SetTexture(Plater.SparkTextures[8])\n    unitFrame.castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n    unitFrame.castBar.tick:SetWidth(2)\n    \n    \n    function envTable.EnhancedCastBar(unitId, castBar)\n        castBar.tick:Hide()\n        \n        if castBar.IsInterrupted then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        \n        if UnitExists(targetUnitId) then\n            local targetName = UnitName(targetUnitId)\n            local spellID = castBar.SpellID\n            if BigWigsAPI then\n                spellName =  BigWigsAPI.GetSpellRename(spellID) or castBar.spellName\n            else\n                spellName = castBar.spellName\n            end\n            local inParty = UnitInParty(\"player\")\n            local inRaid = UnitInRaid(\"player\")\n            castBar.Text:SetText(spellName)\n            \n            -- Cast is targetting a specific unit\n            if targetName then\n                \n                local isTargettingMe\n                local targetNameByColor\n                \n                -- Determine if the cast is targetting the player character\n                if targetName == UnitName(\"player\") then\n                    isTargettingMe = true\n                else\n                    isTargettingMe = false\n                end\n                \n                -- Nameplate flash options\n                if isTargettingMe then\n                    if envTable.optionsNameplateFlash then\n                        \n                        -- Default value of true since it is turned on in the options\n                        local showNameplateFlash = true\n                        \n                        -- Hide flash when not in a group\n                        if envTable.optionsHideFlashSolo then\n                            if not inParty and not inRaid then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Hide flash when player is a tank specialization\n                        if envTable.optionsHideFlashAsTank then\n                            if GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Show nameplate flash if conditions met\n                        if showNameplateFlash then\n                            Plater.FlashNameplateBody (unitFrame)\n                        end\n                    end\n                end\n                \n                \n                -- Target name in cast bar options\n                if envTable.optionsShowTargetName then\n                    \n                    -- Change character name to \"Me\" if turned on in options\n                    if envTable.optionsReplaceMyName then\n                        if isTargettingMe then\n                            targetName = \"Me\"\n                        end\n                    end\n                    \n                    -- Color the target name based on the targets class color\n                    targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                    \n                    -- Shrink the name of the cast bar text if necessary (based on options)\n                    local castBarWidth = castBar:GetWidth()\n                    DetailsFramework:TruncateText (castBar.Text, castBarWidth * (envTable.optionsCastNameSize / 100))\n                    \n                    -- Update the cast bar text\n                    local currentText = castBar.Text:GetText()\n                    if currentText ~= nil and currentText ~= '' then\n                        local castText = currentText .. \" - \" ..  targetNameByColor\n                        \n                        -- Hide self target name when solo\n                        if envTable.optionsHideNameSolo then\n                            if not inParty and not inRaid then\n                                if isTargettingMe then\n                                    castText = currentText\n                                end\n                            end\n                        end\n                        castBar.Text:SetText(castText)\n                        DetailsFramework:TruncateText (castBar.Text, castBarWidth)\n                    end\n                end\n            end\n            \n            \n            -- Interrupt bar color options\n            if envTable.optionsShowInterruptColor then\n                local canInterrupt = castBar.canInterrupt\n                local castEndTime = castBar.spellEndTime\n                local interruptReadyTime = 0\n                local start\n                local duration\n                local playerIsWarlock\n                \n                if envTable.interruptID ~= nil then\n                    local cd = C_Spell.GetSpellCooldown(envTable.interruptID)  --local\n                    start, duration  =  cd.startTime, cd.duration\n                    interruptReadyTime = start + duration\n                end\n                \n                if canInterrupt then\n                    if envTable.interruptID ~= nil then\n                        \n                        -- Is the player a warlock?\n                        if envTable.class == 9 then\n                            playerIsWarlock = true\n                        else\n                            playerIsWarlock = false\n                        end\n                        \n                        -- Check to see if the spell is known/talented\n                        if IsSpellKnown(envTable.interruptID, playerIsWarlock) then\n                            if interruptReadyTime == 0 then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptAvailable)\n                            elseif envTable.optionsShowSecondaryInterrupts and envTable.class == 2 and IsSpellKnown(31935) and not envTable.isSpellOnCooldown_IgnoreGCD(31935) then\n                                -- Paladin Avenger's Shield\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            elseif interruptReadyTime < (castEndTime - 0.25) then\n                                castBar.tick:Show()\n                                castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n                                local tickLocation = (start + duration - castBar.spellStartTime) / castBar.maxValue  -- castBar.spellStartTime + 0.25\n                                if castBar.channeling then\n                                    tickLocation = 1 - tickLocation\n                                end\n                                castBar.tick:SetPoint (\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                                \n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptSoon)\n                            elseif interruptReadyTime >= (castEndTime - 0.25) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                            end\n                        else\n                            Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                        end\n                    end\n                else\n                    Plater.SetCastBarColor(unitFrame, envTable.optionsColorProtected)\n                end\n                \n            end\n            \n        end\n    end\n    \n    \n    -- Checks to see if Felgaurd or Felhunter interrupt skill is known and assigns if found\n    function envTable.GetWarlockInterrupt()\n        if IsSpellKnown(89766, true) then\n            -- Felguard: Axe Toss\n            return 89766\n        elseif IsSpellKnown(19647, true) then\n            -- Felhunter: Spell Lock\n            return 19647\n        elseif C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnown(132409, true) then\n            -- Check for Grimoire of Sacrifice\n            return 132409\n        else\n            -- Otherwise no interrupt available    \n            return nil\n        end\n    end\n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    function envTable.isSpellOnCooldown_IgnoreGCD(spellID)\n        local GCD=C_Spell.GetSpellCooldown(61304) -- GCD\n        local gcdSTART, gcdDUR = GCD.startTime, GCD.duration\n        local GCD_expirationTime = gcdSTART + gcdDUR\n        local info = C_Spell.GetSpellCooldown(spellID)\n        local spellStart, spellDuration  = info.startTime, info.duration\n        local spellReadyTime = spellStart + spellDuration\n        if spellReadyTime <= GCD_expirationTime then\n            return false\n        else\n            return true\n        end\n    end\n    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Get players current talent specialization\n    envTable.spec = GetSpecialization()\n    \n    -- Flashing nameplate options\n    envTable.optionsHideFlashSolo = modTable.config.hideNameplateFlashSolo\n    envTable.optionsNameplateFlash = modTable.config.nameplateFlash\n    envTable.optionsHideFlashAsTank = modTable.config.hideFlashAsTank\n    \n    -- Target name options\n    envTable.optionsShowTargetName = modTable.config.showTargetName\n    envTable.optionsReplaceMyName = modTable.config.replaceName\n    envTable.optionsHideNameSolo = modTable.config.hideNameSolo\n    envTable.optionsCastNameSize = modTable.config.castNameSize\n    \n    -- Cast bar interrupt coloring\n    envTable.optionsShowInterruptColor = modTable.config.showInterruptColor\n    envTable.optionsShowSecondaryInterrupts = modTable.config.showSecondaryInterrupts\n    envTable.optionsColorNoInterrupt = modTable.config[\"colorNoInterrupt\"]\n    envTable.optionsColorInterruptAvailable = modTable.config[\"colorInterruptAvailable\"]\n    envTable.optionsColorInterruptSoon = modTable.config[\"colorInterruptSoon\"]\n    envTable.optionsColorSecondaryAvailable = modTable.config[\"colorSecondaryInterrupt\"]\n    envTable.optionsColorProtected = modTable.config[\"colorProtected\"]\n    envTable.optionsColorTick = modTable.config[\"colorTick\"]\n    \n    -- Get the primary interrupt ID of the players current class/spec.\n    -- All non-warlock classes have straight forward primary interrupt skills.\n    if envTable.class ~= 9 then\n        envTable.interruptID = modTable.primaryInterrupts[envTable.class][envTable.spec]\n    else\n        -- Warlock interrupt changes based on pet being used.\n        envTable.interruptID = envTable.GetWarlockInterrupt()\n    end\n    \n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend",
["Initialization"] = "function (modTable)\n    -- List of primary interupt skills used by each spec and class\n    -- Does not track secondary interrupt skills (such as Avenger's shield, etc)\n    modTable.primaryInterrupts =\n    {\n        \n        -- Warrior\n        [1] =\n        {\n            [1] = 6552, -- Pummel (Arms)\n            [2] = 6552, -- Pummel (Fury)\n            [3] = 6552 --  Pummel (Protection)\n        },\n        \n        -- Paladin\n        [2] =\n        {\n            [1] = 96231, -- Rebuke (Holy)\n            [2] = 96231, -- Rebuke (Protection)\n            [3] = 96231 -- Rebuke (Retribution)\n        },\n        \n        -- Hunter\n        [3] =\n        {\n            [1] = 147362, -- Counter Shot (Beast Mastery)\n            [2] = 147362, -- Counter Shot (Marksmanship)\n            [3] = 187707 -- Muzzle (Survival)\n        },\n        \n        -- Rogue\n        [4] =\n        {\n            [1] = 1766, -- Kick (Assassination)\n            [2] = 1766, -- Kick (Outlaw)\n            [3] = 1766 -- Kick (Subtlety)\n        },\n        \n        -- Priest\n        [5] =\n        {\n            [1] = nil,\n            [2] = nil,\n            [3] = 15487 -- Silence (Shadow)\n        },\n        \n        -- Death Knight\n        [6] =\n        {\n            [1] = 47528, -- Mind Freeze (Blood)\n            [2] = 47528, -- Mind Freeze (Frost)\n            [3] = 47528 -- Mind Freeze (Unholy)\n        },\n        \n        -- Shaman\n        [7] =\n        {\n            [1] = 57994, -- Wind Shear (Elemental)\n            [2] = 57994, -- Wind Shear (Enhancement)\n            [3] = 57994 -- Wind Shear (Restoration)\n        },\n        \n        -- Mage\n        [8] =\n        {\n            [1] = 2139, -- Counterspell (Arcane)\n            [2] = 2139, -- Counterspell (Fire)\n            [3] = 2139 -- Counterspell (Frost)\n        },\n        \n        -- [9] Warlock interrupt depends on pet being used.\n        --  Code for warlock contained in Cast Start hook.\n        \n        -- Monk\n        [10] =\n        {\n            [1] = 116705, -- Spear Hand Strike (Brewmaster)\n            [2] = 116705, -- Spear Hand Strike (Mistweaver)\n            [3] = 116705 -- Spear Hand Strike (Windwalker)\n        },\n        \n        -- Druid\n        [11] =\n        {\n            [1] = 78675, -- Solar Beam (Balance)\n            [2] = 106839, -- Skull Bash (Feral)\n            [3] = 106839, -- Skull Bash (Guardian)\n            [4] = 106839 -- Skull Bash (Restoration)\n        },\n        \n        -- Demon Hunter\n        [12] =\n        {\n            [1] = 183752, -- Disrupt (Havoc)\n            [2] = 183752 -- Disrupt (Vengeance)\n        },\n        \n        -- Evoker\n        [13] =\n        {\n            [1] = 351338, -- Quell (Devastation)\n            [2] = 351338 -- Quell (Preservation)\n        }\n    }\n    \nend\n\n\n",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\nend",
},
["Time"] = 1759090907,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/L6ZlsbPEC/9",
["Icon"] = 429383,
["Enabled"] = true,
["Revision"] = 1359,
["semver"] = "1.2.3",
["Author"] = "Nimeshady-Zul'jin",
["Desc"] = "Shows who a cast is targeting in the cast bar as well as other configurable options.",
["Prio"] = 99,
["version"] = 9,
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Name"] = "CUSTOM CAST BAR COLORS",
["Value"] = "Feature - Custom cast bar coloring:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable custom colored enemy cast bars.",
["Value"] = true,
["Key"] = "showInterruptColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting the cast bar will change to the colors below based on the status of you being able to interrupt the cast.",
},
{
["Type"] = 4,
["Name"] = "Enable support for secondary interrupts: Avenger's Shield (Paladin), Spell Reflection (Warrior).",
["Value"] = true,
["Key"] = "showSecondaryInterrupts",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colors casts that can be reflected with Spell Reflection (Warrior) and interrupted with Avenger's Shield (Paladin).",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is available.",
["Value"] = {
0.10980392992496,
0.63921570777893,
0.1843137294054,
1,
},
["Key"] = "colorInterruptAvailable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is down but will be available before cast finishes.",
["Value"] = {
0.63921570777893,
0.61568629741669,
0.10980392992496,
1,
},
["Key"] = "colorInterruptSoon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt on cooldown but it will be available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is unavailable.",
["Value"] = {
0.61960786581039,
0.16862745583057,
0.28627452254295,
1,
},
["Key"] = "colorNoInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you do not have an interrupt available to interrupt the current cast",
},
{
["Type"] = 1,
["Name"] = "Color for secondary interrupts. (Avenger's Shield and Spell Reflection)",
["Value"] = {
0.10980392992496,
0.52156865596771,
0.63921570777893,
1,
},
["Key"] = "colorSecondaryInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast targeting you can be reflected with Spell Reflection or interrupted with Avenger's Shield. Only active when playing the appropriate class with the skill off cooldown.",
},
{
["Type"] = 1,
["Name"] = "Color for casts that are protected/un-interruptable.",
["Value"] = {
0.22352942824364,
0.22352942824364,
0.22352942824364,
1,
},
["Key"] = "colorProtected",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast can not be interrupted by a standard interrupt.",
},
{
["Type"] = 1,
["Name"] = "Color of interrupt available tick. (Hover for more info)",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Key"] = "colorTick",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "When your interrupt is currently down but will become available before the current cast completes a tick will appear in the cast bar showing you the exact position in the cast you will be able to interrupt the cast. You can customize the color of the tick using this setting.  YOU MUST /RELOAD YOUR UI AFTER CHANGING THIS COLOR.",
},
{
["Type"] = 5,
["Name"] = "Settings Target Name",
["Value"] = "Feature - Show name of target in the cast bar:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show the name of cast targets in the cast bar.",
["Value"] = true,
["Key"] = "showTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting a spell at a target, the targets name will appear in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Hide my name when not in a party.",
["Value"] = true,
["Key"] = "hideNameSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When you are not in a party or raid group casts targetting you will not display your name in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Show \"Me\" instead of my character name.",
["Value"] = true,
["Key"] = "replaceName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When targetted by casts, instead of showing your character name it will show \"Me\".",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "The relative size (in percentage) that a spell name will take up of the cast bar, not including the target name. Adjust this so that target names fit into the cast bar correctly based on the width and text size of your cast bar. If you find even after adjusting this setting that there is not enough space try decreasing your cast bar text size or making the cast bar wider.",
["Min"] = 30,
["Name"] = "Maximum length of a cast name in %. Hover for more info.",
["Value"] = 60,
["Key"] = "castNameSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 5,
["Name"] = "Settings Border Flash",
["Value"] = "Feature - Flash nameplates when a spell targets you:",
["Key"] = "option8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Namplate Flash",
},
{
["Type"] = 4,
["Name"] = "Flash the nameplates of enemies that are casting a spell or ability targeting me.",
["Value"] = false,
["Key"] = "nameplateFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is targetting you with a cast, this option will flash the nameplate of that enemy to indicate that cast is targeting you.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when not in a party.",
["Value"] = true,
["Key"] = "hideNameplateFlashSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing solo.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when I'm playing a tank specialization.",
["Value"] = true,
["Key"] = "hideFlashAsTank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing as a tank specialization.",
},
},
["Name"] = "Enhanced Enemy Castbar",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --ensure reload updates existing\n    modTable.updateExisting(unitFrame)\nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    \n    -- settings:\n    local formatAuraTimers = modTable.config.formatAuraTimers\n    local formatBuffSpecialTimers = modTable.config.formatBuffSpecialTimers\n    \n    \n    -- time formatting function: (can be adjusted)\n    Plater.FormatTimeNew = function (s)\n        if s < 5 then\n            return (\"%.1f\"):format(s)\n        elseif s < 60 then\n            return (\"%d\"):format(s)\n        elseif s < 3600 then\n            return (\"%d:%02d\"):format(s/60%60, s%60)\n        elseif s < 86400 then\n            return (\"%dh %02dm\"):format(s/(3600), s/60%60)\n        else\n            return (\"%dd %02dh\"):format(s/86400, (s /3600) - (floor(s/86400) * 24))\n        end\n    end\n    Plater.FormatTimeOrig = Plater.FormatTimeOrig or Plater.FormatTime\n    \n    local DF = _G[\"DetailsFramework\"]\n    local IconRowFunctions = DF.IconRowFunctions or DF.IconMixin\n    IconRowFunctions.FormatCooldownTimeOrig = IconRowFunctions.FormatCooldownTimeOrig or IconRowFunctions.FormatCooldownTime\n    \n    \n    -- exchange formatting:\n    function modTable.hookTimeFormat()\n        if formatAuraTimers then\n            Plater.FormatTime = Plater.FormatTimeNew\n        else\n            Plater.FormatTime = Plater.FormatTimeOrig\n        end\n        \n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                IconRowFunctions.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n        else\n            -- no buff special\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            end\n        end\n    end\n    \n    function modTable.updateExisting(unitFrame)\n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        else\n            \n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeOrig (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        end\n        \n    end\n    \n    \n    modTable.hookTimeFormat()\n    for _, plateFrame in ipairs (Plater.GetAllShownPlates()) do\n        modTable.updateExisting(plateFrame.unitFrame)\n    end\n    \nend",
["Player Logon"] = "function(modTable)\n    modTable.hookTimeFormat()\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1759090429,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/mULsbUUxJ/13",
["Icon"] = "INTERFACE\\ICONS\\Ability_BossMagistrix_TimeWarp2",
["Enabled"] = true,
["Revision"] = 256,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Overwrites the Plater time formatting to show second fractions.",
["Prio"] = 99,
["version"] = 13,
["PlaterCore"] = 1,
["Name"] = "Detailed Time Format",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Name"] = "Format Aura Timers",
["Value"] = true,
["Key"] = "formatAuraTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Format Buff Special Timers",
["Value"] = true,
["Key"] = "formatBuffSpecialTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"#FF4040\",\n        okay = \"#FFFFFF\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 5.0,\n    }\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsVisible()) then\n                if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n                end \n            end\n            \n        end\n    end\n    \n    \n    for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        if auraIcon:IsShown() then\n            if (auraIcon:IsVisible()) then\n                local remainingTime = (auraIcon.startTime + auraIcon.duration - GetTime())\n                if (remainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.okay)\n                end\n            end\n        end\n    end\n    \nend\n\n\n",
},
["Time"] = 1759090413,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/CjOSTakvH/1",
["Icon"] = "Interface\\Timer\\Challenges-Logo",
["Enabled"] = true,
["Revision"] = 129,
["semver"] = "1.0.0",
["Author"] = "Ditador-Azralon",
["Desc"] = "Change the color of the aura timer by it's time left",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Name"] = "Paint Aura Timers",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = .5 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Time"] = 1759090801,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 134400,
["Enabled"] = true,
["Revision"] = 208,
["semver"] = "",
["Author"] = "????????-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Debuff Border",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["TargetBorderSize"] = 1.5,
["CastBarBorder"] = true,
["ReplaceDefaultBorder"] = false,
["ExpandTargetBorder"] = true,
["SpellIconBorderSize"] = 0.5,
["ShowShieldIcon"] = false,
["SpellIconXOffset"] = 0,
["showBigIcon"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Destructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar.border then unitFrame.healthBar.border:Hide() end\n    if unitFrame.healthBar.targetBorder then unitFrame.healthBar.targetBorder:Hide() end\n    if unitFrame.castBar.border then unitFrame.castBar.border:Hide() end\n    if unitFrame.castBar.Icon then unitFrame.castBar.Icon:Hide() end\n    if unitFrame.castBar.IconBorder then unitFrame.castBar.IconBorder:Hide() end\n    if unitFrame.castBar.BorderShield then unitFrame.castBar.BorderShield:Hide() end\nend",
["Initialization"] = "function (modTable)\n    \n    function modTable.UpdateIconPosition(unitFrame, envTable, modTable)\n        local castBar = unitFrame.castBar\n        local icon = unitFrame.castBar.Icon\n        local shield = unitFrame.castBar.BorderShield\n        icon:Hide()\n        castBar.IconBorder:Hide()\n        if (modTable.config.ShowSpellIcon) then\n            icon:ClearAllPoints()\n            if (modTable.config.showBigIcon) then\n                icon:SetPoint(\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetPoint(\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            else\n                icon:SetPoint(\"topright\", unitFrame.castBar, \"topleft\", modTable.config.SpellIconXOffset, envTable.IconSizeOffset)\n                icon:SetPoint(\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            end\n            icon:Show()\n            if modTable.config.SpellIconBorder then\n                castBar.IconBorder:SetVertexColor(\n                    DetailsFramework:ParseColors(modTable.config.SpellIconBorderColor)\n                )\n                castBar.IconBorder:SetBorderSizes(\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize\n                )\n                castBar.IconBorder:UpdateSizes()\n                castBar.IconBorder:Show()\n            end\n        end\n        \n        if modTable.config.CastBarBorder then\n            castBar.border:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.CastBarBorderColor)\n            )\n            castBar.border:SetBorderSizes(\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize\n            )\n            castBar.border:UpdateSizes()\n            castBar.border:Show()\n        else\n            castBar.border:Hide()\n        end\n        \n        if (modTable.config.ShowShieldIcon and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            shield:SetSize(modTable.config.ShieldIconWidth, modTable.config.ShieldIconHeight)\n            shield:ClearAllPoints()\n            shield:SetPoint( \"center\", castBar, \"left\", modTable.config.ShieldIconXOffset, modTable.config.ShieldIconYOffset )\n        else\n            shield:Hide()\n        end\n    end\n    \n    function modTable.UpdateBorder(unitFrame, envTable, modTable, casting)\n        local healthBar = unitFrame.healthBar\n        local castBar = unitFrame.castBar\n        local targetBorder = unitFrame.healthBar.targetBorder\n        local defaultBorder = unitFrame.healthBar.border\n        \n        targetBorder:Hide()\n        defaultBorder:Hide()\n        \n        if modTable.config.ReplaceDefaultBorder then\n            targetBorder = unitFrame.healthBar.border\n            targetBorder:SetFrameStrata(\"HIGH\")\n            targetBorder:Show()\n        else\n            unitFrame.healthBar.border:Show()\n            if unitFrame.IsTarget then\n                targetBorder:Show()\n            end\n        end\n        \n        if casting==true then\n            if modTable.config.ShowSpellIcon then\n                targetBorder:ClearAllPoints()\n                if modTable.config.ExpandTargetBorder then\n                    if modTable.config.showBigIcon then\n                        targetBorder:SetPoint(\"topleft\", castBar.Icon, \"topleft\", 0, 0)\n                    else\n                        targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                    end\n                else\n                    targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                end\n                if modTable.config.ExpandTargetBorder then\n                    targetBorder:SetPoint(\"bottomright\", castBar, \"bottomright\", 0, 0)\n                else\n                    targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0)\n                end\n            else\n                targetBorder:ClearAllPoints()\n                targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0)\n            end\n            \n        elseif casting==false then\n            targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n            targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0) \n        end\n        \n        if unitFrame.IsTarget then\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.TargetBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize\n            )\n            targetBorder:UpdateSizes()\n        else\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(envTable.DefaultBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize\n            )\n            targetBorder:UpdateSizes()\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    modTable.UpdateBorder (unitFrame, envTable, modTable, true)\nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- Any settings changed here will require you to disable this plater mod,\n    -- then re-enable it by checking the box in the list on the left hand side of the window\n    \n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 0\n    \n    -- Settings for the shield for non interruptible casts\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    \n    envTable.DefaultBorderSize  = Plater.db.profile.border_thickness\n    envTable.DefaultBorderColor = Plater.db.profile.border_color\n    \n    -- Create a new health bar target border\n    if not unitFrame.healthBar.targetBorder then\n        unitFrame.healthBar.targetBorder = CreateFrame(\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.healthBar.targetBorder:Hide()\n    end\n    \n    -- Create a frame for the spell icon border\n    if not unitFrame.castBar.IconOverlayFrame then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.IconBorder:SetIgnoreParentScale(false)\n    end\n    \n    -- Create a frame for the cast bar border\n    if not unitFrame.castBar.border then\n        unitFrame.castBar.border = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.border:SetIgnoreParentScale(false)\n    end\n    \n    -- Hook into when the cast bar hides so we can update the border with casting set to false\n    -- Note: This hook needs to be the last thing in the constructor as it may immediately call\n    -- UpdateBorder and we need to make sure all of the frames are created first\n    if not unitFrame.castBar.borderChangeHooked then\n        hooksecurefunc(\n            unitFrame.castBar, \n            \"Hide\",\n            function()\n                modTable.UpdateBorder(unitFrame, envTable, modTable, false)\n            end\n        )\n        unitFrame.castBar.borderChangeHooked = true\n    end\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    self.ThrottleUpdate = -1\nend\n\n\n\n\n\n\n",
},
["Time"] = 1759090411,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 1664,
["semver"] = "",
["Author"] = "Vahra-Tichondrius",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate and extend the border around icon and cast bar.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Target Border",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Border Settings",
["Value"] = "Border Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Target Border Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "TargetBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of the targeted nameplate",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Target Border Size",
["Value"] = 1,
["Key"] = "TargetBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 4,
["Name"] = "Expand Target Border",
["Value"] = true,
["Key"] = "ExpandTargetBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Expands the target border around the cast icon and cast bar",
},
{
["Type"] = 4,
["Name"] = "Replace Default Border (/reload)",
["Value"] = true,
["Key"] = "ReplaceDefaultBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Replace the default border instead of creating a new one. You may have to /reload when changing this option",
},
{
["Type"] = 5,
["Name"] = "Cast Bar Settings",
["Value"] = "Cast Bar Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "Note, to get this to look right you may have",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "to update the Y offset of the cast bar",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "under Plater's \"Enemy Npc\" settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Border",
["Value"] = true,
["Key"] = "CastBarBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show a border around the enemy cast bar",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the enemy cast bar",
["Min"] = 0,
["Name"] = "Cast Bar Border Size",
["Value"] = 0.5,
["Key"] = "CastBarBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Cast Bar Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "CastBarBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of enemy cast bar",
},
{
["Type"] = 5,
["Name"] = "Cast Icon Settings",
["Value"] = "Cast Icon Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Spell Icon",
["Value"] = true,
["Key"] = "ShowSpellIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show the spell icon of the targets cast",
},
{
["Type"] = 4,
["Name"] = "Show Big Icon",
["Value"] = false,
["Key"] = "showBigIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Spell Icon Border",
["Value"] = true,
["Key"] = "SpellIconBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should Show a border around the spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Spell Icon Border Size",
["Value"] = 0.5,
["Key"] = "SpellIconBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Spell Icon Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "SpellIconBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of target's spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X Offset of the Spell Icon",
["Min"] = -10,
["Name"] = "Spell Icon X Offset",
["Value"] = 0.5,
["Key"] = "SpellIconXOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 5,
["Name"] = "Shield Icon Settings",
["Value"] = "Shield Icon Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Shield Icon",
["Value"] = false,
["Key"] = "ShowShieldIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show a shield icon next to the cast bar for uninterruptable spells",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon X Offset",
["Value"] = -4.5,
["Key"] = "ShieldIconXOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The Y offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon Y Offset",
["Value"] = 0,
["Key"] = "ShieldIconYOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The width of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Width",
["Value"] = 8,
["Key"] = "ShieldIconWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The height of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Height",
["Value"] = 8,
["Key"] = "ShieldIconHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
{
["OptionsValues"] = {
["colour_names"] = false,
["show_elite"] = false,
["show_elite_text"] = false,
["short_names"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Initialization"] = "function(modTable)\n    \n    -- used for nameColouring\n    -- AARRGGBB\n    local markerToHex = {\n        [1] = \"FFEAEA0D\", -- Yellow 5 Point Star\n        [2] = \"FFEAB10D\", -- Orange Circle\n        [3] = \"FFCD00FF\", -- Purple Diamond\n        [4] = \"FF06D425\", -- Green Triangle\n        [5] = \"FFB3E3D8\", -- Light Blue Moon\n        [6] = \"FF0CD2EA\", -- Blue Square\n        [7] = \"FFD6210B\", -- Red Cross\n        [8] = \"FFFFFFFF\", -- White Skull\n    }\n    \n    local eliteToHex = {\n        [1] = \"FFFFCC00\", -- Elite\n        [2] = \"FFCCCCCC\", -- Rare\n        [3] = \"FFFF8040\", -- Rare Elite\n    }\n    \n    -- Makes it so you take their first name e.g Jessie Howlis -> Jessie\n    local nameBlacklist = {\n        [\"the\"] = true,\n        [\"of\"] = true,\n        [\"Tentacle\"] = true,\n        [\"Apprentice\"] = true,\n        [\"Denizen\"] = true,\n        [\"Emissary\"] = true,\n        [\"Howlis\"] = true,\n        [\"Terror\"] = true,\n        [\"Totem\"] = true,\n        [\"Waycrest\"] = true,\n        [\"Aspect\"] = true\n    }\n    \n    \n    -- @unitId  unitID for mob e.g nameplate1\n    function modTable.renamer(unitFrame, unitId)\n        \n        if not (unitId and unitFrame) then\n            return\n        end\n        \n        local name = unitFrame.namePlateUnitName or UnitName(unitId) or \"\"\n        \n        -- 1) shorten\n        if modTable.config[\"short_names\"] and not unitFrame.unitName.isRenamed then\n            local unitName\n            local a, b, c, d, e, f = strsplit(' ', name, 5)\n            if nameBlacklist[b] then\n                unitName = a or b or c or d or e or f\n            else\n                unitName = f or e or d or c or b or a\n            end\n            name = unitName or name\n        end -- if short_names\n        \n        \n        -- 2) Coloring\n        if modTable.config[\"colour_names\"] then\n            local marker = GetRaidTargetIndex(unitId)\n            if marker then\n                local color = markerToHex[marker or 8]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        -- 3) Rare / Elite Addition\n        if modTable.config[\"show_elite\"] then\n            local eliteType = UnitClassification(unitId)\n            if eliteType == \"elite\" then\n                local color = eliteToHex[1]\n                name = WrapTextInColorCode(name, color)\n            elseif eliteType == \"rare\" then\n                local color = eliteToHex[2]\n                name = WrapTextInColorCode(name, color)\n            elseif eliteType == \"rareelite\" then\n                local color = eliteToHex[3]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        if modTable.config[\"show_elite_text\"] then\n            local eliteType = UnitClassification(unitId)\n            if eliteType == \"elite\" and not IsInRaid() then\n                name = name .. \" [E]\"\n            elseif eliteType == \"rare\" and not IsInRaid() then\n                name = name .. \" [R]\"\n            elseif eliteType == \"rareelite\" and not IsInRaid() then\n                name = name .. \" [RE]\"\n            end\n        end\n        \n        -- 4) Apply\n        unitFrame.healthBar.unitName:SetText(name)\n    end -- envTable.namer\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend\n\n\n\n",
},
["Time"] = 1759090174,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 390,
["semver"] = "",
["Author"] = "Rhk-Tarren Mill",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Name Shortener",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Name"] = "Shorten Names",
["Value"] = true,
["Key"] = "short_names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Shortens NPC Names. eg.: \"Murkbrine Fishmancer\" -> \"Fishmancer\"",
},
{
["Type"] = 4,
["Name"] = "Colour by Raidmark",
["Value"] = true,
["Key"] = "colour_names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colours the Name by the assigned Raidmark. eg.: Triangle --> Green Name",
},
{
["Type"] = 4,
["Name"] = "Colour by Unit Status",
["Value"] = true,
["Key"] = "show_elite",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "show_elite_text",
["Value"] = true,
["Name"] = "Concatenate Name with Unit Status",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function(self, unitId, unitFrame, envTable)\n    unitFrame.castBar.ScheduleToHide = function(self) self:Hide() end\nend",
},
["Time"] = 1759090859,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Avade-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Hide Interrupted",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["raidMarkerXOff"] = 1,
["unitNameXOffRaidMarker"] = 3,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.updatePosition = function(unitFrame)\n        local unitNameXOff = modTable.config.unitNameXOff -- Unit Name X Offset\n        local unitNameXOffRaidMarker = modTable.config.unitNameXOffRaidMarker -- Unit Name X Offset with Raid Marker\n        local raidMarkerXOff = modTable.config.raidMarkerXOff\n        local hasRaidTarget = unitFrame.PlaterRaidTargetFrame.RaidTargetIcon:IsShown() and unitFrame.PlaterRaidTargetFrame\n        if hasRaidTarget then\n            unitFrame.PlaterRaidTargetFrame:ClearAllPoints()\n            unitFrame.PlaterRaidTargetFrame:SetPoint(\"LEFT\", unitFrame.healthBar, \"LEFT\", raidMarkerXOff, 0)\n            unitFrame.PlaterRaidTargetFrame:SetSize(18, 18)\n            unitFrame.unitName:SetPoint(\"LEFT\", unitFrame.PlaterRaidTargetFrame, \"RIGHT\", unitNameXOffRaidMarker, 0)\n        else\n            unitFrame.unitName:ClearAllPoints()\n            unitFrame.unitName:SetPoint(\"LEFT\", unitFrame.healthBar, \"LEFT\", unitNameXOff, 0)\n        end\n    end\nend",
["Raid Target"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
},
["Time"] = 1759090409,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
["raid"] = true,
["none"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 458724,
["Enabled"] = true,
["Revision"] = 1182,
["semver"] = "",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "Aligns Raid Marker to the Left of the Unit Name.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Target Marker",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset without Raid Marker",
["Min"] = -99,
["Name"] = "Unit Name (No Raid Marker)",
["Value"] = 1,
["Key"] = "unitNameXOff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset with Raid Marker",
["Min"] = -99,
["Name"] = "Unit Name (Raid Marker)",
["Value"] = 3,
["Key"] = "unitNameXOffRaidMarker",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset for Raid Marker",
["Min"] = -99,
["Name"] = "Raid Marker",
["Value"] = 1,
["Key"] = "raidMarkerXOff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
{
["OptionsValues"] = {
["oneColor"] = {
0,
1,
0.01176470704376698,
1,
},
["twoColor"] = {
0,
0.501960813999176,
1,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x6490c26f17d91913",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.SetNameplateColors(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    --IDs of dots, you can change them to easier adjust to different classes, change only numbers\n    modTable.doubleDebuffs = {\n        {34914, 335467}, --Vampiric Touch + Devouring Plague\n        {188389, 334168}, --Flame Shock + Lashing Flames\n        {164815, 164812}, --Sunfire + Moonfire\n        {703, 1943}, --Garrote + Rupture\n        {980, 146739}, --Agony + Corruption\n        {980, 445474}, --Agony + Wither\n    }\n    \n    modTable.singleDebuffs = {\n        34914, --Vampiric Touch\n        589,--Shadow Word: Pain\n        20421, --Purge the Wicked\n        188389, --Flame Shock\n        157736, --Immolate\n        217200, --Barbed Shot\n        228287, --Mark of the Crane\n        445474, --Wither\n        164815, --Sunfire\n        164812, --Moonfire\n        155722, --Rake\n        980, --Agony\n        146739, --Corruption\n        460553, --Doom\n    }\n    \n    modTable.rOption = modTable.config.resetOption\n    \n    modTable.matchMultipleBuffs = {}\n    \n    for _, v in ipairs (modTable.doubleDebuffs) do\n        local buff = {\n            auras = v,\n            nameplateColor = modTable.config.twoColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\n    \n    for _, v in ipairs (modTable.singleDebuffs) do\n        local buff = {\n            auras = {v},\n            nameplateColor = modTable.config.oneColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\nend\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(modTable.matchMultipleBuffs) do      \n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, v.nameplateColor)\n                \n                return\n            else\n                -- reset colour\n                if (modTable.rOption) then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, 1,1,1, 1)\n                end\n                \n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors(unitFrame)\n        local colored = envTable.matchMultiple(unitFrame)\n    end\n    \nend",
},
["Time"] = 1759090433,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/-OwVE8C1v/1",
["Enabled"] = true,
["Revision"] = 1547,
["semver"] = "1.0.0",
["Author"] = "Megabelly-Silvermoon",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Debuff Name Color Change",
["PlaterCore"] = 1,
["version"] = 1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 5,
["Key"] = "label1",
["Value"] = "Settings:",
["Name"] = "Settings:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "oneColor",
["Value"] = {
1,
0.50196081399918,
0,
1,
},
["Name"] = "One Debuff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with 1 debuff",
},
{
["Type"] = 1,
["Key"] = "twoColor",
["Value"] = {
0.13333334028721,
0.54509806632996,
0.13333334028721,
1,
},
["Name"] = "Two Debuffs",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with a set of 2 debuffs",
},
{
["Type"] = 5,
["Key"] = "label4",
["Value"] = "Miscellaneous:",
["Name"] = "Miscellaneous:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetOption",
["Value"] = true,
["Name"] = "Reset colour after expire",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Resets colour after debuf expires. Toggling on will prevent sometimes lingering colour on nameplates/borders. Toggling off makes mod compatible with other nameplate colouring mods.",
},
},
},
},
["auras_per_row_auto"] = false,
["cast_statusbar_fadeout_time"] = 0.4999999701976776,
["aura_stack_size"] = 12,
["extra_icon_caster_outline"] = "OUTLINE",
["auras_per_row_amount2"] = 5,
["disable_omnicc_on_auras"] = true,
["aura_height2"] = 26,
["health_statusbar_bgcolor"] = {
0.13333334028721,
0.13333334028721,
0.13333334028721,
1,
},
["blizzard_nameplate_large_font_size"] = 12,
["cast_colors"] = {
[420907] = {
false,
"white",
"",
},
},
["pet_width_scale"] = 0.99999994039536,
["aura_border_colors"] = {
["enrage"] = {
1,
0,
0.1607843190431595,
},
["steal_or_purge"] = {
nil,
1,
0.9450981020927429,
},
["offensive"] = {
nil,
0,
0,
},
["crowdcontrol"] = {
0,
0,
0,
},
["is_show_all"] = {
0,
0,
0,
},
["defensive"] = {
0,
0,
0,
},
["is_buff"] = {
nil,
0,
0,
},
},
["quick_hide"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Shining Green [P]"] = 3,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Heroic Leap [P]"] = 3,
["Unit - Show Energy"] = 11,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - Quick Flash"] = 2,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Cast - Shield Interrupt"] = 2,
["Cast - Voidzone [P]"] = 2,
["Add - Explode on Die [P]"] = 1,
["Cast - Very Important"] = 15,
["Cast - AoE Hit All [P]"] = 3,
["Countdown"] = 12,
["Cast - AoE With Range [P]"] = 2,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - On Going Cast [P]"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Cast - Glowing [P]"] = 10,
["Auto Set Skull"] = 11,
["Add - Warning [P]"] = 5,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Alert + Timer [P]"] = 4,
["Spiteful Affix"] = 3,
["Cast - Stop Casting"] = 4,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Fixate"] = 11,
["Aura - Is Cast Bar [P]"] = 1,
["Cast - Circular Swipe"] = 4,
["Cast - Castbar is Timer [P]"] = 2,
["Fixate On You"] = 12,
},
["target_highlight_color"] = {
0.5647059082984924,
0.8117647767066956,
},
["cast_statusbar_color_channeling"] = {
nil,
nil,
nil,
1,
},
["extra_icon_anchor"] = {
["side"] = 2,
["x"] = 0,
},
["extra_icon_wide_icon"] = false,
["cast_statusbar_spark_hideoninterrupt"] = false,
["extra_icon_stack_outline"] = "OUTLINE",
["range_check_alpha"] = 0.699999988079071,
["aura2_grow_direction"] = 3,
["semver"] = "1.0.10",
["bossmod_aura_glow_expiring"] = true,
["aura_frame2_anchor"] = {
["y"] = 3,
["side"] = 1,
},
["use_name_translit"] = true,
["aura_alpha"] = 1,
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark8",
["indicator_faction"] = false,
["pet_height_scale"] = 0.99999994039536,
["aura_x_offset"] = 0,
["range_check_alpha_friendlies"] = 0.5,
["transparency_behavior"] = 2,
["spell_animations"] = false,
["ui_parent_scale_tune"] = 1,
["debuff_show_cc_border"] = {
0,
0,
0,
},
["aura_consolidate"] = true,
["health_statusbar_bgtexture"] = "Atrocity",
["indicator_raidmark_anchor"] = {
["side"] = 9,
["x"] = 0,
},
["extra_icon_width"] = 34,
["aura_show_enrage"] = true,
["health_statusbar_texture"] = "Atrocity",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Execute Range"] = 1,
["Cast Bar Icon Config"] = 2,
["Aura Reorder"] = 3,
["Combo Points"] = 6,
["Hide Neutral Units"] = 1,
["Target Color"] = 3,
["Attacking Specific Unit"] = 2,
["Extra Border"] = 2,
},
["cast_statusbar_color"] = {
0.8549020290374756,
0.7725490927696228,
0.3607843220233917,
1,
},
["update_throttle"] = 0.5,
["minor_width_scale"] = 0.99999994039536,
["cast_statusbar_interrupt_anim"] = false,
["castbar_target_text_size"] = 11,
["extra_icon_show_defensive_border"] = {
0,
0,
0,
},
["aura_frame1_anchor"] = {
["y"] = 3,
["side"] = 7,
},
["tocversion"] = 110200,
["indicator_extra_raidmark"] = false,
["indicator_rare"] = false,
["extra_icon_timer_font"] = "Friz Quadrata TT",
["indicator_spec"] = false,
["not_affecting_combat_alpha"] = 1,
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
0.9764706492424011,
0.5411764979362488,
0.4745098352432251,
},
["anothertank"] = {
0.729411780834198,
0.917647123336792,
},
["aggro"] = {
0.5058823823928833,
0.4235294461250305,
0.9137255549430847,
},
["noaggro"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["nocombat"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["pulling"] = {
0.3098039329051971,
0.4509804248809815,
0.6313725709915161,
},
},
},
["cast_statusbar_color_finished"] = {
0.3921568989753723,
0.9960784912109375,
0.6392157077789307,
},
["extra_icon_stack_font"] = "Friz Quadrata TT",
["ui_parent_target_strata"] = "BACKGROUND",
["aura_height"] = 26,
["non_targeted_alpha_enabled"] = true,
["extra_icon_show_purge_border"] = {
nil,
0,
0,
},
["cast_statusbar_bgtexture"] = "Atrocity",
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["first_run3"] = true,
["extra_icon_caster_font"] = "Friz Quadrata TT",
["cast_statusbar_spark_filloninterrupt"] = false,
["extra_icon_height"] = 34,
["extra_icon_stack_size"] = 12,
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["aura_timer_text_font"] = "Friz Quadrata TT",
["target_shady_alpha"] = 0.3499999940395355,
["cast_statusbar_texture"] = "Atrocity",
["tap_denied_color"] = {
0.40000003576279,
0.40000003576279,
0.40000003576279,
},
["bossmod_icons_anchor"] = {
["y"] = 30,
["x"] = 0,
["side"] = 8,
},
["extra_icon_timer_outline"] = "OUTLINE",
["castbar_target_font"] = "Expressway",
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateLargeTopInset"] = "0.049999997019768",
["nameplateShowPersonalCooldowns"] = "0",
["nameplateSelfTopInset"] = "0",
["nameplateMotionSpeed"] = "0.024999998509884",
["nameplateShowFriendlyNPCs"] = "1",
["nameplateSelectedScale"] = "1",
["nameplateOverlapH"] = "0.79999995231628",
["nameplateShowFriendlyBuffs"] = "0",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateMinAlpha"] = "0.90135484",
["nameplateShowFriends"] = "0",
["nameplateMotion"] = "1",
["nameplateOverlapV"] = "1.2000000476837",
["nameplateLargerScale"] = "1",
["nameplateMaxDistance"] = "60",
["nameplateOtherTopInset"] = "0.049999997019768",
["nameplateSelfScale"] = "1",
["nameplateSelfBottomInset"] = "0.3",
["nameplatePlayerMaxDistance"] = "40",
["nameplateSelfAlpha"] = "0",
["nameplateOccludedAlphaMult"] = "0.59999996423721",
["nameplateShowSelf"] = "1",
["nameplateShowEnemies"] = "1",
["nameplatePersonalShowAlways"] = "1",
["NamePlateVerticalScale"] = "1",
},
["extra_icon_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["range_check_enabled"] = false,
["login_counter"] = 17190,
["extra_icon_caster_name"] = false,
["extra_icon_show_offensive_border"] = {
nil,
0,
0,
},
["target_shady_combat_only"] = false,
["target_highlight_height"] = 25,
["blizzard_nameplate_font_size"] = 10,
["hide_blizzard_castbar"] = true,
["indicator_quest"] = false,
["version"] = 11,
["patch_version"] = 39,
["aura_stack_font"] = "Friz Quadrata TT",
["cast_statusbar_color_interrupted"] = {
0.7803922295570374,
0.250980406999588,
0.250980406999588,
},
["blizzard_nameplate_font"] = "Friz Quadrata TT",
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 12,
["target_highlight_alpha"] = 1,
["indicator_pet"] = false,
["number_region_first_run"] = true,
["aura_tracker"] = {
["debuff_banned"] = {
["418339"] = true,
["353793"] = true,
["391568"] = true,
["411717"] = true,
["345801"] = true,
["345219"] = true,
["368802"] = true,
["359168"] = true,
["390271"] = true,
["356372"] = true,
["420092"] = true,
["284678"] = true,
["359078"] = true,
["359180"] = true,
["317583"] = true,
["270569"] = true,
["375583"] = true,
["381743"] = true,
["392566"] = true,
["356181"] = true,
["324260"] = true,
["329449"] = true,
["411715"] = true,
["269576"] = true,
["428103"] = true,
["333526"] = true,
["376974"] = true,
["417419"] = true,
["436582"] = true,
["420054"] = true,
["394327"] = true,
["390155"] = true,
["379021"] = true,
["302564"] = true,
["115994"] = true,
["410790"] = true,
["283649"] = true,
["403696"] = true,
["373305"] = true,
["372127"] = true,
["425180"] = true,
["394453"] = true,
["403952"] = true,
["353773"] = true,
["430184"] = true,
["435476"] = true,
["340007"] = true,
["356329"] = true,
["440339"] = true,
["390276"] = true,
["392885"] = true,
["440340"] = true,
["344748"] = true,
["426783"] = true,
["426534"] = true,
["331016"] = true,
["331934"] = true,
["328287"] = true,
["345547"] = true,
["258883"] = true,
["367902"] = true,
["280494"] = true,
["355759"] = true,
},
["buff_banned"] = {
["206150"] = true,
["299450"] = true,
["411635"] = true,
["352854"] = true,
["333553"] = true,
["61574"] = true,
["61573"] = true,
},
["buff"] = {
412012,
412695,
},
["buff_tracked"] = {
["166591"] = true,
["273432"] = true,
["312926"] = true,
["262092"] = true,
["303941"] = true,
["265160"] = true,
["342073"] = true,
["233210"] = true,
["209859"] = true,
},
["debuff"] = {
217200,
371472,
292626,
422683,
},
["debuff_tracked"] = {
["389809"] = true,
["292451"] = true,
["312595"] = true,
},
},
["profile_name"] = "alex_plater",
["extra_icon_use_blizzard_border_color"] = false,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["Time"] = 1759090138,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["url"] = "https://wago.io/Dq5DaC3b4/8",
["Icon"] = 135964,
["Desc"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Revision"] = 121,
["semver"] = "1.0.7",
["Name"] = "Invalid Target",
["Prio"] = 99,
["Author"] = "Duracell",
["Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["version"] = 8,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["SpellIds"] = {
383840,
379256,
388084,
369031,
336499,
347097,
328921,
329636,
350857,
365381,
367573,
361934,
362020,
352016,
260189,
261265,
261266,
271590,
202455,
197422,
232156,
229489,
235308,
235089,
376705,
},
["PlaterCore"] = 1,
["Enabled"] = true,
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
["indicatorAlpha"] = 0.75,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1759090234,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 167,
["semver"] = "",
["Name"] = "Add - Health Markers [P]",
["Prio"] = 99,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Enabled"] = true,
["NpcNames"] = {
"214840",
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1759090139,
["Options"] = {
},
["url"] = "",
["Icon"] = 610472,
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Revision"] = 99,
["semver"] = "",
["Name"] = "Aura is Shield [P]",
["Prio"] = 99,
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["Enabled"] = true,
["NpcNames"] = {
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1759090139,
["NpcNames"] = {
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 2,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 10,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["Revision"] = 1292,
["semver"] = "",
["Name"] = "Cast - Tankbuster [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["PlaterCore"] = 1,
["Desc"] = "Abilities casted on the tank.",
["Enabled"] = true,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
},
},
["aura_stack_anchor"] = {
["y"] = 15,
["side"] = 5,
},
["health_cutoff_upper"] = false,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["bossmod_cooldown_text_enabled"] = false,
["range_check_in_range_or_target_alpha_friendlies"] = 1,
["cast_statusbar_bgcolor"] = {
0.13333334028721,
0.13333334028721,
0.13333334028721,
1,
},
["dps"] = {
["colors"] = {
["solo"] = {
0.501960813999176,
0.501960813999176,
},
["notontank"] = {
0.501960813999176,
0.501960813999176,
},
["aggro"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["noaggro"] = {
0.5058823823928833,
0.4235294461250305,
0.9137255549430847,
},
["pulling"] = {
nil,
0.7725490927696228,
0.658823549747467,
},
},
},
["ghost_auras"] = {
["enabled"] = true,
["width"] = 28,
["height"] = 28,
["auras"] = {
["WARLOCK"] = {
{
[980] = true,
[172] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["target_shady_enabled"] = false,
["npc_colors"] = {
[99358] = {
true,
false,
"deeppink",
},
[198716] = {
true,
false,
"peachpuff",
},
[196798] = {
true,
false,
"snow",
},
[186696] = {
true,
false,
"cyan",
},
[194241] = {
true,
false,
"cyan",
},
[231197] = {
true,
false,
"slateblue",
},
[231325] = {
true,
false,
"slateblue",
},
[95842] = {
true,
false,
"snow",
},
[180431] = {
true,
false,
"snow",
},
[115407] = {
true,
false,
"peachpuff",
},
[221863] = {
true,
false,
"snow",
},
[205623] = {
true,
false,
"slateblue",
},
[99359] = {
true,
false,
"cyan",
},
[168156] = {
true,
false,
"deeppink",
},
[173655] = {
true,
false,
"slateblue",
},
[173016] = {
true,
false,
"snow",
},
[129602] = {
true,
false,
"WARRIOR",
},
[180433] = {
true,
false,
"deeppink",
},
[200126] = {
true,
false,
"magenta",
},
[120651] = {
true,
false,
"gold",
},
[212786] = {
true,
false,
"slateblue",
},
[197697] = {
true,
false,
"WARRIOR",
},
[176598] = {
true,
false,
"peachpuff",
},
[164578] = {
true,
false,
"slateblue",
},
[216364] = {
true,
false,
"deeppink",
},
[229283] = {
true,
false,
"slateblue",
},
[197698] = {
true,
false,
"WARRIOR",
},
[80816] = {
true,
false,
"snow",
},
[164702] = {
true,
false,
"deeppink",
},
[175576] = {
true,
false,
"yellow",
},
[164451] = {
true,
false,
"slateblue",
},
[228514] = {
true,
false,
"snow",
},
[164707] = {
true,
false,
"slateblue",
},
[229284] = {
true,
false,
"slateblue",
},
[114319] = {
true,
false,
"peachpuff",
},
[168153] = {
true,
false,
"deeppink",
},
[135552] = {
true,
false,
"peachpuff",
},
[151657] = {
true,
false,
"snow",
},
[218671] = {
true,
false,
"peachpuff",
},
[84400] = {
true,
false,
"slateblue",
},
[193352] = {
true,
false,
"peachpuff",
},
[135169] = {
true,
false,
"deeppink",
},
[213932] = {
true,
false,
"slateblue",
},
[165471] = {
true,
false,
"peachpuff",
},
[206140] = {
true,
false,
"magenta",
},
[237981] = {
true,
false,
"snow",
},
[185032] = {
true,
false,
"slateblue",
},
[178008] = {
true,
false,
"yellow",
},
[208698] = {
true,
false,
"magenta",
},
[221102] = {
true,
false,
"snow",
},
[196548] = {
true,
false,
"snow",
},
[178392] = {
true,
false,
"deeppink",
},
[211121] = {
true,
false,
"slateblue",
},
[168418] = {
true,
false,
"snow",
},
[127106] = {
true,
false,
"WARRIOR",
},
[200387] = {
true,
false,
"slateblue",
},
[229537] = {
true,
false,
"yellow",
},
[221103] = {
true,
false,
"slateblue",
},
[199748] = {
true,
false,
"magenta",
},
[208440] = {
true,
false,
"slateblue",
},
[165222] = {
true,
false,
"magenta",
},
[223150] = {
true,
false,
"snow",
},
[198214] = {
true,
false,
"deeppink",
},
[127879] = {
true,
false,
"WARRIOR",
},
[220976] = {
true,
false,
"deeppink",
},
[229288] = {
true,
false,
"slateblue",
},
[199749] = {
true,
false,
"WARRIOR",
},
[180432] = {
true,
false,
"peachpuff",
},
[223777] = {
true,
false,
"peachpuff",
},
[168420] = {
true,
false,
"peachpuff",
},
[165479] = {
true,
false,
"slateblue",
},
[212793] = {
true,
false,
"deeppink",
},
[170850] = {
true,
false,
"deeppink",
},
[178139] = {
true,
false,
"peachpuff",
},
[214066] = {
true,
false,
"peachpuff",
},
[184023] = {
true,
false,
"PALADIN",
},
[160495] = {
true,
false,
"snow",
},
[83763] = {
true,
false,
"snow",
},
[157810] = {
true,
false,
"snow",
},
[184022] = {
true,
false,
"magenta",
},
[220978] = {
true,
false,
"deeppink",
},
[205618] = {
true,
false,
"slateblue",
},
[75899] = {
true,
false,
"deeppink",
},
[210109] = {
true,
false,
"slateblue",
},
[165483] = {
true,
false,
"deeppink",
},
[212411] = {
true,
false,
"slateblue",
},
[113998] = {
true,
false,
"WARRIOR",
},
[199368] = {
true,
false,
"deeppink",
},
[189266] = {
true,
false,
"WARRIOR",
},
[168934] = {
true,
false,
"deeppink",
},
[194894] = {
true,
false,
"magenta",
},
[208193] = {
true,
false,
"peachpuff",
},
[211261] = {
true,
false,
"deeppink",
},
[212412] = {
true,
false,
"deeppink",
},
[231977] = {
true,
false,
"peachpuff",
},
[83892] = {
true,
false,
"snow",
},
[188244] = {
true,
false,
"slateblue",
},
[178142] = {
true,
false,
"snow",
},
[98406] = {
true,
false,
"cyan",
},
[201288] = {
true,
false,
"deeppink",
},
[211262] = {
true,
false,
"deeppink",
},
[200137] = {
true,
false,
"lime",
},
[231978] = {
true,
false,
"snow",
},
[196044] = {
true,
false,
"lime",
},
[131586] = {
true,
false,
"cyan",
},
[205622] = {
true,
false,
"slateblue",
},
[98275] = {
true,
false,
"peachpuff",
},
[83893] = {
true,
false,
"peachpuff",
},
[211263] = {
true,
false,
"deeppink",
},
[168425] = {
true,
false,
"deeppink",
},
[164461] = {
true,
false,
"snow",
},
[228015] = {
true,
false,
"slateblue",
},
[128969] = {
true,
false,
"deeppink",
},
[99366] = {
true,
false,
"magenta",
},
[130435] = {
true,
false,
"slateblue",
},
[40634] = {
true,
false,
"snow",
},
[227632] = {
true,
false,
"deeppink",
},
[220599] = {
true,
false,
"snow",
},
[217658] = {
true,
false,
"deeppink",
},
[177889] = {
true,
false,
"deeppink",
},
[187224] = {
true,
false,
"cyan",
},
[211904] = {
true,
false,
"deeppink",
},
[154744] = {
true,
false,
"deeppink",
},
[83894] = {
true,
false,
"slateblue",
},
[194897] = {
true,
false,
"deeppink",
},
[217531] = {
true,
false,
"deeppink",
},
[167532] = {
true,
false,
"slateblue",
},
[114584] = {
true,
false,
"slateblue",
},
[98280] = {
true,
false,
"snow",
},
[184020] = {
true,
false,
"WARRIOR",
},
[196671] = {
true,
false,
"slateblue",
},
[150142] = {
true,
false,
"snow",
},
[194898] = {
true,
false,
"WARRIOR",
},
[220730] = {
true,
false,
"slateblue",
},
[205384] = {
true,
false,
"PALADIN",
},
[212673] = {
true,
false,
"WARRIOR",
},
[98792] = {
true,
false,
"lime",
},
[187969] = {
true,
false,
"lime",
},
[150143] = {
true,
false,
"peachpuff",
},
[172265] = {
true,
false,
"snow",
},
[227635] = {
true,
false,
"snow",
},
[217533] = {
true,
false,
"deeppink",
},
[167534] = {
true,
false,
"slateblue",
},
[177892] = {
true,
false,
"peachpuff",
},
[220986] = {
true,
false,
"deeppink",
},
[165872] = {
true,
false,
"deeppink",
},
[126918] = {
true,
false,
"lime",
},
[214209] = {
true,
false,
"snow",
},
[213954] = {
true,
false,
"slateblue",
},
[180323] = {
true,
false,
"deeppink",
},
[220988] = {
true,
false,
"deeppink",
},
[131858] = {
true,
false,
"slateblue",
},
[186208] = {
true,
false,
"DRUID",
},
[168942] = {
true,
false,
"peachpuff",
},
[114266] = {
true,
false,
"snow",
},
[164567] = {
true,
false,
"snow",
},
[207177] = {
true,
false,
"slateblue",
},
[127757] = {
true,
false,
"cyan",
},
[208456] = {
true,
false,
"peachpuff",
},
[223773] = {
true,
false,
"peachpuff",
},
[186206] = {
true,
false,
"WARRIOR",
},
[190426] = {
true,
false,
"cyan",
},
[189531] = {
true,
false,
"lime",
},
[162038] = {
true,
false,
"slateblue",
},
[98538] = {
true,
false,
"cyan",
},
[199124] = {
true,
false,
"snow",
},
[150146] = {
true,
false,
"deeppink",
},
[162040] = {
true,
false,
"deeppink",
},
[137103] = {
true,
false,
"lime",
},
[129548] = {
true,
false,
"WARRIOR",
},
[130635] = {
true,
false,
"snow",
},
[162039] = {
true,
false,
"snow",
},
[114316] = {
true,
false,
"snow",
},
[156157] = {
true,
false,
"peachpuff",
},
[167538] = {
true,
false,
"slateblue",
},
[75713] = {
true,
false,
"magenta",
},
[180070] = {
true,
false,
"deeppink",
},
[170480] = {
true,
false,
"slateblue",
},
[97197] = {
true,
false,
"dodgerblue",
},
[198868] = {
true,
false,
"snow",
},
[195927] = {
true,
false,
"dodgerblue",
},
[81212] = {
true,
false,
"slateblue",
},
[208459] = {
true,
false,
"snow",
},
[184131] = {
true,
false,
"cyan",
},
[191164] = {
true,
false,
"deeppink",
},
[52019] = {
true,
false,
"deeppink",
},
[83578] = {
true,
false,
"slateblue",
},
[227513] = {
true,
false,
"snow",
},
[195928] = {
true,
false,
"dodgerblue",
},
[115019] = {
true,
false,
"snow",
},
[228540] = {
true,
false,
"snow",
},
[190174] = {
true,
false,
"deeppink",
},
[126928] = {
true,
false,
"DRUID",
},
[136470] = {
true,
false,
"snow",
},
[203857] = {
true,
false,
"snow",
},
[198870] = {
true,
false,
"peachpuff",
},
[195929] = {
true,
false,
"dodgerblue",
},
[194487] = {
true,
false,
"cyan",
},
[221760] = {
true,
false,
"peachpuff",
},
[75652] = {
true,
false,
"deeppink",
},
[231223] = {
true,
false,
"snow",
},
[214608] = {
true,
false,
"snow",
},
[229433] = {
true,
false,
"slateblue",
},
[223423] = {
true,
false,
"slateblue",
},
[195930] = {
true,
false,
"dodgerblue",
},
[170483] = {
true,
false,
"deeppink",
},
[39392] = {
true,
false,
"slateblue",
},
[193760] = {
true,
false,
"slateblue",
},
[193373] = {
true,
false,
"lime",
},
[215756] = {
true,
false,
"deeppink",
},
[229434] = {
true,
false,
"slateblue",
},
[190688] = {
true,
false,
"slateblue",
},
[168310] = {
true,
false,
"deeppink",
},
[45915] = {
true,
false,
"WARRIOR",
},
[204206] = {
true,
false,
"peachpuff",
},
[133912] = {
true,
false,
"magenta",
},
[171384] = {
true,
false,
"peachpuff",
},
[168443] = {
true,
false,
"peachpuff",
},
[186220] = {
true,
false,
"PALADIN",
},
[114334] = {
true,
false,
"slateblue",
},
[208208] = {
true,
false,
"slateblue",
},
[226200] = {
true,
false,
"peachpuff",
},
[90997] = {
true,
false,
"WARRIOR",
},
[196576] = {
true,
false,
"magenta",
},
[170234] = {
true,
false,
"deeppink",
},
[197595] = {
true,
false,
"slateblue",
},
[203861] = {
true,
false,
"slateblue",
},
[190690] = {
true,
false,
"slateblue",
},
[91000] = {
true,
false,
"WARRIOR",
},
[178630] = {
true,
false,
"snow",
},
[179821] = {
true,
false,
"deeppink",
},
[83389] = {
true,
false,
"slateblue",
},
[157571] = {
true,
false,
"snow",
},
[173044] = {
true,
false,
"snow",
},
[154758] = {
true,
false,
"deeppink",
},
[162047] = {
true,
false,
"slateblue",
},
[118491] = {
true,
false,
"snow",
},
[115486] = {
true,
false,
"slateblue",
},
[220742] = {
true,
false,
"deeppink",
},
[215755] = {
true,
false,
"deeppink",
},
[157572] = {
true,
false,
"snow",
},
[164861] = {
true,
false,
"peachpuff",
},
[114783] = {
true,
false,
"snow",
},
[191847] = {
true,
false,
"magenta",
},
[105704] = {
true,
false,
"magenta",
},
[166396] = {
true,
false,
"peachpuff",
},
[166524] = {
true,
false,
"snow",
},
[83390] = {
true,
false,
"snow",
},
[187240] = {
true,
false,
"slateblue",
},
[132126] = {
true,
false,
"peachpuff",
},
[180335] = {
true,
false,
"peachpuff",
},
[202969] = {
true,
false,
"deeppink",
},
[214350] = {
true,
false,
"snow",
},
[220616] = {
true,
false,
"slateblue",
},
[77700] = {
true,
false,
"snow",
},
[164737] = {
true,
false,
"deeppink",
},
[84989] = {
true,
false,
"magenta",
},
[184300] = {
true,
false,
"slateblue",
},
[180336] = {
true,
false,
"snow",
},
[100526] = {
true,
false,
"WARRIOR",
},
[105705] = {
true,
false,
"WARRIOR",
},
[170490] = {
true,
false,
"snow",
},
[168572] = {
true,
false,
"peachpuff",
},
[175861] = {
true,
false,
"deeppink",
},
[234557] = {
true,
false,
"deeppink",
},
[184301] = {
true,
false,
"PALADIN",
},
[40577] = {
true,
false,
"slateblue",
},
[202971] = {
true,
false,
"snow",
},
[225605] = {
true,
false,
"snow",
},
[115488] = {
true,
false,
"peachpuff",
},
[163458] = {
true,
false,
"snow",
},
[197985] = {
true,
false,
"magenta",
},
[84990] = {
true,
false,
"peachpuff",
},
[81985] = {
true,
false,
"snow",
},
[122969] = {
true,
false,
"PALADIN",
},
[100527] = {
true,
false,
"PALADIN",
},
[168318] = {
true,
false,
"slateblue",
},
[163459] = {
true,
false,
"peachpuff",
},
[150160] = {
true,
false,
"slateblue",
},
[224962] = {
true,
false,
"snow",
},
[178165] = {
true,
false,
"slateblue",
},
[217039] = {
true,
false,
"slateblue",
},
[104300] = {
true,
false,
"WARRIOR",
},
[225479] = {
true,
false,
"peachpuff",
},
[197219] = {
true,
false,
"slateblue",
},
[198577] = {
true,
false,
"peachpuff",
},
[91001] = {
true,
false,
"lime",
},
[220060] = {
true,
false,
"snow",
},
[175992] = {
true,
false,
"deeppink",
},
[178141] = {
true,
false,
"deeppink",
},
[122970] = {
true,
false,
"lime",
},
[165763] = {
true,
false,
"snow",
},
[131492] = {
true,
false,
"magenta",
},
[203230] = {
true,
false,
"peachpuff",
},
[166275] = {
true,
false,
"snow",
},
[219983] = {
true,
false,
"slateblue",
},
[86526] = {
true,
false,
"peachpuff",
},
[98521] = {
true,
false,
"deeppink",
},
[135329] = {
true,
false,
"deeppink",
},
[81603] = {
true,
false,
"slateblue",
},
[210264] = {
true,
false,
"peachpuff",
},
[228424] = {
true,
false,
"snow",
},
[196198] = {
true,
false,
"peachpuff",
},
[174843] = {
true,
false,
"slateblue",
},
[198500] = {
true,
false,
"snow",
},
[205151] = {
true,
false,
"WARRIOR",
},
[122971] = {
true,
false,
"slateblue",
},
[80938] = {
true,
false,
"slateblue",
},
[166276] = {
true,
false,
"slateblue",
},
[150165] = {
true,
false,
"snow",
},
[168578] = {
true,
false,
"snow",
},
[150292] = {
true,
false,
"deeppink",
},
[218961] = {
true,
false,
"deeppink",
},
[207198] = {
true,
false,
"snow",
},
[45917] = {
true,
false,
"cyan",
},
[162057] = {
true,
false,
"slateblue",
},
[211289] = {
true,
false,
"deeppink",
},
[223822] = {
true,
false,
"deeppink",
},
[196200] = {
true,
false,
"lime",
},
[205152] = {
true,
false,
"cyan",
},
[186226] = {
true,
false,
"magenta",
},
[205408] = {
true,
false,
"WARRIOR",
},
[122972] = {
true,
false,
"magenta",
},
[211291] = {
true,
false,
"deeppink",
},
[211290] = {
true,
false,
"deeppink",
},
[169861] = {
true,
false,
"peachpuff",
},
[92538] = {
true,
false,
"lime",
},
[213338] = {
true,
false,
"snow",
},
[198503] = {
true,
false,
"snow",
},
[178171] = {
true,
false,
"deeppink",
},
[196203] = {
true,
false,
"snow",
},
[218324] = {
true,
false,
"deeppink",
},
[207199] = {
true,
false,
"peachpuff",
},
[220626] = {
true,
false,
"orange",
},
[196202] = {
true,
false,
"peachpuff",
},
[180091] = {
true,
false,
"deeppink",
},
[212826] = {
true,
false,
"deeppink",
},
[164873] = {
true,
false,
"deeppink",
},
[231496] = {
true,
false,
"peachpuff",
},
[180474] = {
true,
false,
"deeppink",
},
[186740] = {
true,
false,
"WARRIOR",
},
[236995] = {
true,
false,
"slateblue",
},
[150168] = {
true,
false,
"deeppink",
},
[212827] = {
true,
false,
"deeppink",
},
[186229] = {
true,
false,
"magenta",
},
[129559] = {
true,
false,
"lime",
},
[76104] = {
true,
false,
"magenta",
},
[183033] = {
true,
false,
"slateblue",
},
[186741] = {
true,
false,
"magenta",
},
[164363] = {
true,
false,
"peachpuff",
},
[150169] = {
true,
false,
"peachpuff",
},
[150297] = {
true,
false,
"peachpuff",
},
[190404] = {
true,
false,
"WARRIOR",
},
[174210] = {
true,
false,
"snow",
},
[189555] = {
true,
false,
"snow",
},
[100532] = {
true,
false,
"deeppink",
},
[207202] = {
true,
false,
"snow",
},
[182778] = {
true,
false,
"deeppink",
},
[179837] = {
true,
false,
"slateblue",
},
[229069] = {
true,
false,
"snow",
},
[40925] = {
true,
false,
"cyan",
},
[111563] = {
true,
false,
"WARRIOR",
},
[138281] = {
true,
false,
"WARRIOR",
},
[163086] = {
true,
false,
"slateblue",
},
[195696] = {
true,
false,
"magenta",
},
[173190] = {
true,
false,
"snow",
},
[91006] = {
true,
false,
"PALADIN",
},
[130011] = {
true,
false,
"lime",
},
[167116] = {
true,
false,
"deeppink",
},
[223253] = {
true,
false,
"snow",
},
[173189] = {
true,
false,
"snow",
},
[206697] = {
true,
false,
"snow",
},
[205158] = {
true,
false,
"cyan",
},
[129370] = {
true,
false,
"snow",
},
[129369] = {
true,
false,
"deeppink",
},
[97720] = {
true,
false,
"deeppink",
},
[212831] = {
true,
false,
"deeppink",
},
[40357] = {
true,
false,
"deeppink",
},
[45919] = {
true,
false,
"cyan",
},
[206696] = {
true,
false,
"slateblue",
},
[213343] = {
true,
false,
"slateblue",
},
[163862] = {
true,
false,
"peachpuff",
},
[57109] = {
true,
false,
"WARRIOR",
},
[144295] = {
true,
false,
"peachpuff",
},
[97788] = {
true,
false,
"WARRIOR",
},
[222167] = {
true,
false,
"snow",
},
[80936] = {
true,
false,
"peachpuff",
},
[153882] = {
true,
false,
"snow",
},
[156244] = {
true,
false,
"slateblue",
},
[187897] = {
true,
false,
"deeppink",
},
[179841] = {
true,
false,
"snow",
},
[151325] = {
true,
false,
"deeppink",
},
[59873] = {
true,
false,
"slateblue",
},
[156245] = {
true,
false,
"slateblue",
},
[144296] = {
true,
false,
"slateblue",
},
[213217] = {
true,
false,
"snow",
},
[207207] = {
true,
false,
"orange",
},
[176521] = {
true,
false,
"peachpuff",
},
[188026] = {
true,
false,
"deeppink",
},
[168717] = {
true,
false,
"snow",
},
[144293] = {
true,
false,
"slateblue",
},
[231380] = {
true,
false,
"snow",
},
[183423] = {
true,
false,
"snow",
},
[165137] = {
true,
false,
"slateblue",
},
[187771] = {
true,
false,
"peachpuff",
},
[234957] = {
true,
false,
"snow",
},
[234962] = {
true,
false,
"peachpuff",
},
[168718] = {
true,
false,
"peachpuff",
},
[144294] = {
true,
false,
"snow",
},
[184319] = {
true,
false,
"lime",
},
[165010] = {
true,
false,
"slateblue",
},
[200943] = {
true,
false,
"slateblue",
},
[95769] = {
true,
false,
"magenta",
},
[97083] = {
true,
false,
"magenta",
},
[104246] = {
true,
false,
"WARRIOR",
},
[191225] = {
true,
false,
"slateblue",
},
[206698] = {
true,
false,
"peachpuff",
},
[242631] = {
true,
false,
"deeppink",
},
[183425] = {
true,
false,
"peachpuff",
},
[168594] = {
true,
false,
"slateblue",
},
[105715] = {
true,
false,
"lime",
},
[212453] = {
true,
false,
"snow",
},
[40166] = {
true,
false,
"slateblue",
},
[155221] = {
true,
false,
"snow",
},
[98810] = {
true,
false,
"WARRIOR",
},
[205804] = {
true,
false,
"WARRIOR",
},
[179334] = {
true,
false,
"deeppink",
},
[59553] = {
true,
false,
"lime",
},
[230740] = {
true,
false,
"deeppink",
},
[211816] = {
true,
false,
"deeppink",
},
[167113] = {
true,
false,
"peachpuff",
},
[40167] = {
true,
false,
"peachpuff",
},
[130012] = {
true,
false,
"PALADIN",
},
[224219] = {
true,
false,
"snow",
},
[190588] = {
true,
false,
"slateblue",
},
[135474] = {
true,
false,
"peachpuff",
},
[188673] = {
true,
false,
"slateblue",
},
[224731] = {
true,
false,
"slateblue",
},
[179847] = {
true,
false,
"deeppink",
},
[189235] = {
true,
false,
"cyan",
},
[144298] = {
true,
false,
"deeppink",
},
[186242] = {
true,
false,
"lime",
},
[210539] = {
true,
false,
"slateblue",
},
[176395] = {
true,
false,
"peachpuff",
},
[176523] = {
true,
false,
"slateblue",
},
[224732] = {
true,
false,
"snow",
},
[206064] = {
true,
false,
"peachpuff",
},
[190206] = {
true,
false,
"lime",
},
[180104] = {
true,
false,
"snow",
},
[224221] = {
true,
false,
"slateblue",
},
[114796] = {
true,
false,
"peachpuff",
},
[216293] = {
true,
false,
"peachpuff",
},
[165529] = {
true,
false,
"peachpuff",
},
[96574] = {
true,
false,
"slateblue",
},
[198263] = {
true,
false,
"slateblue",
},
[92610] = {
true,
false,
"lime",
},
[169875] = {
true,
false,
"peachpuff",
},
[165911] = {
true,
false,
"deeppink",
},
[82597] = {
true,
false,
"deeppink",
},
[184581] = {
true,
false,
"WARRIOR",
},
[95832] = {
true,
false,
"WARRIOR",
},
[104247] = {
true,
false,
"magenta",
},
[130909] = {
true,
false,
"lime",
},
[135989] = {
true,
false,
"WARRIOR",
},
[206704] = {
true,
false,
"slateblue",
},
[214761] = {
true,
false,
"slateblue",
},
[192767] = {
true,
false,
"slateblue",
},
[133432] = {
true,
false,
"snow",
},
[154020] = {
true,
false,
"snow",
},
[40935] = {
true,
false,
"lime",
},
[164506] = {
true,
false,
"deeppink",
},
[191232] = {
true,
false,
"peachpuff",
},
[98813] = {
true,
false,
"snow",
},
[165913] = {
true,
false,
"deeppink",
},
[45922] = {
true,
false,
"WARRIOR",
},
[206066] = {
true,
false,
"PALADIN",
},
[115757] = {
true,
false,
"slateblue",
},
[221667] = {
true,
false,
"snow",
},
[173714] = {
true,
false,
"slateblue",
},
[214762] = {
true,
false,
"deeppink",
},
[229212] = {
true,
false,
"orange",
},
[98366] = {
true,
false,
"lime",
},
[155812] = {
true,
false,
"peachpuff",
},
[169924] = {
true,
false,
"slateblue",
},
[224609] = {
true,
false,
"deeppink",
},
[211228] = {
true,
false,
"peachpuff",
},
[96640] = {
true,
false,
"lime",
},
[92612] = {
true,
false,
"WARRIOR",
},
[230748] = {
true,
false,
"deeppink",
},
[224271] = {
true,
false,
"snow",
},
[213913] = {
true,
false,
"snow",
},
[114629] = {
true,
false,
"peachpuff",
},
[166299] = {
true,
false,
"peachpuff",
},
[199547] = {
true,
false,
"deeppink",
},
[56792] = {
true,
false,
"deeppink",
},
[213741] = {
true,
false,
"orange",
},
[190340] = {
true,
false,
"WARRIOR",
},
[130400] = {
true,
false,
"slateblue",
},
[204918] = {
true,
false,
"magenta",
},
[155090] = {
true,
false,
"snow",
},
[223844] = {
true,
false,
"snow",
},
[184331] = {
true,
false,
"slateblue",
},
[164510] = {
true,
false,
"peachpuff",
},
[171799] = {
true,
false,
"deeppink",
},
[199037] = {
true,
false,
"PALADIN",
},
[167963] = {
true,
false,
"peachpuff",
},
[40936] = {
true,
false,
"WARRIOR",
},
[180495] = {
true,
false,
"slateblue",
},
[166301] = {
true,
false,
"deeppink",
},
[98368] = {
true,
false,
"WARRIOR",
},
[114544] = {
true,
false,
"deeppink",
},
[170690] = {
true,
false,
"peachpuff",
},
[190342] = {
true,
false,
"PALADIN",
},
[101437] = {
true,
false,
"peachpuff",
},
[122984] = {
true,
false,
"deeppink",
},
[41096] = {
true,
false,
"magenta",
},
[166302] = {
true,
false,
"snow",
},
[97068] = {
true,
false,
"WARRIOR",
},
[184580] = {
true,
false,
"magenta",
},
[179842] = {
true,
false,
"deeppink",
},
[168988] = {
true,
false,
"deeppink",
},
[165919] = {
true,
false,
"slateblue",
},
[197671] = {
true,
false,
"peachpuff",
},
[195842] = {
true,
false,
"lime",
},
[205727] = {
true,
false,
"magenta",
},
[104251] = {
true,
false,
"lime",
},
[173720] = {
true,
false,
"slateblue",
},
[163618] = {
true,
false,
"peachpuff",
},
[116549] = {
true,
false,
"snow",
},
[101438] = {
true,
false,
"peachpuff",
},
[186191] = {
true,
false,
"magenta",
},
[127799] = {
true,
false,
"WARRIOR",
},
[167967] = {
true,
false,
"peachpuff",
},
[115395] = {
true,
false,
"slateblue",
},
[239833] = {
true,
false,
"deeppink",
},
[186125] = {
true,
false,
"magenta",
},
[98370] = {
true,
false,
"snow",
},
[184335] = {
true,
false,
"WARRIOR",
},
[45924] = {
true,
false,
"PALADIN",
},
[206074] = {
true,
false,
"snow",
},
[95766] = {
true,
false,
"WARRIOR",
},
[165410] = {
true,
false,
"slateblue",
},
[205435] = {
true,
false,
"slateblue",
},
[163620] = {
true,
false,
"slateblue",
},
[205691] = {
true,
false,
"magenta",
},
[83025] = {
true,
false,
"peachpuff",
},
[184140] = {
true,
false,
"deeppink",
},
[193799] = {
true,
false,
"cyan",
},
[220815] = {
true,
false,
"peachpuff",
},
[179733] = {
true,
false,
"yellow",
},
[171805] = {
true,
false,
"peachpuff",
},
[163621] = {
true,
false,
"slateblue",
},
[168992] = {
true,
false,
"snow",
},
[212981] = {
true,
false,
"WARRIOR",
},
[186246] = {
true,
false,
"PALADIN",
},
[130404] = {
true,
false,
"cyan",
},
[45477] = {
true,
false,
"lime",
},
[196102] = {
true,
false,
"magenta",
},
[177816] = {
true,
false,
"snow",
},
[98243] = {
true,
false,
"WARRIOR",
},
[188302] = {
true,
false,
"yellow",
},
[83026] = {
true,
false,
"slateblue",
},
[114803] = {
true,
false,
"snow",
},
[239836] = {
true,
false,
"deeppink",
},
[177817] = {
true,
false,
"peachpuff",
},
[81236] = {
true,
false,
"snow",
},
[98691] = {
true,
false,
"lime",
},
[65362] = {
true,
false,
"WARRIOR",
},
[213751] = {
true,
false,
"yellow",
},
[102287] = {
true,
false,
"cyan",
},
[82579] = {
true,
false,
"snow",
},
[136643] = {
true,
false,
"slateblue",
},
[155824] = {
true,
false,
"peachpuff",
},
[165414] = {
true,
false,
"snow",
},
[102095] = {
true,
false,
"lime",
},
[193291] = {
true,
false,
"deeppink",
},
[151476] = {
true,
false,
"slateblue",
},
[175517] = {
true,
false,
"peachpuff",
},
[200836] = {
true,
false,
"slateblue",
},
[220401] = {
true,
false,
"deeppink",
},
[59544] = {
true,
false,
"magenta",
},
[216621] = {
true,
false,
"deeppink",
},
[194315] = {
true,
false,
"slateblue",
},
[187154] = {
true,
false,
"deeppink",
},
[213806] = {
true,
false,
"snow",
},
[131812] = {
true,
false,
"magenta",
},
[130661] = {
true,
false,
"peachpuff",
},
[231839] = {
true,
false,
"snow",
},
[214419] = {
true,
false,
"peachpuff",
},
[236033] = {
true,
false,
"peachpuff",
},
[194316] = {
true,
false,
"slateblue",
},
[193293] = {
true,
false,
"WARRIOR",
},
[210812] = {
true,
false,
"snow",
},
[163882] = {
true,
false,
"slateblue",
},
[122973] = {
true,
false,
"peachpuff",
},
[195851] = {
true,
false,
"lime",
},
[84499] = {
true,
false,
"deeppink",
},
[201222] = {
true,
false,
"cyan",
},
[173729] = {
true,
false,
"deeppink",
},
[194317] = {
true,
false,
"slateblue",
},
[169893] = {
true,
false,
"deeppink",
},
[114626] = {
true,
false,
"deeppink",
},
[45926] = {
true,
false,
"WARRIOR",
},
[191206] = {
true,
false,
"snow",
},
[199233] = {
true,
false,
"slateblue",
},
[201223] = {
true,
false,
"PALADIN",
},
[180429] = {
true,
false,
"slateblue",
},
[102094] = {
true,
false,
"WARRIOR",
},
[135240] = {
true,
false,
"PALADIN",
},
[115765] = {
true,
false,
"deeppink",
},
[200840] = {
true,
false,
"slateblue",
},
[95779] = {
true,
false,
"slateblue",
},
[190377] = {
true,
false,
"lime",
},
[156212] = {
true,
false,
"snow",
},
[162763] = {
true,
false,
"slateblue",
},
[129374] = {
true,
false,
"slateblue",
},
[214140] = {
true,
false,
"slateblue",
},
[214012] = {
true,
false,
"slateblue",
},
[231531] = {
true,
false,
"deeppink",
},
[190034] = {
true,
false,
"slateblue",
},
[100485] = {
true,
false,
"slateblue",
},
[228463] = {
true,
false,
"snow",
},
[133835] = {
true,
false,
"magenta",
},
[222964] = {
true,
false,
"peachpuff",
},
[213885] = {
true,
false,
"deeppink",
},
[164929] = {
true,
false,
"peachpuff",
},
[155830] = {
true,
false,
"snow",
},
[195855] = {
true,
false,
"WARRIOR",
},
[183707] = {
true,
false,
"snow",
},
[186284] = {
true,
false,
"WARRIOR",
},
[210818] = {
true,
false,
"peachpuff",
},
[187160] = {
true,
false,
"lime",
},
[165805] = {
true,
false,
"slateblue",
},
[136139] = {
true,
false,
"deeppink",
},
[155831] = {
true,
false,
"deeppink",
},
[192787] = {
true,
false,
"WARRIOR",
},
[206214] = {
true,
false,
"slateblue",
},
[205337] = {
true,
false,
"deeppink",
},
[187033] = {
true,
false,
"slateblue",
},
[168747] = {
true,
false,
"deeppink",
},
[102404] = {
true,
false,
"slateblue",
},
[59546] = {
true,
false,
"magenta",
},
[100486] = {
true,
false,
"snow",
},
[163121] = {
true,
false,
"peachpuff",
},
[101637] = {
true,
false,
"slateblue",
},
[168109] = {
true,
false,
"snow",
},
[102788] = {
true,
false,
"PALADIN",
},
[162099] = {
true,
false,
"deeppink",
},
[190359] = {
true,
false,
"WARRIOR",
},
[189464] = {
true,
false,
"magenta",
},
[76446] = {
true,
false,
"magenta",
},
[197904] = {
true,
false,
"snow",
},
[114542] = {
true,
false,
"peachpuff",
},
[221945] = {
true,
false,
"deeppink",
},
[229619] = {
true,
false,
"deeppink",
},
[115640] = {
true,
false,
"deeppink",
},
[138187] = {
true,
false,
"PALADIN",
},
[131666] = {
true,
false,
"magenta",
},
[107073] = {
true,
false,
"magenta",
},
[45704] = {
true,
false,
"dimgray",
},
[192791] = {
true,
false,
"deeppink",
},
[196115] = {
true,
false,
"deeppink",
},
[176551] = {
true,
false,
"snow",
},
[212739] = {
true,
false,
"slateblue",
},
[189338] = {
true,
false,
"magenta",
},
[189466] = {
true,
false,
"cyan",
},
[45928] = {
true,
false,
"DRUID",
},
[227573] = {
true,
false,
"slateblue",
},
[245092] = {
true,
false,
"slateblue",
},
[196116] = {
true,
false,
"lime",
},
[144071] = {
true,
false,
"snow",
},
[224249] = {
true,
false,
"deeppink",
},
[190362] = {
true,
false,
"magenta",
},
[189467] = {
true,
false,
"DRUID",
},
[167612] = {
true,
false,
"slateblue",
},
[227575] = {
true,
false,
"peachpuff",
},
[59547] = {
true,
false,
"slateblue",
},
[196117] = {
true,
false,
"slateblue",
},
[114624] = {
true,
false,
"slateblue",
},
[223994] = {
true,
false,
"snow",
},
[213892] = {
true,
false,
"snow",
},
[113537] = {
true,
false,
"cyan",
},
[132820] = {
true,
false,
"WARRIOR",
},
[163126] = {
true,
false,
"snow",
},
[193944] = {
true,
false,
"magenta",
},
[209801] = {
true,
false,
"deeppink",
},
[165556] = {
true,
false,
"deeppink",
},
[115642] = {
true,
false,
"peachpuff",
},
[213893] = {
true,
false,
"snow",
},
[163894] = {
true,
false,
"peachpuff",
},
[168882] = {
true,
false,
"deeppink",
},
[184107] = {
true,
false,
"WARRIOR",
},
[169905] = {
true,
false,
"peachpuff",
},
[205326] = {
true,
false,
"lime",
},
[163128] = {
true,
false,
"snow",
},
[180015] = {
true,
false,
"peachpuff",
},
[162744] = {
true,
false,
"slateblue",
},
[189470] = {
true,
false,
"snow",
},
[171184] = {
true,
false,
"slateblue",
},
[188703] = {
true,
false,
"yellow",
},
[192786] = {
true,
false,
"lime",
},
[81820] = {
true,
false,
"PALADIN",
},
[168627] = {
true,
false,
"snow",
},
[204560] = {
true,
false,
"yellow",
},
[94224] = {
true,
false,
"deeppink",
},
[189471] = {
true,
false,
"WARRIOR",
},
[192796] = {
true,
false,
"lime",
},
[227578] = {
true,
false,
"snow",
},
[133430] = {
true,
false,
"slateblue",
},
[206351] = {
true,
false,
"snow",
},
[196577] = {
true,
false,
"snow",
},
[167964] = {
true,
false,
"deeppink",
},
[177891] = {
true,
false,
"slateblue",
},
[133463] = {
true,
false,
"slateblue",
},
[185508] = {
true,
false,
"lime",
},
[216326] = {
true,
false,
"snow",
},
[218884] = {
true,
false,
"deeppink",
},
[197145] = {
true,
false,
"slateblue",
},
[197149] = {
true,
false,
"snow",
},
[198424] = {
true,
false,
"peachpuff",
},
[190368] = {
true,
false,
"magenta",
},
[199703] = {
true,
false,
"deeppink",
},
[131821] = {
true,
false,
"magenta",
},
[135245] = {
true,
false,
"slateblue",
},
[167607] = {
true,
false,
"deeppink",
},
[197146] = {
true,
false,
"slateblue",
},
[188067] = {
true,
false,
"magenta",
},
[216328] = {
true,
false,
"deeppink",
},
[168886] = {
true,
false,
"snow",
},
[134232] = {
true,
false,
"peachpuff",
},
[45930] = {
true,
false,
"cyan",
},
[227581] = {
true,
false,
"snow",
},
[211341] = {
true,
false,
"slateblue",
},
[85194] = {
true,
false,
"deeppink",
},
[40943] = {
true,
false,
"PALADIN",
},
[198502] = {
true,
false,
"snow",
},
[190370] = {
true,
false,
"slateblue",
},
[166969] = {
true,
false,
"snow",
},
[197905] = {
true,
false,
"magenta",
},
[192800] = {
true,
false,
"magenta",
},
[167536] = {
true,
false,
"slateblue",
},
[238068] = {
true,
false,
"deeppink",
},
[134284] = {
true,
false,
"WARRIOR",
},
[157634] = {
true,
false,
"peachpuff",
},
[190371] = {
true,
false,
"WARRIOR",
},
[166970] = {
true,
false,
"peachpuff",
},
[82590] = {
true,
false,
"peachpuff",
},
[156226] = {
true,
false,
"snow",
},
[65317] = {
true,
false,
"slateblue",
},
[131677] = {
true,
false,
"deeppink",
},
[164921] = {
true,
false,
"snow",
},
[115388] = {
true,
false,
"deeppink",
},
[172981] = {
true,
false,
"slateblue",
},
[166971] = {
true,
false,
"deeppink",
},
[220368] = {
true,
false,
"yellow",
},
[152905] = {
true,
false,
"deeppink",
},
[186658] = {
true,
false,
"magenta",
},
[164414] = {
true,
false,
"snow",
},
[129788] = {
true,
false,
"PALADIN",
},
[128434] = {
true,
false,
"PALADIN",
},
[190373] = {
true,
false,
"magenta",
},
[164926] = {
true,
false,
"deeppink",
},
[197406] = {
true,
false,
"deeppink",
},
[152898] = {
true,
false,
"deeppink",
},
[206230] = {
true,
false,
"deeppink",
},
[81819] = {
true,
false,
"magenta",
},
[163520] = {
true,
false,
"slateblue",
},
[84957] = {
true,
false,
"PALADIN",
},
[197535] = {
true,
false,
"dodgerblue",
},
[199325] = {
true,
false,
"snow",
},
[166589] = {
true,
false,
"deeppink",
},
[214287] = {
true,
false,
"yellow",
},
[198047] = {
true,
false,
"dodgerblue",
},
[96587] = {
true,
false,
"snow",
},
[87252] = {
true,
false,
"slateblue",
},
[182045] = {
true,
false,
"deeppink",
},
[183671] = {
true,
false,
"deeppink",
},
[198869] = {
true,
false,
"snow",
},
[86684] = {
true,
false,
"snow",
},
[76518] = {
true,
false,
"deeppink",
},
[176565] = {
true,
false,
"snow",
},
[177716] = {
true,
false,
"snow",
},
[192788] = {
true,
false,
"magenta",
},
[101326] = {
true,
false,
"deeppink",
},
[165824] = {
true,
false,
"deeppink",
},
[167998] = {
true,
false,
"slateblue",
},
[81432] = {
true,
false,
"snow",
},
[190207] = {
true,
false,
"magenta",
},
[192934] = {
true,
false,
"peachpuff",
},
[135241] = {
true,
false,
"snow",
},
[214673] = {
true,
false,
"peachpuff",
},
[210269] = {
true,
false,
"slateblue",
},
[229251] = {
true,
false,
"slateblue",
},
[129552] = {
true,
false,
"WARRIOR",
},
[75459] = {
true,
false,
"lime",
},
[195876] = {
true,
false,
"WARRIOR",
},
[84767] = {
true,
false,
"WARRIOR",
},
[168007] = {
true,
false,
"peachpuff",
},
[163524] = {
true,
false,
"deeppink",
},
[189227] = {
true,
false,
"lime",
},
[229252] = {
true,
false,
"peachpuff",
},
[210966] = {
true,
false,
"peachpuff",
},
[187155] = {
true,
false,
"magenta",
},
[195877] = {
true,
false,
"magenta",
},
[168384] = {
true,
false,
"peachpuff",
},
[205212] = {
true,
false,
"deeppink",
},
[98706] = {
true,
false,
"WARRIOR",
},
[135365] = {
true,
false,
"deeppink",
},
[192333] = {
true,
false,
"slateblue",
},
[171376] = {
true,
false,
"peachpuff",
},
[101008] = {
true,
false,
"deeppink",
},
[195878] = {
true,
false,
"magenta",
},
[114804] = {
true,
false,
"peachpuff",
},
[131685] = {
true,
false,
"snow",
},
[198308] = {
true,
false,
"slateblue",
},
[114627] = {
true,
false,
"peachpuff",
},
[216338] = {
true,
false,
"slateblue",
},
[233474] = {
true,
false,
"snow",
},
[223724] = {
true,
false,
"yellow",
},
[216339] = {
true,
false,
"peachpuff",
},
[214421] = {
true,
false,
"slateblue",
},
[196856] = {
true,
false,
"slateblue",
},
[196263] = {
true,
false,
"snow",
},
[239834] = {
true,
false,
"deeppink",
},
[190381] = {
true,
false,
"deeppink",
},
[220141] = {
true,
false,
"snow",
},
[189706] = {
true,
false,
"yellow",
},
[216340] = {
true,
false,
"deeppink",
},
[90998] = {
true,
false,
"magenta",
},
[104270] = {
true,
false,
"magenta",
},
[80805] = {
true,
false,
"slateblue",
},
[227300] = {
true,
false,
"slateblue",
},
[167876] = {
true,
false,
"deeppink",
},
[199717] = {
true,
false,
"magenta",
},
[197799] = {
true,
false,
"snow",
},
[167965] = {
true,
false,
"peachpuff",
},
[59552] = {
true,
false,
"peachpuff",
},
[190686] = {
true,
false,
"peachpuff",
},
[198311] = {
true,
false,
"slateblue",
},
[130485] = {
true,
false,
"deeppink",
},
[199549] = {
true,
false,
"deeppink",
},
[208244] = {
true,
false,
"snow",
},
[229686] = {
true,
false,
"snow",
},
[129367] = {
true,
false,
"peachpuff",
},
[176573] = {
true,
false,
"deeppink",
},
[175550] = {
true,
false,
"deeppink",
},
[177808] = {
true,
false,
"slateblue",
},
[220946] = {
true,
false,
"slateblue",
},
[187315] = {
true,
false,
"WARRIOR",
},
[186420] = {
true,
false,
"lime",
},
[167111] = {
true,
false,
"snow",
},
[136549] = {
true,
false,
"deeppink",
},
[231176] = {
true,
false,
"yellow",
},
[151127] = {
true,
false,
"deeppink",
},
[179852] = {
true,
false,
"peachpuff",
},
[189234] = {
true,
false,
"deeppink",
},
[129527] = {
true,
false,
"WARRIOR",
},
[203812] = {
true,
false,
"deeppink",
},
[179388] = {
true,
false,
"snow",
},
[101075] = {
true,
false,
"deeppink",
},
[176575] = {
true,
false,
"snow",
},
[191230] = {
true,
false,
"deeppink",
},
[131819] = {
true,
false,
"snow",
},
[176959] = {
true,
false,
"snow",
},
[80935] = {
true,
false,
"snow",
},
[133685] = {
true,
false,
"cyan",
},
[169159] = {
true,
false,
"gold",
},
[131436] = {
true,
false,
"slateblue",
},
[41139] = {
true,
false,
"peachpuff",
},
[137830] = {
true,
false,
"lime",
},
[96664] = {
true,
false,
"magenta",
},
[212765] = {
true,
false,
"slateblue",
},
[169927] = {
true,
false,
"deeppink",
},
[191739] = {
true,
false,
"WARRIOR",
},
[185528] = {
true,
false,
"PALADIN",
},
[185656] = {
true,
false,
"snow",
},
[194990] = {
true,
false,
"snow",
},
[195119] = {
true,
false,
"magenta",
},
[164557] = {
true,
false,
"slateblue",
},
[129372] = {
true,
false,
"peachpuff",
},
[199595] = {
true,
false,
"magenta",
},
[154014] = {
true,
false,
"snow",
},
[185529] = {
true,
false,
"cyan",
},
[165197] = {
true,
false,
"deeppink",
},
[189816] = {
true,
false,
"snow",
},
[180864] = {
true,
false,
"deeppink",
},
[234955] = {
true,
false,
"deeppink",
},
[234443] = {
true,
false,
"deeppink",
},
[129529] = {
true,
false,
"lime",
},
[95834] = {
true,
false,
"magenta",
},
[45935] = {
true,
false,
"magenta",
},
[187768] = {
true,
false,
"snow",
},
[189878] = {
true,
false,
"yellow",
},
[134701] = {
true,
false,
"magenta",
},
[237192] = {
true,
false,
"deeppink",
},
[114632] = {
true,
false,
"snow",
},
[205735] = {
true,
false,
"peachpuff",
},
[198702] = {
true,
false,
"slateblue",
},
[180348] = {
true,
false,
"slateblue",
},
[208165] = {
true,
false,
"snow",
},
[168396] = {
true,
false,
"slateblue",
},
[86372] = {
true,
false,
"cyan",
},
[133870] = {
true,
false,
"PALADIN",
},
[179010] = {
true,
false,
"snow",
},
[95771] = {
true,
false,
"PALADIN",
},
[100531] = {
true,
false,
"WARRIOR",
},
[151773] = {
true,
false,
"peachpuff",
},
[180473] = {
true,
false,
"peachpuff",
},
[99891] = {
true,
false,
"WARRIOR",
},
[170882] = {
true,
false,
"peachpuff",
},
[75979] = {
true,
false,
"lime",
},
[114633] = {
true,
false,
"slateblue",
},
[231312] = {
true,
false,
"snow",
},
[88163] = {
true,
false,
"deeppink",
},
[241798] = {
true,
false,
"snow",
},
[157017] = {
true,
false,
"peachpuff",
},
[198501] = {
true,
false,
"snow",
},
[170572] = {
true,
false,
"peachpuff",
},
[164562] = {
true,
false,
"peachpuff",
},
[228539] = {
true,
false,
"snow",
},
[193462] = {
true,
false,
"magenta",
},
[165762] = {
true,
false,
"deeppink",
},
[185534] = {
true,
false,
"lime",
},
[162133] = {
true,
false,
"deeppink",
},
[184303] = {
true,
false,
"lime",
},
[242209] = {
true,
false,
"snow",
},
[164563] = {
true,
false,
"peachpuff",
},
[221979] = {
true,
false,
"deeppink",
},
[197857] = {
true,
false,
"lime",
},
[179269] = {
true,
false,
"deeppink",
},
[241800] = {
true,
false,
"slateblue",
},
[171341] = {
true,
false,
"snow",
},
[212389] = {
true,
false,
"peachpuff",
},
[223770] = {
true,
false,
"peachpuff",
},
[235151] = {
true,
false,
"peachpuff",
},
[81984] = {
true,
false,
"slateblue",
},
[84520] = {
true,
false,
"slateblue",
},
[151649] = {
true,
false,
"orange",
},
[165076] = {
true,
false,
"peachpuff",
},
[174197] = {
true,
false,
"snow",
},
[152033] = {
true,
false,
"deeppink",
},
[129553] = {
true,
false,
"magenta",
},
[102295] = {
true,
false,
"cyan",
},
[184130] = {
true,
false,
"WARRIOR",
},
[59555] = {
true,
false,
"magenta",
},
[155908] = {
true,
false,
"deeppink",
},
[185537] = {
true,
false,
"peachpuff",
},
[171343] = {
true,
false,
"deeppink",
},
[118489] = {
true,
false,
"deeppink",
},
[223772] = {
true,
false,
"peachpuff",
},
[168658] = {
true,
false,
"deeppink",
},
[212775] = {
true,
false,
"magenta",
},
[227514] = {
true,
false,
"deeppink",
},
[198709] = {
true,
false,
"slateblue",
},
[241803] = {
true,
false,
"snow",
},
[75506] = {
true,
false,
"snow",
},
[237967] = {
true,
false,
"yellow",
},
[102232] = {
true,
false,
"magenta",
},
[198326] = {
true,
false,
"slateblue",
},
[184132] = {
true,
false,
"magenta",
},
[101991] = {
true,
false,
"PALADIN",
},
[104278] = {
true,
false,
"lime",
},
[45912] = {
true,
false,
"PALADIN",
},
[98081] = {
true,
false,
"deeppink",
},
[214439] = {
true,
false,
"snow",
},
[115020] = {
true,
false,
"slateblue",
},
[223774] = {
true,
false,
"peachpuff",
},
[167533] = {
true,
false,
"slateblue",
},
[126919] = {
true,
false,
"magenta",
},
[127111] = {
true,
false,
"peachpuff",
},
[114317] = {
true,
false,
"snow",
},
[164463] = {
true,
false,
"snow",
},
[131587] = {
true,
false,
"WARRIOR",
},
[223775] = {
true,
false,
"peachpuff",
},
[208450] = {
true,
false,
"slateblue",
},
[194895] = {
true,
false,
"lime",
},
[150253] = {
true,
false,
"slateblue",
},
[220195] = {
true,
false,
"snow",
},
[183495] = {
true,
false,
"slateblue",
},
[196045] = {
true,
false,
"snow",
},
[214441] = {
true,
false,
"deeppink",
},
[223776] = {
true,
false,
"peachpuff",
},
[214697] = {
true,
false,
"deeppink",
},
[176974] = {
true,
false,
"deeppink",
},
[190401] = {
true,
false,
"magenta",
},
[220196] = {
true,
false,
"deeppink",
},
[233623] = {
true,
false,
"deeppink",
},
[189265] = {
true,
false,
"PALADIN",
},
[83761] = {
true,
false,
"slateblue",
},
[205363] = {
true,
false,
"PALADIN",
},
[212403] = {
true,
false,
"peachpuff",
},
[205619] = {
true,
false,
"slateblue",
},
[219046] = {
true,
false,
"snow",
},
[220197] = {
true,
false,
"slateblue",
},
[183497] = {
true,
false,
"peachpuff",
},
[195265] = {
true,
false,
"slateblue",
},
[208438] = {
true,
false,
"slateblue",
},
[220974] = {
true,
false,
"deeppink",
},
[150250] = {
true,
false,
"snow",
},
[205620] = {
true,
false,
"slateblue",
},
[190403] = {
true,
false,
"lime",
},
[129600] = {
true,
false,
"magenta",
},
[44404] = {
true,
false,
"snow",
},
[115406] = {
true,
false,
"snow",
},
[134012] = {
true,
false,
"slateblue",
},
[195135] = {
true,
false,
"cyan",
},
[150251] = {
true,
false,
"peachpuff",
},
[207796] = {
true,
false,
"deeppink",
},
},
["castbar_icon_size"] = "same as castbar plus healthbar",
["border_color"] = {
nil,
nil,
nil,
1,
},
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 5,
["border_thickness"] = 0.4999999701976776,
["cast_statusbar_spark_width"] = 4,
["indicator_elite"] = false,
},
},
}
PlaterLanguage = {
["language"] = "enUS",
["version"] = 1,
}
PlaterLogs = {
["_general_logs"] = {
"2025-09-30 08:02:02 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Weqasadwqwe",
"2025-09-30 07:56:15 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Weqasadwqwe",
"2025-09-30 07:35:57 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Bægnaskeren",
"2025-09-30 07:34:20 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Bægnaskeren",
"2025-09-29 22:19:01 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Bægnaskeren",
"2025-09-29 20:46:26 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Bægnaskeren",
"2025-09-29 20:30:37 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Bægnaskeren",
"2025-09-29 19:46:49 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Bægnaskeren",
"2025-09-29 19:45:52 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Bægnaskeren",
"2025-09-29 19:42:07 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Bægnaskeren",
"2025-09-29 19:40:23 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Bægnaskeren",
"2025-09-29 19:14:53 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Mbuzi",
"2025-09-29 18:59:09 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Mbuzi",
"2025-09-29 18:43:35 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Mbuzi",
"2025-09-29 18:06:04 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Mbuzi",
"2025-09-29 17:41:52 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Mbuzi",
"2025-09-29 17:29:04 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Mbuzi",
"2025-09-29 17:23:39 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Mbuzi",
"2025-09-29 17:19:03 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Mbuzi",
},
["_error_logs"] = {
},
}
PlaterBackup = {
}
