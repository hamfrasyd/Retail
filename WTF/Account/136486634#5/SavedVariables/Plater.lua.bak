
PlaterDB = {
["captured_spells"] = {
[6136] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Gug Fatcandle",
["npcID"] = 62,
},
[349927] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blackrock Spy",
["npcID"] = 49874,
},
[13737] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Death Knight",
["npcID"] = 235727,
},
[1604] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Paladin",
["npcID"] = 235722,
},
[80676] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Blackrock Spy",
["npcID"] = 49874,
},
[37369] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Paladin",
["npcID"] = 235722,
},
[89798] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "DEBUFF",
["source"] = "Lord Victor Nefarius",
["npcID"] = 49799,
},
[42138] = {
["source"] = "Marleth Barleybrew",
["type"] = "BUFF",
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 154013,
},
[45328] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "King Mrgl-Mrgl",
["npcID"] = 25197,
},
[108446] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Skurikminul",
["npcID"] = 17252,
},
[80610] = {
["event"] = "SPELL_AURA_APPLIED",
["type"] = "BUFF",
["source"] = "Catherine Leland",
["npcID"] = 5494,
},
},
["profileKeys"] = {
["Badandbuzi - Argent Dawn"] = "Default",
["Yesfin - Argent Dawn"] = "FragUI_2",
["Whatamelon - Twisting Nether"] = "FragUI_1",
},
["captured_casts"] = {
[116] = {
["npcID"] = 188027,
},
},
["performance_units"] = {
[217126] = 6,
[191714] = 0,
[214441] = true,
[189707] = 0,
[220626] = true,
[176920] = 0,
[96247] = 0,
[196679] = 0,
[100529] = 0,
[208994] = 0,
[87329] = false,
[198594] = false,
[210231] = 0,
[219746] = 0,
[84401] = 0,
[194999] = 0,
[196642] = 0,
[189363] = 0,
[189706] = 0,
[197398] = 0,
[167999] = true,
[211306] = 0,
},
["InterruptableSpells"] = {
},
["profiles"] = {
["FragUI"] = {
["target_shady_combat_only"] = false,
["extra_icon_use_blizzard_border_color"] = false,
["aura_sort"] = true,
["blizzard_nameplate_large_font"] = "Friz Quadrata TT",
["saved_cvars_last_change"] = {
["nameplateShowOnlyNames"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelectedAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateLargeTopInset"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowPersonalCooldowns"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMotionSpeed"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyNPCs"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelectedScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOverlapH"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyBuffs"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinAlphaDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMotion"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateLargerScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMaxDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOtherTopInset"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplatePlayerMaxDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOccludedAlphaMult"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOverlapV"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemies"] = "[C]: ?\n[C]: in function 'SetCVar'\n[Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua]:76: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:264: in function 'SetValueDerived'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:110: in function 'ApplyValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:86: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Settings.lua]:224: in function 'SetValue'\n[ALLNAMEPLATES]:12: in function <[string \"ALLNAMEPLATES\"]:1>\n",
["nameplateShowSelf"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriends"] = "[C]: ?\n[C]: in function 'SetCVar'\n[Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua]:76: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:264: in function 'SetValueDerived'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:110: in function 'ApplyValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:86: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Settings.lua]:224: in function 'SetValue'\n[ALLNAMEPLATES]:13: in function <[string \"ALLNAMEPLATES\"]:1>\n",
},
["aura_cache_by_name"] = {
},
["url"] = "https://wago.io/tA5ADNfDG/11",
["blizzard_nameplate_font_override_enabled"] = true,
["hover_highlight_alpha"] = 0.25,
["cast_statusbar_fadein_time"] = 0.019999999552965,
["health_cutoff_upper"] = false,
["cast_statusbar_spark_alpha"] = 0,
["aura2_y_offset"] = 3,
["extra_icon_caster_size"] = 12,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["level_text_alpha"] = 0.3,
["module_enabled"] = false,
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
210,
22,
},
["spellpercent_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 12,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
210,
22,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
0,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = -1,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["mana_incombat"] = {
nil,
4,
},
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["percent_text_enabled"] = true,
["castbar_offset_x"] = 11,
["all_names"] = true,
["spellname_text_font"] = "Friz Quadrata TT",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_enabled"] = true,
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["health_incombat"] = {
232,
32,
},
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["percent_text_font"] = "Friz Quadrata TT",
["buff_frame_y_offset"] = 0,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_enabled"] = true,
["percent_text_ooc"] = true,
["castbar_offset"] = -1,
["quest_color_enabled"] = true,
["spellname_text_size"] = 12,
["health"] = {
232,
32,
},
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 12,
["mana"] = {
nil,
4,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_size"] = 12,
},
["friendlynpc"] = {
["castbar_offset"] = -1,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
210,
22,
},
["spellpercent_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
210,
22,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = -1,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["actorname_text_size"] = 12,
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["spellpercent_text_enabled"] = true,
["actorname_text_spacing"] = 11,
["percent_text_font"] = "Friz Quadrata TT",
["castbar_offset_x"] = 11,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_font"] = "Friz Quadrata TT",
["big_actortitle_text_size"] = 12,
["health_incombat"] = {
232,
32,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_size"] = 12,
["health"] = {
232,
32,
},
["percent_text_enabled"] = true,
["big_actorname_text_size"] = 12,
["percent_text_ooc"] = true,
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 12,
},
["enemynpc"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
182,
18,
},
["spellpercent_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
182,
18,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = -1,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
nil,
0.50196081399918,
0.25098040699959,
},
["actorname_text_size"] = 12,
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["percent_text_size"] = 12,
["actorname_text_spacing"] = 11,
["percent_text_font"] = "Friz Quadrata TT",
["quest_color_enemy"] = {
nil,
0.50196081399918,
0.25098040699959,
},
["castbar_offset_x"] = 9,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset"] = -1,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
200,
28,
},
["health"] = {
200,
28,
},
["big_actortitle_text_size"] = 12,
["percent_show_health"] = false,
["level_text_alpha"] = 0.2999999821186066,
["spellname_text_font"] = "Friz Quadrata TT",
["level_text_enabled"] = false,
},
["global_health_width"] = 224,
["enemyplayer"] = {
["castbar_offset"] = -1,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Friz Quadrata TT",
["cast"] = {
210,
22,
},
["spellpercent_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
210,
22,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = -1,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["all_names"] = true,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["actorname_text_outline"] = "OUTLINE",
["percent_show_health"] = false,
["castbar_offset_x"] = 11,
["percent_text_size"] = 12,
["actorname_text_spacing"] = 11,
["percent_text_font"] = "Friz Quadrata TT",
["spellname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_size"] = 12,
["quest_enabled"] = true,
["big_actortitle_text_size"] = 12,
["spellname_text_size"] = 12,
["quest_color_enabled"] = true,
["health_incombat"] = {
232,
32,
},
["health"] = {
232,
32,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_alpha"] = 0.2999999821186066,
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 3,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_enabled"] = false,
},
["global_health_height"] = 28,
},
["health_selection_overlay"] = "Blizzard Raid Bar",
["aura_y_offset"] = 3,
["use_ui_parent"] = true,
["expansion_triggerwipe"] = {
[10] = true,
[9] = true,
},
["focus_texture"] = "Details! Slash",
["cast_statusbar_color_nointerrupt"] = {
1,
0.25098040699959,
0.25098040699959,
1,
},
["cast_statusbar_use_fade_effects"] = false,
["bossmod_support_bars_enabled"] = false,
["border_thickness"] = 0.4999999701976776,
["resources_settings"] = {
["global_settings"] = {
["show_depleted"] = false,
},
["chr"] = {
["Player-3674-0B4CEAF6"] = "HolyPower",
["Player-3674-0B10664D"] = "Runes",
["Player-3674-0B7E99BA"] = "Chi",
["Player-3674-0B290529"] = "Chi",
["Player-3674-0B1E76C1"] = "SoulShards",
["Player-3674-0B54DA49"] = "Runes",
["Player-3674-0B1BB2A3"] = "ComboPoints",
["Player-3666-073F2CE7"] = "Chi",
["Player-3674-0B7EE2CB"] = "Chi",
["Player-3674-0B0A2407"] = "Essence",
["Player-3674-0B733AA8"] = "Runes",
["Player-3674-0B7DA606"] = "Chi",
["Player-3674-0B7DEF79"] = "Chi",
["Player-3674-0ABC0676"] = "ArcaneCharges",
["Player-3674-0B7429F4"] = "Runes",
["Player-3674-0B267A73"] = "HolyPower",
["Player-3674-0B6950F5"] = "ComboPoints",
["Player-3674-0B7AA5AA"] = "Chi",
["Player-5764-00087D02"] = "Chi",
["Player-3674-0B782F56"] = "Runes",
["Player-3674-0B436FA0"] = "ComboPoints",
["Player-3674-0B5833AE"] = "Chi",
["Player-3674-0B25F50F"] = "ComboPoints",
["Player-3674-0B6F6C67"] = "ComboPoints",
["Player-3674-0B82DA01"] = "HolyPower",
},
},
["health_animation_time_dilatation"] = 2.6199998855591,
["npc_cache"] = {
[158146] = {
"Fallen Riftwalker",
"Horrific Vision of Stormwind",
"enUS",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
},
[242209] = {
"Overgorged Mite",
"Eco-Dome Al'dani",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
"enUS",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[158279] = {
"Haywire Clockwork Rocket Bot",
"Horrific Vision of Stormwind",
"enUS",
},
[152722] = {
"Fallen Voidspeaker",
"Horrific Vision of Stormwind",
"enUS",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
},
[206698] = {
"Fanatical Conjuror",
"Priory of the Sacred Flame",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[87317] = {
"Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
},
[234933] = {
"Taah'bat",
"Eco-Dome Al'dani",
},
[158411] = {
"Unstable Servant",
"Horrific Vision of Stormwind",
"enUS",
},
[87318] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[158092] = {
"Fallen Heartpiercer",
"Horrific Vision of Stormwind",
"enUS",
},
[137716] = {
"Bottom Feeder",
"The MOTHERLODE!!",
"enUS",
},
[158284] = {
"Craggle Wobbletop",
"Horrific Vision of Stormwind",
"enUS",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[234935] = {
"Soul-Scribe",
"Eco-Dome Al'dani",
},
[158158] = {
"Forge-Guard Hurrul",
"Horrific Vision of Stormwind",
"enUS",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[158286] = {
"Reprogrammed Warbot",
"Horrific Vision of Stormwind",
"enUS",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
},
[158478] = {
"Corruption Tumor",
"Horrific Vision of Stormwind",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
},
[87320] = {
"Raider's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[176556] = {
"Alcruux",
"Tazavesh, the Veiled Market",
},
[130436] = {
"Off-Duty Laborer",
"The MOTHERLODE!!",
"enUS",
},
[152987] = {
"Faceless Willbreaker",
"Horrific Vision of Stormwind",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
},
[175663] = {
"Hylbrande",
"Tazavesh, the Veiled Market",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
},
[152988] = {
"Faceless Shadowcaller",
"Horrific Vision of Stormwind",
"enUS",
},
[152669] = {
"Void Globule",
"Horrific Vision of Stormwind",
"enUS",
},
[156949] = {
"Armsmaster Terenson",
"Horrific Vision of Stormwind",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
},
[151649] = {
"Defense Bot Mk I",
"Operation: Mechagon",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
"enUS",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
},
[234883] = {
"Voracious Gorger",
"Eco-Dome Al'dani",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
},
[213741] = {
"Voidstone Awakened",
"The Rookery",
"enUS",
},
[177269] = {
"So'leah",
"Tazavesh, the Veiled Market",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
},
[219046] = {
"Voracious Worm",
"Nerub-ar Palace",
},
[236995] = {
"Ravenous Destroyer",
"Eco-Dome Al'dani",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[156641] = {
"Enthralled Weaponsmith",
"Horrific Vision of Stormwind",
"enUS",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
},
[237252] = {
"Underpin's Friend's Agent",
"Excavation Site 9",
"enUS",
},
[156642] = {
"Enthralled Laborer",
"Horrific Vision of Stormwind",
"enUS",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[179893] = {
"Cartel Skulker",
"Tazavesh, the Veiled Market",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
},
[153130] = {
"Greater Void Elemental",
"Horrific Vision of Stormwind",
"enUS",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[175806] = {
"So'azmi",
"Tazavesh, the Veiled Market",
},
[152939] = {
"Boundless Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[234955] = {
"Wastelander Pactspeaker",
"Eco-Dome Al'dani",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[226396] = {
"Swampface",
"Operation: Floodgate",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[175616] = {
"Zo'phex",
"Tazavesh, the Veiled Market",
},
[156837] = {
"Valeera Sanguinar",
"Horrific Vision of Stormwind",
"enUS",
},
[233679] = {
"Therum Deepforge",
"Horrific Vision of Stormwind",
"enUS",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[234893] = {
"Azhiccar",
"Eco-Dome Al'dani",
},
[234957] = {
"Wastelander Ritualist",
"Eco-Dome Al'dani",
},
[158371] = {
"Zardeth of the Black Claw",
"Horrific Vision of Stormwind",
"enUS",
},
[226398] = {
"Big M.O.M.M.A.",
"Operation: Floodgate",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[157158] = {
"Cultist Slavedriver",
"Horrific Vision of Stormwind",
"enUS",
},
[159266] = {
"Portal Master",
"Horrific Vision of Stormwind",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
},
[164185] = {
"Echelon",
"Halls of Atonement",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
},
[237514] = {
"A'wazj",
"Eco-Dome Al'dani",
},
[158373] = {
"Roberto Pupellyverbos",
"Horrific Vision of Stormwind",
"enUS",
},
[158437] = {
"Fallen Taskmaster",
"Horrific Vision of Stormwind",
"enUS",
},
[138061] = {
"Venture Co. Longshoreman",
"The MOTHERLODE!!",
"enUS",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[213179] = {
"Avanoxx",
"Ara-Kara, City of Echoes",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[226402] = {
"Bront",
"Operation: Floodgate",
},
[233684] = {
"Overlord Mathias Shaw",
"Horrific Vision of Stormwind",
"enUS",
},
[236942] = {
"The Underpin",
"Excavation Site 9",
"enUS",
},
[234962] = {
"Wastelander Farstalker",
"Eco-Dome Al'dani",
},
[226403] = {
"Keeza Quickfuse",
"Operation: Floodgate",
},
[233685] = {
"Slavemaster Ul'rok",
"Horrific Vision of Stormwind",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[226404] = {
"Geezle Gigazap",
"Operation: Floodgate",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[234900] = {
"Underpin's Adoring Fan",
"Excavation Site 9",
"enUS",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
},
[234901] = {
"Underpin's Well-Connected Friend",
"Excavation Site 9",
"enUS",
},
[158315] = {
"Eye of Chaos",
"Horrific Vision of Stormwind",
"enUS",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[239437] = {
"Hogger",
"Horrific Vision of Stormwind",
"enUS",
},
[234902] = {
"Underpin's Explosive Ally",
"Excavation Site 9",
"enUS",
},
[242631] = {
"Overcharged Sentinel",
"Eco-Dome Al'dani",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
},
[156145] = {
"Burrowing Appendage",
"Horrific Vision of Stormwind",
"enUS",
},
[159275] = {
"Portal Keeper",
"Horrific Vision of Stormwind",
"enUS",
},
[176394] = {
"P.O.S.T. Worker",
"Tazavesh, the Veiled Market",
},
[212739] = {
"Consuming Voidstone",
"The Rookery",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
},
[237651] = {
"Lit Fuse",
"Excavation Site 9",
"enUS",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
},
[234204] = {
"Congealed Clot",
"Excavation Site 9",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
},
[234205] = {
"Corruption Parasite",
"Excavation Site 9",
"enUS",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[234206] = {
"Nightmare Crawler",
"Excavation Site 9",
"enUS",
},
[157812] = {
"Billibub Cogspinner",
"Horrific Vision of Stormwind",
"enUS",
},
[234207] = {
"Tainted Feaster",
"Excavation Site 9",
"enUS",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[157813] = {
"Sprite Jumpsprocket",
"Horrific Vision of Stormwind",
"enUS",
},
[231014] = {
"Loaderbot",
"Operation: Floodgate",
},
[234208] = {
"Hideous Amalgamation",
"Excavation Site 9",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
},
[152704] = {
"Crawling Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[234209] = {
"Coagulated Mass",
"Excavation Site 9",
"enUS",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
},
[244302] = {
"Binding Javelin",
"Eco-Dome Al'dani",
},
[234210] = {
"Silent Slitherer",
"Excavation Site 9",
"enUS",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
},
[158774] = {
"Broken Citizen",
"Horrific Vision of Stormwind",
"enUS",
},
[156794] = {
"SI:7 Light-Hunter",
"Horrific Vision of Stormwind",
"enUS",
},
[158285] = {
"Tinkered Shieldbot",
"Horrific Vision of Stormwind",
"enUS",
},
[158690] = {
"Cultist Tormenter",
"Horrific Vision of Stormwind",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[220626] = {
"Blood Parasite",
"Nerub-ar Palace",
},
[158136] = {
"Inquisitor Darkspeak",
"Horrific Vision of Stormwind",
"enUS",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[165408] = {
"Halkias",
"Halls of Atonement",
},
[156795] = {
"SI:7 Informant",
"Horrific Vision of Stormwind",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
},
[176563] = {
"Zo'gron",
"Tazavesh, the Veiled Market",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
},
[158056] = {
"Rat",
"Horrific Vision of Stormwind",
"enUS",
},
[179386] = {
"Corsair Officer",
"Tazavesh, the Veiled Market",
},
[242570] = {
"Haymar the Devout",
"Horrific Vision of Stormwind",
"enUS",
},
[246285] = {
"Bazaar Overseer",
"Tazavesh, the Veiled Market",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[235151] = {
"K'aresh Elemental",
"Eco-Dome Al'dani",
},
[239834] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
},
[237272] = {
"Underpin's Friend's Broker",
"Excavation Site 9",
"enUS",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
},
[153760] = {
"Enthralled Footman",
"Horrific Vision of Stormwind",
"enUS",
},
[231385] = {
"Darkfuse Inspector",
"Operation: Floodgate",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
},
[215407] = {
"Ki'katal the Harvester",
"Ara-Kara, City of Echoes",
},
[216275] = {
"Brann's Epic Egg",
"Excavation Site 9",
"enUS",
},
[159633] = {
"Cultist Executioner",
"Horrific Vision of Stormwind",
"enUS",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[158140] = {
"Frenzied Rat",
"Horrific Vision of Stormwind",
"enUS",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[234918] = {
"Wastes Creeper",
"Eco-Dome Al'dani",
},
[158452] = {
"Mindtwist Tendril",
"Horrific Vision of Stormwind",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[180433] = {
"Wandering Pulsar",
"Tazavesh, the Veiled Market",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
},
[159632] = {
"Cultist Shadowblade",
"Horrific Vision of Stormwind",
"enUS",
},
[233675] = {
"Alleria Windrunner",
"Horrific Vision of Stormwind",
"enUS",
},
[234960] = {
"Tamed Ruinstalker",
"Eco-Dome Al'dani",
},
[152809] = {
"Alx'kov the Infested",
"Horrific Vision of Stormwind",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
},
[176555] = {
"Achillite",
"Tazavesh, the Veiled Market",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
},
[179840] = {
"Market Peacekeeper",
"Tazavesh, the Veiled Market",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[164218] = {
"Lord Chamberlain",
"Halls of Atonement",
},
[157811] = {
"Lilliam Sparkspindle",
"Horrific Vision of Stormwind",
"enUS",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[216333] = {
"Bloodstained Assistant",
"Ara-Kara, City of Echoes",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
},
[231497] = {
"Bombshell Crab",
"Operation: Floodgate",
},
[233681] = {
"Magister Umbric",
"Horrific Vision of Stormwind",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
},
[175646] = {
"P.O.S.T. Master",
"Tazavesh, the Veiled Market",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
},
[88314] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[164188] = {
"Horrific Figment",
"Horrific Vision of Stormwind",
"enUS",
},
[160061] = {
"Crawling Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[224221] = {
"Twilight Overseer",
"Grim Batol",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
},
[177500] = {
"Corsair Brute",
"Tazavesh, the Veiled Market",
},
[137713] = {
"Big Money Crab",
"Zandalar",
"enUS",
},
},
["indicator_scale"] = 1.200000047683716,
["border_color"] = {
nil,
nil,
nil,
1,
},
["focus_color"] = {
nil,
nil,
nil,
1,
},
["indicator_anchor"] = {
["y"] = -5,
["x"] = 1,
["side"] = 1,
},
["npc_colors"] = {
[226402] = {
true,
false,
"orange",
},
[211262] = {
true,
false,
"orange",
},
[206704] = {
true,
false,
"orange",
},
[229686] = {
true,
false,
"deeppink",
},
[144293] = {
true,
false,
"orange",
},
[231312] = {
true,
false,
"deeppink",
},
[211263] = {
true,
false,
"orange",
},
[215407] = {
true,
false,
"orange",
},
[144294] = {
true,
false,
"deeppink",
},
[144071] = {
true,
false,
"deeppink",
},
[234883] = {
true,
false,
"moccasin",
},
[216364] = {
true,
false,
"deeppink",
},
[212826] = {
true,
false,
"orange",
},
[210818] = {
true,
false,
"deeppink",
},
[230740] = {
true,
false,
"orange",
},
[212412] = {
true,
false,
"deeppink",
},
[216333] = {
true,
false,
"moccasin",
},
[212827] = {
true,
false,
"orange",
},
[176394] = {
true,
false,
"moccasin",
},
[164218] = {
true,
false,
"orange",
},
[173016] = {
true,
false,
"deeppink",
},
[213338] = {
true,
false,
"deeppink",
},
[176395] = {
true,
false,
"deeppink",
},
[229212] = {
true,
false,
"deeppink",
},
[213179] = {
true,
false,
"orange",
},
[234918] = {
true,
false,
"orange",
},
[176555] = {
true,
false,
"orange",
},
[209801] = {
true,
false,
"orange",
},
[175663] = {
true,
false,
"orange",
},
[170882] = {
true,
false,
"deeppink",
},
[176556] = {
true,
false,
"orange",
},
[223253] = {
true,
false,
"deeppink",
},
[206710] = {
true,
false,
"moccasin",
},
[136139] = {
true,
false,
"orange",
},
[219046] = {
true,
false,
"deeppink",
},
[133430] = {
true,
false,
"orange",
},
[221979] = {
true,
false,
"deeppink",
},
[165529] = {
true,
false,
"lightskyblue",
},
[179841] = {
true,
false,
"deeppink",
},
[216338] = {
true,
false,
"orange",
},
[220195] = {
true,
false,
"deeppink",
},
[129367] = {
true,
false,
"deeppink",
},
[130435] = {
true,
false,
"orange",
},
[133432] = {
true,
false,
"deeppink",
},
[128969] = {
true,
false,
"orange",
},
[163618] = {
true,
false,
"orange",
},
[213885] = {
true,
false,
"orange",
},
[179269] = {
true,
false,
"deeppink",
},
[234955] = {
true,
false,
"orange",
},
[210539] = {
true,
false,
"orange",
},
[230748] = {
true,
false,
"orange",
},
[212739] = {
true,
false,
"orange",
},
[221760] = {
true,
false,
"lightskyblue",
},
[229251] = {
true,
false,
"orange",
},
[234893] = {
true,
false,
"orange",
},
[134232] = {
true,
false,
"deeppink",
},
[239834] = {
true,
false,
"orange",
},
[166299] = {
true,
false,
"deeppink",
},
[176563] = {
true,
false,
"orange",
},
[223770] = {
true,
false,
"deeppink",
},
[228424] = {
true,
false,
"moccasin",
},
[231325] = {
true,
false,
"orange",
},
[167607] = {
true,
false,
"orange",
},
[223994] = {
true,
false,
"lightskyblue",
},
[239836] = {
true,
false,
"orange",
},
[165408] = {
true,
false,
"orange",
},
[130661] = {
true,
false,
"deeppink",
},
[213954] = {
true,
false,
"orange",
},
[166301] = {
true,
false,
"orange",
},
[177808] = {
true,
false,
"moccasin",
},
[176565] = {
true,
false,
"lightskyblue",
},
[223772] = {
true,
false,
"deeppink",
},
[165919] = {
true,
false,
"deeppink",
},
[211341] = {
true,
false,
"orange",
},
[166302] = {
true,
false,
"deeppink",
},
[224219] = {
true,
false,
"deeppink",
},
[216856] = {
true,
false,
"lightskyblue",
},
[223773] = {
true,
false,
"deeppink",
},
[165410] = {
true,
false,
"orange",
},
[213892] = {
true,
false,
"lightskyblue",
},
[223423] = {
true,
false,
"orange",
},
[218671] = {
true,
false,
"deeppink",
},
[234962] = {
true,
false,
"lightskyblue",
},
[223774] = {
true,
false,
"deeppink",
},
[218961] = {
true,
false,
"lightskyblue",
},
[213893] = {
true,
false,
"deeppink",
},
[220141] = {
true,
false,
"deeppink",
},
[244302] = {
true,
false,
"lightskyblue",
},
[177269] = {
true,
false,
"orange",
},
[224221] = {
true,
false,
"orange",
},
[130485] = {
true,
false,
"orange",
},
[223775] = {
true,
false,
"deeppink",
},
[208456] = {
true,
false,
"deeppink",
},
[211089] = {
true,
false,
"orange",
},
[211121] = {
true,
false,
"orange",
},
[179840] = {
true,
false,
"lightskyblue",
},
[174210] = {
true,
false,
"deeppink",
},
[224732] = {
true,
false,
"deeppink",
},
[237514] = {
true,
false,
"orange",
},
[223776] = {
true,
false,
"deeppink",
},
[212453] = {
true,
false,
"deeppink",
},
[164921] = {
true,
false,
"deeppink",
},
[212793] = {
true,
false,
"deeppink",
},
[40167] = {
true,
false,
"deeppink",
},
[179821] = {
true,
false,
"orange",
},
[234933] = {
true,
false,
"orange",
},
[179386] = {
true,
false,
"orange",
},
[223777] = {
true,
false,
"deeppink",
},
[165414] = {
true,
false,
"deeppink",
},
[175646] = {
true,
false,
"orange",
},
[211261] = {
true,
false,
"orange",
},
[166275] = {
true,
false,
"deeppink",
},
[220196] = {
true,
false,
"deeppink",
},
[229069] = {
true,
false,
"lightskyblue",
},
[175806] = {
true,
false,
"orange",
},
[217658] = {
true,
false,
"orange",
},
[178165] = {
true,
false,
"orange",
},
[214439] = {
true,
false,
"deeppink",
},
[231014] = {
true,
false,
"moccasin",
},
[166276] = {
true,
false,
"orange",
},
[216340] = {
true,
false,
"lightskyblue",
},
[234935] = {
true,
false,
"orange",
},
[242631] = {
true,
false,
"orange",
},
[180429] = {
true,
false,
"orange",
},
[175616] = {
true,
false,
"orange",
},
[217531] = {
true,
false,
"orange",
},
[220815] = {
true,
false,
"deeppink",
},
[164185] = {
true,
false,
"orange",
},
[226403] = {
true,
false,
"moccasin",
},
[210966] = {
true,
false,
"orange",
},
[231385] = {
true,
false,
"moccasin",
},
[235151] = {
true,
false,
"lightskyblue",
},
[167612] = {
true,
false,
"orange",
},
[223844] = {
true,
false,
"deeppink",
},
[220626] = {
true,
false,
"orange",
},
[217533] = {
true,
false,
"orange",
},
[213741] = {
true,
false,
"orange",
},
[164557] = {
true,
false,
"orange",
},
[206697] = {
true,
false,
"deeppink",
},
[206696] = {
true,
false,
"moccasin",
},
[226396] = {
true,
false,
"orange",
},
[246285] = {
true,
false,
"orange",
},
[214697] = {
true,
false,
"orange",
},
[214762] = {
true,
false,
"moccasin",
},
[214761] = {
true,
false,
"orange",
},
[220946] = {
true,
false,
"orange",
},
[207940] = {
true,
false,
"orange",
},
[207207] = {
true,
false,
"orange",
},
[151649] = {
true,
false,
"orange",
},
[231496] = {
true,
false,
"lightskyblue",
},
[211290] = {
true,
false,
"moccasin",
},
[177500] = {
true,
false,
"moccasin",
},
[224962] = {
true,
false,
"deeppink",
},
[180433] = {
true,
false,
"lightskyblue",
},
[212786] = {
true,
false,
"orange",
},
[206698] = {
true,
false,
"lightskyblue",
},
[167111] = {
true,
false,
"deeppink",
},
[231497] = {
true,
false,
"moccasin",
},
[213934] = {
true,
false,
"moccasin",
},
[236995] = {
true,
false,
"orange",
},
[216293] = {
true,
false,
"deeppink",
},
[136643] = {
true,
false,
"orange",
},
[173044] = {
true,
false,
"deeppink",
},
[210269] = {
true,
false,
"orange",
},
[163126] = {
true,
false,
"deeppink",
},
[226398] = {
true,
false,
"orange",
},
[179733] = {
true,
false,
"red",
},
[178139] = {
true,
false,
"orange",
},
[179388] = {
true,
false,
"deeppink",
},
[167876] = {
true,
false,
"orange",
},
[179893] = {
true,
false,
"moccasin",
},
[214350] = {
true,
false,
"deeppink",
},
[210812] = {
true,
false,
"deeppink",
},
[242209] = {
true,
false,
"lightskyblue",
},
[178392] = {
true,
false,
"orange",
},
[180336] = {
true,
false,
"deeppink",
},
[180431] = {
true,
false,
"deeppink",
},
[164562] = {
true,
false,
"moccasin",
},
[177817] = {
true,
false,
"deeppink",
},
[178141] = {
true,
false,
"deeppink",
},
[234957] = {
true,
false,
"deeppink",
},
[177816] = {
true,
false,
"lightskyblue",
},
[213937] = {
true,
false,
"orange",
},
[220599] = {
true,
false,
"deeppink",
},
[206694] = {
true,
false,
"moccasin",
},
[211228] = {
true,
false,
"deeppink",
},
[180348] = {
true,
false,
"orange",
},
[178142] = {
true,
false,
"lightskyblue",
},
[136470] = {
true,
false,
"deeppink",
},
[207198] = {
true,
false,
"deeppink",
},
[214840] = {
true,
false,
"moccasin",
},
[234960] = {
true,
false,
"moccasin",
},
[179842] = {
true,
false,
"orange",
},
[226404] = {
true,
false,
"orange",
},
[207946] = {
true,
false,
"orange",
},
[218324] = {
true,
false,
"orange",
},
[215405] = {
true,
false,
"orange",
},
[129370] = {
true,
false,
"deeppink",
},
},
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.99999994039536,
["extra_icon_show_enrage_border"] = {
0,
0,
0,
},
["aura_padding"] = 3,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
["replaceName"] = false,
["nameplateFlash"] = true,
["colorTick"] = {
1,
1,
1,
1,
},
["colorInterruptSoon"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
["colorInterruptAvailable"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
["colorNoInterrupt"] = {
0.80000007152557,
0.80000007152557,
0.80000007152557,
1,
},
["colorProtected"] = {
1,
0.25098040699959,
0.25098040699959,
1,
},
["colorSecondaryInterrupt"] = {
1,
0.50196081399918,
0.50196081399918,
1,
},
},
["HooksTemp"] = {
},
["UID"] = "0x63cc19ce2df2342d",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend\n\n\n",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Get players current talent specialization\n    envTable.spec = GetSpecialization()\n    \n    -- Flashing nameplate options\n    envTable.optionsHideFlashSolo = modTable.config.hideNameplateFlashSolo\n    envTable.optionsNameplateFlash = modTable.config.nameplateFlash\n    envTable.optionsHideFlashAsTank = modTable.config.hideFlashAsTank\n    \n    -- Target name options\n    envTable.optionsShowTargetName = modTable.config.showTargetName\n    envTable.optionsReplaceMyName = modTable.config.replaceName\n    envTable.optionsHideNameSolo = modTable.config.hideNameSolo\n    envTable.optionsCastNameSize = modTable.config.castNameSize\n    \n    -- Cast bar interrupt coloring\n    envTable.optionsShowInterruptColor = modTable.config.showInterruptColor\n    envTable.optionsShowSecondaryInterrupts = modTable.config.showSecondaryInterrupts\n    envTable.optionsColorNoInterrupt = modTable.config[\"colorNoInterrupt\"]\n    envTable.optionsColorInterruptAvailable = modTable.config[\"colorInterruptAvailable\"]\n    envTable.optionsColorInterruptSoon = modTable.config[\"colorInterruptSoon\"]\n    envTable.optionsColorSecondaryAvailable = modTable.config[\"colorSecondaryInterrupt\"]\n    envTable.optionsColorProtected = modTable.config[\"colorProtected\"]\n    envTable.optionsColorTick = modTable.config[\"colorTick\"]\n    \n    -- Get the primary interrupt ID of the players current class/spec.\n    -- All non-warlock classes have straight forward primary interrupt skills.\n    if envTable.class ~= 9 then\n        envTable.interruptID = modTable.primaryInterrupts[envTable.class][envTable.spec]\n    else\n        -- Warlock interrupt changes based on pet being used.\n        envTable.interruptID = envTable.GetWarlockInterrupt()\n    end\n    \n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend",
["Initialization"] = "function (modTable)\n    -- List of primary interupt skills used by each spec and class\n    -- Does not track secondary interrupt skills (such as Avenger's shield, etc)\n    modTable.primaryInterrupts =\n    {\n        \n        -- Warrior\n        [1] =\n        {\n            [1] = 6552, -- Pummel (Arms)\n            [2] = 6552, -- Pummel (Fury)\n            [3] = 6552 --  Pummel (Protection)\n        },\n        \n        -- Paladin\n        [2] =\n        {\n            [1] = 96231, -- Rebuke (Holy)\n            [2] = 96231, -- Rebuke (Protection)\n            [3] = 96231 -- Rebuke (Retribution)\n        },\n        \n        -- Hunter\n        [3] =\n        {\n            [1] = 147362, -- Counter Shot (Beast Mastery)\n            [2] = 147362, -- Counter Shot (Marksmanship)\n            [3] = 187707 -- Muzzle (Survival)\n        },\n        \n        -- Rogue\n        [4] =\n        {\n            [1] = 1766, -- Kick (Assassination)\n            [2] = 1766, -- Kick (Outlaw)\n            [3] = 1766 -- Kick (Subtlety)\n        },\n        \n        -- Priest\n        [5] =\n        {\n            [1] = nil,\n            [2] = nil,\n            [3] = 15487 -- Silence (Shadow)\n        },\n        \n        -- Death Knight\n        [6] =\n        {\n            [1] = 47528, -- Mind Freeze (Blood)\n            [2] = 47528, -- Mind Freeze (Frost)\n            [3] = 47528 -- Mind Freeze (Unholy)\n        },\n        \n        -- Shaman\n        [7] =\n        {\n            [1] = 57994, -- Wind Shear (Elemental)\n            [2] = 57994, -- Wind Shear (Enhancement)\n            [3] = 57994 -- Wind Shear (Restoration)\n        },\n        \n        -- Mage\n        [8] =\n        {\n            [1] = 2139, -- Counterspell (Arcane)\n            [2] = 2139, -- Counterspell (Fire)\n            [3] = 2139 -- Counterspell (Frost)\n        },\n        \n        -- [9] Warlock interrupt depends on pet being used.\n        --  Code for warlock contained in Cast Start hook.\n        \n        -- Monk\n        [10] =\n        {\n            [1] = 116705, -- Spear Hand Strike (Brewmaster)\n            [2] = 116705, -- Spear Hand Strike (Mistweaver)\n            [3] = 116705 -- Spear Hand Strike (Windwalker)\n        },\n        \n        -- Druid\n        [11] =\n        {\n            [1] = 78675, -- Solar Beam (Balance)\n            [2] = 106839, -- Skull Bash (Feral)\n            [3] = 106839, -- Skull Bash (Guardian)\n            [4] = 106839 -- Skull Bash (Restoration)\n        },\n        \n        -- Demon Hunter\n        [12] =\n        {\n            [1] = 183752, -- Disrupt (Havoc)\n            [2] = 183752 -- Disrupt (Vengeance)\n        },\n        \n        -- Evoker\n        [13] =\n        {\n            [1] = 351338, -- Quell (Devastation)\n            [2] = 351338 -- Quell (Preservation)\n        }\n    }\n    \nend\n\n\n",
["Constructor"] = "function(self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    if not unitFrame.castBar.tick then\n        unitFrame.castBar.tick = unitFrame.castBar:CreateTexture (nil, \"overlay\")\n        unitFrame.castBar.tick:SetDrawLayer (\"overlay\", 4)\n        unitFrame.castBar.tick:SetBlendMode (\"DISABLE\")\n        unitFrame.castBar.tick:SetHeight(unitFrame.castBar:GetHeight())\n    end\n    unitFrame.castBar.tick:SetTexture(Plater.SparkTextures[8])\n    unitFrame.castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n    unitFrame.castBar.tick:SetWidth(2)\n    \n    \n    function envTable.EnhancedCastBar(unitId, castBar)\n        castBar.tick:Hide()\n        \n        if castBar.IsInterrupted then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        \n        if UnitExists(targetUnitId) then\n            local targetName = UnitName(targetUnitId)\n            local spellID = castBar.SpellID\n            if BigWigsAPI then\n                spellName =  BigWigsAPI.GetSpellRename(spellID) or castBar.spellName\n            else\n                spellName = castBar.spellName\n            end\n            local inParty = UnitInParty(\"player\")\n            local inRaid = UnitInRaid(\"player\")\n            castBar.Text:SetText(spellName)\n            \n            -- Cast is targetting a specific unit\n            if targetName then\n                \n                local isTargettingMe\n                local targetNameByColor\n                \n                -- Determine if the cast is targetting the player character\n                if targetName == UnitName(\"player\") then\n                    isTargettingMe = true\n                else\n                    isTargettingMe = false\n                end\n                \n                -- Nameplate flash options\n                if isTargettingMe then\n                    if envTable.optionsNameplateFlash then\n                        \n                        -- Default value of true since it is turned on in the options\n                        local showNameplateFlash = true\n                        \n                        -- Hide flash when not in a group\n                        if envTable.optionsHideFlashSolo then\n                            if not inParty and not inRaid then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Hide flash when player is a tank specialization\n                        if envTable.optionsHideFlashAsTank then\n                            if GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Show nameplate flash if conditions met\n                        if showNameplateFlash then\n                            Plater.FlashNameplateBody (unitFrame)\n                        end\n                    end\n                end\n                \n                \n                -- Target name in cast bar options\n                if envTable.optionsShowTargetName then\n                    \n                    -- Change character name to \"Me\" if turned on in options\n                    if envTable.optionsReplaceMyName then\n                        if isTargettingMe then\n                            targetName = \"Me\"\n                        end\n                    end\n                    \n                    -- Color the target name based on the targets class color\n                    targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                    \n                    -- Shrink the name of the cast bar text if necessary (based on options)\n                    local castBarWidth = castBar:GetWidth()\n                    DetailsFramework:TruncateText (castBar.Text, castBarWidth * (envTable.optionsCastNameSize / 100))\n                    \n                    -- Update the cast bar text\n                    local currentText = castBar.Text:GetText()\n                    if currentText ~= nil and currentText ~= '' then\n                        local castText = currentText .. \" - \" ..  targetNameByColor\n                        \n                        -- Hide self target name when solo\n                        if envTable.optionsHideNameSolo then\n                            if not inParty and not inRaid then\n                                if isTargettingMe then\n                                    castText = currentText\n                                end\n                            end\n                        end\n                        castBar.Text:SetText(castText)\n                        DetailsFramework:TruncateText (castBar.Text, castBarWidth)\n                    end\n                end\n            end\n            \n            \n            -- Interrupt bar color options\n            if envTable.optionsShowInterruptColor then\n                local canInterrupt = castBar.canInterrupt\n                local castEndTime = castBar.spellEndTime\n                local interruptReadyTime = 0\n                local start\n                local duration\n                local playerIsWarlock\n                \n                if envTable.interruptID ~= nil then\n                    local cd = C_Spell.GetSpellCooldown(envTable.interruptID)  --local\n                    start, duration  =  cd.startTime, cd.duration\n                    interruptReadyTime = start + duration\n                end\n                \n                if canInterrupt then\n                    if envTable.interruptID ~= nil then\n                        \n                        -- Is the player a warlock?\n                        if envTable.class == 9 then\n                            playerIsWarlock = true\n                        else\n                            playerIsWarlock = false\n                        end\n                        \n                        -- Check to see if the spell is known/talented\n                        if IsSpellKnown(envTable.interruptID, playerIsWarlock) then\n                            if interruptReadyTime == 0 then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptAvailable)\n                            elseif envTable.optionsShowSecondaryInterrupts and envTable.class == 2 and IsSpellKnown(31935) and not envTable.isSpellOnCooldown_IgnoreGCD(31935) then\n                                -- Paladin Avenger's Shield\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            elseif interruptReadyTime < (castEndTime - 0.25) then\n                                castBar.tick:Show()\n                                castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n                                local tickLocation = (start + duration - castBar.spellStartTime) / castBar.maxValue  -- castBar.spellStartTime + 0.25\n                                if castBar.channeling then\n                                    tickLocation = 1 - tickLocation\n                                end\n                                castBar.tick:SetPoint (\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                                \n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptSoon)\n                            elseif interruptReadyTime >= (castEndTime - 0.25) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                            end\n                        else\n                            Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                        end\n                    end\n                else\n                    Plater.SetCastBarColor(unitFrame, envTable.optionsColorProtected)\n                end\n                \n            end\n            \n        end\n    end\n    \n    \n    -- Checks to see if Felgaurd or Felhunter interrupt skill is known and assigns if found\n    function envTable.GetWarlockInterrupt()\n        if IsSpellKnown(89766, true) then\n            -- Felguard: Axe Toss\n            return 89766\n        elseif IsSpellKnown(19647, true) then\n            -- Felhunter: Spell Lock\n            return 19647\n        elseif C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnown(132409, true) then\n            -- Check for Grimoire of Sacrifice\n            return 132409\n        else\n            -- Otherwise no interrupt available    \n            return nil\n        end\n    end\n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    function envTable.isSpellOnCooldown_IgnoreGCD(spellID)\n        local GCD=C_Spell.GetSpellCooldown(61304) -- GCD\n        local gcdSTART, gcdDUR = GCD.startTime, GCD.duration\n        local GCD_expirationTime = gcdSTART + gcdDUR\n        local info = C_Spell.GetSpellCooldown(spellID)\n        local spellStart, spellDuration  = info.startTime, info.duration\n        local spellReadyTime = spellStart + spellDuration\n        if spellReadyTime <= GCD_expirationTime then\n            return false\n        else\n            return true\n        end\n    end\n    \nend",
},
["Time"] = 1753401350,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/L6ZlsbPEC/9",
["Icon"] = 429383,
["Enabled"] = true,
["Revision"] = 1349,
["semver"] = "1.2.3",
["Author"] = "Nimeshady-Zul'jin",
["Desc"] = "Shows who a cast is targeting in the cast bar as well as other configurable options.",
["Prio"] = 99,
["version"] = 9,
["PlaterCore"] = 1,
["Name"] = "Enhanced Enemy Castbar",
["Options"] = {
{
["Type"] = 5,
["Name"] = "CUSTOM CAST BAR COLORS",
["Value"] = "Feature - Custom cast bar coloring:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable custom colored enemy cast bars.",
["Value"] = true,
["Key"] = "showInterruptColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting the cast bar will change to the colors below based on the status of you being able to interrupt the cast.",
},
{
["Type"] = 4,
["Name"] = "Enable support for secondary interrupts: Avenger's Shield (Paladin), Spell Reflection (Warrior).",
["Value"] = true,
["Key"] = "showSecondaryInterrupts",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colors casts that can be reflected with Spell Reflection (Warrior) and interrupted with Avenger's Shield (Paladin).",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is available.",
["Value"] = {
0.10980392992496,
0.63921570777893,
0.1843137294054,
1,
},
["Key"] = "colorInterruptAvailable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is down but will be available before cast finishes.",
["Value"] = {
0.63921570777893,
0.61568629741669,
0.10980392992496,
1,
},
["Key"] = "colorInterruptSoon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt on cooldown but it will be available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is unavailable.",
["Value"] = {
0.61960786581039,
0.16862745583057,
0.28627452254295,
1,
},
["Key"] = "colorNoInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you do not have an interrupt available to interrupt the current cast",
},
{
["Type"] = 1,
["Name"] = "Color for secondary interrupts. (Avenger's Shield and Spell Reflection)",
["Value"] = {
0.10980392992496,
0.52156865596771,
0.63921570777893,
1,
},
["Key"] = "colorSecondaryInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast targeting you can be reflected with Spell Reflection or interrupted with Avenger's Shield. Only active when playing the appropriate class with the skill off cooldown.",
},
{
["Type"] = 1,
["Name"] = "Color for casts that are protected/un-interruptable.",
["Value"] = {
0.22352942824364,
0.22352942824364,
0.22352942824364,
1,
},
["Key"] = "colorProtected",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast can not be interrupted by a standard interrupt.",
},
{
["Type"] = 1,
["Name"] = "Color of interrupt available tick. (Hover for more info)",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Key"] = "colorTick",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "When your interrupt is currently down but will become available before the current cast completes a tick will appear in the cast bar showing you the exact position in the cast you will be able to interrupt the cast. You can customize the color of the tick using this setting.  YOU MUST /RELOAD YOUR UI AFTER CHANGING THIS COLOR.",
},
{
["Type"] = 5,
["Name"] = "Settings Target Name",
["Value"] = "Feature - Show name of target in the cast bar:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show the name of cast targets in the cast bar.",
["Value"] = true,
["Key"] = "showTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting a spell at a target, the targets name will appear in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Hide my name when not in a party.",
["Value"] = true,
["Key"] = "hideNameSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When you are not in a party or raid group casts targetting you will not display your name in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Show \"Me\" instead of my character name.",
["Value"] = true,
["Key"] = "replaceName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When targetted by casts, instead of showing your character name it will show \"Me\".",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "The relative size (in percentage) that a spell name will take up of the cast bar, not including the target name. Adjust this so that target names fit into the cast bar correctly based on the width and text size of your cast bar. If you find even after adjusting this setting that there is not enough space try decreasing your cast bar text size or making the cast bar wider.",
["Min"] = 30,
["Name"] = "Maximum length of a cast name in %. Hover for more info.",
["Value"] = 60,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castNameSize",
},
{
["Type"] = 5,
["Name"] = "Settings Border Flash",
["Value"] = "Feature - Flash nameplates when a spell targets you:",
["Key"] = "option8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Namplate Flash",
},
{
["Type"] = 4,
["Name"] = "Flash the nameplates of enemies that are casting a spell or ability targeting me.",
["Value"] = false,
["Key"] = "nameplateFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is targetting you with a cast, this option will flash the nameplate of that enemy to indicate that cast is targeting you.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when not in a party.",
["Value"] = true,
["Key"] = "hideNameplateFlashSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing solo.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when I'm playing a tank specialization.",
["Value"] = true,
["Key"] = "hideFlashAsTank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing as a tank specialization.",
},
},
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --ensure reload updates existing\n    modTable.updateExisting(unitFrame)\nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    \n    -- settings:\n    local formatAuraTimers = modTable.config.formatAuraTimers\n    local formatBuffSpecialTimers = modTable.config.formatBuffSpecialTimers\n    \n    \n    -- time formatting function: (can be adjusted)\n    Plater.FormatTimeNew = function (s)\n        if s < 5 then\n            return (\"%.1f\"):format(s)\n        elseif s < 60 then\n            return (\"%d\"):format(s)\n        elseif s < 3600 then\n            return (\"%d:%02d\"):format(s/60%60, s%60)\n        elseif s < 86400 then\n            return (\"%dh %02dm\"):format(s/(3600), s/60%60)\n        else\n            return (\"%dd %02dh\"):format(s/86400, (s /3600) - (floor(s/86400) * 24))\n        end\n    end\n    Plater.FormatTimeOrig = Plater.FormatTimeOrig or Plater.FormatTime\n    \n    local DF = _G[\"DetailsFramework\"]\n    local IconRowFunctions = DF.IconRowFunctions or DF.IconMixin\n    IconRowFunctions.FormatCooldownTimeOrig = IconRowFunctions.FormatCooldownTimeOrig or IconRowFunctions.FormatCooldownTime\n    \n    \n    -- exchange formatting:\n    function modTable.hookTimeFormat()\n        if formatAuraTimers then\n            Plater.FormatTime = Plater.FormatTimeNew\n        else\n            Plater.FormatTime = Plater.FormatTimeOrig\n        end\n        \n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                IconRowFunctions.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n        else\n            -- no buff special\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            end\n        end\n    end\n    \n    function modTable.updateExisting(unitFrame)\n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        else\n            \n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeOrig (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        end\n        \n    end\n    \n    \n    modTable.hookTimeFormat()\n    for _, plateFrame in ipairs (Plater.GetAllShownPlates()) do\n        modTable.updateExisting(plateFrame.unitFrame)\n    end\n    \nend",
["Player Logon"] = "function(modTable)\n    modTable.hookTimeFormat()\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1753401349,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/mULsbUUxJ/13",
["Icon"] = "INTERFACE\\ICONS\\Ability_BossMagistrix_TimeWarp2",
["Enabled"] = true,
["Revision"] = 251,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Overwrites the Plater time formatting to show second fractions.",
["Prio"] = 99,
["version"] = 13,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Format Aura Timers",
["Value"] = true,
["Key"] = "formatAuraTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Format Buff Special Timers",
["Value"] = true,
["Key"] = "formatBuffSpecialTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["LastHookEdited"] = "",
["Name"] = "Detailed Time Format",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsVisible()) then\n                if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n                end \n            end\n            \n        end\n    end\n    \n    \n    for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        if auraIcon:IsShown() then\n            if (auraIcon:IsVisible()) then\n                local remainingTime = (auraIcon.startTime + auraIcon.duration - GetTime())\n                if (remainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.okay)\n                end\n            end\n        end\n    end\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"#FF4040\",\n        okay = \"#FFFFFF\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 5.0,\n    }\n    \nend\n\n\n",
},
["Time"] = 1753401351,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/CjOSTakvH/1",
["Icon"] = "Interface\\Timer\\Challenges-Logo",
["Enabled"] = true,
["Revision"] = 125,
["semver"] = "1.0.0",
["Author"] = "Ditador-Azralon",
["Desc"] = "Change the color of the aura timer by it's time left",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Paint Aura Timers",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = .5 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Time"] = 1741738545,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 134400,
["Enabled"] = true,
["Revision"] = 202,
["semver"] = "",
["Author"] = "????????-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Debuff Border",
},
{
["OptionsValues"] = {
["showBigIcon"] = false,
["SpellIconXOffset"] = 0,
["ReplaceDefaultBorder"] = false,
["TargetBorderSize"] = 1.5,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Destructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar.border then unitFrame.healthBar.border:Hide() end\n    if unitFrame.healthBar.targetBorder then unitFrame.healthBar.targetBorder:Hide() end\n    if unitFrame.castBar.border then unitFrame.castBar.border:Hide() end\n    if unitFrame.castBar.Icon then unitFrame.castBar.Icon:Hide() end\n    if unitFrame.castBar.IconBorder then unitFrame.castBar.IconBorder:Hide() end\n    if unitFrame.castBar.BorderShield then unitFrame.castBar.BorderShield:Hide() end\nend",
["Initialization"] = "function (modTable)\n    \n    function modTable.UpdateIconPosition(unitFrame, envTable, modTable)\n        local castBar = unitFrame.castBar\n        local icon = unitFrame.castBar.Icon\n        local shield = unitFrame.castBar.BorderShield\n        icon:Hide()\n        castBar.IconBorder:Hide()\n        if (modTable.config.ShowSpellIcon) then\n            icon:ClearAllPoints()\n            if (modTable.config.showBigIcon) then\n                icon:SetPoint(\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetPoint(\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            else\n                icon:SetPoint(\"topright\", unitFrame.castBar, \"topleft\", modTable.config.SpellIconXOffset, envTable.IconSizeOffset)\n                icon:SetPoint(\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            end\n            icon:Show()\n            if modTable.config.SpellIconBorder then\n                castBar.IconBorder:SetVertexColor(\n                    DetailsFramework:ParseColors(modTable.config.SpellIconBorderColor)\n                )\n                castBar.IconBorder:SetBorderSizes(\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize\n                )\n                castBar.IconBorder:UpdateSizes()\n                castBar.IconBorder:Show()\n            end\n        end\n        \n        if modTable.config.CastBarBorder then\n            castBar.border:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.CastBarBorderColor)\n            )\n            castBar.border:SetBorderSizes(\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize\n            )\n            castBar.border:UpdateSizes()\n            castBar.border:Show()\n        else\n            castBar.border:Hide()\n        end\n        \n        if (modTable.config.ShowShieldIcon and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            shield:SetSize(modTable.config.ShieldIconWidth, modTable.config.ShieldIconHeight)\n            shield:ClearAllPoints()\n            shield:SetPoint( \"center\", castBar, \"left\", modTable.config.ShieldIconXOffset, modTable.config.ShieldIconYOffset )\n        else\n            shield:Hide()\n        end\n    end\n    \n    function modTable.UpdateBorder(unitFrame, envTable, modTable, casting)\n        local healthBar = unitFrame.healthBar\n        local castBar = unitFrame.castBar\n        local targetBorder = unitFrame.healthBar.targetBorder\n        local defaultBorder = unitFrame.healthBar.border\n        \n        targetBorder:Hide()\n        defaultBorder:Hide()\n        \n        if modTable.config.ReplaceDefaultBorder then\n            targetBorder = unitFrame.healthBar.border\n            targetBorder:SetFrameStrata(\"HIGH\")\n            targetBorder:Show()\n        else\n            unitFrame.healthBar.border:Show()\n            if unitFrame.IsTarget then\n                targetBorder:Show()\n            end\n        end\n        \n        if casting==true then\n            if modTable.config.ShowSpellIcon then\n                targetBorder:ClearAllPoints()\n                if modTable.config.ExpandTargetBorder then\n                    if modTable.config.showBigIcon then\n                        targetBorder:SetPoint(\"topleft\", castBar.Icon, \"topleft\", 0, 0)\n                    else\n                        targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                    end\n                else\n                    targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                end\n                if modTable.config.ExpandTargetBorder then\n                    targetBorder:SetPoint(\"bottomright\", castBar, \"bottomright\", 0, 0)\n                else\n                    targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0)\n                end\n            else\n                targetBorder:ClearAllPoints()\n                targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0)\n            end\n            \n        elseif casting==false then\n            targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n            targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0) \n        end\n        \n        if unitFrame.IsTarget then\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.TargetBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize\n            )\n            targetBorder:UpdateSizes()\n        else\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(envTable.DefaultBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize\n            )\n            targetBorder:UpdateSizes()\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    modTable.UpdateBorder (unitFrame, envTable, modTable, true)\nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    self.ThrottleUpdate = -1\nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- Any settings changed here will require you to disable this plater mod,\n    -- then re-enable it by checking the box in the list on the left hand side of the window\n    \n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 0\n    \n    -- Settings for the shield for non interruptible casts\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    \n    envTable.DefaultBorderSize  = Plater.db.profile.border_thickness\n    envTable.DefaultBorderColor = Plater.db.profile.border_color\n    \n    -- Create a new health bar target border\n    if not unitFrame.healthBar.targetBorder then\n        unitFrame.healthBar.targetBorder = CreateFrame(\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.healthBar.targetBorder:Hide()\n    end\n    \n    -- Create a frame for the spell icon border\n    if not unitFrame.castBar.IconOverlayFrame then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.IconBorder:SetIgnoreParentScale(false)\n    end\n    \n    -- Create a frame for the cast bar border\n    if not unitFrame.castBar.border then\n        unitFrame.castBar.border = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.border:SetIgnoreParentScale(false)\n    end\n    \n    -- Hook into when the cast bar hides so we can update the border with casting set to false\n    -- Note: This hook needs to be the last thing in the constructor as it may immediately call\n    -- UpdateBorder and we need to make sure all of the frames are created first\n    if not unitFrame.castBar.borderChangeHooked then\n        hooksecurefunc(\n            unitFrame.castBar, \n            \"Hide\",\n            function()\n                modTable.UpdateBorder(unitFrame, envTable, modTable, false)\n            end\n        )\n        unitFrame.castBar.borderChangeHooked = true\n    end\nend",
},
["Time"] = 1754339130,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 1651,
["semver"] = "",
["Author"] = "Vahra-Tichondrius",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate and extend the border around icon and cast bar.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Border Settings",
["Value"] = "Border Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Target Border Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "TargetBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of the targeted nameplate",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Target Border Size",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "TargetBorderSize",
},
{
["Type"] = 4,
["Name"] = "Expand Target Border",
["Value"] = true,
["Key"] = "ExpandTargetBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Expands the target border around the cast icon and cast bar",
},
{
["Type"] = 4,
["Name"] = "Replace Default Border (/reload)",
["Value"] = true,
["Key"] = "ReplaceDefaultBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Replace the default border instead of creating a new one. You may have to /reload when changing this option",
},
{
["Type"] = 5,
["Name"] = "Cast Bar Settings",
["Value"] = "Cast Bar Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "Note, to get this to look right you may have",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "to update the Y offset of the cast bar",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "under Plater's \"Enemy Npc\" settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Border",
["Value"] = true,
["Key"] = "CastBarBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show a border around the enemy cast bar",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the enemy cast bar",
["Min"] = 0,
["Name"] = "Cast Bar Border Size",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "CastBarBorderSize",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "CastBarBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of enemy cast bar",
},
{
["Type"] = 5,
["Name"] = "Cast Icon Settings",
["Value"] = "Cast Icon Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Spell Icon",
["Value"] = true,
["Key"] = "ShowSpellIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show the spell icon of the targets cast",
},
{
["Type"] = 4,
["Name"] = "Show Big Icon",
["Value"] = false,
["Key"] = "showBigIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Spell Icon Border",
["Value"] = true,
["Key"] = "SpellIconBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should Show a border around the spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Spell Icon Border Size",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "SpellIconBorderSize",
},
{
["Type"] = 1,
["Name"] = "Spell Icon Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "SpellIconBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of target's spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X Offset of the Spell Icon",
["Min"] = -10,
["Name"] = "Spell Icon X Offset",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "SpellIconXOffset",
},
{
["Type"] = 5,
["Name"] = "Shield Icon Settings",
["Value"] = "Shield Icon Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Shield Icon",
["Value"] = false,
["Key"] = "ShowShieldIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show a shield icon next to the cast bar for uninterruptable spells",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon X Offset",
["Value"] = -4.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconXOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The Y offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon Y Offset",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconYOffset",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The width of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Width",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconWidth",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The height of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Height",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconHeight",
},
},
["LastHookEdited"] = "",
["Name"] = "Target Border",
},
{
["OptionsValues"] = {
["colour_names"] = false,
["show_elite"] = false,
["show_elite_text"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Initialization"] = "function(modTable)\n    \n    -- used for nameColouring\n    -- AARRGGBB\n    local markerToHex = {\n        [1] = \"FFEAEA0D\", -- Yellow 5 Point Star\n        [2] = \"FFEAB10D\", -- Orange Circle\n        [3] = \"FFCD00FF\", -- Purple Diamond\n        [4] = \"FF06D425\", -- Green Triangle\n        [5] = \"FFB3E3D8\", -- Light Blue Moon\n        [6] = \"FF0CD2EA\", -- Blue Square\n        [7] = \"FFD6210B\", -- Red Cross\n        [8] = \"FFFFFFFF\", -- White Skull\n    }\n    \n    local eliteToHex = {\n        [1] = \"FFFFCC00\", -- Elite\n        [2] = \"FFCCCCCC\", -- Rare\n        [3] = \"FFFF8040\", -- Rare Elite\n    }\n    \n    -- Makes it so you take their first name e.g Jessie Howlis -> Jessie\n    local nameBlacklist = {\n        [\"the\"] = true,\n        [\"of\"] = true,\n        [\"Tentacle\"] = true,\n        [\"Apprentice\"] = true,\n        [\"Denizen\"] = true,\n        [\"Emissary\"] = true,\n        [\"Howlis\"] = true,\n        [\"Terror\"] = true,\n        [\"Totem\"] = true,\n        [\"Waycrest\"] = true,\n        [\"Aspect\"] = true\n    }\n    \n    \n    -- @unitId  unitID for mob e.g nameplate1\n    function modTable.renamer(unitFrame, unitId)\n        \n        if not (unitId and unitFrame) then\n            return\n        end\n        \n        local name = unitFrame.namePlateUnitName or UnitName(unitId) or \"\"\n        \n        -- 1) shorten\n        if modTable.config[\"short_names\"] and not unitFrame.unitName.isRenamed then\n            local unitName\n            local a, b, c, d, e, f = strsplit(' ', name, 5)\n            if nameBlacklist[b] then\n                unitName = a or b or c or d or e or f\n            else\n                unitName = f or e or d or c or b or a\n            end\n            name = unitName or name\n        end -- if short_names\n        \n        \n        -- 2) Coloring\n        if modTable.config[\"colour_names\"] then\n            local marker = GetRaidTargetIndex(unitId)\n            if marker then\n                local color = markerToHex[marker or 8]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        -- 3) Rare / Elite Addition\n        if modTable.config[\"show_elite\"] then\n            local eliteType = UnitClassification(unitId)\n            if eliteType == \"elite\" then\n                local color = eliteToHex[1]\n                name = WrapTextInColorCode(name, color)\n            elseif eliteType == \"rare\" then\n                local color = eliteToHex[2]\n                name = WrapTextInColorCode(name, color)\n            elseif eliteType == \"rareelite\" then\n                local color = eliteToHex[3]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        if modTable.config[\"show_elite_text\"] then\n            local eliteType = UnitClassification(unitId)\n            if eliteType == \"elite\" and not IsInRaid() then\n                name = name .. \" [E]\"\n            elseif eliteType == \"rare\" and not IsInRaid() then\n                name = name .. \" [R]\"\n            elseif eliteType == \"rareelite\" and not IsInRaid() then\n                name = name .. \" [RE]\"\n            end\n        end\n        \n        -- 4) Apply\n        unitFrame.healthBar.unitName:SetText(name)\n    end -- envTable.namer\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend\n\n\n\n",
},
["Time"] = 1753401491,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 385,
["semver"] = "",
["Author"] = "Rhk-Tarren Mill",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Shorten Names",
["Value"] = true,
["Key"] = "short_names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Shortens NPC Names. eg.: \"Murkbrine Fishmancer\" -> \"Fishmancer\"",
},
{
["Type"] = 4,
["Name"] = "Colour by Raidmark",
["Value"] = true,
["Key"] = "colour_names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colours the Name by the assigned Raidmark. eg.: Triangle --> Green Name",
},
{
["Type"] = 4,
["Name"] = "Colour by Unit Status",
["Value"] = true,
["Key"] = "show_elite",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "show_elite_text",
["Value"] = true,
["Name"] = "Concatenate Name with Unit Status",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["LastHookEdited"] = "Initialization",
["Name"] = "Name Shortener",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function(self, unitId, unitFrame, envTable)\n    unitFrame.castBar.ScheduleToHide = function(self) self:Hide() end\nend",
},
["Time"] = 1753401352,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 97,
["semver"] = "",
["Author"] = "Avade-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Hide Interrupted",
},
{
["OptionsValues"] = {
["raidMarkerXOff"] = 1,
["unitNameXOffRaidMarker"] = 3,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.updatePosition = function(unitFrame)\n        local unitNameXOff = modTable.config.unitNameXOff -- Unit Name X Offset\n        local unitNameXOffRaidMarker = modTable.config.unitNameXOffRaidMarker -- Unit Name X Offset with Raid Marker\n        local raidMarkerXOff = modTable.config.raidMarkerXOff\n        local hasRaidTarget = unitFrame.PlaterRaidTargetFrame.RaidTargetIcon:IsShown() and unitFrame.PlaterRaidTargetFrame\n        if hasRaidTarget then\n            unitFrame.PlaterRaidTargetFrame:ClearAllPoints()\n            unitFrame.PlaterRaidTargetFrame:SetPoint(\"LEFT\", unitFrame.healthBar, \"LEFT\", raidMarkerXOff, 0)\n            unitFrame.PlaterRaidTargetFrame:SetSize(18, 18)\n            unitFrame.unitName:SetPoint(\"LEFT\", unitFrame.PlaterRaidTargetFrame, \"RIGHT\", unitNameXOffRaidMarker, 0)\n        else\n            unitFrame.unitName:ClearAllPoints()\n            unitFrame.unitName:SetPoint(\"LEFT\", unitFrame.healthBar, \"LEFT\", unitNameXOff, 0)\n        end\n    end\nend",
["Raid Target"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
},
["Time"] = 1754339088,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
["raid"] = true,
["none"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 458724,
["Enabled"] = true,
["Revision"] = 1176,
["semver"] = "",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "Aligns Raid Marker to the Left of the Unit Name.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset without Raid Marker",
["Min"] = -99,
["Name"] = "Unit Name (No Raid Marker)",
["Value"] = 1,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "unitNameXOff",
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset with Raid Marker",
["Min"] = -99,
["Name"] = "Unit Name (Raid Marker)",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "unitNameXOffRaidMarker",
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset for Raid Marker",
["Min"] = -99,
["Name"] = "Raid Marker",
["Value"] = 1,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "raidMarkerXOff",
},
},
["LastHookEdited"] = "",
["Name"] = "Target Marker",
},
{
["OptionsValues"] = {
["oneColor"] = {
0,
1,
0.01176470704376698,
1,
},
["twoColor"] = {
0,
0.501960813999176,
1,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x6490c26f17d91913",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.SetNameplateColors(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    --IDs of dots, you can change them to easier adjust to different classes, change only numbers\n    modTable.doubleDebuffs = {\n        {34914, 335467}, --Vampiric Touch + Devouring Plague\n        {188389, 334168}, --Flame Shock + Lashing Flames\n        {164815, 164812}, --Sunfire + Moonfire\n        {703, 1943}, --Garrote + Rupture\n        {980, 146739}, --Agony + Corruption\n        {980, 445474}, --Agony + Wither\n    }\n    \n    modTable.singleDebuffs = {\n        34914, --Vampiric Touch\n        589,--Shadow Word: Pain\n        20421, --Purge the Wicked\n        188389, --Flame Shock\n        157736, --Immolate\n        217200, --Barbed Shot\n        228287, --Mark of the Crane\n        445474, --Wither\n        164815, --Sunfire\n        164812, --Moonfire\n        155722, --Rake\n        980, --Agony\n        146739, --Corruption\n        460553, --Doom\n    }\n    \n    modTable.rOption = modTable.config.resetOption\n    \n    modTable.matchMultipleBuffs = {}\n    \n    for _, v in ipairs (modTable.doubleDebuffs) do\n        local buff = {\n            auras = v,\n            nameplateColor = modTable.config.twoColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\n    \n    for _, v in ipairs (modTable.singleDebuffs) do\n        local buff = {\n            auras = {v},\n            nameplateColor = modTable.config.oneColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\nend\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(modTable.matchMultipleBuffs) do      \n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, v.nameplateColor)\n                \n                return\n            else\n                -- reset colour\n                if (modTable.rOption) then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, 1,1,1, 1)\n                end\n                \n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors(unitFrame)\n        local colored = envTable.matchMultiple(unitFrame)\n    end\n    \nend",
},
["Time"] = 1753401349,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/-OwVE8C1v/1",
["Enabled"] = true,
["Revision"] = 1541,
["semver"] = "1.0.0",
["Author"] = "Megabelly-Silvermoon",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Debuff Name Color Change",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "label1",
["Value"] = "Settings:",
["Name"] = "Settings:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "oneColor",
["Value"] = {
1,
0.50196081399918,
0,
1,
},
["Name"] = "One Debuff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with 1 debuff",
},
{
["Type"] = 1,
["Key"] = "twoColor",
["Value"] = {
0.13333334028721,
0.54509806632996,
0.13333334028721,
1,
},
["Name"] = "Two Debuffs",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with a set of 2 debuffs",
},
{
["Type"] = 5,
["Key"] = "label4",
["Value"] = "Miscellaneous:",
["Name"] = "Miscellaneous:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetOption",
["Value"] = true,
["Name"] = "Reset colour after expire",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Resets colour after debuf expires. Toggling on will prevent sometimes lingering colour on nameplates/borders. Toggling off makes mod compatible with other nameplate colouring mods.",
},
},
["HooksTemp"] = {
},
["version"] = 1,
},
{
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1756369267,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 30,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 99,
["Name"] = "Force Threat Color",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
},
},
["auras_per_row_auto"] = false,
["cast_statusbar_fadeout_time"] = 0.49999997019768,
["aura_stack_size"] = 12,
["extra_icon_caster_outline"] = "OUTLINE",
["auras_per_row_amount2"] = 5,
["disable_omnicc_on_auras"] = true,
["aura_height2"] = 26,
["bossmod_support_enabled"] = false,
["ghost_auras"] = {
["height"] = 28,
["auras"] = {
["WARRIOR"] = {
[5] = {
},
},
["WARLOCK"] = {
{
[980] = true,
[172] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
["width"] = 28,
},
["blizzard_nameplate_large_font_size"] = 12,
["cast_colors"] = {
[420907] = {
false,
"white",
"",
},
},
["pet_width_scale"] = 0.99999994039536,
["aura_border_colors"] = {
["enrage"] = {
0,
0,
0,
},
["steal_or_purge"] = {
nil,
0,
0,
},
["crowdcontrol"] = {
0,
0,
0,
},
["offensive"] = {
nil,
0,
0,
},
["is_show_all"] = {
0,
0,
0,
},
["defensive"] = {
0,
0,
0,
},
["is_buff"] = {
nil,
0,
0,
},
},
["quick_hide"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["script_auto_imported"] = {
["Aura - Is Cast Bar [P]"] = 1,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Heroic Leap [P]"] = 3,
["Fixate On You"] = 12,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - Shining Green [P]"] = 3,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Explosion Affix M+"] = 14,
["Cast - Important by Color [P]"] = 2,
["Fixate"] = 11,
["Cast - Very Important"] = 15,
["Cast - AoE Hit All [P]"] = 3,
["Cast - On Going Cast [P]"] = 2,
["Fixate by Unit Buff [P]"] = 2,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Stop Casting"] = 4,
["Cast - Heal Cut [P]"] = 3,
["Spiteful Affix"] = 3,
["Auto Set Skull"] = 11,
["Cast - Alert + Timer [P]"] = 4,
["Add - Non Elite Trash [P]"] = 4,
["Add - Warning [P]"] = 5,
["Cast - Glowing [P]"] = 10,
["Cast - Voidzone [P]"] = 2,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Add - Explode on Die [P]"] = 1,
["Countdown"] = 12,
["Cast - Shield Interrupt"] = 2,
["Cast - Quick Flash"] = 2,
["Unit - Show Energy"] = 11,
},
["target_highlight_color"] = {
1,
1,
},
["cast_statusbar_color_channeling"] = {
0.50196081399918,
0.50196081399918,
1,
1,
},
["extra_icon_anchor"] = {
["x"] = -14,
},
["extra_icon_wide_icon"] = false,
["cast_statusbar_spark_hideoninterrupt"] = false,
["extra_icon_stack_outline"] = "OUTLINE",
["range_check_alpha"] = 0.5,
["castbar_target_font"] = "Friz Quadrata TT",
["semver"] = "1.0.10",
["bossmod_aura_glow_expiring"] = true,
["aura_frame2_anchor"] = {
["y"] = 3,
["side"] = 1,
},
["use_name_translit"] = true,
["aura_alpha"] = 1,
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark8",
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["pet_height_scale"] = 0.99999994039536,
["aura_x_offset"] = 0,
["range_check_alpha_friendlies"] = 0.5,
["transparency_behavior"] = 2,
["spell_animations"] = false,
["ui_parent_scale_tune"] = 1,
["debuff_show_cc_border"] = {
0,
0,
0,
},
["aura_consolidate"] = true,
["health_statusbar_bgtexture"] = "Blizzard Raid Bar",
["ui_parent_target_strata"] = "BACKGROUND",
["extra_icon_width"] = 34,
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
nil,
0.80000007152557,
0.25098040699959,
},
["anothertank"] = {
1,
0.50196081399918,
0.25098040699959,
},
["aggro"] = {
0.25098040699959,
1,
0.25098040699959,
},
["nocombat"] = {
1,
0.25098040699959,
0.25098040699959,
},
["noaggro"] = {
nil,
0.25098040699959,
0.25098040699959,
},
["pulling"] = {
[3] = 0.25098040699959,
},
},
},
["health_statusbar_texture"] = "Blizzard Raid Bar",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Extra Border"] = 2,
["Cast Bar Icon Config"] = 2,
["Attacking Specific Unit"] = 2,
["Combo Points"] = 6,
["Hide Neutral Units"] = 1,
["Target Color"] = 3,
["Execute Range"] = 1,
["Aura Reorder"] = 3,
},
["cast_statusbar_color"] = {
0.50196081399918,
0.50196081399918,
1,
1,
},
["update_throttle"] = 0.5,
["minor_width_scale"] = 0.99999994039536,
["cast_statusbar_interrupt_anim"] = false,
["castbar_target_text_size"] = 12,
["extra_icon_show_defensive_border"] = {
0,
0,
0,
},
["aura_frame1_anchor"] = {
["y"] = 3,
["side"] = 7,
},
["tocversion"] = 110107,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["aura_timer_text_font"] = "Friz Quadrata TT",
["extra_icon_timer_font"] = "Friz Quadrata TT",
["not_affecting_combat_alpha"] = 1,
["cast_statusbar_bgcolor"] = {
0.13333334028721,
0.13333334028721,
0.13333334028721,
1,
},
["cast_statusbar_color_finished"] = {
0.50196081399918,
0.50196081399918,
1,
},
["extra_icon_stack_font"] = "Friz Quadrata TT",
["indicator_pet"] = false,
["aura_height"] = 26,
["non_targeted_alpha_enabled"] = true,
["indicator_spec"] = false,
["cast_statusbar_bgtexture"] = "Blizzard Raid Bar",
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["auras_per_row_amount"] = 5,
["indicator_raidmark_anchor"] = {
["side"] = 9,
["x"] = 0,
},
["cast_statusbar_spark_filloninterrupt"] = false,
["indicator_elite"] = false,
["extra_icon_stack_size"] = 12,
["color_override_colors"] = {
[3] = {
1,
0.25098040699959,
0.25098040699959,
},
[4] = {
1,
1,
0.25098040699959,
},
[5] = {
0.25098040699959,
1,
0.25098040699959,
},
},
["health_statusbar_bgcolor"] = {
0.13333334028721,
0.13333334028721,
0.13333334028721,
1,
},
["target_shady_alpha"] = 0.59999996423721,
["extra_icon_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["tap_denied_color"] = {
0.40000003576279,
0.40000003576279,
0.40000003576279,
},
["bossmod_icons_anchor"] = {
["y"] = 30,
["x"] = 0,
["side"] = 8,
},
["range_check_in_range_or_target_alpha_friendlies"] = 1,
["aura_grow_direction"] = 1,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "0",
["nameplateSelectedAlpha"] = "1",
["nameplateLargeTopInset"] = "0.049999997019768",
["nameplateShowPersonalCooldowns"] = "0",
["nameplateMotionSpeed"] = "0.024999998509884",
["nameplateShowFriendlyNPCs"] = "1",
["nameplateSelectedScale"] = "1",
["nameplateOverlapH"] = "0.79999995231628",
["nameplateShowFriendlyBuffs"] = "0",
["nameplateMinAlpha"] = "0.90135484",
["nameplateShowFriends"] = "0",
["nameplateMotion"] = "1",
["nameplateLargerScale"] = "1",
["nameplateMaxDistance"] = "40",
["nameplateOtherTopInset"] = "0.049999997019768",
["nameplatePlayerMaxDistance"] = "40",
["nameplateOccludedAlphaMult"] = "0.19999998807907",
["nameplateOverlapV"] = "1.6000000238419",
["nameplateShowEnemies"] = "0",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateShowSelf"] = "0",
},
["aura_breakline_space"] = 3,
["target_highlight"] = false,
["login_counter"] = 16236,
["extra_icon_caster_name"] = false,
["indicator_raidmark_scale"] = 0.99999994039536,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["ScriptType"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Time"] = 1743409167,
["url"] = "https://wago.io/Dq5DaC3b4/8",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["Icon"] = 135964,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Revision"] = 117,
["semver"] = "1.0.7",
["NpcNames"] = {
},
["Enabled"] = true,
["Author"] = "Duracell",
["Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["SpellIds"] = {
383840,
379256,
388084,
369031,
336499,
347097,
328921,
329636,
350857,
365381,
367573,
361934,
362020,
352016,
260189,
261265,
261266,
271590,
202455,
197422,
232156,
229489,
235308,
235089,
376705,
},
["Prio"] = 99,
["Name"] = "Invalid Target",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["version"] = 8,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
["indicatorAlpha"] = 0.75,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1743281252,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 162,
["semver"] = "",
["NpcNames"] = {
"214840",
},
["Enabled"] = true,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["SpellIds"] = {
},
["Prio"] = 99,
["Name"] = "Add - Health Markers [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1743281703,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Icon"] = 610472,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Revision"] = 94,
["semver"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["SpellIds"] = {
343470,
423228,
},
["Prio"] = 99,
["Name"] = "Aura is Shield [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1743409175,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["Revision"] = 1286,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.1,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 2,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 10,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["Enabled"] = true,
["Desc"] = "Abilities casted on the tank.",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Name"] = "Cast - Tankbuster [P]",
["PlaterCore"] = 1,
["Prio"] = 99,
["version"] = -1,
["semver"] = "",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    envTable.ShowTargeted = scriptTable.config.ShowTargeted\n    envTable.ShowRaidMarked = scriptTable.config.ShowRaidMarked\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend",
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 3\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1756369282,
["NpcNames"] = {
"245705",
"250417",
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    envTable.ShowTargeted = scriptTable.config.ShowTargeted\n    envTable.ShowRaidMarked = scriptTable.config.ShowRaidMarked\n    \nend",
["Icon"] = 644389,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Show if Targeted",
["Value"] = true,
["Key"] = "ShowTargeted",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Determines if the nameplate should be shown if you have the unit targeted",
},
{
["Type"] = 4,
["Name"] = "Show if Raid Marked",
["Value"] = true,
["Key"] = "ShowRaidMarked",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Determines if the nameplate should be shown if it has a raid mark applied",
},
},
["Enabled"] = true,
["Revision"] = 772,
["semver"] = "",
["version"] = -1,
["Prio"] = 99,
["Author"] = "Unhalted",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 3\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["Name"] = "Hide Nameplate by UnitID",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 3\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Desc"] = "Hide's nameplates based on the unit's name or npcID. Add the Unit Name or npcID as a trigger.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 3\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["url"] = "",
},
},
["profile_name"] = "FragUI",
["blizzard_nameplate_font_size"] = 10,
["aura_tracker"] = {
["debuff_banned"] = {
["355759"] = true,
["280494"] = true,
["359078"] = true,
["411717"] = true,
["324260"] = true,
["331934"] = true,
["368802"] = true,
["359168"] = true,
["345547"] = true,
["328287"] = true,
["420092"] = true,
["284678"] = true,
["391568"] = true,
["359180"] = true,
["317583"] = true,
["270569"] = true,
["375583"] = true,
["381743"] = true,
["356372"] = true,
["356181"] = true,
["392566"] = true,
["344748"] = true,
["411715"] = true,
["426783"] = true,
["428103"] = true,
["426534"] = true,
["376974"] = true,
["417419"] = true,
["269576"] = true,
["420054"] = true,
["392885"] = true,
["390155"] = true,
["390276"] = true,
["440339"] = true,
["115994"] = true,
["410790"] = true,
["283649"] = true,
["430184"] = true,
["340007"] = true,
["302564"] = true,
["425180"] = true,
["394453"] = true,
["403952"] = true,
["353773"] = true,
["403696"] = true,
["435476"] = true,
["379021"] = true,
["356329"] = true,
["372127"] = true,
["373305"] = true,
["394327"] = true,
["440340"] = true,
["333526"] = true,
["436582"] = true,
["329449"] = true,
["345801"] = true,
["345219"] = true,
["331016"] = true,
["390271"] = true,
["258883"] = true,
["367902"] = true,
["353793"] = true,
["418339"] = true,
},
["buff_banned"] = {
["206150"] = true,
["299450"] = true,
["333553"] = true,
["352854"] = true,
["411635"] = true,
["61574"] = true,
["61573"] = true,
},
["buff"] = {
412012,
412695,
},
["debuff_tracked"] = {
["389809"] = true,
["292451"] = true,
["312595"] = true,
},
["debuff"] = {
217200,
371472,
292626,
422683,
},
["buff_tracked"] = {
["166591"] = true,
["273432"] = true,
["342073"] = true,
["262092"] = true,
["303941"] = true,
["265160"] = true,
["209859"] = true,
["233210"] = true,
["312926"] = true,
},
},
["extra_icon_caster_font"] = "Friz Quadrata TT",
["indicator_rare"] = false,
["extra_icon_show_offensive_border"] = {
nil,
0,
0,
},
["aura_stack_font"] = "Friz Quadrata TT",
["cast_statusbar_color_interrupted"] = {
0.25098040699959,
1,
0.25098040699959,
},
["blizzard_nameplate_font"] = "Friz Quadrata TT",
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 12,
["focus_as_target_alpha"] = true,
["target_highlight_height"] = 25,
["number_region_first_run"] = true,
["target_shady_enabled"] = false,
["patch_version"] = 39,
["health_selection_overlay_alpha"] = 0,
["indicator_quest"] = false,
["version"] = 11,
["range_check_enabled"] = false,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["bossmod_cooldown_text_enabled"] = false,
["extra_icon_timer_outline"] = "OUTLINE",
["aura2_grow_direction"] = 3,
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.25098040699959,
0.25098040699959,
},
["noaggro"] = {
0.50196081399918,
0.50196081399918,
},
["pulling"] = {
nil,
0.25098040699959,
0.25098040699959,
},
},
},
["indicator_faction"] = false,
["cast_statusbar_texture"] = "Blizzard Raid Bar",
["first_run3"] = true,
["aura_stack_anchor"] = {
["y"] = 15,
["side"] = 5,
},
["extra_icon_height"] = 34,
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["extra_icon_show_purge_border"] = {
nil,
0,
0,
},
["aura_show_enrage"] = true,
["cast_statusbar_spark_width"] = 4,
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator7",
},
["AtrocityUI"] = {
["focus_as_target_alpha"] = true,
["extra_icon_use_blizzard_border_color"] = false,
["aura_sort"] = true,
["npcs_renamed"] = {
[59555] = "Haunting",
[214287] = "Bad Totem",
[190426] = "Decay Totem",
[214012] = "Dark",
[98521] = "Etheldrin",
[190340] = "Defender",
[164707] = "Purple Slime",
[192333] = "Alpha",
[88288] = "Dummy",
[230740] = "Shreddinator",
[190381] = "Rotburst",
[220401] = "Detector",
[87761] = "Dummy",
[98538] = "Velandras",
[227300] = "Big Spawn",
[229537] = "Emissary",
[199368] = "Big Crystal",
[184319] = "Custodian",
[176523] = "Painsmith",
[165010] = "Purple Slime",
[197219] = "Big Lasher",
[88967] = "Dummy",
[216340] = "Sentry",
[153285] = "Dummy",
[207796] = "Burning",
[144298] = "Mk III",
[198047] = "Tempest",
[173044] = "Stitcher",
[114627] = "Terror",
[204560] = "Incorporeal",
[88314] = "Dummy",
[151657] = "Bomb",
[214350] = "Turned",
[87318] = "Dummy",
[197985] = "Flame",
[179733] = "Fish Stick",
[174843] = "Maitre D",
[114632] = "Attendant",
[194897] = "Stormsurge Totem",
[127019] = "Dummy",
},
["blizzard_nameplate_large_font"] = "Expressway",
["saved_cvars_last_change"] = {
["ShowClassColorInNameplate"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOverlapV"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["ShowNamePlateLoseAggroFlash"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["SoftTargetIconGameObject"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["NamePlateClassificationScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyTotems"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplatePersonalHideDelaySeconds"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowDebuffsOnFriendly"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplatePersonalShowInCombat"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyBuffs"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateResourceOnTarget"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["clampTargetNameplateToScreen"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowAll"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMaxDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyMinions"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelfScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateTargetBehindMaxDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["SoftTargetInteract"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemies"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["NamePlateVerticalScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelectedAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowSelf"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowPersonalCooldowns"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelfTopInset"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMotionSpeed"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateGlobalScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemyMinions"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemyPets"] = "Interface/AddOns/Plater/Plater.lua:4140",
["nameplateShowFriendlyNPCs"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelectedScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemyMinus"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinAlphaDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyPets"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriends"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateTargetRadialPosition"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOtherTopInset"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["NamePlateHorizontalScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelfBottomInset"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemyTotems"] = "Interface/AddOns/Plater/Plater.lua:4140",
["nameplateShowFriendlyGuardians"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelfAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowOnlyNames"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateLargeTopInset"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplatePersonalShowAlways"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOverlapH"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
},
["aura_cache_by_name"] = {
["ultimate form"] = {
323095,
323524,
},
["insidious chill"] = {
391566,
391568,
},
["fear"] = {
5782,
12096,
12542,
22678,
26070,
26580,
26661,
27641,
27990,
29168,
29321,
30002,
30530,
30584,
30615,
31358,
31970,
32241,
33547,
33924,
34259,
38154,
38595,
38660,
39119,
39176,
39210,
39415,
41150,
46561,
51240,
59669,
65809,
68950,
70171,
81442,
83613,
113712,
115186,
117573,
118699,
125204,
128098,
130616,
130940,
134938,
142884,
144062,
173093,
182806,
204730,
205398,
214304,
220540,
221424,
223170,
240136,
242084,
242739,
245902,
246277,
246307,
248028,
251419,
259874,
259995,
266918,
287685,
287687,
288545,
331741,
342914,
344887,
},
["exsanguinated"] = {
294100,
328897,
356372,
},
["celestial alignment"] = {
173562,
194223,
},
["flame dominance"] = {
374881,
396056,
396062,
396105,
396106,
},
["cloak of shadows"] = {
31224,
39666,
65961,
81549,
178055,
196518,
248773,
283106,
283108,
333920,
},
["echoing void"] = {
307232,
307236,
317014,
317020,
317022,
317029,
318280,
318485,
318486,
373281,
373304,
373305,
},
["greater fade"] = {
213602,
},
["blessing of freedom"] = {
1044,
234878,
262618,
299256,
305395,
},
["ice barrier"] = {
11426,
33245,
69787,
198094,
201565,
240074,
262251,
264458,
267504,
284882,
},
["bulwark of maldraxxus"] = {
336449,
336450,
336451,
},
["aspect of the turtle"] = {
186265,
189949,
210761,
},
["concentrated flame"] = {
295368,
295373,
295374,
295375,
295376,
295377,
295378,
295379,
295380,
295384,
299349,
299353,
302564,
},
["frost dominance"] = {
374916,
396072,
396074,
396108,
396109,
},
["chaos brand"] = {
1490,
255260,
281242,
},
["all-consuming spite"] = {
343553,
},
["bursting with pride"] = {
340873,
342332,
},
["entangling roots"] = {
339,
11922,
12747,
20654,
20699,
21331,
22127,
22415,
22800,
24648,
26071,
28858,
31287,
32173,
33844,
37823,
40363,
57095,
65857,
66070,
66967,
96633,
101155,
105143,
132743,
149065,
168248,
170855,
173089,
177606,
177607,
186456,
196216,
201192,
201589,
233873,
235963,
247564,
272681,
278176,
288581,
311634,
311761,
330873,
343238,
},
["guardian spirit"] = {
47788,
48153,
97983,
122845,
255312,
289623,
289626,
},
["drain soul"] = {
32862,
35839,
60452,
74402,
79094,
129562,
136378,
139420,
161718,
171893,
181965,
182065,
185181,
190711,
197801,
198590,
205292,
209200,
209264,
231853,
242938,
251528,
328785,
346562,
},
["divine protection"] = {
498,
13007,
27778,
27779,
138250,
149150,
174967,
174968,
174987,
288292,
288294,
},
["hungering void"] = {
339426,
339958,
339969,
339980,
345218,
345219,
},
["power word: shield"] = {
17,
11647,
11835,
11974,
17139,
20697,
22187,
27607,
29408,
32595,
35944,
36052,
41373,
44175,
44291,
46193,
66099,
71548,
71780,
83842,
84039,
102409,
113734,
122808,
123258,
127399,
135313,
136100,
165718,
211558,
226076,
248441,
284471,
318158,
344426,
},
["defensive stance"] = {
7164,
41101,
53790,
143593,
145044,
146127,
147925,
164363,
193580,
197690,
212520,
219484,
238245,
},
["spell reflection"] = {
9943,
10074,
21118,
23920,
31533,
31534,
31554,
33961,
34783,
35399,
36096,
37885,
38331,
38592,
38599,
43443,
47981,
57643,
146120,
146122,
147923,
169339,
186704,
186705,
186706,
224740,
329267,
335255,
},
["guessing game"] = {
321471,
336499,
},
["alter time"] = {
108978,
110909,
127140,
342245,
342246,
342247,
347402,
},
["ancient flame"] = {
144691,
144695,
144699,
295365,
295367,
295369,
295372,
295381,
299348,
299350,
303380,
369990,
375583,
},
["blessing of sacrifice"] = {
6940,
199448,
200327,
},
["scouring touch"] = {
356329,
},
["pistol shot"] = {
185763,
207820,
214779,
223933,
240073,
255966,
267241,
267452,
268229,
274253,
275000,
285167,
294934,
},
["morbid fixation"] = {
338504,
338606,
338610,
343555,
343556,
343558,
},
["enveloping mist"] = {
124682,
209193,
212414,
227345,
231605,
274062,
317602,
344008,
344240,
},
["coordinated assault"] = {
266779,
},
["selfless healer"] = {
85804,
114250,
128863,
216777,
},
["eternal torment"] = {
292926,
295777,
318449,
318450,
318451,
318464,
350075,
355790,
358962,
},
["effusive anima accelerator"] = {
352188,
353248,
353349,
360277,
},
["dampen harm"] = {
122278,
123715,
175395,
},
["dream delver"] = {
352786,
353353,
353354,
},
["haunted urn"] = {
228626,
348723,
},
["pillar of frost"] = {
51271,
167171,
281214,
316849,
},
["arcane intellect"] = {
1459,
13326,
36880,
45525,
129171,
266499,
367803,
},
["spiritwalker's grace"] = {
79206,
},
["dark soul: instability"] = {
113858,
},
["weapons of order"] = {
310454,
311054,
311075,
311123,
312106,
312951,
314473,
},
["astral shift"] = {
74312,
108271,
263786,
292158,
343196,
},
["divine favor"] = {
210294,
210303,
},
["spiteful"] = {
338510,
},
["touch of karma"] = {
122470,
124280,
125174,
},
["boneshatter shield"] = {
343470,
344423,
},
["ritual of desecration"] = {
388104,
389029,
395680,
},
["icebound aegis"] = {
321368,
321370,
321754,
321755,
},
["mort'regar's echoes"] = {
333575,
},
["regrowth"] = {
8936,
16561,
20665,
22373,
22695,
27637,
28744,
34361,
39000,
39125,
66067,
69882,
72922,
72932,
84158,
97426,
98099,
102047,
165753,
173791,
176218,
187697,
188905,
224527,
265532,
283745,
292627,
292734,
311571,
326689,
338857,
},
["engorge"] = {
321402,
334653,
},
["divine shield"] = {
642,
13874,
29382,
33581,
40733,
41367,
54322,
63148,
66010,
67251,
71550,
133093,
164410,
169631,
173086,
179493,
183248,
184028,
186521,
189679,
210377,
218344,
228050,
228177,
263323,
264115,
283627,
317131,
335103,
343150,
},
["metamorphosis"] = {
36298,
37673,
37768,
37905,
131451,
138033,
138555,
162264,
173685,
181968,
184895,
187827,
189743,
191427,
191428,
192504,
193435,
193502,
193803,
194611,
195449,
196787,
200166,
201453,
202740,
223903,
224282,
225191,
225193,
225195,
225205,
225323,
225852,
225853,
226681,
247121,
260416,
268257,
268353,
320103,
320104,
320421,
320422,
320645,
321067,
321068,
321259,
321260,
321315,
321316,
321671,
321672,
333390,
333391,
335878,
343774,
343775,
343776,
343777,
343783,
343784,
},
["dispersion"] = {
47585,
65544,
79811,
120044,
156868,
164444,
165766,
173206,
201250,
201251,
201257,
322108,
},
["sanguine ichor"] = {
226489,
226510,
226512,
340299,
340324,
342073,
},
["crippling poison"] = {
3408,
3409,
25809,
30981,
44289,
115196,
132747,
132748,
169622,
169623,
283648,
283649,
},
["intervene"] = {
3411,
34784,
41198,
122506,
147833,
199114,
203388,
316531,
},
["fortifying brew"] = {
115203,
120954,
122498,
201318,
243435,
292300,
322960,
325208,
},
["thorns"] = {
467,
15438,
21335,
21337,
22128,
22351,
22696,
25640,
25777,
31271,
33907,
34343,
34663,
35361,
43420,
66068,
113966,
165771,
188652,
203728,
209334,
232559,
236696,
258985,
288273,
305496,
305497,
},
["sphere of suppression"] = {
294906,
294907,
294908,
294909,
294910,
294912,
294919,
294920,
294922,
298292,
298418,
298419,
298420,
300012,
300013,
},
["evasion"] = {
4086,
5277,
15087,
31379,
37683,
38541,
70190,
78826,
79853,
84122,
90958,
128919,
173103,
203868,
226364,
257742,
259331,
292230,
329977,
344363,
},
["atrophic poison"] = {
83609,
381637,
392388,
},
["congealed contagion"] = {
321268,
328175,
333737,
340271,
340273,
},
["icebound fortitude"] = {
48792,
58130,
58837,
66023,
292152,
},
["thunder clap"] = {
6343,
57832,
60019,
69304,
85216,
145046,
147683,
183543,
236389,
237917,
262538,
267578,
283929,
316143,
316414,
316490,
382590,
386028,
396719,
},
["enslaved"] = {
201089,
204831,
211680,
222424,
268192,
299156,
303622,
323961,
},
["deadly poison"] = {
2818,
2823,
3583,
10022,
13582,
21787,
21788,
32970,
32971,
34616,
34655,
34657,
36872,
38519,
38520,
41191,
41192,
41485,
43580,
43581,
56145,
56149,
59479,
59482,
63755,
63756,
67710,
67711,
72329,
82632,
82633,
96648,
113780,
129410,
130980,
130981,
132745,
132746,
145419,
145420,
145421,
177918,
177919,
177920,
289078,
314113,
373774,
377030,
377036,
394324,
394325,
},
["wracking pain"] = {
93720,
100865,
101221,
101257,
101258,
250096,
265148,
273045,
329181,
329183,
335372,
345010,
361689,
365126,
367670,
},
["blood barrier"] = {
262980,
269185,
269281,
322759,
322766,
322773,
323482,
329840,
329849,
329852,
},
["kevin's wrath"] = {
352520,
352528,
352533,
352534,
},
["enraged regeneration"] = {
184364,
316474,
},
["soulglow spectrometer"] = {
352186,
352938,
352939,
352940,
358379,
},
["barkskin"] = {
20655,
22812,
173558,
182872,
327993,
},
["seraphim"] = {
152262,
172320,
172321,
},
["sinful revelation"] = {
309623,
324260,
},
["blessing of protection"] = {
1022,
41450,
},
["predatory instincts"] = {
389808,
},
["abomination limb"] = {
315443,
323710,
323798,
323950,
335486,
335933,
340735,
},
["iron wire"] = {
196861,
256148,
},
["stygia tap"] = {
343224,
343613,
},
["pain suppression"] = {
33206,
69910,
122844,
129035,
},
["survival instincts"] = {
50322,
61336,
85842,
236156,
236157,
328767,
},
["holy ward"] = {
213610,
233473,
234682,
240521,
},
["avenging wrath"] = {
31884,
43430,
50837,
66011,
113127,
121163,
158405,
162762,
164397,
167917,
173312,
181043,
185413,
189292,
195272,
218346,
242743,
252856,
267511,
282113,
292266,
317872,
327979,
339044,
343029,
},
["destabilize"] = {
123059,
157657,
163466,
263902,
334688,
334695,
},
["bolster"] = {
209859,
280001,
},
["shadowfury"] = {
30283,
35373,
39082,
45270,
56733,
61463,
81441,
320132,
326475,
},
["blur"] = {
81216,
177566,
195450,
198589,
202818,
202819,
212800,
292222,
320407,
},
["mind flay"] = {
15407,
16568,
17165,
22919,
23953,
26044,
26143,
28310,
29407,
29570,
32417,
35507,
37276,
37330,
37621,
38243,
40842,
42396,
43512,
46562,
52586,
54339,
54805,
57779,
57941,
59367,
59974,
60006,
60472,
65488,
78751,
79541,
79711,
89032,
91134,
103024,
129033,
144293,
149984,
150886,
150893,
154125,
164445,
172670,
183324,
189873,
193473,
196508,
196509,
201520,
202894,
203037,
203313,
203375,
208697,
216513,
218510,
222075,
234696,
241934,
254123,
260182,
260304,
263117,
264892,
271649,
274019,
274032,
277358,
277521,
278311,
284414,
290402,
292974,
299301,
303566,
306391,
308172,
308884,
308885,
310552,
310555,
312526,
312679,
314187,
314188,
314592,
315949,
316835,
317490,
319027,
321330,
},
["diffuse magic"] = {
122783,
},
["spectral"] = {
290506,
344739,
346603,
},
["rallying cry"] = {
31115,
31732,
85527,
97462,
97463,
122507,
148868,
290046,
316825,
},
["life cocoon"] = {
116849,
165128,
209194,
},
["ironbark"] = {
102342,
197061,
},
["strength of the pack"] = {
64369,
64381,
171114,
178149,
178150,
189715,
199184,
199186,
200922,
260057,
341222,
341223,
359768,
365338,
},
["numbing poison"] = {
5760,
5761,
158873,
158876,
311373,
342947,
359078,
},
["netherwalk"] = {
31599,
196555,
},
["voidform"] = {
126733,
126738,
185916,
194249,
199415,
218413,
227386,
228264,
250844,
284508,
},
["lunar empowerment"] = {
211091,
292664,
},
["commanding presence"] = {
328839,
330545,
330546,
},
["crackling shield"] = {
376705,
376724,
},
["loyal beasts"] = {
326450,
},
["storm dominance"] = {
374918,
396076,
396077,
396111,
396113,
},
["bubbling pox"] = {
331016,
},
["nimble steps"] = {
352366,
354050,
354051,
354052,
},
["shadow's grasp"] = {
206760,
263656,
263658,
306965,
},
["ascendance"] = {
28200,
28204,
114049,
114050,
114051,
114052,
147059,
163296,
173160,
191475,
191478,
344548,
},
["mind sear"] = {
32000,
36447,
48045,
49821,
60440,
60441,
85643,
85647,
135513,
157170,
157172,
172877,
172878,
177402,
177403,
208232,
237388,
284430,
284431,
294009,
294018,
344752,
344754,
},
["tidebringer"] = {
236501,
236502,
},
["prey on the weak"] = {
131511,
255909,
389788,
389806,
},
["anti-magic shell"] = {
31662,
48707,
49088,
53766,
171465,
173097,
181425,
203272,
218977,
218988,
292150,
311975,
},
["inspiring presence"] = {
185089,
185090,
192944,
320973,
320980,
327808,
327812,
335034,
343502,
},
["fixate"] = {
12021,
34719,
40414,
40607,
40892,
41294,
41295,
41614,
41951,
41976,
49026,
52537,
53626,
73544,
73545,
73686,
73687,
78617,
78618,
78625,
80093,
80094,
91829,
91830,
97025,
97027,
97486,
99284,
99526,
99559,
99849,
99999,
100007,
100011,
100014,
100288,
100548,
105695,
111723,
111725,
118303,
118448,
118964,
120434,
120831,
120837,
120839,
122477,
124070,
125390,
125393,
125895,
125896,
129149,
132760,
132984,
133042,
133112,
133196,
133843,
136594,
137686,
137687,
138486,
139034,
140189,
140547,
141918,
142097,
142388,
142870,
143292,
143445,
143682,
143864,
144036,
146540,
146581,
147665,
147712,
148243,
149337,
150702,
152310,
153787,
154769,
154952,
155196,
155207,
156652,
156653,
156665,
157168,
157625,
157763,
158702,
159373,
167757,
172866,
173079,
173080,
174627,
176544,
177643,
178139,
186572,
186574,
187621,
197849,
197850,
198161,
198477,
199618,
199619,
200349,
201015,
202081,
202453,
203983,
204873,
205011,
205054,
206364,
208739,
210099,
213466,
216115,
218369,
220727,
224072,
224307,
224532,
225388,
226044,
226088,
227221,
229593,
234189,
238674,
239280,
239556,
241657,
243461,
243590,
243613,
244653,
244657,
244860,
245406,
253001,
254491,
255860,
256311,
257858,
262240,
262241,
262242,
262243,
262244,
262245,
264215,
264219,
267406,
269103,
269936,
270509,
272427,
272482,
275269,
275270,
276020,
277556,
285694,
285696,
285697,
285702,
285703,
285813,
286135,
286539,
286974,
287845,
288390,
288623,
289925,
291917,
296524,
299484,
304298,
305699,
306957,
307260,
308360,
309859,
314729,
315093,
315094,
318059,
318078,
318540,
319781,
320740,
326082,
326892,
327902,
330115,
330966,
330967,
331343,
337617,
340797,
340827,
343496,
},
["prideful"] = {
340186,
340384,
340880,
342333,
},
["mind soothe"] = {
453,
},
["ice block"] = {
27619,
36911,
41590,
45438,
45776,
46604,
46882,
56124,
56644,
62766,
65802,
68252,
91686,
99247,
121548,
145533,
167415,
172987,
176269,
188839,
211011,
211014,
240133,
241720,
241722,
251345,
256590,
256730,
262192,
271527,
278960,
287322,
287347,
290049,
304344,
304345,
304463,
314908,
322683,
329007,
341857,
},
["consecration"] = {
26573,
32773,
33559,
36946,
37553,
38385,
41541,
43429,
57798,
59998,
69930,
79966,
81297,
107100,
111365,
153441,
158416,
162642,
165711,
184047,
188370,
190010,
200667,
200678,
200679,
204242,
205228,
216217,
221645,
221730,
233390,
243597,
251151,
251152,
251549,
251550,
264082,
283579,
283582,
283583,
288807,
288808,
288809,
290496,
290497,
290498,
294346,
294347,
327980,
344172,
382484,
387881,
},
["enrage"] = {
8599,
12686,
15061,
15097,
15716,
18501,
19451,
19812,
22428,
23128,
23342,
26041,
26051,
28371,
30485,
31540,
31915,
32714,
33958,
34670,
37605,
37648,
37975,
38046,
38166,
38664,
39031,
41254,
41447,
42705,
42745,
43139,
44427,
45111,
47399,
48138,
48142,
48193,
50420,
51513,
52470,
54287,
54427,
55285,
56646,
59697,
59707,
59828,
60075,
61369,
63227,
68335,
68541,
70371,
71205,
72143,
75998,
76100,
76862,
78722,
78943,
80084,
80467,
86736,
102134,
108169,
109889,
109890,
115430,
119629,
126370,
127823,
129016,
130196,
133052,
140758,
144404,
145411,
145554,
145692,
145974,
150498,
150500,
154982,
156314,
163483,
164257,
164811,
165947,
172360,
172781,
175192,
175337,
176048,
178658,
179681,
184361,
184362,
186882,
188480,
190225,
197064,
201279,
207680,
212561,
214037,
216363,
218121,
222022,
222042,
224604,
225319,
225320,
228318,
228895,
237689,
245566,
257260,
257391,
257609,
258463,
259975,
260355,
261893,
266095,
271369,
273422,
273874,
275091,
275667,
277573,
297152,
298078,
300414,
302483,
304178,
307506,
311086,
313675,
314466,
316133,
316424,
316425,
317535,
317553,
319147,
321820,
323599,
323828,
324085,
329989,
330631,
332169,
334800,
343484,
},
["defensive countermeasure"] = {
297133,
299428,
300996,
303941,
},
["incarnation: chosen of elune"] = {
102560,
184747,
},
["filthy transfusion"] = {
273834,
273835,
273836,
},
["eye for an eye"] = {
25988,
25997,
205191,
205202,
},
["nothing personal"] = {
286573,
286579,
286581,
289467,
},
["mutilated flesh"] = {
211672,
340431,
381672,
394021,
},
["butcher cut"] = {
279416,
279426,
},
["spectral sight"] = {
188501,
199461,
199490,
202688,
215725,
220239,
220243,
233028,
320379,
},
["moonkin aura"] = {
209740,
209746,
},
["might of the upper reaches"] = {
333579,
},
["double tap"] = {
203412,
203414,
203486,
260402,
},
["recharge anima"] = {
321367,
324046,
327280,
327416,
},
["earth shield"] = {
379,
974,
32734,
38590,
54479,
54480,
55599,
55600,
56451,
57802,
57803,
58981,
58982,
59471,
59472,
60013,
60014,
66063,
66064,
67530,
67537,
69568,
69569,
69925,
69926,
77905,
79927,
79928,
101649,
101650,
143475,
143479,
145559,
145560,
159981,
159982,
165773,
199355,
199356,
204288,
204290,
226078,
254417,
254425,
268709,
268710,
374066,
374067,
377874,
377875,
383648,
},
["amplifying poison"] = {
381664,
383414,
394328,
},
["in the spotlight"] = {
227931,
312926,
},
["mystic touch"] = {
8647,
113746,
331653,
},
["droman's wrath"] = {
323059,
},
["raging tantrum"] = {
333241,
333242,
},
["forsworn doctrine"] = {
317936,
331213,
},
["nether ward"] = {
212295,
},
["combustion"] = {
29977,
74630,
99303,
100271,
190319,
197889,
304888,
321710,
323048,
},
["unending resolve"] = {
104773,
173189,
317138,
},
["sanguine sphere"] = {
163689,
166591,
},
["whip rage"] = {
29340,
233210,
},
["undying rage"] = {
333227,
},
["anti-magic zone"] = {
50461,
50462,
51052,
52893,
52894,
53636,
53637,
79907,
135233,
145629,
162624,
162625,
164065,
164225,
165775,
222791,
332829,
332831,
},
["earth dominance"] = {
374917,
396067,
396068,
396085,
396098,
},
["die by the sword"] = {
118038,
236385,
315948,
},
["power word: fortitude"] = {
13864,
21562,
23947,
23948,
36004,
58921,
74973,
94366,
133538,
160637,
165739,
183585,
206629,
211681,
266501,
267528,
284466,
286145,
},
["dark soul: misery"] = {
113860,
},
["cyclone"] = {
29538,
32334,
33786,
38516,
38517,
39594,
40578,
43528,
60236,
61662,
62632,
62633,
65859,
88010,
92371,
143499,
143551,
151165,
160209,
189454,
189947,
189950,
193121,
193244,
203562,
203596,
204832,
208056,
208060,
233946,
234175,
255793,
261521,
268341,
},
},
["blizzard_nameplate_font_override_enabled"] = true,
["hover_highlight_alpha"] = 0.5,
["cast_statusbar_fadein_time"] = 0.009999999776482582,
["target_shady_enabled"] = false,
["cast_statusbar_spark_alpha"] = 0,
["aura2_y_offset"] = 2,
["aura_timer_text_anchor"] = {
["x"] = 1,
},
["extra_icon_caster_size"] = 8,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["spellpercent_text_enabled"] = false,
["percent_text_show_decimals"] = false,
["castbar_enabled"] = false,
["power_percent_text_enabled"] = false,
["healthbar_enabled"] = false,
["percent_show_percent"] = false,
["percent_text_enabled"] = false,
["power_enabled"] = false,
["percent_text_ooc"] = false,
["percent_show_health"] = false,
["module_enabled"] = false,
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 9,
["spellpercent_text_font"] = "Expressway",
["level_text_size"] = 8,
["actorname_use_class_color"] = true,
["big_actortitle_text_font"] = "Expressway",
["cast"] = {
124,
1,
},
["spellpercent_text_size"] = 8,
["level_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 9,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0.1500000059604645,
},
["big_actorname_text_color"] = {
0.5,
1,
0.5,
},
["percent_text_show_decimals"] = false,
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
124,
1,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.1500000059604645,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
0.06999999284744263,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
0.06999999284744263,
},
["level_text_font"] = "Expressway",
["actorname_text_font"] = "Expressway",
["quest_color"] = {
0.5,
1,
0,
1,
},
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["mana_incombat"] = {
nil,
4,
},
["only_thename"] = true,
["big_actorname_text_font"] = "Expressway",
["only_names"] = true,
["all_names"] = false,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0.1500000059604645,
},
["big_actorname_text_outline"] = "OUTLINE",
["actorname_text_size"] = 8,
["percent_show_percent"] = false,
["big_actortitle_text_color"] = {
1,
0.8,
0,
},
["spellname_text_size"] = 8,
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 7,
["only_damaged"] = false,
["buff_frame_y_offset"] = 0,
["quest_color_enabled"] = true,
["quest_enabled"] = true,
["percent_text_font"] = "Expressway",
["percent_text_size"] = 8,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0.1500000059604645,
},
["health_incombat"] = {
124,
12,
},
["health"] = {
124,
12,
},
["relevance_state"] = 3,
["level_text_alpha"] = 0.2999999821186066,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0.1500000059604645,
},
["mana"] = {
nil,
4,
},
["spellname_text_font"] = "Expressway",
},
["friendlynpc"] = {
["actorname_text_font"] = "Expressway",
["big_actorname_text_font"] = "Expressway",
["spellpercent_text_font"] = "Expressway",
["big_actortitle_text_size"] = 7,
["level_text_size"] = 7,
["spellname_text_font"] = "Expressway",
["big_actortitle_text_font"] = "Expressway",
["cast"] = {
124,
5,
},
["spellpercent_text_size"] = 7,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["actorname_text_spacing"] = 7,
["actorname_text_outline"] = "OUTLINE",
["level_text_alpha"] = 0.2999999821186066,
["health_incombat"] = {
124,
15,
},
["percent_text_size"] = 7,
["percent_text_show_decimals"] = false,
["percent_text_font"] = "Expressway",
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["cast_incombat"] = {
124,
5,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_size"] = 8,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["spellname_text_size"] = 7,
["health"] = {
124,
15,
},
["percent_show_percent"] = false,
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["level_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["level_text_font"] = "Expressway",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
},
["global_health_width"] = 124,
["global_health_height"] = 15,
["enemyplayer"] = {
["castbar_offset"] = -0.5,
["spellpercent_text_font"] = "Expressway",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Expressway",
["cast"] = {
124,
},
["spellpercent_text_size"] = 8,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0.2199999988079071,
},
["level_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["spellpercent_text_anchor"] = {
["y"] = 8.5,
["x"] = 1,
["side"] = 5,
},
["level_text_anchor"] = {
["y"] = 0,
},
["cast_incombat"] = {
124,
10,
},
["spellname_text_outline"] = "OUTLINE",
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.2199999988079071,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["spellname_text_anchor"] = {
["y"] = 8.5,
["side"] = 3,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = 0.5,
},
["level_text_font"] = "Expressway",
["actorname_text_font"] = "Expressway",
["quest_color_neutral"] = {
1,
0.615686297416687,
0.9450981020927429,
1,
},
["actorname_text_size"] = 8,
["big_actorname_text_font"] = "Expressway",
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 0.5,
},
["quest_color_enemy"] = {
1,
0.615686297416687,
0.9450981020927429,
1,
},
["spellpercent_text_enabled"] = false,
["actorname_text_spacing"] = 7,
["percent_text_font"] = "Expressway",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0.2199999988079071,
},
["percent_text_show_decimals"] = false,
["quest_enabled"] = true,
["big_actortitle_text_size"] = 9,
["level_text_alpha"] = 0.2999999821186066,
["quest_color_enabled"] = true,
["spellname_text_size"] = 8,
["health"] = {
124,
15,
},
["health_incombat"] = {
124,
15,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0.2199999988079071,
},
["percent_text_size"] = 8,
["spellname_text_font"] = "Expressway",
["level_text_enabled"] = false,
},
["enemynpc"] = {
["big_actorname_text_size"] = 9,
["spellpercent_text_font"] = "Expressway",
["big_actortitle_text_font"] = "Expressway",
["cast"] = {
124,
},
["spellpercent_text_size"] = 8,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0.2199999988079071,
},
["level_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["spellpercent_text_anchor"] = {
["y"] = 8.5,
["x"] = 1,
["side"] = 5,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
124,
10,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.2199999988079071,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["spellname_text_anchor"] = {
["y"] = 8.5,
["x"] = 1,
["side"] = 3,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["percent_text_anchor"] = {
["side"] = 11,
["x"] = -1,
},
["level_text_font"] = "Expressway",
["actorname_text_font"] = "Expressway",
["quest_color_neutral"] = {
0.4000000357627869,
0.8666667342185974,
0.6666666865348816,
},
["actorname_text_size"] = 8,
["big_actorname_text_font"] = "Expressway",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["side"] = 10,
["x"] = 2,
},
["percent_text_size"] = 8,
["actorname_text_spacing"] = 7,
["percent_text_font"] = "Expressway",
["quest_color_enemy"] = {
0.4000000357627869,
0.8666667342185974,
0.6666666865348816,
},
["level_text_anchor"] = {
["y"] = 0,
},
["spellname_text_font"] = "Expressway",
["castbar_offset"] = -0.5,
["big_actortitle_text_size"] = 9,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0.2199999988079071,
},
["spellname_text_size"] = 8,
["health"] = {
124,
15,
},
["health_incombat"] = {
124,
15,
},
["spellpercent_text_enabled"] = false,
["level_text_alpha"] = 0.2999999821186066,
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0.2199999988079071,
},
["level_text_enabled"] = false,
},
},
["health_selection_overlay"] = "Atrocity",
["aura_y_offset"] = 2,
["use_ui_parent"] = true,
["aura_show_defensive_cd"] = true,
["expansion_triggerwipe"] = {
[9] = true,
[10] = true,
},
["focus_texture"] = "Kait",
["cast_statusbar_color_nointerrupt"] = {
0.7803922295570374,
0.250980406999588,
0.250980406999588,
0.9600000008940697,
},
["show_interrupt_author"] = false,
["indicator_spec"] = false,
["border_thickness"] = 0.4999999701976776,
["resources_settings"] = {
["global_settings"] = {
["show_depleted"] = false,
["personal_bar"] = true,
},
["chr"] = {
["Player-157-0C037C88"] = "SoulShards",
["Player-157-0BF92E3A"] = "ComboPoints",
["Player-57-0BA165CE"] = "Runes",
["Player-57-08C1DC17"] = "HolyPower",
["Player-3684-0E9BD4AA"] = "Chi",
["Player-57-0D480764"] = "SoulShards",
["Player-157-0BFEBD3D"] = "Chi",
["Player-3684-0E8120EE"] = "SoulShards",
["Player-3684-0E8B8F76"] = "ComboPoints",
["Player-3684-0E9C7B66"] = "Runes",
["Player-157-0BF92E3C"] = "SoulShards",
["Player-3684-0E8B8F7C"] = "Chi",
["Player-157-0BFEBD39"] = "HolyPower",
["Player-57-0B1CFD21"] = "ComboPoints",
["Player-3684-0E8B9726"] = "ComboPoints",
["Player-57-0A630FDB"] = "ArcaneCharges",
["Player-3684-0E986879"] = "HolyPower",
["Player-157-0BFEBD29"] = "ArcaneCharges",
["Player-3684-0E4896BA"] = "Essence",
["Player-157-0BFEBD4A"] = "Essence",
["Player-57-0B7D8135"] = "Chi",
["Player-157-0BFA45B3"] = "SoulShards",
["Player-3684-0E213A9B"] = "Essence",
["Player-57-0DA242BB"] = "Chi",
["Player-57-0B43B146"] = "SoulShards",
["Player-3674-09BC4510"] = "ArcaneCharges",
["Player-57-0B7B51F3"] = "ComboPoints",
["Player-57-0D62515D"] = "Essence",
["Player-3684-0E213266"] = "SoulShards",
["Player-57-0D48734C"] = "SoulShards",
["Player-57-0D4542F5"] = "ComboPoints",
["Player-157-0BFEBD3F"] = "Runes",
["Player-157-0BFEBD49"] = "ComboPoints",
},
},
["health_animation_time_dilatation"] = 1.799999952316284,
["npc_cache"] = {
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
"enUS",
},
[198716] = {
"Unstable Storm",
"Vault of the Incarnates",
"enUS",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[186696] = {
"Quaking Totem",
"Uldaman: Legacy of Tyr",
},
[194241] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[115407] = {
"Rook",
"Return to Karazhan",
},
[221863] = {
"Summoned Acolyte",
"Nerub-ar Palace",
"enUS",
},
[248589] = {
"Nullbinder",
"Manaforge Omega",
"enUS",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
"enUS",
},
[180432] = {
"Devoted Accomplice",
"Tazavesh, the Veiled Market",
"enUS",
},
[165471] = {
"Nathrian Duelist",
"Castle Nathria",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
"enUS",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[180433] = {
"Wandering Pulsar",
"Tazavesh, the Veiled Market",
"enUS",
},
[231839] = {
"Scrapmaster",
"Liberation of Undermine",
"enUS",
},
[120651] = {
"Explosives",
"Operation: Mechagon",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[176598] = {
"Torment Golem",
"Torghast, Tower of the Damned",
},
[164578] = {
"Stitchflesh's Creation",
"The Necrotic Wake",
"enUS",
},
[229283] = {
"Scraps",
"Liberation of Undermine",
"enUS",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[175576] = {
"Containment Cell",
"Tazavesh, the Veiled Market",
"enUS",
},
[164451] = {
"Dessia the Decapitator",
"Theater of Pain",
"enUS",
},
[164707] = {
"Congealed Slime",
"Plaguefall",
"enUS",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[84400] = {
"Gnarled Ancient",
"The Everbloom",
},
[193352] = {
"Hextrick Totem",
"Brackenhide Hollow",
"enUS",
},
[135169] = {
"Spirit Drain Totem",
"The Underrot",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
},
[237981] = {
"Shadowguard Mage",
"Manaforge Omega",
"enUS",
},
[178008] = {
"Decrepit Orb",
"Sanctum of Domination",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
"enUS",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[200387] = {
"Shambling Infester",
"Temple of the Jade Serpent",
"enUS",
},
[221103] = {
"Hulking Warshell",
"City of Threads",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
"enUS",
},
[198214] = {
"Broodguardian Ziruss",
"Vault of the Incarnates",
"enUS",
},
[184020] = {
"Hulking Berserker",
"Uldaman: Legacy of Tyr",
},
[220976] = {
"Hollows Guard",
"Khaz Algar",
},
[229288] = {
"King Flamespite",
"Liberation of Undermine",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[165479] = {
"Court Enforcer",
"Castle Nathria",
"enUS",
},
[170850] = {
"Raging Bloodhorn",
"Theater of Pain",
"enUS",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
"enUS",
},
[83763] = {
"Grom'kar Technician",
"Iron Docks",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
},
[220978] = {
"Skeins Guard",
"Khaz Algar",
},
[75899] = {
"Possessed Soul",
"Shadowmoon Burial Grounds",
},
[210109] = {
"Earth Infused Golem",
"The Rookery",
"enUS",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[168934] = {
"Enraged Spirit",
"De Other Side",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[231977] = {
"Darkfuse Technician",
"Liberation of Undermine",
"enUS",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
"enUS",
},
[188244] = {
"Primal Juggernaut",
"Dragon Isles",
"enUS",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
"enUS",
},
[157810] = {
"Mawsworn Endbringer",
"Torghast, Tower of the Damned",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
"enUS",
},
[231978] = {
"Sharpshot Sentry",
"Liberation of Undermine",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[168425] = {
"Forsworn Annihilator",
"Spires of Ascension",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
"enUS",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[227632] = {
"Venombite",
"Earthcrawl Mines",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[177889] = {
"Mawforged Souljudge",
"Sanctum of Domination",
},
[187224] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[211904] = {
"Tainted Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[154744] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
},
[194897] = {
"Stormsurge Totem",
"The Nokhud Offensive",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
"enUS",
},
[114584] = {
"Phantom Crew",
"Return to Karazhan",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[150251] = {
"Pistonhead Mechanic",
"Operation: Mechagon",
},
[195135] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[228015] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[167532] = {
"Heavin the Breaker",
"Theater of Pain",
"enUS",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
},
[167533] = {
"Advent Nevermore",
"Theater of Pain",
"enUS",
},
[177891] = {
"Mawforged Summoner",
"Sanctum of Domination",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
"enUS",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[227635] = {
"Kas'dru",
"Earthcrawl Mines",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[167534] = {
"Rek the Hardened",
"Theater of Pain",
"enUS",
},
[177892] = {
"Mawforged Goliath",
"Sanctum of Domination",
},
[220986] = {
"Hollows Sentry",
"Khaz Algar",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
"enUS",
},
[150250] = {
"Pistonhead Blaster",
"Operation: Mechagon",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
},
[184140] = {
"Xy Acolyte",
"Sepulcher of the First Ones",
},
[223150] = {
"Ascended Voidspeaker",
"Nerub-ar Palace",
"enUS",
},
[168153] = {
"Plagueroc",
"Plaguefall",
"enUS",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
},
[183497] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[65317] = {
"Xiang",
"Temple of the Jade Serpent",
},
[114266] = {
"Shoreline Tidespeaker",
"Return to Karazhan",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
},
[207177] = {
"Infinite Watchkeeper",
"Dawn of the Infinite",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
},
[40925] = {
"Tainted Sentry",
"Throne of the Tides",
},
[150142] = {
"Scrapbone Trashtosser",
"Operation: Mechagon",
},
[220988] = {
"Skeins Sentry",
"Khaz Algar",
},
[190426] = {
"Decay Totem",
"Brackenhide Hollow",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[162038] = {
"Regal Mistdancer",
"Sanguine Depths",
},
[98538] = {
"Lady Velandras Ravencrest",
"Black Rook Hold",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
},
[150146] = {
"Scrapbone Shaman",
"Operation: Mechagon",
},
[164702] = {
"Carrion Worm",
"The Necrotic Wake",
"enUS",
},
[137103] = {
"Blood Visage",
"The Underrot",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[205623] = {
"Drazos Blackwing",
"Aberrus, the Shadowed Crucible",
},
[156157] = {
"Coldheart Ascendant",
"Torghast, Tower of the Damned",
},
[167538] = {
"Dokigg the Brutalizer",
"Theater of Pain",
"enUS",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
"enUS",
},
[180070] = {
"Mawsworn Scryer",
"Sanctum of Domination",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[81212] = {
"Grimrail Overseer",
"Grimrail Depot",
"enUS",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
},
[199124] = {
"Primalist Chillblaster",
"Vault of the Incarnates",
"enUS",
},
[208459] = {
"Fiery Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[227513] = {
"Tala",
"The Spiral Weave",
"enUS",
},
[171376] = {
"Head Custodian Javlin",
"Sanguine Depths",
},
[52019] = {
"Skyfall Star",
"The Vortex Pinnacle",
},
[83578] = {
"Ogron Laborer",
"Iron Docks",
},
[198869] = {
"Sundered Devastator",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
},
[176974] = {
"Soul Reaver",
"Sanctum of Domination",
},
[190034] = {
"Blazebound Destroyer",
"Ruby Life Pools",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[227514] = {
"Velo",
"The Spiral Weave",
"enUS",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
},
[198870] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[208440] = {
"Infinite Slayer",
"Dawn of the Infinite",
},
[231223] = {
"Disturbed Kelp",
"Operation: Floodgate",
"enUS",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
},
[229433] = {
"Skiggy Muckheimer",
"Liberation of Undermine",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
},
[170483] = {
"Atal'ai Deathwalker's Spirit",
"De Other Side",
},
[39392] = {
"Faceless Corruptor",
"Grim Batol",
"enUS",
},
[229537] = {
"Void Emissary",
"The Stonevault",
"enUS",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[180323] = {
"Fatespawn Monstrosity",
"Sanctum of Domination",
},
[229434] = {
"Melbo the Magnificent",
"Liberation of Undermine",
"enUS",
},
[190688] = {
"Blazing Fiend",
"Vault of the Incarnates",
},
[168310] = {
"Plagueroc",
"Plaguefall",
"enUS",
},
[130635] = {
"Stonefury",
"The MOTHERLODE!!",
"enUS",
},
[150253] = {
"Weaponized Crawler",
"Operation: Mechagon",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[201288] = {
"Sundered Champion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[98081] = {
"Bellowing Idol",
"Neltharion's Lair",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[208208] = {
"Alliance Destroyer",
"Dawn of the Infinite",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[75652] = {
"Void Spawn",
"Shadowmoon Burial Grounds",
},
[83390] = {
"Thunderlord Wrangler",
"Iron Docks",
},
[180335] = {
"Cartel Smuggler",
"Tazavesh, the Veiled Market",
"enUS",
},
[197595] = {
"Earthwrought Smasher",
"Vault of the Incarnates",
},
[203861] = {
"Horde Destroyer",
"Dawn of the Infinite",
},
[190690] = {
"Thundering Ravager",
"Vault of the Incarnates",
},
[171384] = {
"Research Scribe",
"Sanguine Depths",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
"enUS",
},
[83389] = {
"Ironwing Flamespitter",
"Iron Docks",
},
[157571] = {
"Mawsworn Flametender",
"Torghast, Tower of the Damned",
},
[129552] = {
"Monzumi",
"Atal'Dazar",
"enUS",
},
[154758] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[162047] = {
"Insatiable Brute",
"Sanguine Depths",
},
[118491] = {
"Corrupted Risen Mage",
"Black Rook Hold - Artifact Challenge",
},
[115486] = {
"Erudite Slayer",
"Return to Karazhan",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[215755] = {
"Ascended Overseer",
"Khaz Algar",
},
[157572] = {
"Mawsworn Firecaller",
"Torghast, Tower of the Damned",
},
[164861] = {
"Spriggan Barkbinder",
"De Other Side",
},
[114783] = {
"Reformed Maiden",
"Return to Karazhan",
},
[207796] = {
"Burning Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
"enUS",
},
[166396] = {
"Noble Skirmisher",
"Sanguine Depths",
},
[166524] = {
"Deathwalker",
"Theater of Pain",
"enUS",
},
[215756] = {
"Ascended Webwarden",
"Khaz Algar",
},
[187240] = {
"Drakonid Breaker",
"The Azure Vault",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
},
[45915] = {
"Armored Mistral",
"The Vortex Pinnacle",
},
[202969] = {
"Empty Recollection",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[77700] = {
"Shadowmoon Exhumer",
"Shadowmoon Burial Grounds",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
"enUS",
},
[81984] = {
"Gnarlroot",
"The Everbloom",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
"enUS",
},
[170234] = {
"Oppressive Banner",
"Theater of Pain",
"enUS",
},
[88314] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
"enUS",
},
[191206] = {
"Primalist Mage",
"Vault of the Incarnates",
"enUS",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
},
[202971] = {
"Null Glimmer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[115488] = {
"Infused Pyromancer",
"Return to Karazhan",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
"enUS",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
"enUS",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[234557] = {
"Support Rig",
"Liberation of Undermine",
"enUS",
},
[150160] = {
"Scrapbone Bully",
"Operation: Mechagon",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
"enUS",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
"enUS",
},
[225479] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[240952] = {
"Evoked Spirit",
"Eco-Dome Al'dani",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
"enUS",
},
[197219] = {
"Vile Lasher",
"Algeth'ar Academy",
},
[241803] = {
"Nexus-Prince Ky'vor",
"Manaforge Omega",
"enUS",
},
[175992] = {
"Dutiful Attendant",
"Castle Nathria",
"enUS",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[122970] = {
"Shadowblade Stalker",
"Atal'Dazar",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
"enUS",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
"enUS",
},
[203230] = {
"Dragonfire Golem",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
},
[168658] = {
"Forsworn Devastator",
"Spires of Ascension",
},
[86526] = {
"Grom'kar Chainmaster",
"Iron Docks",
},
[245255] = {
"Artoshion",
"Manaforge Omega",
"enUS",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[81603] = {
"Champion Druna",
"Iron Docks",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[196679] = {
"Frozen Shroud",
"Vault of the Incarnates",
"enUS",
},
[196198] = {
"Algeth'ar Security",
"Algeth'ar Academy",
},
[174843] = {
"Stoneborn Maitre D'",
"Castle Nathria",
"enUS",
},
[198500] = {
"Council Earthcaller",
"Vault of the Incarnates",
"enUS",
},
[217039] = {
"Nerubian Hauler",
"Ara-Kara, City of Echoes",
"enUS",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
"enUS",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
"enUS",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
"enUS",
},
[165763] = {
"Vile Occultist",
"Castle Nathria",
"enUS",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
"enUS",
},
[150292] = {
"Mechagon Cavalry",
"Operation: Mechagon",
},
[198501] = {
"Council Icecaller",
"Vault of the Incarnates",
"enUS",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
"enUS",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[150165] = {
"Slime Elemental",
"Operation: Mechagon",
},
[178171] = {
"Stormforged Guardian",
"Tazavesh, the Veiled Market",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
"enUS",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
"enUS",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[92538] = {
"Tarspitter Grub",
"Neltharion's Lair",
},
[196203] = {
"Ethereal Restorer",
"Algeth'ar Academy",
"enUS",
},
[198503] = {
"Council Flamecaller",
"Vault of the Incarnates",
"enUS",
},
[99891] = {
"Storm Drake",
"Halls of Valor",
},
[114334] = {
"Damaged Golem",
"Return to Karazhan",
},
[180473] = {
"Unstoppable Abomination",
"Sanctum of Domination",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[226200] = {
"Chamber Acolyte",
"Nerub-ar Palace",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[164873] = {
"Runestag Elderhorn",
"De Other Side",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
"enUS",
},
[180474] = {
"Soul Reaver",
"Sanctum of Domination",
},
[183671] = {
"Monstrous Soul",
"Sepulcher of the First Ones",
},
[236995] = {
"Ravenous Destroyer",
"Eco-Dome Al'dani",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
"enUS",
},
[223822] = {
"Queen's Guard Re'zah",
"Nerub-ar Palace",
"enUS",
},
[169861] = {
"Ickor Bileflesh",
"Plaguefall",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
"enUS",
},
[178630] = {
"Mawsworn Seeker",
"Sanctum of Domination",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[164363] = {
"Undying Stonefiend",
"Halls of Atonement",
"enUS",
},
[150169] = {
"Toxic Lurker",
"Operation: Mechagon",
},
[183033] = {
"Grim Reflection",
"Sepulcher of the First Ones",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
"enUS",
},
[189555] = {
"Astral Attendant",
"The Azure Vault",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[182778] = {
"Collapsing Quasar",
"Sepulcher of the First Ones",
},
[179837] = {
"Tracker Zo'korss",
"Tazavesh, the Veiled Market",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Khaz Algar",
"enUS",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[220974] = {
"Bazaar Guard",
"Khaz Algar",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
"enUS",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
},
[173189] = {
"Nathrian Hawkeye",
"Castle Nathria",
"enUS",
},
[229284] = {
"Guk Boomdog",
"Liberation of Undermine",
"enUS",
},
[221526] = {
"Mosspelt Ramolith",
"Khaz Algar (Surface)",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[129369] = {
"Irontide Raider",
"Siege of Boralus",
"enUS",
},
[97720] = {
"Blightshard Skitter",
"Neltharion's Lair",
},
[212831] = {
"Forge Master Damian",
"Priory of the Sacred Flame",
},
[173190] = {
"Court Hawkeye",
"Castle Nathria",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[187768] = {
"Dathea Stormlash",
"Vault of the Incarnates",
"enUS",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[157017] = {
"Lithic Watcher",
"Torghast, Tower of the Damned",
},
[234955] = {
"Wastelander Pactspeaker",
"Eco-Dome Al'dani",
"enUS",
},
[234443] = {
"Triplefive",
"Theater of Pain",
"enUS",
},
[180864] = {
"High Torturer",
"Sanctum of Domination",
},
[153882] = {
"Deadsoul Spirit",
"Torghast, Tower of the Damned",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[151325] = {
"Alarm-o-Bot",
"Operation: Mechagon",
"enUS",
},
[220368] = {
"Failed Batch",
"Cinderbrew Meadery",
"enUS",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
"enUS",
},
[188026] = {
"Frost Tomb",
"Vault of the Incarnates",
"enUS",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[40357] = {
"Invoked Shadowflame Spirit",
"Grim Batol",
"enUS",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
"enUS",
},
[168717] = {
"Forsworn Justicar",
"Spires of Ascension",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[231380] = {
"Undercrawler",
"Operation: Floodgate",
"enUS",
},
[183423] = {
"Reformed Bachelor",
"Return to Karazhan",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
"enUS",
},
[187771] = {
"Kadros Icewrath",
"Vault of the Incarnates",
"enUS",
},
[234957] = {
"Wastelander Ritualist",
"Eco-Dome Al'dani",
"enUS",
},
[40166] = {
"Molten Giant",
"Grim Batol",
"enUS",
},
[168718] = {
"Forsworn Warden",
"Spires of Ascension",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
},
[165010] = {
"Congealed Slime",
"Plaguefall",
},
[200943] = {
"Electrified Colossal Stormfiend",
"Vault of the Incarnates",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
"enUS",
},
[97083] = {
"King Ranulf",
"Halls of Valor",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[191225] = {
"Tarasek Earthreaver",
"Vault of the Incarnates",
},
[144295] = {
"Mechagon Mechanic",
"Operation: Mechagon",
"enUS",
},
[242631] = {
"Overcharged Sentinel",
"Eco-Dome Al'dani",
"enUS",
},
[183425] = {
"Wholesome Host",
"Return to Karazhan",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[154014] = {
"Imprisoned Cabalist",
"Torghast, Tower of the Damned",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[129372] = {
"Blacktar Bomber",
"Siege of Boralus",
"enUS",
},
[163862] = {
"Defender of Many Eyes",
"Plaguefall",
},
[98810] = {
"Wrathguard Bladelord",
"Black Rook Hold",
"enUS",
},
[205804] = {
"Risen Dragon",
"Dawn of the Infinite",
},
[179334] = {
"Portalmancer Zo'honn",
"Tazavesh, the Veiled Market",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
},
[176521] = {
"Stygian Abductor",
"Sanctum of Domination",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
"enUS",
},
[155908] = {
"Deathspeaker",
"Torghast, Tower of the Damned",
},
[130012] = {
"Irontide Ravager",
"Freehold",
"enUS",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
"enUS",
},
[190588] = {
"Tectonic Crusher",
"Vault of the Incarnates",
},
[135474] = {
"Thistle Acolyte",
"UNKNOWN",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[179847] = {
"Shadowsteel Horror",
"Sanctum of Domination",
},
[198263] = {
"Stalwart Broodwarden",
"Vault of the Incarnates",
},
[211816] = {
"Bazaar Sentry",
"Khaz Algar",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
},
[151812] = {
"Detect-o-Bot",
"Operation: Mechagon",
"enUS",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
"enUS",
},
[176523] = {
"Painsmith Raznal",
"Sanctum of Domination",
},
[234962] = {
"Wastelander Farstalker",
"Eco-Dome Al'dani",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[180104] = {
"Tangling Bloom",
"The Shadowlands",
},
[224221] = {
"Twilight Overseer",
"Grim Batol",
"enUS",
},
[114796] = {
"Wholesome Hostess",
"Return to Karazhan",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[92610] = {
"Understone Drummer",
"Neltharion's Lair",
},
[96574] = {
"Stormforged Sentinel",
"Halls of Valor",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
"enUS",
},
[191230] = {
"Dragonspawn Flamebender",
"Vault of the Incarnates",
"enUS",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
"enUS",
},
[165911] = {
"Loyal Creation",
"The Necrotic Wake",
"enUS",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
"enUS",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
},
[167116] = {
"Spinemaw Reaver",
"Mists of Tirna Scithe",
"enUS",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
"enUS",
},
[130909] = {
"Fetid Maggot",
"The Underrot",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[85194] = {
"Entanglement",
"The Everbloom",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[154020] = {
"Prisonbreak Cursewalker",
"Torghast, Tower of the Damned",
},
[88967] = {
"Training Dummy",
"FW Horde Garrison Level 3",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
"enUS",
},
[191232] = {
"Drakonid Stormbringer",
"Vault of the Incarnates",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[165913] = {
"Ghastly Parishioner",
"Halls of Atonement",
"enUS",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
},
[179852] = {
"Soulless Vengeance",
"The Shadowlands",
},
[221667] = {
"Lost Watcher",
"Nerub-ar Palace",
"enUS",
},
[173714] = {
"Mistveil Nightblossom",
"Mists of Tirna Scithe",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[115757] = {
"Wrathguard Flamebringer",
"Return to Karazhan",
},
[155812] = {
"Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[224609] = {
"Twilight Destroyer",
"Grim Batol",
"enUS",
},
[206698] = {
"Fanatical Conjuror",
"Priory of the Sacred Flame",
"enUS",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
"enUS",
},
[196856] = {
"Primal Stormsentry",
"Vault of the Incarnates",
},
[80936] = {
"Grom'kar Grenadier",
"Grimrail Depot",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[56792] = {
"Figment of Doubt",
"Temple of the Jade Serpent",
},
[164510] = {
"Shambling Arbalest",
"Theater of Pain",
"enUS",
},
[199547] = {
"Frostforged Zealot",
"Vault of the Incarnates",
"enUS",
},
[184331] = {
"Infinite Timereaver",
"Uldaman: Legacy of Tyr",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[40936] = {
"Faceless Watcher",
"Throne of the Tides",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
"enUS",
},
[208244] = {
"Nerubian Threadmancer",
"Skittering Breach",
"enUS",
},
[59553] = {
"The Songbird Queen",
"Temple of the Jade Serpent",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
},
[88288] = {
"Dungeoneer's Training Dummy",
"FW Horde Garrison Level 3",
"enUS",
},
[199549] = {
"Flamesworn Herald",
"Vault of the Incarnates",
"enUS",
},
[167964] = {
"4.RF-4.RF",
"De Other Side",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
"enUS",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
"enUS",
},
[167113] = {
"Spinemaw Acidgullet",
"Mists of Tirna Scithe",
"enUS",
},
[188673] = {
"Smoldering Colossus",
"Vault of the Incarnates",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
"enUS",
},
[104251] = {
"Duskwatch Sentry",
"Court of Stars",
"enUS",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
"enUS",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
"enUS",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
},
[227300] = {
"Bile-Soaked Spawn",
"Nerub-ar Palace",
"enUS",
},
[225982] = {
"Cleave Training Dummy",
"Khaz Algar (Surface)",
},
[82597] = {
"Grom'kar Captain",
"Grimrail Depot",
},
[168007] = {
"Empowered Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[167536] = {
"Harugia the Bloodthirsty",
"Theater of Pain",
"enUS",
},
[150143] = {
"Scrapbone Grinder",
"Operation: Mechagon",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[239833] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[45924] = {
"Turbulent Squall",
"The Vortex Pinnacle",
},
[189706] = {
"Chaotic Essence",
"Castle Nathria",
},
[233823] = {
"The Royal Voidwing",
"Manaforge Omega",
"enUS",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
"enUS",
},
[205435] = {
"Epoch Ripper",
"Dawn of the Infinite",
},
[163620] = {
"Rotspew",
"The Necrotic Wake",
"enUS",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
},
[83025] = {
"Grom'kar Battlemaster",
"Iron Docks",
},
[220616] = {
"Corridor Sleeper",
"Darkflame Cleft",
"enUS",
},
[239834] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[171805] = {
"Research Scribe",
"Sanguine Depths",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
"enUS",
},
[237662] = {
"Ilyssa Darksorrow",
"Manaforge Omega",
"enUS",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
},
[162763] = {
"Soulforged Bonereaver",
"Theater of Pain",
"enUS",
},
[231176] = {
"Scaffolding",
"Operation: Floodgate",
"enUS",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[188302] = {
"Reconfiguration Emitter",
"Castle Nathria",
},
[83026] = {
"Siegemaster Olugar",
"Iron Docks",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[223724] = {
"Backfill Barrel",
"Liberation of Undermine",
"enUS",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
[97068] = {
"Storm Drake",
"Halls of Valor",
},
[176573] = {
"Mawsworn Woebringer",
"Torghast, Tower of the Damned",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
"enUS",
},
[82579] = {
"Grom'kar Far Seer",
"Grimrail Depot",
},
[134701] = {
"Blood Effigy",
"The Underrot",
"enUS",
},
[156244] = {
"Winged Automaton",
"Torghast, Tower of the Damned",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
"enUS",
},
[114804] = {
"Spectral Charger",
"Return to Karazhan",
},
[193291] = {
"Apex Blazewing",
"Neltharus",
"enUS",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
"enUS",
},
[175517] = {
"Symbiotic Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[155824] = {
"Lumbering Creation",
"Torghast, Tower of the Damned",
},
[220401] = {
"Pale Priest",
"City of Threads",
"enUS",
},
[59544] = {
"The Nodding Tiger",
"Temple of the Jade Serpent",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
"enUS",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
"enUS",
},
[187154] = {
"Unstable Curator",
"The Azure Vault",
"enUS",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[170147] = {
"Volatile Memory",
"De Other Side",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
"enUS",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
"enUS",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
"enUS",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
"enUS",
},
[236033] = {
"Metal Gunk",
"Operation: Mechagon",
"enUS",
},
[201222] = {
"Valow, Timesworn Keeper",
"Dawn of the Infinite",
},
[173729] = {
"Manifestation of Pride",
"Halls of Atonement",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
},
[84499] = {
"Entanglement",
"The Everbloom",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
"enUS",
},
[115395] = {
"Queen",
"Return to Karazhan",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[115765] = {
"Abstract Nullifier",
"Return to Karazhan",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[135240] = {
"Soul Essence",
"Waycrest Manor",
"enUS",
},
[200840] = {
"Flamebound Huntsman",
"Aberrus, the Shadowed Crucible",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[170480] = {
"Atal'ai Deathwalker",
"De Other Side",
},
[156212] = {
"Coldheart Agent",
"Torghast, Tower of the Damned",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
"enUS",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
"enUS",
},
[231531] = {
"Territorial Bombshell",
"Liberation of Undermine",
"enUS",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
"enUS",
},
[214140] = {
"Naz'jar Sentinel",
"Throne of the Tides",
},
[87761] = {
"Dungeoneer's Training Dummy",
"FW Horde Garrison Level 3",
"enUS",
},
[228463] = {
"Flame Reel Assistant",
"Liberation of Undermine",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
"enUS",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
"enUS",
},
[127019] = {
"Training Dummy",
"Freehold",
"enUS",
},
[155830] = {
"Mawsworn Disciple",
"Torghast, Tower of the Damned",
},
[198308] = {
"Frostwrought Dominator",
"Vault of the Incarnates",
},
[183707] = {
"Xy Spellslinger",
"Sepulcher of the First Ones",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
},
[165805] = {
"Shade of Kael'thas",
"Castle Nathria",
"enUS",
},
[182045] = {
"Necrotic Ritualist",
"Sepulcher of the First Ones",
},
[81432] = {
"Grom'kar Technician",
"Iron Docks",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[155831] = {
"Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[206214] = {
"Infinite Infiltrator",
"Dawn of the Infinite",
},
[102404] = {
"Stoneclaw Grubmaster",
"Neltharion's Lair",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
},
[168747] = {
"Venomfang",
"Plaguefall",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[180640] = {
"Stormbound Breaker",
"Tazavesh, the Veiled Market",
"enUS",
},
[100486] = {
"Risen Arcanist",
"Black Rook Hold",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[101637] = {
"Valarjar Aspirant",
"Halls of Valor",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
"enUS",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[76446] = {
"Shadowmoon Enslaver",
"Shadowmoon Burial Grounds",
},
[162099] = {
"General Kaal",
"Sanguine Depths",
},
[214419] = {
"Void Cursed Crusher",
"The Rookery",
"enUS",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
},
[87252] = {
"Unruly Ogron",
"Iron Docks",
},
[115640] = {
"Fuming Imp",
"Faronaar",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
"enUS",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[192791] = {
"Nokhud Warspear",
"The Nokhud Offensive",
},
[45704] = {
"Lurking Tempest",
"The Vortex Pinnacle",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
},
[96587] = {
"Felsworn Infester",
"Vault of the Wardens",
"enUS",
},
[176551] = {
"Vault Purifier",
"Tazavesh, the Veiled Market",
"enUS",
},
[212739] = {
"Radiating Voidstone",
"The Rookery",
"enUS",
},
[189338] = {
"Riverbend Chomper",
"Dragon Isles",
},
[107073] = {
"Duskwatch Reinforcement",
"Court of Stars",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
},
[229619] = {
"Blazing Fueldemon",
"Liberation of Undermine",
"enUS",
},
[245092] = {
"Burrowing Creeper",
"Eco-Dome Al'dani",
},
[189466] = {
"Irontorch Commander",
"Neltharus",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[227573] = {
"Anub'vir",
"Earthcrawl Mines",
"enUS",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
"enUS",
},
[168112] = {
"General Kaal",
"Castle Nathria",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[59547] = {
"Jiang",
"Temple of the Jade Serpent",
},
[196117] = {
"Crystal Thrasher",
"The Azure Vault",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
"enUS",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[227575] = {
"Armored Shellguard",
"Earthcrawl Mines",
"enUS",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[245222] = {
"Pargoth",
"Manaforge Omega",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
"enUS",
},
[115642] = {
"Umbral Imp",
"Faronaar",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[163894] = {
"Blighted Spinebreaker",
"Plaguefall",
"enUS",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[168109] = {
"Empowered Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[87318] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[162744] = {
"Nekthara the Mangler",
"Theater of Pain",
"enUS",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
"enUS",
},
[168882] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[171184] = {
"Mythresh, Sky's Talons",
"De Other Side",
},
[152898] = {
"Deadsoul Chorus",
"Torghast, Tower of the Damned",
},
[168156] = {
"Remornia",
"Castle Nathria",
"enUS",
},
[167998] = {
"Portal Guardian",
"Theater of Pain",
"enUS",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
"enUS",
},
[204560] = {
"Incorporeal Being",
"The Azure Vault",
"enUS",
},
[94224] = {
"Petrifying Totem",
"Neltharion's Lair",
},
[165762] = {
"Soul Infuser",
"Castle Nathria",
"enUS",
},
[227578] = {
"Nerubian Webcaster",
"Earthcrawl Mines",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
},
[177716] = {
"So' Cartel Assassin",
"Tazavesh, the Veiled Market",
"enUS",
},
[205212] = {
"Infinite Keeper",
"Dawn of the Infinite",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
"enUS",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
"enUS",
},
[40577] = {
"Naz'jar Sentinel",
"Throne of the Tides",
},
[197145] = {
"Colossal Stormfiend",
"Vault of the Incarnates",
},
[189816] = {
"Dathea Stormlash",
"Vault of the Incarnates",
"enUS",
},
[198424] = {
"Primalist Frostsculptor",
"Vault of the Incarnates",
"enUS",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[199703] = {
"Magma Mystic",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
"enUS",
},
[156245] = {
"Grand Automaton",
"Torghast, Tower of the Damned",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[156226] = {
"Coldheart Binder",
"Torghast, Tower of the Damned",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
"enUS",
},
[227581] = {
"Nerubian Oracle",
"Earthcrawl Mines",
"enUS",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
},
[216328] = {
"Unstable Test Subject",
"City of Threads",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
},
[175861] = {
"Glacial Spike",
"Sanctum of Domination",
},
[157634] = {
"Flameforge Enforcer",
"Torghast, Tower of the Damned",
},
[166969] = {
"Baroness Frieda",
"Castle Nathria",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[114624] = {
"Arcane Warden",
"Return to Karazhan",
},
[238068] = {
"Geargrinder Rager",
"Liberation of Undermine",
"enUS",
},
[163520] = {
"Forsworn Squad-Leader",
"Spires of Ascension",
},
[221945] = {
"Forgotten Harbinger",
"Nerub-ar Palace",
"enUS",
},
[190370] = {
"Squallbringer Cyraz",
"Halls of Infusion",
"enUS",
},
[166970] = {
"Lord Stavros",
"Castle Nathria",
"enUS",
},
[82590] = {
"Grimrail Scout",
"Grimrail Depot",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
"enUS",
},
[197149] = {
"Qalashi Lavamancer",
"Vault of the Incarnates",
"enUS",
},
[218884] = {
"Shattershell Scarab",
"Nerub-ar Palace",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[172981] = {
"Kyrian Stitchwerk",
"The Necrotic Wake",
"enUS",
},
[166971] = {
"Castellan Niklaus",
"Castle Nathria",
"enUS",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
"enUS",
},
[152905] = {
"Tower Sentinel",
"Torghast, Tower of the Damned",
},
[180015] = {
"Burly Deckhand",
"Tazavesh, the Veiled Market",
"enUS",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
"enUS",
},
[197406] = {
"Aggravated Skitterfly",
"Algeth'ar Academy",
"enUS",
},
[184107] = {
"Runic Protector",
"Uldaman: Legacy of Tyr",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[164926] = {
"Drust Boughbreaker",
"Mists of Tirna Scithe",
"enUS",
},
[180399] = {
"Evaile",
"Tazavesh, the Veiled Market",
"enUS",
},
[166589] = {
"Animated Weapon",
"Sanguine Depths",
},
[206230] = {
"Infinite Diversionist",
"Dawn of the Infinite",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[199325] = {
"Nokhud Stormcaller",
"The Nokhud Offensive",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
"enUS",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[197904] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
},
[214287] = {
"Earth Burst Totem",
"The Stonevault",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[197146] = {
"Qalashi Emissary",
"Vault of the Incarnates",
},
[153285] = {
"Training Dummy",
"Kalimdor",
},
[115388] = {
"King",
"Return to Karazhan",
},
[192767] = {
"Primal Icebulk",
"Vault of the Incarnates",
},
[133463] = {
"Venture Co. War Machine",
"The MOTHERLODE!!",
"enUS",
},
[86684] = {
"Feral Lasher",
"The Everbloom",
"enUS",
},
[76518] = {
"Ritual of Bones",
"Shadowmoon Burial Grounds",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[101326] = {
"Honored Ancestor",
"Halls of Valor",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
"enUS",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
"enUS",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
"enUS",
},
[188703] = {
"Protoform Barrier",
"Castle Nathria",
},
[192934] = {
"Volatile Infuser",
"Vault of the Incarnates",
"enUS",
},
[169905] = {
"Risen Warlord",
"De Other Side",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[165556] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
"enUS",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
"enUS",
},
[193760] = {
"Surging Ruiner",
"Vault of the Incarnates",
},
[163524] = {
"Kyrian Dark-Praetor",
"Spires of Ascension",
},
[189227] = {
"Qalashi Hunter",
"Neltharus",
"enUS",
},
[229252] = {
"Darkfuse Hyena",
"Operation: Floodgate",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
"enUS",
},
[168384] = {
"Flesh Construct",
"The Necrotic Wake",
},
[135245] = {
"Bilge Rat Demolisher",
"Siege of Boralus",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
"enUS",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[101008] = {
"Stinging Swarm",
"Black Rook Hold",
},
[102095] = {
"Risen Lancer",
"Black Rook Hold",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[114627] = {
"Shrieking Terror",
"Return to Karazhan",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[233474] = {
"Gallagio Goon",
"Liberation of Undermine",
"enUS",
},
[214012] = {
"Dark Colossus",
"Amirdrassil, the Dream's Hope",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[214421] = {
"Coalescing Void Diffuser",
"The Rookery",
"enUS",
},
[155090] = {
"Anodized Coilbearer",
"Operation: Mechagon",
},
[196263] = {
"Nokhud Neophyte",
"The Nokhud Offensive",
"enUS",
},
[150297] = {
"Mechagon Renormalizer",
"Operation: Mechagon",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[193799] = {
"Rotchanting Totem",
"Brackenhide Hollow",
},
[98368] = {
"Ghostly Protector",
"Black Rook Hold",
"enUS",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[59873] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
"enUS",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
"enUS",
},
[80805] = {
"Makogg Emberblade",
"Iron Docks",
},
[184335] = {
"Infinite Agent",
"Uldaman: Legacy of Tyr",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
"enUS",
},
[197671] = {
"Volatile Infuser",
"Vault of the Incarnates",
"enUS",
},
[197799] = {
"Quarry Infuser",
"Vault of the Incarnates",
"enUS",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
},
[198311] = {
"Flamewrought Eradicator",
"Vault of the Incarnates",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[200836] = {
"Obsidian Guard",
"Aberrus, the Shadowed Crucible",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
"enUS",
},
[213751] = {
"Dynamite Mine Cart",
"Darkflame Cleft",
"enUS",
},
[150168] = {
"Toxic Monstrosity",
"Operation: Mechagon",
},
[175550] = {
"Volatile Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
"enUS",
},
[81236] = {
"Grimrail Technician",
"Grimrail Depot",
"enUS",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[169924] = {
"Veteran Stoneguard",
"Castle Nathria",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
"enUS",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
"enUS",
},
[151127] = {
"Lord of Torment",
"Torghast, Tower of the Damned",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
},
[189234] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
"enUS",
},
[129527] = {
"Bilge Rat Buccaneer",
"Freehold",
"enUS",
},
[203812] = {
"Voice From Beyond",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
"enUS",
},
[101075] = {
"Wormspeaker Devout",
"Neltharion's Lair",
},
[176575] = {
"Mawsworn Soulwarden",
"Torghast, Tower of the Damned",
},
[211291] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
},
[176959] = {
"Mawsworn Soulmage",
"Sanctum of Domination",
},
[80935] = {
"Grom'kar Boomer",
"Grimrail Depot",
},
[168988] = {
"Overgrowth",
"Mists of Tirna Scithe",
"enUS",
},
[169159] = {
"Unstable Canister",
"Plaguefall",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[194990] = {
"Stormseeker Acolyte",
"Vault of the Incarnates",
"enUS",
},
[155221] = {
"Faeleaf Tender",
"Torghast, Tower of the Damned",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[212765] = {
"Void Bound Despoiler",
"The Stonevault",
"enUS",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
"enUS",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[130400] = {
"Irontide Crusher",
"Freehold",
},
[195119] = {
"Primalist Shockcaster",
"Ruby Life Pools",
"enUS",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
"enUS",
},
[180091] = {
"Ancient Core Hound",
"Tazavesh, the Veiled Market",
"enUS",
},
[199595] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[165197] = {
"Skeletal Monstrosity",
"The Necrotic Wake",
"enUS",
},
[216621] = {
"Nerubian Webspinner",
"Earthcrawl Mines",
"enUS",
},
[114542] = {
"Ghostly Philanthropist",
"Return to Karazhan",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
"enUS",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
},
[241923] = {
"Arcane Echo",
"Manaforge Omega",
"enUS",
},
[189878] = {
"Nathrezim Infiltrator",
"Operation: Mechagon",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[237192] = {
"Giga-Juiced Technician",
"Liberation of Undermine",
"enUS",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
},
[205735] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[198702] = {
"Unstable Frost",
"Vault of the Incarnates",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
"enUS",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
},
[168396] = {
"Plaguebelcher",
"Plaguefall",
},
[86372] = {
"Melded Berserker",
"The Everbloom",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
"enUS",
},
[179010] = {
"Fatespawn Anomaly",
"Sanctum of Domination",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
"enUS",
},
[151773] = {
"Junkyard D.0.G.",
"Operation: Mechagon",
"enUS",
},
[165483] = {
"Court Hierarch",
"Castle Nathria",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
},
[114633] = {
"Spectral Valet",
"Return to Karazhan",
},
[80938] = {
"Grom'kar Hulk",
"Grimrail Depot",
},
[88163] = {
"Grom'kar Cinderseer",
"Grimrail Depot",
},
[241798] = {
"Nexus-Prince Xevvos",
"Manaforge Omega",
"enUS",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[222167] = {
"Brood Infuser",
"Nerub-ar Palace",
"enUS",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
"enUS",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
"enUS",
},
[198577] = {
"Unstable Flame",
"Vault of the Incarnates",
"enUS",
},
[118489] = {
"Corrupted Risen Soldier",
"Black Rook Hold - Artifact Challenge",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
},
[162133] = {
"General Kaal",
"Sanguine Depths",
},
[45917] = {
"Cloud Prince",
"The Vortex Pinnacle",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[164563] = {
"Vicious Gargon",
"Halls of Atonement",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[164737] = {
"Brood Ambusher",
"Plaguefall",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[241800] = {
"Manaforged Titan",
"Manaforge Omega",
"enUS",
},
[171341] = {
"Bladebeak Hatchling",
"De Other Side",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[235151] = {
"K'aresh Elemental",
"Eco-Dome Al'dani",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
},
[84520] = {
"Pitwarden Gwarnok",
"Iron Docks",
},
[222619] = {
"Meandering Shalehorn",
"Khaz Algar (Surface)",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
"enUS",
},
[152033] = {
"Inconspicuous Plant",
"Operation: Mechagon",
"enUS",
},
[194487] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[102295] = {
"Emberhusk Dominator",
"Neltharion's Lair",
"enUS",
},
[198502] = {
"Council Stormcaller",
"Vault of the Incarnates",
"enUS",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
},
[242209] = {
"Overgorged Mite",
"Eco-Dome Al'dani",
"enUS",
},
[185537] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[171343] = {
"Bladebeak Matriarch",
"De Other Side",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[115019] = {
"Coldmist Widow",
"Return to Karazhan",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[184131] = {
"Earthen Guardian",
"Uldaman: Legacy of Tyr",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
},
[198709] = {
"Unstable Earth",
"Vault of the Incarnates",
},
[114316] = {
"Baroness Dorothea Millstipe",
"Return to Karazhan",
},
[75506] = {
"Shadowmoon Loyalist",
"Shadowmoon Burial Grounds",
},
[237967] = {
"Discharged Giga Bomb",
"Liberation of Undermine",
"enUS",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
"enUS",
},
[198326] = {
"Stormwrought Despoiler",
"Vault of the Incarnates",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[214608] = {
"Screaming Soul",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[199233] = {
"Flamescale Captain",
"Vault of the Incarnates",
},
[184300] = {
"Ebonstone Golem",
"Uldaman: Legacy of Tyr",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[115020] = {
"Arcanid",
"Return to Karazhan",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
},
[220742] = {
"Guardian Tentacle",
"The Sinkhole",
},
[186208] = {
"Rotbow Stalker",
"Brackenhide Hollow",
},
[134012] = {
"Taskmaster Askari",
"The MOTHERLODE!!",
"enUS",
},
[114317] = {
"Lady Catriona Von'Indi",
"Return to Karazhan",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
},
[190174] = {
"Hypnosis Bat",
"Tazavesh, the Veiled Market",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[228514] = {
"Pit Mechanic",
"Liberation of Undermine",
"enUS",
},
[190686] = {
"Frozen Destroyer",
"Vault of the Incarnates",
"enUS",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[183495] = {
"Twisted Worldeater",
"Sepulcher of the First Ones",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[214441] = {
"Scorched Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[205618] = {
"Thorak Greenscale",
"Aberrus, the Shadowed Crucible",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[233623] = {
"Pyrotechnics",
"Liberation of Undermine",
"enUS",
},
[198868] = {
"Primalist Voltweaver",
"Vault of the Incarnates",
"enUS",
},
[205622] = {
"Krono Sandtongue",
"Aberrus, the Shadowed Crucible",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[114319] = {
"Lady Keira Berrybuck",
"Return to Karazhan",
},
[205619] = {
"Sarek Cinderbreath",
"Aberrus, the Shadowed Crucible",
},
[219046] = {
"Voracious Worm",
"Nerub-ar Palace",
"enUS",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
"enUS",
},
[231197] = {
"Bubbles",
"Operation: Floodgate",
"enUS",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
},
[83761] = {
"Ogron Laborer",
"Iron Docks",
},
[185032] = {
"Taskmaster Xy'pro",
"Sepulcher of the First Ones",
},
[205620] = {
"Malgosa Spellbinder",
"Aberrus, the Shadowed Crucible",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
"enUS",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[115406] = {
"Knight",
"Return to Karazhan",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
"enUS",
},
[246285] = {
"Bazaar Overseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[80816] = {
"Ahri'ok Dugru",
"Iron Docks",
},
[83894] = {
"Dulhu",
"The Everbloom",
},
},
["indicator_scale"] = 0.7999999523162842,
["border_color"] = {
nil,
nil,
nil,
1,
},
["focus_color"] = {
nil,
nil,
nil,
1,
},
["indicator_anchor"] = {
["y"] = 3,
["x"] = 0,
["side"] = 7,
},
["hide_name_on_game_objects"] = false,
["health_selection_overlay_alpha"] = 0,
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["minor_height_scale"] = 0.9999999403953552,
["bossmod_cooldown_text_size"] = 18,
["aura_padding"] = 2,
["auto_inside_raid_dungeon"] = {
["hide_enemy_player_pets"] = true,
["hide_enemy_player_totems"] = true,
},
["hook_data"] = {
{
["Enabled"] = true,
["Revision"] = 541,
["OptionsValues"] = {
["BScdreverse"] = true,
["BShidefriendly"] = true,
["BSborderth"] = 0.5,
["BStimer_size"] = 20,
["BSstack_size"] = 14,
["BStimer_color"] = {
1,
1,
1,
1,
},
},
["HooksTemp"] = {
},
["semver"] = "1.0.0",
["Author"] = "Driani-Antonidas",
["Name"] = "Buff Special",
["Desc"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    unitFrame.ExtraIconFrame:SetOption (\"text_size\", modTable.config.BStimer_size)\n    unitFrame.ExtraIconFrame:SetOption (\"text_color\", modTable.config.BStimer_color)\n    unitFrame.ExtraIconFrame:SetOption (\"desc_text_size\", modTable.config.BSdesc_size)\n    unitFrame.ExtraIconFrame:SetOption (\"stack_text_size\", modTable.config.BSstack_size)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.auramodifier ()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    envTable.auramodifier = function()\n        \n        if modTable.config.BShidefriendly and unitFrame.actorType == \"friendlyplayer\" then\n            unitFrame.ExtraIconFrame:Hide()\n        end      \n        \n        for index, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n            if (auraIcon:IsShown()) then\n                \n                local profile = Plater.db.profile\n                local Anchor = {\n                    side = modTable.config.Descanchor, \n                    x = modTable.config.Descxoff, \n                    y = modTable.config.Descyoff,\n                }              \n                local size = modTable.config.BSborderth\n                \n                if (not auraIcon.PixelPerfectBorder) then\n                    auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n                end\n                \n                local r, g, b = auraIcon:GetBackdropBorderColor()\n                auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n                auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n                auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n                auraIcon.PixelPerfectBorder:UpdateSizes()\n                \n                auraIcon.Texture:SetSize(profile.extra_icon_width - size/2, profile.extra_icon_height - size/2)\n                auraIcon.Texture:ClearAllPoints()\n                auraIcon.Texture:SetAllPoints()\n                auraIcon.Border:Hide() \n                \n                Plater.SetFontOutlineAndShadow (auraIcon.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n                \n                Plater.SetAnchor (auraIcon.Desc, Anchor)\n                auraIcon.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n                auraIcon.Cooldown:SetDrawSwipe (true) \n                if modTable.config.BScdreverse then\n                    auraIcon.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n                end\n                \n            end\n        end\n    end\nend",
},
["Prio"] = 99,
["Time"] = 1755898356,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["version"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Basic Options",
["Name"] = "Basic Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "BShidefriendly",
["Value"] = true,
["Name"] = "Hide Buff Special at Friendly UnitFrame",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Hide Buff Special at Friendly UnitFrame",
},
{
["Type"] = 4,
["Key"] = "BScdreverse",
["Value"] = true,
["Name"] = "Swipe Closure Inverted",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, swipe closure inverted",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set Buff Special border thickness",
["Min"] = 0,
["Name"] = "Border Thickness",
["Value"] = 2,
["Key"] = "BSborderth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Buff Special Text Options",
["Name"] = "Buff Special Text Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set timer text size",
["Min"] = 1,
["Name"] = "Timer Text Size",
["Value"] = 14,
["Key"] = "BStimer_size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "BStimer_color",
["Value"] = {
1,
1,
0,
1,
},
["Name"] = "Timer Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Set timer text color",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set stack text size",
["Min"] = 1,
["Name"] = "Stack Text Size",
["Value"] = 10,
["Key"] = "BSstack_size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Buff Special Player Name Options",
["Name"] = "Buff Special Player Name Options",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set player name text size",
["Min"] = 1,
["Name"] = "Player Name Text Size",
["Value"] = 10,
["Key"] = "BSdesc_size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 8,
["Desc"] = "1(TOP-LEFT) / 2(LEFT) / 3(BOT-LEFT) / 4(BOT) / 5(BOT-RIGHT) / 6(RIGHT) / 7(TOP-RIGHT) / 8(TOP)",
["Min"] = 1,
["Name"] = "Player Name Text Anchor",
["Value"] = 4,
["Key"] = "Descanchor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set player name text y-offset",
["Min"] = -100,
["Name"] = "Player Name Text Y-offset",
["Value"] = -2,
["Key"] = "Descyoff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set player name text x-offset",
["Min"] = -100,
["Name"] = "Player Name Text X-offset",
["Value"] = 0,
["Key"] = "Descxoff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = .5 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Time"] = 1758384726,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 237,
["semver"] = "",
["Author"] = "????????-Illidan",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Debuff Border",
["PlaterCore"] = 1,
["version"] = -1,
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Initialization",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        \n        --Death Knight\n        [194310] = 395, --Festering Wound\n        [444633] = 390, -- Undeath from Whitemane\n        [191587] = 385, --Virulent Plague\n        [377540] = 380, --Death Rot\n        [390276] = 375, --Rotten Touch\n        [51714] = 295, --Razorice\n        [55095] = 290, --Frost Fever\n        [376974] = 285, --Everfrost\n        [434765] = 280, --Reaper's Mark\n        [1233351] = 275, --FrostReaper Tether\n        [444828] = 270, --Chains of Ice from Trollbane\n        [454824] = 100, --Subduing Grasp\n        [377445] = 80, --Unholy Aura\n        \n        --Priest\n        [34914] = 30, --Vampiric Touch\n        [589] = 20, --Shadow Word: Pain\n        [335467] = 10, --Devouring Plague\n        \n        --Demon Hunter\n        [\"Burning Wound\"] = 50,\n        \n        --Warrior\n        [388539] = 60, --Rend\n        [262115] = 55, --Deep Wounds\n        [167105] = 50, --Colossus Smash\n        \n        --Warlock\n        [980] = 50, --Agony\n        [146739] = 40, --Corruption\n        [157736] = 40, --Immolate\n        [80240] = 30, --Havoc\n        [445474] = 40, --Wither\n        [316099] = 30, --Unstable Affliction\n        [453206] = 10, --Shadow Embrace\n        [460553] = 50, --Doom\n        \n        --Rogue\n        [457129] = 100, --Deathstalker's Mark\n        [316220] = 99, -- Find Weakness\n        [196937] = 99, --Ghostly Strike\n        [36194] = 98, --Deathmark\n        [421976] = 97, --Caustic Spatter\n        [703] = 96, --Garrote\n        [1943] = 95, --Rupture\n        [319504] = 94, --Shiv\n        [441224] = 93, --Fazed\n        [394324] = 92, -- Deadly Poison\n        [461981] = 91, -- Fatal Intent\n        [384631] = 90, --Flagellation\n        [185763] = 82, -- Pistol Shot\n        \n        --Druid\n        [164815] = 100, --Sunfire\n        [164812] = 99, --Moonfire\n        \n        --Monk\n        [228287] = 59, --Mark of the Crane\n        \n        --Shaman\n        [188389] = 100, --Flame Shock\n        [334168] = 50, --Lashing Flames\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend",
},
["Time"] = 1755898351,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["DEATHKNIGHT"] = true,
["WARRIOR"] = true,
["ROGUE"] = true,
["PRIEST"] = true,
["WARLOCK"] = true,
["DEMONHUNTER"] = true,
["Enabled"] = true,
["DRUID"] = true,
["MONK"] = true,
["SHAMAN"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 747,
["Options"] = {
},
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["HooksTemp"] = {
},
["Name"] = "Aura Reorder",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Cast Update"] = "function(self, unitId, unitFrame, envTable)\n    unitFrame.castBar.ScheduleToHide = function(self) self:Hide() end\nend",
},
["Time"] = 1726338000,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 82,
["Options"] = {
},
["Author"] = "Avade-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Hide Interrupted",
["HooksTemp"] = {
},
["semver"] = "",
},
{
["OptionsValues"] = {
["ignoreFriendly"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    modTable.lockoutDurations = {\n        [1766] = 5, -- Kick\n        [2139] = 6, -- Counterspell\n        [6552] = 4, -- Pummel\n        [19647] = 6, -- Spell Lock\n        [132409] = 6, -- Spell Lock\n        [115781] = 6, -- Optical Blast\n        [47528] = 3, -- Mind Freeze\n        [57994] = 3, -- Wind Shear\n        [91807] = 2, -- Shambling Rush\n        [96231] = 4, -- Rebuke\n        [93985] = 4, -- Skull Bash\n        [116705] = 4, -- Spear Hand Strike\n        [147362] = 3, -- Counter Shot\n        [183752] = 3, -- Disrupt\n        [187707] = 3, -- Muzzle\n        [212619] = 6, -- Call Felhunter\n        -- [31935] = 3, -- Avenger's Shield\n        [217824] = 4, -- Shield of Virtue\n        [347008] = 4, -- Axe Toss\n        -- [97547] = 5, -- Solar Beam\n        --[220543] = 3, -- Silence\n    }\n    \n    modTable.data = {}\n    \n    local function isFriendly(flags)\n        return bit.band(flags, COMBATLOG_OBJECT_REACTION_FRIENDLY)  > 0\n    end\n    \n    local function getSchoolColor(school)\n        return COMBATLOG_DEFAULT_COLORS.schoolColoring[school] or COMBATLOG_DEFAULT_COLORS.schoolColoring[Enum.Damageclass.MaskNone]\n    end\n    \n    local function getBorderColor(spellSchool) \n        local borderColor \n        if modTable.config.schoolBorders then\n            borderColor = getSchoolColor(spellSchool)\n        elseif Plater.db.profile.extra_icon_use_blizzard_border_color then\n            local color = DebuffTypeColor[\"none\"] or {r=0, b=0, g=0, a=0}\n            borderColor = {color.r, color.g, color.b, color.a or 1}\n        else\n            borderColor = Plater.db.profile.extra_icon_border_color\n        end\n        return borderColor\n    end\n    \n    local basekick = {\n        Show = function(self, frame)\n            local borderColor = getBorderColor(self.spellSchool)\n            frame:AddSpecificIcon(\n                self.id, \n                self.spellId, \n                borderColor, \n                self.startTime, \n                self.duration, \n                nil, \n                self.casterName and {text = self.casterName, text_color = self.casterClass} or false,\n                1, \n                nil, \n                self.caster, \n                false, \n                self.spellName, \n                nil\n            )\n            self.frame = frame\n        end,\n        Hide = function(self)\n            if self.frame then\n                self.frame:RemoveSpecificIcon(self.id)\n            end\n        end\n    }\n    \n    local function OnEvent(self, event)\n        local details = { CombatLogGetCurrentEventInfo() }\n        \n        if details[2] ~= \"SPELL_INTERRUPT\" then return end\n        if modTable.config.ignoreFriendly and isFriendly(details[10]) then return end\n        if details[12] == 220543 then return end\n        \n        local guid = details[8]\n        local spellId = details[12]\n        local texure = C_Spell.GetSpellTexture(spellId)\n        local spellName = details[13]\n        local school = details[17]\n        local caster = details[5]\n        local casterClass = select(2, UnitClass(caster or \"\"))\n        local casterName\n        if (casterClass and UnitPlayerControlled(caster)) then\n            casterName = UnitName(caster)\n        end\n        local startTime = GetTime()\n        local duration = modTable.lockoutDurations[spellId] or 4\n        local expirationTime = (startTime + duration)\n        local id = caster..startTime\n        \n        modTable.data[guid] = modTable.data[guid] or {}\n        \n        local kick = {\n            id = id,\n            spellId = spellId,\n            spellName = spellName,\n            texture = texure,\n            startTime = startTime,\n            duration = duration,\n            expirationTime = expirationTime,\n            caster = caster,\n            casterName = casterName,\n            casterClass = casterClass,\n            spellSchool = school,\n            Show = basekick.Show,\n            Hide = basekick.Hide\n        }\n        \n        modTable.data[guid][id] = kick\n        \n        C_Timer.NewTimer(duration, function()\n                kick:Hide()\n                modTable.data[guid][id] = nil\n                if next(modTable.data[guid]) == nil then\n                    modTable.data[guid] = nil\n                end\n        end)\n        \n    end\n    \n    modTable.eventFrame = modTable.eventFrame or GlobalPlaterInterruptEventFrame\n    if not modTable.eventFrame then\n        modTable.eventFrame = CreateFrame(\"Frame\", \"GlobalPlaterInterruptEventFrame\")\n        modTable.eventFrame:RegisterEvent(\"COMBAT_LOG_EVENT_UNFILTERED\")\n    end\n    \n    modTable.eventFrame:SetScript(\"OnEvent\",  OnEvent)\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local kicks = modTable.data[unitFrame.namePlateUnitGUID] or {}\n    for _, kick in pairs(kicks) do\n        kick:Show(unitFrame.ExtraIconFrame)\n    end\n    \nend",
},
["Time"] = 1746107821,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 975,
["semver"] = "",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "PVP/PVE School Lock Buff Special",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Key"] = "schoolBorders",
["Value"] = false,
["Name"] = "School based border color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change color of icon border depending on locked school",
},
{
["Type"] = 4,
["Key"] = "ignoreFriendly",
["Value"] = false,
["Name"] = "Ignore friendly nameplates",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore interrupts for friendly nameplates",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --ensure reload updates existing\n    modTable.updateExisting(unitFrame)\nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    \n    -- settings:\n    local formatAuraTimers = modTable.config.formatAuraTimers\n    local formatBuffSpecialTimers = modTable.config.formatBuffSpecialTimers\n    \n    \n    -- time formatting function: (can be adjusted)\n    Plater.FormatTimeNew = function (s)\n        if s < 3 then\n            return (\"%.1f\"):format(s)\n        elseif s < 60 then\n            return (\"%d\"):format(s)\n        elseif s < 3600 then\n            return (\"%d:%02d\"):format(s/60%60, s%60)\n        elseif s < 86400 then\n            return (\"%dh %02dm\"):format(s/(3600), s/60%60)\n        else\n            return (\"%dd %02dh\"):format(s/86400, (s /3600) - (floor(s/86400) * 24))\n        end\n    end\n    Plater.FormatTimeOrig = Plater.FormatTimeOrig or Plater.FormatTime\n    \n    local DF = _G[\"DetailsFramework\"]\n    local IconRowFunctions = DF.IconRowFunctions or DF.IconMixin\n    IconRowFunctions.FormatCooldownTimeOrig = IconRowFunctions.FormatCooldownTimeOrig or IconRowFunctions.FormatCooldownTime\n    \n    \n    -- exchange formatting:\n    function modTable.hookTimeFormat()\n        if formatAuraTimers then\n            Plater.FormatTime = Plater.FormatTimeNew\n        else\n            Plater.FormatTime = Plater.FormatTimeOrig\n        end\n        \n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                IconRowFunctions.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n        else\n            -- no buff special\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            end\n        end\n    end\n    \n    function modTable.updateExisting(unitFrame)\n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        else\n            \n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeOrig (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        end\n        \n    end\n    \n    \n    modTable.hookTimeFormat()\n    for _, plateFrame in ipairs (Plater.GetAllShownPlates()) do\n        modTable.updateExisting(plateFrame.unitFrame)\n    end\n    \nend",
["Player Logon"] = "function(modTable)\n    modTable.hookTimeFormat()\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1755875019,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/mULsbUUxJ/13",
["Enabled"] = true,
["Revision"] = 224,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Overwrites the Plater time formatting to show second fractions.",
["Prio"] = 99,
["Name"] = "Detailed Time Format",
["PlaterCore"] = 1,
["version"] = 13,
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Key"] = "formatAuraTimers",
["Value"] = true,
["Name"] = "Format Aura Timers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "formatBuffSpecialTimers",
["Value"] = true,
["Name"] = "Format Buff Special Timers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
["color"] = {
0.5882353186607361,
1,
0.9686275124549866,
1,
},
},
["LastHookEdited"] = "",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    local npctable = {\n        [61146] = true,\n        [103822] = true,\n        [15352] = true,\n        [95072] = true,\n        [61056] = true,\n    }\n    \n    function modTable.UpdateColor (unitFrame, unitId)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        if  InCombatLockdown() and unitFrame.InCombat then\n            if modTable.config.recolor then\n                local targetGUID = UnitGUID (unitFrame.targetUnitID)\n                if targetGUID then\n                    local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n                    if npctable[npcID] then\n                        Plater.SetNameplateColor (unitFrame, modTable.config.color)\n                        return\n                    end\n                end\n            end            \n            if unitFrame.namePlateThreatIsTanking and not Plater.PlayerIsTank then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n                return\n            elseif (not unitFrame.namePlateThreatIsTanking) and Plater.PlayerIsTank and not UnitIsUnit(unitFrame.targetUnitID, \"player\") then\n                local tanks = Plater.GetTanks()\n                local unitTargetName = UnitName(unitFrame.targetUnitID)\n                if tanks [unitTargetName] then\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.anothertank)\n                elseif UnitExists(unitTargetName) then\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n                return\n            end\n        end\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateColor (unitFrame, unitId)\nend",
},
["Time"] = 1745023098,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/N-Hb07L7A/9",
["Icon"] = "",
["Enabled"] = true,
["Revision"] = 1042,
["semver"] = "1.0.8",
["Author"] = "Viash-Thrall",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "NPC Color Override",
["PlaterCore"] = 1,
["version"] = 9,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 4,
["Key"] = "recolor",
["Value"] = true,
["Name"] = "Recolor if enemy is attacking Statue/Treant/Earth Elemental",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    function Plater.UpdateLifePercentText(healthBar, unitId, showHealthAmount, showPercentAmount, showDecimals) -- ~health\n        --get the cached health amount for performance\n        local currentHealth, maxHealth = healthBar.CurrentHealth, healthBar.CurrentHealthMax\n        \n        if showHealthAmount and showPercentAmount then\n            local percent = maxHealth == 0 and 100 or (currentHealth / maxHealth * 100)\n            \n            if showDecimals then\n                if percent < 10 then\n                    healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth) .. \" | \" .. format(\"%.2f%%\", percent))\n                elseif percent < 99.9 then\n                    healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth) .. \" | \" .. format(\"%.1f%%\", percent))\n                else\n                    healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth) .. \" | 100%\")\n                end\n            else\n                healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth) .. \" | \" .. format(\"%d%%\", percent))\n            end\n        elseif showHealthAmount then\n            healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth))\n        elseif showPercentAmount then\n            local percent = maxHealth == 0 and 100 or (currentHealth / maxHealth * 100)\n            \n            if showDecimals then\n                if percent < 10 then\n                    healthBar.lifePercent:SetText(format(\"%.2f%%\", percent))\n                elseif percent < 99.9 then\n                    healthBar.lifePercent:SetText(format(\"%.1f%%\", percent))\n                else\n                    healthBar.lifePercent:SetText(\"100%\")\n                end\n            else\n                healthBar.lifePercent:SetText(format(\"%d%%\", percent))\n            end\n        else\n            healthBar.lifePercent:SetText(\"\")\n        end\n    end\nend",
},
["Time"] = 1744824999,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 224,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show the total health and percent in the health amount text. See the constructor code to change options.",
["Prio"] = 99,
["Name"] = "Health Formatting",
["PlaterCore"] = 1,
["version"] = -1,
["LastHookEdited"] = "Initialization",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Initialization",
["UID"] = "0x62f9521d664ad",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    if not Plater.AddPerformanceUnits or not Plater.PERF_UNIT_OVERRIDES_BIT then\n        return\n    end\n    \n    local castDisabled = 2 -- Plater.PERF_UNIT_OVERRIDES_BIT.CAST\n    local auraDisabled = 4 -- Plater.PERF_UNIT_OVERRIDES_BIT.AURA\n    local threatDisabled = 1 --Plater.PERF_UNIT_OVERRIDES_BIT.THREAT\n    local allDisabled = 0\n    local castAndAuraDisabled = bit.bor(castDisabled, auraDisabled)\n    \n    -- local castAndAuraDisabled = bit.bor(castDisabled, auraDisabled)\n    \n    local units = {\n        -- Raids\n        [189706] = { enabled = true, flag = 0 }, -- Chaotic Essence\n        [189707] = { enabled = true, flag = 0 }, -- Chaotic mote\n        [176920] = { enabled = true, flag = 0 }, -- Domination Arrow -- Sylv\n        [196679] = { enabled = true, flag = 0 }, -- Frozen Shroud -- Broodkeeper\n        [194999] = { enabled = true, flag = 0 }, -- Volatile Spark -- Raszageth\n        [191714] = { enabled = true, flag = 0 }, -- Seeking Stormling -- Raszageth\n        [210231] = { enabled = true, flag = 0 }, -- Tainted Lasher -- Gnarlroot\n        [211306] = { enabled = true, flag = 0 }, -- Fiery vines -- Tindral\n        [219746] = { enabled = true, flag = 0 }, -- Tomb - Ansurek\n        \n        -- Dungeons\n        [196642] = { enabled = true, flag = 0 }, -- Hungry Lasher (Boss add)\n        [197398] = { enabled = true, flag = 0 }, -- Hungry Lasher\n        [208994] = { enabled = true, flag = 0 }, -- Infected Lasher\n        [189363] = { enabled = true, flag = 0 }, -- Infected Lasher\n        [96247] = { enabled = true, flag = 0 }, -- Vileshard Crawler\n        [100529] = { enabled = true, flag = 0 }, -- Hatespawn Slime\n        [84401] = { enabled = true, flag = 0 }, -- Swift Sproutling (boss add)\n        [217126] = { enabled = true, flag = bit.bor(castDisabled, auraDisabled) }, -- Over-Indulged Patron\n        \n        --Testing\n        [198594] = { enabled = false, flag = 0 }, -- Testing target dummy\n        [87329] = { enabled = false, flag = 0 }, -- testing\n    }\n    \n    for unit, meta in pairs(units) do\n        if meta.enabled and modTable.config.performance then\n            Plater.AddPerformanceUnits(unit, meta.flag)\n        else\n            Plater.RemovePerformanceUnits(unit)\n        end\n        \n        if meta.enabled and modTable.config.forceBlizz then\n            Plater.AddForceBlizzardNameplateUnits(unit)\n        else\n            Plater.RemoveForceBlizzardNameplateUnits(unit)\n        end\n    end\nend\n\n\n\n\n\n",
},
["Time"] = 1755275336,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
["Enabled"] = true,
["HEALER"] = true,
["DAMAGER"] = true,
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "",
["Enabled"] = true,
["Revision"] = 381,
["semver"] = "",
["Author"] = "Viashi-Argent Dawn",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Performance Units - Jundies",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "performance",
["Value"] = true,
["Name"] = "Performance",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "forceBlizz",
["Value"] = false,
["Name"] = "Force Blizzard",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["OptionsValues"] = {
["TargetBorderSize"] = 1.100000023841858,
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.casting = false\n    modTable.UpdateBorder(unitFrame, envTable, modTable)\nend",
["Destructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar.border then unitFrame.healthBar.border:Hide() end\n    if unitFrame.healthBar.targetBorder then unitFrame.healthBar.targetBorder:Hide() end\n    if unitFrame.castBar.border then unitFrame.castBar.border:Hide() end\n    if unitFrame.castBar.Icon then unitFrame.castBar.Icon:Hide() end\n    if unitFrame.castBar.IconBorder then unitFrame.castBar.IconBorder:Hide() end\n    if unitFrame.castBar.BorderShield then unitFrame.castBar.BorderShield:Hide() end\nend",
["Initialization"] = "function (modTable)\n    \n    -- Handle the border anchors that can switch\n    local left  = \"left\"\n    local right = \"right\"\n    local offsetDirection = 1;\n    \n    if modTable.config.SpellIconOnLeft then\n        -- If the spell icon is on the left, reverse the anchors\n        left, right = right, left\n        offsetDirection = -1;\n    end\n    \n    modTable.topleft = string.format(\"top%s\", left)\n    modTable.topright = string.format(\"top%s\", right)\n    modTable.bottomleft = string.format(\"bottom%s\", left)\n    modTable.bottomright = string.format(\"bottom%s\", right)\n    \n    function modTable.UpdateIconPosition(unitFrame, envTable, modTable)\n        local castBar = unitFrame.castBar\n        local icon = unitFrame.castBar.Icon\n        local shield = unitFrame.castBar.BorderShield\n        \n        icon:Hide()\n        castBar.IconBorder:Hide()\n        \n        if modTable.config.ShowSpellIcon then\n            icon:ClearAllPoints()\n            \n            if modTable.config.SpellIconInCastBar then\n                local iconSize = castBar:GetHeight()\n                \n                local iconOffset = 0\n                if modTable.config.SpellIconBorder then\n                    iconOffset = modTable.config.SpellIconBorderSize\n                end\n                \n                local castBarWidth   = unitFrame.healthBar:GetWidth()\n                local castBarYOffset = 0\n                if modTable.config.CastBarBorder then\n                    castBarWidth   = castBarWidth-2*(modTable.config.CastBarBorderSize)\n                    castBarYOffset = -modTable.config.CastBarBorderSize\n                end\n                \n                -- Anchor the Icon to right below the healthbar\n                -- icon:SetPoint(modTable.topleft, unitFrame.healthBar, modTable.bottomleft, 0, -iconOffset)\n                icon:SetPoint(modTable.topright, unitFrame.healthBar, modTable.bottomright, 0, -iconOffset)\n                icon:SetSize(iconSize,iconSize)\n                \n                -- Anchor the cast bar to be next to the icon\n                castBar:ClearAllPoints()\n                castBar:SetPoint(modTable.topright,    icon,                modTable.topleft,    -iconOffset*offsetDirection, 0)\n                castBar:SetPoint(modTable.bottomright, icon,                modTable.bottomleft, -iconOffset*offsetDirection, 0)\n                castBar:SetPoint(modTable.topleft,     unitFrame.healthBar, modTable.bottomleft,  0,                          castBarYOffset)\n            else\n                icon:SetPoint(modTable.topleft,    unitFrame.healthBar, modTable.topright,    modTable.config.SpellIconXOffset, envTable.IconSizeOffset)\n                icon:SetPoint(modTable.bottomleft, unitFrame.castBar,   modTable.bottomright, modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            end\n            \n            icon:Show()\n            \n            if modTable.config.SpellIconBorder then\n                castBar.IconBorder:SetVertexColor(\n                    DetailsFramework:ParseColors(modTable.config.SpellIconBorderColor)\n                )\n                castBar.IconBorder:SetBorderSizes(\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize\n                )\n                castBar.IconBorder:UpdateSizes()\n                castBar.IconBorder:Show()\n            end\n        end\n        \n        if modTable.config.CastBarBorder then\n            castBar.border:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.CastBarBorderColor)\n            )\n            castBar.border:SetBorderSizes(\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize\n            )\n            castBar.border:UpdateSizes()\n            castBar.border:Show()\n        else\n            castBar.border:Hide()\n        end\n        \n        if modTable.config.ShowShieldIcon and not castBar.canInterrupt then\n            shield:Show()\n            shield:SetAlpha(1)\n            shield:SetTexCoord(0, 1, 0, 1)\n            shield:SetVertexColor(1, 1, 1, 1)\n            shield:SetTexture(envTable.ShieldTexture)\n            shield:SetDesaturated(envTable.ShieldDesaturated)\n            \n            if not envTable.ShieldDesaturated then\n                shield:SetVertexColor(DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            \n            shield:SetSize(modTable.config.ShieldIconWidth, modTable.config.ShieldIconHeight)\n            shield:ClearAllPoints()\n            shield:SetPoint(\n                \"center\",\n                castBar,\n                modTable.config.ShieldIconOnLeft and \"left\" or \"right\",\n                modTable.config.ShieldIconXOffset,\n                modTable.config.ShieldIconYOffset\n            )\n        else\n            shield:Hide()\n        end\n    end\n    \n    function modTable.UpdateBorder(unitFrame, envTable, modTable)\n        local healthBar = unitFrame.healthBar\n        local castBar = unitFrame.castBar\n        local targetBorder = unitFrame.healthBar.targetBorder\n        local defaultBorder = unitFrame.healthBar.border\n        \n        targetBorder:Hide()\n        defaultBorder:Hide()\n        \n        if modTable.config.ReplaceDefaultBorder then\n            targetBorder = unitFrame.healthBar.border\n            targetBorder:SetFrameStrata(\"HIGH\")\n            targetBorder:Show()\n        else\n            unitFrame.healthBar.border:Show()\n            if unitFrame.IsTarget then\n                targetBorder:Show()\n            end\n        end\n        \n        targetBorder:ClearAllPoints()\n        \n        -- if casting==true or (castBar and (castBar.casting or castBar.channeling) and not castBar.finished and not castBar.failed) then\n        if envTable.casting then\n            if modTable.config.ShowSpellIcon and modTable.config.ExpandTargetBorder and not modTable.config.SpellIconInCastBar then\n                -- Anchor the top of the border to the top of the cast icon\n                targetBorder:SetPoint(modTable.topright, castBar.Icon, modTable.topright, 0, 0)\n            else\n                -- Anchor the top of the border to the top of the healthbar\n                targetBorder:SetPoint(modTable.topright, healthBar, modTable.topright, 0, 0)\n            end\n            -- targetBorder:SetPoint(modTable.topleft, healthBar, modTable.topleft, 0, 0)\n            \n            if modTable.config.ExpandTargetBorder then\n                targetBorder:SetPoint(modTable.bottomleft, castBar, modTable.bottomleft, 0, 0)\n                if modTable.config.SpellIconInCastBar then\n                    targetBorder:SetPoint(modTable.bottomright, castBar.Icon, modTable.bottomright, 0, 0)\n                end\n            else\n                targetBorder:SetPoint(modTable.bottomleft, healthBar, modTable.bottomleft, 0, 0)\n            end\n        else\n            targetBorder:SetPoint(modTable.topright,   healthBar, modTable.topright,   0, 0)\n            targetBorder:SetPoint(modTable.bottomleft, healthBar, modTable.bottomleft, 0, 0)\n        end\n        \n        if unitFrame.IsTarget then\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.TargetBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize\n            )\n            targetBorder:UpdateSizes()\n        else\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(envTable.DefaultBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize\n            )\n            targetBorder:UpdateSizes()\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.casting = false\n    modTable.UpdateBorder(unitFrame, envTable, modTable)\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.casting = true\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    modTable.UpdateBorder (unitFrame, envTable, modTable)\nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable)\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- Any settings changed here will require you to disable this plater mod,\n    -- then re-enable it by checking the box in the list on the left hand side of the window\n    \n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 0\n    \n    -- Settings for the shield for non interruptible casts\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    \n    envTable.DefaultBorderSize  = Plater.db.profile.border_thickness\n    envTable.DefaultBorderColor = Plater.db.profile.border_color\n    \n    -- Can't rely on the \"Cast start\" hook so gotta manage this ourselves\n    envTable.casting = false\n    \n    -- Create a new health bar target border\n    if not unitFrame.healthBar.targetBorder then\n        unitFrame.healthBar.targetBorder = CreateFrame(\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.healthBar.targetBorder:Hide()\n    end\n    \n    -- Create a frame for the spell icon border\n    if not unitFrame.castBar.IconOverlayFrame then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.IconBorder:SetIgnoreParentScale(false)\n    end\n    \n    -- Create a frame for the cast bar border\n    if not unitFrame.castBar.border then\n        unitFrame.castBar.border = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.border:SetIgnoreParentScale(false)\n    end\n    \n    -- Hook into when the cast bar hides so we can update the border with casting set to false\n    -- Note: This hook needs to be the last thing in the constructor as it may immediately call\n    -- UpdateBorder and we need to make sure all of the frames are created first\n    if not unitFrame.castBar.borderChangeHooked then\n        -- hooksecurefunc(\n        --     unitFrame.castBar,\n        --     \"Hide\",\n        --     function()\n        --         envTable.casting = false\n        --         modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n        --         modTable.UpdateBorder(unitFrame, envTable, modTable)\n        --     end\n        -- )\n        -- hooksecurefunc(\n        --     unitFrame.castBar,\n        --     \"Show\",\n        --     function()\n        --         envTable.casting = true\n        --         modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n        --         modTable.UpdateBorder(unitFrame, envTable, modTable)\n        --     end\n        -- )\n        unitFrame.castBar.borderChangeHooked = true\n    end\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = -1\n    modTable.UpdateIconPosition(unitFrame, envTable, modTable)\n    \n    local casting = unitFrame.castBar and (unitFrame.castBar.casting or unitFrame.castBar.channeling)\n    \n    if not envTable.casting or not casting or unitFrame.IsTarget then\n        -- Update on start of cast, end of cast, and always when a target\n        envTable.casting = casting\n        modTable.UpdateBorder(unitFrame, envTable, modTable)\n    end\nend",
["Mod Option Changed"] = "function (modTable)\n    local left  = \"left\"\n    local right = \"right\"\n    \n    if modTable.config.SpellIconOnLeft then\n        left, right = right, left\n    end\n    \n    modTable.topleft     = string.format(\"top%s\", left)\n    modTable.topright    = string.format(\"top%s\", right)\n    modTable.bottomleft  = string.format(\"bottom%s\", left)\n    modTable.bottomright = string.format(\"bottom%s\", right)\nend",
},
["Time"] = 1758384752,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/_xVV5NVNa/15",
["Icon"] = "",
["Enabled"] = true,
["Revision"] = 1655,
["semver"] = "1.1.0",
["Author"] = "Vahra-Tichondrius",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate and extend the border around icon and cast bar.",
["Prio"] = 99,
["Name"] = "Dynamic Border and Cast Icon",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Border Settings",
["Name"] = "Border Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "TargetBorderColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Target Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of the targeted nameplate",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Target Border Size",
["Value"] = 1.5,
["Key"] = "TargetBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 4,
["Key"] = "ExpandTargetBorder",
["Value"] = true,
["Name"] = "Expand Target Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Expands the target border around the cast icon and cast bar",
},
{
["Type"] = 4,
["Key"] = "ReplaceDefaultBorder",
["Value"] = false,
["Name"] = "Replace Default Border (/reload)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Replace the default border instead of creating a new one. You may have to /reload when changing this option",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Cast Bar Settings",
["Name"] = "Cast Bar Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "hoverInfo",
["Value"] = false,
["Name"] = "< Hover over this box for more info",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Note, to get this to look right you may have to update the Y offset of the cast bar under Plater's \"Enemy Npc\" settings",
},
{
["Type"] = 4,
["Key"] = "CastBarBorder",
["Value"] = true,
["Name"] = "Cast Bar Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show a border around the enemy cast bar",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the enemy cast bar",
["Min"] = 0,
["Name"] = "Cast Bar Border Size",
["Value"] = 0.5,
["Key"] = "CastBarBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "CastBarBorderColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Cast Bar Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of enemy cast bar",
},
{
["Type"] = 6,
["Key"] = "option27",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Shield Icon Settings",
["Name"] = "Shield Icon Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "ShowShieldIcon",
["Value"] = false,
["Name"] = "Show Shield Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show a shield icon next to the cast bar for uninterruptable spells",
},
{
["Type"] = 4,
["Key"] = "ShieldIconOnLeft",
["Value"] = true,
["Name"] = "Shield Icon on Left",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the shield icon on the left side of the cast bar. If unchecked it will be on the right.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon X Offset",
["Value"] = -4.5,
["Key"] = "ShieldIconXOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The Y offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon Y Offset",
["Value"] = 0,
["Key"] = "ShieldIconYOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The width of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Width",
["Value"] = 8,
["Key"] = "ShieldIconWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The height of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Height",
["Value"] = 8,
["Key"] = "ShieldIconHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Cast Icon Settings",
["Name"] = "Cast Icon Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "ShowSpellIcon",
["Value"] = true,
["Name"] = "Show Spell Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show the spell icon of the targets cast",
},
{
["Type"] = 4,
["Key"] = "SpellIconInCastBar",
["Value"] = true,
["Name"] = "Show Cast Icon Next To Cast Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Shows the cast spell icon next to the cast bar. This automatically will set the icon to the size of the cast bar in the \"Enemy NPC\" tab in Plater.",
},
{
["Type"] = 4,
["Key"] = "SpellIconOnLeft",
["Value"] = true,
["Name"] = "Spell Icon On Left",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Move the spell icon to the left side of the nameplate. If unchecked it will show on the right.",
},
{
["Type"] = 4,
["Key"] = "SpellIconBorder",
["Value"] = true,
["Name"] = "Spell Icon Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should Show a border around the spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Spell Icon Border Size",
["Value"] = 0.5,
["Key"] = "SpellIconBorderSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "SpellIconBorderColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Spell Icon Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of target's spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X Offset of the Spell Icon",
["Min"] = -10,
["Name"] = "Spell Icon X Offset",
["Value"] = 0.5,
["Key"] = "SpellIconXOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["HooksTemp"] = {
},
["version"] = 15,
},
{
["OptionsValues"] = {
["oneColor"] = {
0,
1,
0.01176470704376698,
1,
},
["twoColor"] = {
0,
0.501960813999176,
1,
1,
},
},
["LastHookEdited"] = "Initialization",
["UID"] = "0x6490c26f17d91913",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.SetNameplateColors(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    --IDs of dots, you can change them to easier adjust to different classes, change only numbers\n    modTable.doubleDebuffs = {\n        {34914, 335467}, --Vampiric Touch + Devouring Plague\n        {188389, 334168}, --Flame Shock + Lashing Flames\n        {164815, 164812}, --Sunfire + Moonfire\n        {703, 1943}, --Garrote + Rupture\n        {980, 146739}, --Agony + Corruption\n        {980, 445474}, --Agony + Wither\n        {188389, 197209}, --Flame Shock + Lightning Rod\n    }\n    \n    modTable.singleDebuffs = {\n        34914, --Vampiric Touch\n        589,--Shadow Word: Pain\n        20421, --Purge the Wicked\n        188389, --Flame Shock\n        157736, --Immolate\n        217200, --Barbed Shot\n        228287, --Mark of the Crane\n        445474, --Wither\n        164815, --Sunfire\n        164812, --Moonfire\n        155722, --Rake\n        980, --Agony\n        146739, --Corruption\n        460553, --Doom\n        1233351, --Frostreaper\n        \n    }\n    \n    modTable.rOption = modTable.config.resetOption\n    \n    modTable.matchMultipleBuffs = {}\n    \n    for _, v in ipairs (modTable.doubleDebuffs) do\n        local buff = {\n            auras = v,\n            nameplateColor = modTable.config.twoColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\n    \n    for _, v in ipairs (modTable.singleDebuffs) do\n        local buff = {\n            auras = {v},\n            nameplateColor = modTable.config.oneColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\nend\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(modTable.matchMultipleBuffs) do      \n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, v.nameplateColor)\n                \n                return\n            else\n                -- reset colour\n                if (modTable.rOption) then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, 1,1,1, 1)\n                end\n                \n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors(unitFrame)\n        local colored = envTable.matchMultiple(unitFrame)\n    end\n    \nend",
},
["Time"] = 1757596377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["HUNTER"] = true,
["SHAMAN"] = true,
["PRIEST"] = true,
["WARLOCK"] = true,
["DEATHKNIGHT"] = true,
["Enabled"] = true,
["DRUID"] = true,
["MONK"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 1535,
["semver"] = "",
["Author"] = "Megabelly-Silvermoon",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Debuff Name Color Change",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 5,
["Key"] = "label1",
["Value"] = "Settings:",
["Name"] = "Settings:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "oneColor",
["Value"] = {
1,
0.50196081399918,
0,
1,
},
["Name"] = "One Debuff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with 1 debuff",
},
{
["Type"] = 1,
["Key"] = "twoColor",
["Value"] = {
0.13333334028721,
0.54509806632996,
0.13333334028721,
1,
},
["Name"] = "Two Debuffs",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with a set of 2 debuffs",
},
{
["Type"] = 5,
["Key"] = "label4",
["Value"] = "Miscellaneous:",
["Name"] = "Miscellaneous:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetOption",
["Value"] = true,
["Name"] = "Reset colour after expire",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Resets colour after debuf expires. Toggling on will prevent sometimes lingering colour on nameplates/borders. Toggling off makes mod compatible with other nameplate colouring mods.",
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Initialization",
["UID"] = "0x66cb886a1eb70a9",
["Hooks"] = {
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateFilters(modTable)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateFilters(modTable)\nend",
["Initialization"] = "function (modTable)\n    \n    -- Each of the spec tables are a map of [spellID] = blacklisted\n    -- blacklisted can be true, false, or an expression containing IsPlayerSpell(spellID)\n    \n    modTable.GetFilters = function(modTable) return {\n            -- Warrior\n            [1] = {\n                -- Arms\n                [71] = {},\n                \n                -- Fury\n                [72] = {},\n                \n                -- Protection\n                [73] = {},\n            },\n            \n            -- Paladin\n            [2] = {\n                -- Holy\n                [65] = {},\n                \n                -- Protection\n                [66] = {},\n                \n                -- Retribution\n                [70] = {},\n            },\n            \n            -- Hunter\n            [3] = {\n                -- Beast Mastery\n                [253] = {},\n                \n                -- Marksmanship\n                [254] = {},\n                \n                -- Survival\n                [255] = {},\n            },\n            \n            -- Rogue\n            [4] = {\n                -- Assassination\n                [259] = {},\n                \n                -- Outlaw\n                [260] = {},\n                \n                -- Subtlety\n                [261] = {},\n            },\n            \n            -- Priest\n            [5] = {\n                -- Discipline\n                [256] = {},\n                \n                -- Holy\n                [257] = {},\n                \n                -- Shadow\n                [258] = {\n                    [589] = true\n                },\n            },\n            \n            -- Death Knight\n            [6] = {\n                -- Blood\n                [250] = {},\n                \n                -- Frost\n                [251] = {\n                    [376974] = IsPlayerSpell(377226), -- blacklist Everfrost if talented into Frozen Dominion\n                    [444633] = true -- Undeath while in Frost Spec\n                },\n                \n                -- Unholy\n                [252] = {\n                    [55095] = IsPlayerSpell(390283), -- blacklist Frost Fever when Superstrain is talented\n                    [55078] = IsPlayerSpell(390283), -- blacklist Blood Plague when Superstrain is talented\n                },\n            },\n            \n            -- Shaman\n            [7] = {\n                -- Elemental\n                [262] = {},\n                \n                -- Enhancement\n                [263] = {},\n                \n                -- Restoration\n                [264] = {},\n            },\n            \n            -- Mage\n            [8] = {\n                -- Arcane\n                [62] = {},\n                \n                -- Fire\n                [63] = {},\n                \n                -- Frost\n                [64] = {},\n            },\n            \n            -- Warlock\n            [9] = {\n                -- Affliction\n                [265] = {},\n                \n                -- Demonology\n                [266] = {},\n                \n                -- Destruction\n                [267] = {},\n            },\n            \n            -- Monk\n            [10] = {\n                -- Brewmaster\n                [268] = {},\n                \n                -- Mistweaver\n                [270] = {},\n                \n                -- Windwalker\n                [269] = {},\n            },\n            \n            -- Druid\n            [11] = {\n                -- Balance\n                [102] = {},\n                \n                -- Feral\n                [103] = {},\n                \n                -- Guardian\n                [104] = {},\n                \n                -- Restoration\n                [105] = {},\n            },\n            \n            -- Demon Hunter\n            [12] = {\n                -- Havoc\n                [577] = {},\n                \n                -- Vengeance\n                [581] = {},\n            },\n            \n            -- Evoker\n            [13] = {\n                -- Devastation\n                [1467] = {},\n                \n                -- Preservation\n                [1468] = {},\n                \n                -- Augmentation\n                [1473] = {},\n            },\n    } end\n    \n    ----------------------------------------------------------------------------------------------------\n    ----------------------------------------------------------------------------------------------------\n    \n    modTable.UpdateFilters = function(modTable)\n        \n        -- Try to get the current spec\n        local currentSpec = GetSpecialization()\n        if not currentSpec then return end\n        \n        modTable.ClassId = select(3, UnitClass(\"player\"))\n        modTable.SpecId = select(1, GetSpecializationInfo(currentSpec))\n        modTable.AllFilters = modTable.GetFilters(modTable)\n        \n        local needsCacheUpdate = false\n        local blacklistQueue = {}\n        \n        -- First just remove all spells from the blacklist\n        for classId, specData in pairs(modTable.AllFilters or {}) do\n            for specId, blacklist in pairs(specData or {}) do\n                for spellId, isBlacklisted in pairs(blacklist or {}) do\n                    -- Remove the spell from the blacklist\n                    blacklistQueue[spellId] = false\n                end\n            end\n        end\n        \n        -- Then go through and update the blacklist queue for the current spec last\n        if modTable.AllFilters[modTable.ClassId] ~= nil and modTable.AllFilters[modTable.ClassId][modTable.SpecId] ~= nil then\n            -- Protect against invalid class/spec IDs so this won't break if something new is added\n            for spellId, isBlacklisted in pairs(modTable.AllFilters[modTable.ClassId][modTable.SpecId]) do\n                blacklistQueue[spellId] = isBlacklisted\n            end\n        end\n        \n        -- Update the actual Plater DB\n        for spellId, isBlacklisted in pairs(blacklistQueue or {}) do\n            if isBlacklisted and Plater.db.profile.aura_tracker.debuff_banned[spellId] ~= false then\n                -- Blacklisting the spellID in the Plater DB consists of setting the DB value to false\n                -- The false just means to blacklist by spellID as opposed to spell name\n                needsCacheUpdate = true\n                Plater.db.profile.aura_tracker.debuff_banned[spellId] = false\n            elseif not isBlacklisted and Plater.db.profile.aura_tracker.debuff_banned[spellId] ~= nil then\n                -- Removing the blacklist item is done by setting the table entry to nil\n                needsCacheUpdate = true\n                Plater.db.profile.aura_tracker.debuff_banned[spellId] = nil\n            end\n        end\n        \n        if (needsCacheUpdate) then\n            -- Only update the cache if needed as this function is more expensive\n            -- This will happen when the mod is loaded for the first time and on talent changes\n            Plater.UpdateAuraCache()\n        end\n    end\n    \n    modTable.UpdateFilters(modTable)\n    \nend",
},
["Time"] = 1755898192,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["DEATHKNIGHT"] = true,
["Enabled"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "",
["Enabled"] = true,
["Revision"] = 387,
["semver"] = "",
["Author"] = "Vahra-Tichondrius",
["Desc"] = "Filter out auras based on class, spec, and talent builds",
["Prio"] = 99,
["Name"] = "Advanced Aura Filter",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["OptionsValues"] = {
["nameplateFlash"] = false,
["colorTick"] = {
0.6235294342041016,
0.7490196228027344,
1,
1,
},
["colorProtected"] = {
0.7803922295570374,
0.250980406999588,
0.250980406999588,
1,
},
["colorSecondaryInterrupt"] = {
0.4352941513061523,
1,
0.5372549295425415,
1,
},
["replaceName"] = false,
["colorInterruptSoon"] = {
0.8823530077934265,
0.8823530077934265,
0.8823530077934265,
1,
},
["colorInterruptAvailable"] = {
0.6235294342041016,
0.7490196228027344,
1,
1,
},
["colorNoInterrupt"] = {
0.4862745404243469,
0.4862745404243469,
0.4862745404243469,
1,
},
["hideNameSolo"] = true,
},
["LastHookEdited"] = "",
["UID"] = "0x67a463b72e74290",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.EnhancedCastBar(unitId, unitFrame)\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)    \n    modTable.EnhancedCastBar(unitId, unitFrame)\nend",
["Initialization"] = "function  (modTable)\n    modTable.reflectableSpells = {}\n    \n    local playerClass = select(3, UnitClass(\"player\"))\n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    ---@param spellID number\n    ---@return boolean\n    local function IsSpellOnCooldown_IgnoreGCD(spellID)\n        local gcdInfo = C_Spell.GetSpellCooldown(61304)\n        local GCD_expirationTime = gcdInfo.startTime + gcdInfo.duration\n        local spellInfo = C_Spell.GetSpellCooldown(spellID)\n        local spellReadyTime = spellInfo.startTime + spellInfo.duration\n        return spellReadyTime > GCD_expirationTime\n    end\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    local function MaybeCreateTickTexture(castBar)\n        if not castBar.tick then\n            castBar.tick = castBar:CreateTexture(nil, \"overlay\")\n            castBar.tick:SetDrawLayer(\"overlay\", 4)\n            castBar.tick:SetBlendMode(\"DISABLE\")\n            --castBar.tick:SetHeight(castBar:GetHeight())\n            castBar.tick:SetHeight(8)\n            castBar.tick:SetTexture(Plater.SparkTextures[8])\n            castBar.tick:SetWidth(2)\n            castBar.tick:SetVertexColor(Plater:ParseColors(modTable.config.colorTick))\n        end\n    end\n    \n    ---@param unitId string\n    ---@return boolean\n    local function UnitIsStillCasting(unitId)\n        if UnitCastingInfo(unitId) ~= nil then\n            return true\n        end\n        \n        if UnitChannelInfo(unitId) ~= nil then\n            return true\n        end\n        \n        return false\n    end\n    \n    local function CompatGetSpecialization()\n        if GetSpecialization then\n            return GetSpecialization()\n        end\n        \n        return C_SpecializationInfo.GetSpecialization()\n    end\n    \n    local function DetermineInterruptId()\n        if playerClass == 1 then -- Warrior\n            return function()\n                return 6552 -- Pummel\n            end\n        end\n        \n        if playerClass == 2 then -- Paladin\n            return function()\n                return 96231 -- Rebuke\n            end\n        end\n        \n        if playerClass == 3 then -- Hunter\n            return function()\n                local spec = CompatGetSpecialization()\n                \n                if spec == 3 then -- survival\n                    return 187707 -- muzzle\n                end\n                \n                return 147362 -- counter shot\n            end\n        end\n        \n        if playerClass == 4 then -- rogue\n            return function()\n                return 1766 -- kick\n            end\n        end\n        \n        if playerClass == 5 then -- priest\n            return function()\n                local spec = CompatGetSpecialization()\n                \n                if spec == 3 then -- shadow\n                    return 15487 -- silence\n                end\n                \n                return nil\n            end\n        end\n        \n        if playerClass == 6 then -- death knight\n            return function()\n                return 47528 -- mind freeze\n            end\n        end\n        \n        if playerClass == 7 then -- shaman\n            return function()\n                return 57994\n            end\n        end\n        \n        if playerClass == 8 then -- mage\n            return function()\n                return 2139 -- counterspell\n            end\n        end\n        \n        if playerClass == 9 then -- warlock\n            return function()\n                if IsSpellKnown(89766, true) then -- felguard: axe toss\n                    return 89766\n                end\n                \n                if IsSpellKnown(19647, true) then -- felhunter: spell lock\n                    return 19647\n                end\n                \n                if\n                C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnownOrOverridesKnown(132409, false)\n                then -- spell lock via grimoire of sacrifice\n                    return 132409\n                end\n                \n                return nil\n            end\n        end\n        \n        if playerClass == 10 then -- monk\n            return function()\n                return 116705 -- spear hand strike\n            end\n        end\n        \n        if playerClass == 11 then -- druid\n            return function()\n                local spec = CompatGetSpecialization()\n                \n                if spec == 1 then -- balance\n                    return 78675 -- solar beam\n                end\n                \n                return 106839 -- skull bash\n            end\n        end\n        \n        if playerClass == 12 then -- demon hunter\n            return function()\n                return 183752 -- disrupt\n            end\n        end\n        \n        if playerClass == 13 then -- evoker\n            return function()\n                return 351338 -- quell\n            end\n        end\n    end\n    \n    local GetInterruptID = DetermineInterruptId()\n    local playerIsWarlock = playerClass == 9\n    local playerName = UnitName(\"player\")\n    \n    ---@param unitId string\n    ---@param unitFrame Frame\n    function modTable.EnhancedCastBar(unitId, unitFrame)\n        local castBar = unitFrame.castBar\n        \n        if castBar.tick ~= nil then\n            castBar.tick:Hide()\n        end\n        \n        if castBar.IsInterrupted or castBar.interrupted or not UnitIsStillCasting(unitId) then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        local targetName = UnitExists(targetUnitId) and UnitName(targetUnitId) or nil\n        local isTargettingMe = targetName == playerName\n        castBar.Text:SetText(castBar.SpellName)\n        \n        -- Cast is targetting a specific unit\n        if targetName then\n            -- Nameplate flash options\n            if isTargettingMe and modTable.config.nameplateFlash then\n                -- Default value of true since it is turned on in the options\n                local showNameplateFlash = true\n                \n                if\n                modTable.config.hideNameplateFlashSolo\n                and not UnitInParty(\"player\")\n                and not UnitInRaid(\"player\")\n                then\n                    showNameplateFlash = false\n                end\n                \n                if modTable.config.hideFlashAsTank and GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                    showNameplateFlash = false\n                end\n                \n                -- Show nameplate flash if conditions met\n                if showNameplateFlash then\n                    Plater.FlashNameplateBody(unitFrame)\n                end\n            end\n            \n            -- Target name in cast bar options\n            if modTable.config.showTargetName then\n                if modTable.config.replaceName and isTargettingMe then\n                    targetName = \"Me\"\n                end\n                \n                local castBarWidth = castBar:GetWidth()\n                -- clip cast name at 60% of cast bar width always\n                DetailsFramework:TruncateText(castBar.Text, castBarWidth * 0.6)\n                \n                -- first, truncate the spell name to make space for the target name\n                local currentText = castBar.Text:GetText()\n                if currentText ~= nil and currentText ~= \"\" then\n                    local castText = currentText .. \" \" .. Plater.SetTextColorByClass(targetUnitId, targetName)\n                    \n                    if\n                    modTable.config.hideNameSolo\n                    and not UnitInParty(\"player\")\n                    and not UnitInRaid(\"player\")\n                    and isTargettingMe\n                    then\n                        castText = currentText\n                    end\n                    \n                    castBar.Text:SetText(castText)\n                    -- now truncate again to ensure the target name doesn't overlap with the cast duration\n                    DetailsFramework:TruncateText(castBar.Text, castBarWidth * 0.9)\n                end\n            end\n        end\n        \n        if not modTable.config.showInterruptColor then\n            return\n        end\n        \n        local interruptID = GetInterruptID()\n        local nextColor = modTable.config.colorProtected\n        \n        if interruptID == nil then\n            nextColor = modTable.config.colorNoInterrupt\n        else\n            -- Interrupt bar color options\n            local canInterrupt = castBar.canInterrupt\n            local castEndTime = castBar.spellEndTime\n            \n            local interruptInfo = C_Spell.GetSpellCooldown(interruptID)\n            local interruptReadyTime = interruptInfo.startTime + interruptInfo.duration\n            \n            if canInterrupt then\n                -- Check to see if the spell is known/talented\n                if IsSpellKnown(interruptID, playerIsWarlock) or IsSpellKnownOrOverridesKnown(interruptID, false) then\n                    if interruptReadyTime == 0 then\n                        nextColor = modTable.config.colorInterruptAvailable\n                    elseif\n                    modTable.config.showSecondaryInterrupts\n                    and playerClass == 2 -- paladin\n                    and IsSpellKnown(31935) -- avenger's shield\n                    and not IsSpellOnCooldown_IgnoreGCD(31935)\n                    then\n                        nextColor = modTable.config.colorSecondaryInterrupt\n                    elseif interruptReadyTime < (castEndTime - 0.25) then\n                        MaybeCreateTickTexture(castBar)\n                        castBar.tick:Show()\n                        local tickLocation = (interruptInfo.startTime + interruptInfo.duration - castBar.spellStartTime)\n                        / castBar.maxValue -- castBar.spellStartTime + 0.25\n                        if castBar.channeling then\n                            tickLocation = 1 - tickLocation\n                        end\n                        castBar.tick:SetPoint(\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                        \n                        nextColor = modTable.config.colorInterruptSoon\n                    elseif interruptReadyTime >= (castEndTime - 0.25) then\n                        nextColor = modTable.config.colorNoInterrupt\n                    end\n                else\n                    nextColor = modTable.config.colorNoInterrupt\n                end\n            end\n            \n            -- Spell Reflection coloring\n            if\n            modTable.config.showSecondaryInterrupts\n            and isTargettingMe\n            and playerClass == 1\n            and IsSpellKnown(23920) -- spell reflect\n            and not IsSpellOnCooldown_IgnoreGCD(23920)\n            and modTable.reflectableSpells[castBar.SpellID] == true\n            then\n                -- Color the bar if the spell is reflectable\n                nextColor = modTable.config.colorSecondaryInterrupt\n            end\n        end\n        \n        local currentR, currentG, currentB, currentA = castBar:GetColor()\n        local nextR, nextG, nextB, nextA = unpack(nextColor)\n        \n        if currentR ~= nextR or currentG ~= nextG or currentB ~= nextB or currentA ~= nextA then\n            Plater.SetCastBarColor(unitFrame, nextColor)\n        end\n    end\n    \n    if playerClass == 1 then\n        --TWW Dungeons\n        \n        local ecoDomeAldani = {\n            1221190, -- Gluttonous Miasma\n            1222815, -- Arcane Bolt\n            1229510, -- Arcing Zap\n        }\n        \n        local operationFloodgate = {\n            473112, -- Mudslide - Boss\n            --469721, -- Backwash - RIP IN PEACE BUBBLES\n            465871, -- Blood Bolt\n            1214468, -- Trickshot\n            465754, -- Flamethrower - Unsure if targetted\n            465595, -- Lightning Bolt\n            462771, -- Surveying Beam\n        }\n        \n        local araKara = {\n            436322, -- Poison bolt - atik\n            434786, -- Web bolt\n        }\n        \n        local cityOfThreads = {\n            442536, -- Grimweave Blast\n            443427, -- Web Bolt\n            439341, -- Splice - Izo\n            446717, -- Umbral Weave\n            438860, -- Umbral Weave - Izo\n        }\n        \n        local theDawnbreaker = {\n            428086, -- Shadow bolt\n            451114, -- Congealed Shadow\n            451119, -- Abyssal Blast\n            431333, -- Tormenting Beam\n            432448, -- Stygian Seed\n            451113, -- Web Bolt\n            431303, -- Night Bolt\n        }\n        \n        local theStonevault = {\n            429422, -- Stone Bolt\n            426283, -- Arcing Void\n            429110, --Alloy Bolt\n            429545, -- Censoring Gear\n            459210, -- Shadow Claw\n            430097, -- Molten Metal - Speaker Brokk\n        }\n        \n        local cinderbrewMeadery = {\n            453989, -- Boiling Flames\n            454318, -- Boiling Flames\n            454319, -- Boiling Flames\n            437721, -- Boiling Flames\n        }\n        \n        local darkflameCleft = {\n            421817, --Wicklighter Barrage\n            421910, -- Extinguishing Gust\n            423479, -- Wickligher Bolt\n            426677, -- Candleflame Bolt\n            428563, -- Flame Bolt\n        }\n        \n        local prioryOfTheSacredFlame = {\n            424421, --Fireball - Boss\n            423015, -- Castigator's Shield - Boss\n            423536, --Holy Smite - Boss\n            427357, -- Holy Smite\n            427469, -- Fireball\n            427950, -- Seal of Flame\n        }\n        \n        local theRookery = {\n            430805, -- Arcing Void\n            430179, -- Seeping Corruption\n            430109, -- Lightning Bolt\n            430238, -- Void Bolt\n        }\n        \n        --DF Dungeons\n        \n        local murozondsRise = {\n            400165, -- Epoch Bolt\n            413607, -- Corroding Volley\n            418202, -- Temporal Blast\n            417030, -- Fireball\n            411763, -- Infinite Blast\n            407121, -- Immolate\n        }\n        \n        local galakrondsFall = {\n            415435, -- Infinite Bolt\n            413590, -- Noxious Ejection\n            411958, -- Stonebolt\n        }\n        \n        local rubyLifePools = {\n            373803, -- Cold Claws boss adds\n            372683, -- Cold Claws trash\n            372808, -- Frigid Shard\n            373693, -- Living Bomb\n            371984, -- Icebolt\n            384197, -- Cinderbolt\n            384194, -- Cinderbolt\n            392576, -- Thunderbolt\n            385310, -- Lightning Bolt\n            385536, -- Flame Dance\n        }\n        \n        local azureVault = {\n            374789, -- Infused Strike\n            373932, -- Illusionary Bolt\n            384978, -- Dragon Strike\n            377503, -- Condensed Frost\n            389804, -- Heavy Tome\n            371306, -- Arcane Bolt\n        }\n        \n        local brackenhideHollow = {\n            382249, -- Earth Bolt\n            381694, -- Decayed Senses\n            378155, -- Earth Bolt (boss)\n            382474, -- Decay Surge\n        }\n        \n        local hallsOfInfusion = {\n            374020, -- Containment Beam\n            389443, -- Purifying Blast\n            374706, -- Pyretic Burst\n            375950, -- Ice Shard\n            385963, -- Frost Shock\n            395690, -- Lightning Blast\n            387504, -- Squall Buffet\n            387571, -- Focused Deluge\n        }\n        \n        local uldaman = {\n            369674, -- Stone Spike\n            369675, -- Chain Lightning\n            372718, -- Earthen Shards\n            369399, -- Stone Bolt\n            369365, -- Curse of Stone\n            377395, -- Time Sink\n        }\n        \n        local neltharus = {\n            378818, -- Magma Conflagration\n            372538, -- Melt\n            383231, -- Lava Bolt\n        }\n        \n        local nokhudOffensive = {\n            387125, -- Thunderstrike\n            387127, -- Chain Lightning\n            386012, -- Stormbolt\n            387613, -- Death Bolt\n            382670, -- Gale Arrow\n            376827, -- Conductive Strike\n            384761, -- Wind Burst\n            396206, -- Storm Shock\n            381530, -- Storm Shock\n        }\n        \n        local algetharAcademy = {\n            388862, -- Surge\n            377991, -- Storm Slash\n            387975, -- Arcane Missiles\n        }\n        \n        --Shadowlands Dungeons\n        \n        local tazavesh = {\n            354297, -- Hyperlight Bolt - Gambit\n            356843, -- Brackish Bolt - Gambit\n            355225, -- Waterbolt - Gambit\n            346006, -- Impound Contraband - Streets\n            357196, -- Hyperlight Bolt - Streets\n            355963, -- Hard Light Baton - Streets\n            353836, -- Hyperlight Bolt - Streets\n            356537, -- Empowered Glyph of Restraint - Zo'honn\n            355930, -- Spark burn - Streets\n            355641, -- Scintillate - Streets\n        }\n        \n        local hallsOfAtonement = {\n            328322, -- Villainous Bolt\n            323538, -- Anima Bolt / Bolt of Power\n            338003, -- Wicked Bolt\n            325700, -- Collect Sins\n            326829, -- Wicked Bolt - Sigar\n        }\n        \n        local theaterOfPain = {\n            1216475, -- Necrotic Bolt - Kul'Tharok\n            1217138, -- Necrotic Bolt - Sathel\n            319669, -- Spectral Reach - Boss\n            324589, -- Death Bolt - Boss add\n            341969, -- Withering Discharge\n            330697, -- Decaying Strike\n            330784, -- Necrotic Bolt\n            330810, -- Bind Soul\n            333299, -- Curse of Desolation\n            330875, -- Spirit Frost\n        }\n        \n        local mistsOfTirnaScithe = {\n            332767, --Spirit Bolt\n            323057, --Spirit Bolt - Boss\n            332557, --Soul Split\n            463217, --Anima Slash\n            325223, --Anima Injection\n            332486, --Overgrowth\n        }\n        \n        local theNecroticWake = {\n            328667, --Frostbolt Volley\n            333623, --Frostbolt Volley\n            326574, --Noxious Fog\n            320788, --Frozen Binds\n            322274, --Enfeeble\n            334748, --Drain Fluids\n            320462, --Necrotic Bolt\n            333479, --Spew Disease\n            323347, --Clinging Darkness\n            333602, --Frostbolt\n        }\n        \n        --BFA Dungeons\n        \n        local mechagonWorkshop = {\n            291878, -- Pulse Blast - 4th boss\n            294860, -- Blossom Blast - 3rd Boss\n            294195, -- Arcing Zap\n            293827, -- Giga-Wallop\n        }\n        \n        local theMotherlode = {\n            263202, -- Rock Lance\n            263628, -- Charged Shield\n            280604, -- Iced Spritzer\n            262268, -- Caustic Compound\n            268846, -- Echo Blade\n            262794, -- Mind lash\n            260318, -- Alpha Cannon -- Mogul Razdunk\n        }\n        \n        local siegeOfBoralus = {\n            272581, -- Water bolt\n            257063, -- Brackish bolt\n        }\n        \n        local waycrestManor = {\n            265372, -- Shadow Cleave\n            263943, -- Etch\n            264105, -- Runic Mark\n            260701, -- Bramble Bolt\n            260699, -- Soul Bolt\n            260700, -- Ruinous Bolt\n            266036, -- Drain Essence\n            264024, -- Soul Bolt\n            426541, -- Runic Bolt\n            264556, -- Tearing Strike\n            264153, -- Spit\n            278444, -- Infest\n            265881, -- Decaying Touch\n            265880, -- Dread Mark\n            268278, -- Wracking Chord\n            261438, -- Wasting Strike\n            261440, -- Virulent Pathogen\n        }\n        \n        local atalDazar = {\n            253562, -- Wildfire\n            254959, -- Soul Burn\n            252923, -- Venom Blast\n            252687, -- Venomfang Strike\n            250096, -- Wracking Pain\n        }\n        \n        local underrot = {\n            265084, -- Blood Bolt\n            260879, -- Blood Bolt (boss)\n            278961, -- Decaying Mind\n            266265, -- Wicked Embrace\n            272180, -- Void Spit\n        }\n        \n        local freehold = {\n            259092, -- Lightning Bolt\n            257908, -- Oiled Blade\n            281420, -- Water Bolt\n        }\n        \n        --Legion Dungeons\n        \n        local darkheartThicket = {\n            204243, -- Tormenting Eye\n            200238, -- Feed on the Weak\n            200185, -- Nightmare Bolt\n            200684, -- Nightmare Toxin\n            200642, -- Despair\n            201411, -- Firebolt\n            201837, -- Shadow Bolt\n        }\n        \n        local blackRookHold = {\n            199663, -- Soul Blast\n            200248, -- Arcane Blitz\n        }\n        \n        local neltharionsLair = {\n            186269, -- Stone Bolt\n            198496, -- Sunder\n            210150, -- Toxic Retch\n            200732, -- Molten Crash\n        }\n        \n        local hallsOfValor = {\n            198595, -- Thunderous Bolt\n            198962, -- Shattered Rune\n            198959, -- Etch\n            191976, -- Arcing Bolt\n            192288, -- Searing Light\n        }\n        \n        local courtOfStars = {\n            209036, -- Throw Torch\n            209413, -- Suppress\n            211406, -- Firebolt\n            211473, -- Shadow Slash\n            373364, -- Vampiric Claws\n        }\n        \n        --WoD Dungeons\n        \n        local everbloom = {\n            169657, -- Poisonous Claws\n            168040, -- Nature's Wrath\n            168092, -- Water Bolt\n            169840, -- Frostbolt\n            169841, -- Arcane Blast\n            169839, -- Pyroblast\n            427858, -- Fireball\n            164965, -- Choking Vines\n        }\n        \n        local shadowmoonBurialGrounds = {\n            152814, -- Shadow Bolt\n            152819, -- Shadow Word: Frailty\n            156776, -- Rending Voidlash\n            398206, -- Death Blast\n            153067, -- Void Devastation\n            153524, -- Plague Spit\n        }\n        \n        --MoP Dungeons\n        \n        local templeOfTheJadeSerpent = {\n            397888, -- Hydrolance\n            114803, -- Throw Torch\n            114571, -- Agony\n            397914, -- Defiling Mist\n            397931, -- Dark Claw\n            106823, -- Serpent Strike\n        }\n        \n        --Cata Dungeons\n        \n        local throneOfTheTides = {\n            426731, -- Water Bolt\n            428542, -- Crushing Depths\n            426768, -- Lightning Bolt\n            75992, -- Lightning Surge\n            428374, -- Focused Tempest\n            426783, -- Mind Flay\n            429048, -- Flame Shock\n            429173, -- Mind Rot\n            429176, -- Aquablast\n            428526, -- Ink Blast\n            428889, -- Foul Bolt\n        }\n        \n        local vortexPinnacle = {\n            410873, -- Rushing Wind\n            86331, -- Lightning Bolt\n            411019, -- Starlight\n            87762, -- Lightning Lash\n            87622, -- Chain Lightning\n        }\n        \n        local grimBatol = {\n            447966, --Shadowflame bolt (Boss)\n            76369, --Shadowflame bolt (adds)\n            450087, --Depth's Grasp\n            451971, --Lava Fist\n            451241, --Shadowflame Slash\n        }\n        \n        -- Raids\n        \n        local manaforgeOmega = {\n            1241100, -- Mystic Lash - Soulbinder Naazindhri\n            1224812, -- Vanquish - Nexus-King Salhadaar\n            1227529, -- Banishment - Nexus-King Salhadaar\n        }\n        \n        local liberationOfUndermine = {\n            460847, --Electric Blast - Reel Assistant - One-armed bandit\n            1219384, -- Scrap Rockets - Scrapmaster - Stix Bunkjunker\n        }\n        \n        local nerubarPalace = {\n            438807, --Vicious Bite - Broodtwister\n            441362, --Volatile Concoction - Broodtwister\n            441772, --Void Bolt - Silken Court\n            438200, --Poison Bolt - Silken Court\n        }\n        \n        local amidrassil = {\n            431302, -- Fyr'alath's Flame, Fyrakk\n            421284, -- Coiling Flames, Volcoross\n        }\n        \n        local aberrus = {\n            403203, -- Flame Slash, Amalgamation Chamber\n            403699, -- Shadow Spike\n            397386, -- Lava Bolt, trash\n            410351, -- Flaming Cudgel, Assault\n        }\n        \n        local vault = {\n            396040, -- Pyroblast, Eranog\n            372394, -- Lightning Bolt, Council\n            372315, -- Frost Spike\n            372275, -- Chain Lightning\n            385812, -- Aerial Slash, Dathea\n            375716, -- Ice Barrage, Diurna\n            385553, -- Storm Bolt\n            375653, -- Static Jolt\n        }\n        \n        local zones = {\n            manaforgeOmega, \n            liberationOfUndermine,\n            ecoDomeAldani,\n            tazavesh,\n            hallsOfAtonement,\n            operationFloodgate,\n            theaterOfPain,\n            theMotherlode,\n            mechagonWorkshop,\n            nerubarPalace,\n            araKara,\n            cityOfThreads,\n            grimBatol,\n            mistsOfTirnaScithe,\n            siegeOfBoralus,\n            theDawnbreaker,\n            theNecroticWake,\n            theStonevault,\n            cinderbrewMeadery,\n            darkflameCleft,\n            prioryOfTheSacredFlame,\n            theRookery,\n            rubyLifePools,\n            azureVault,\n            brackenhideHollow,\n            uldaman,\n            neltharus,\n            algetharAcademy,\n            nokhudOffensive,\n            hallsOfInfusion,\n            darkheartThicket,\n            everbloom,\n            throneOfTheTides,\n            waycrestManor,\n            atalDazar,\n            blackRookHold,\n            vortexPinnacle,\n            underrot,\n            freehold,\n            neltharionsLair,\n            templeOfTheJadeSerpent,\n            courtOfStars,\n            shadowmoonBurialGrounds,\n            hallsOfValor,\n            murozondsRise,\n            galakrondsFall,\n            amidrassil,\n            aberrus,\n            vault,\n        }\n        \n        for i = 1, #zones do\n            local zone = zones[i]\n            \n            for k = 1, #zone do\n                local id = zone[k]\n                modTable.reflectableSpells[id] = true\n            end\n        end\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable) end",
},
["Time"] = 1755898355,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "",
["Enabled"] = true,
["Revision"] = 2262,
["semver"] = "",
["Author"] = "Nimeshady-Zul'jin",
["Desc"] = "Shows who a cast is targeting in the cast bar as well as other configurable options.",
["Prio"] = 99,
["Name"] = "Enemy Castbar",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Feature - Custom cast bar coloring:",
["Name"] = "CUSTOM CAST BAR COLORS",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showInterruptColor",
["Value"] = true,
["Name"] = "Enable custom colored enemy cast bars.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting the cast bar will change to the colors below based on the status of you being able to interrupt the cast.",
},
{
["Type"] = 4,
["Key"] = "showSecondaryInterrupts",
["Value"] = true,
["Name"] = "Enable support for secondary interrupts: Avenger's Shield (Paladin), Spell Reflection (Warrior).",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colors casts that can be reflected with Spell Reflection (Warrior) and interrupted with Avenger's Shield (Paladin).",
},
{
["Type"] = 1,
["Key"] = "colorInterruptAvailable",
["Value"] = {
1,
0.96078437566757,
0.070588238537312,
1,
},
["Name"] = "Color when my primary interrupt is available.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt available to interrupt the current cast.",
},
{
["Type"] = 1,
["Key"] = "colorInterruptSoon",
["Value"] = {
1,
0.96078437566757,
0.070588238537312,
1,
},
["Name"] = "Color when my primary interrupt is down but will be available before cast finishes.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt on cooldown but it will be available to interrupt the current cast.",
},
{
["Type"] = 1,
["Key"] = "colorNoInterrupt",
["Value"] = {
1,
0.49411767721176,
0.13725490868092,
1,
},
["Name"] = "Color when my primary interrupt is unavailable.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you do not have an interrupt available to interrupt the current cast",
},
{
["Type"] = 1,
["Key"] = "colorSecondaryInterrupt",
["Value"] = {
1,
0.0078431377187371,
0.78431379795074,
1,
},
["Name"] = "Color for secondary interrupts. (Avenger's Shield and Spell Reflection)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast targeting you can be reflected with Spell Reflection or interrupted with Avenger's Shield. Only active when playing the appropriate class with the skill off cooldown.",
},
{
["Type"] = 1,
["Key"] = "colorProtected",
["Value"] = {
0.8078432083129883,
0.294117659330368,
0.2862745225429535,
1,
},
["Name"] = "Color for casts that are protected/un-interruptable.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast can not be interrupted by a standard interrupt.",
},
{
["Type"] = 1,
["Key"] = "colorTick",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Name"] = "Color of interrupt available tick. (Hover for more info)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "When your interrupt is currently down but will become available before the current cast completes a tick will appear in the cast bar showing you the exact position in the cast you will be able to interrupt the cast. You can customize the color of the tick using this setting.  YOU MUST /RELOAD YOUR UI AFTER CHANGING THIS COLOR.",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Feature - Show name of target in the cast bar:",
["Name"] = "Settings Target Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showTargetName",
["Value"] = true,
["Name"] = "Show the name of cast targets in the cast bar.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting a spell at a target, the targets name will appear in the cast bar.",
},
{
["Type"] = 4,
["Key"] = "hideNameSolo",
["Value"] = false,
["Name"] = "Hide my name when not in a party.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When you are not in a party or raid group casts targetting you will not display your name in the cast bar.",
},
{
["Type"] = 4,
["Key"] = "replaceName",
["Value"] = false,
["Name"] = "Show \"Me\" instead of my character name.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When targetted by casts, instead of showing your character name it will show \"Me\".",
},
{
["Type"] = 5,
["Key"] = "option8",
["Value"] = "Feature - Flash nameplates when a spell targets you:",
["Name"] = "Settings Border Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Namplate Flash",
},
{
["Type"] = 4,
["Key"] = "nameplateFlash",
["Value"] = false,
["Name"] = "Flash the nameplates of enemies that are casting a spell or ability targeting me.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is targetting you with a cast, this option will flash the nameplate of that enemy to indicate that cast is targeting you.",
},
{
["Type"] = 4,
["Key"] = "hideNameplateFlashSolo",
["Value"] = true,
["Name"] = "Hide flash effect when not in a party.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing solo.",
},
{
["Type"] = 4,
["Key"] = "hideFlashAsTank",
["Value"] = true,
["Name"] = "Hide flash effect when I'm playing a tank specialization.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing as a tank specialization.",
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if unitFrame.healthBar.questProgressTextFrame then\n        unitFrame.healthBar.questProgressTextFrame:SetText(\"\")\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateText(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateText(unitFrame)\nend",
["Constructor"] = "function(self, unitId, unitFrame, envTable)\n    local textColor = \"mediumaquamarine\"\n    local textSize = 12\n    \n    -- positioning\n    local anchor = {\n        side = 2, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = -15, --x offset\n        y = 0, --y offset\n    }\n    \n    function envTable.updateText(unitFrame)\n        if not unitFrame or not unitFrame.namePlateIsQuestObjective or not unitFrame.QuestAmountCurrent then\n            if unitFrame.healthBar.questProgressTextFrame and unitFrame.healthBar.questProgressTextFrame:IsShown() then\n                unitFrame.healthBar.questProgressTextFrame:Hide()\n            end\n            \n            return\n        end\n        \n        local text = unitFrame.QuestAmountTotal and unitFrame.QuestAmountTotal - unitFrame.QuestAmountCurrent\n        or unitFrame.QuestAmountCurrent .. \"%\"\n        \n        local currentText = unitFrame.healthBar.questProgressTextFrame\n        and unitFrame.healthBar.questProgressTextFrame:GetText()\n        or nil\n        \n        if currentText == text then\n            return\n        end\n        \n        --create the text frame that will show the quest progress\n        if not unitFrame.healthBar.questProgressTextFrame then\n            envTable.questProgressTextFrame = Plater:CreateLabel(unitFrame.healthBar, \"\", textSize, textColor)\n            Plater.SetAnchor(envTable.questProgressTextFrame, anchor)\n            unitFrame.healthBar.questProgressTextFrame = envTable.questProgressTextFrame\n        end\n        \n        if not unitFrame.healthBar.questProgressTextFrame:IsVisible() then\n            unitFrame.healthBar.questProgressTextFrame:Show()\n        end\n        \n        unitFrame.healthBar.questProgressTextFrame:SetText(text)\n    end\nend",
},
["Time"] = 1746107875,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "",
["Enabled"] = true,
["Revision"] = 409,
["semver"] = "",
["Author"] = "Viashi-Antonidas",
["Desc"] = "Adds a text indicator for quest progress to show how many times the objective has to be completed.",
["Prio"] = 99,
["Name"] = "QuestProgress",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["UID"] = "0x67e07ff810c0ec",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Initialization"] = "function (modTable)\n    -- used for nameColouring\n    -- AARRGGBB\n    local markerToHex = {\n        [1] = \"FFEAEA0D\", -- Yellow 5 Point Star\n        [2] = \"FFEAB10D\", -- Orange Circle\n        [3] = \"FFCD00FF\", -- Purple Diamond\n        [4] = \"FF06D425\", -- Green Triangle\n        [5] = \"FFB3E3D8\", -- Light Blue Moon\n        [6] = \"FF0CD2EA\", -- Blue Square\n        [7] = \"FFD6210B\", -- Red Cross\n        [8] = \"FFFFFFFF\", -- White Skull\n    }\n    \n    local isFrenchLocale = ((GAME_LOCALE or GetLocale()) == \"frFR\")\n    \n    -- Makes it so you take their first name e.g Jessie Howlis -> Jessie\n    local nameBlacklist = isFrenchLocale\n    and {\n        [\"d'entraînement\"] = true,        \n        [\"le\"] = true,\n        [\"la\"] = true,\n        [\"les\"] = true,\n        [\"un\"] = true,\n        [\"une\"] = true,\n        [\"des\"] = true,\n        [\"d'\"] = true,\n        [\"de\"] = true,\n        [\"du\"] = true,\n        [\"et\"] = true,\n        [\"en\"] = true,\n        [\"terreur\"] = true,\n    }\n    or {\n        [\"the\"] = true,\n        [\"of\"] = true,\n        [\"Tentacle\"] = true,\n        [\"Apprentice\"] = true,\n        [\"Denizen\"] = true,\n        [\"Emissary\"] = true,\n        [\"Howlis\"] = true,\n        [\"Terror\"] = true,\n        [\"Totem\"] = true,\n        [\"Waycrest\"] = true,\n        [\"Aspect\"] = true,\n    }\n    \n    local function RemoveTrailingPunctuation(word)\n        return word and word:gsub(\"[%p]+$\", \"\") or word\n    end\n    \n    local function GetSanitizedParts(name)\n        local a, b, c, d, e, f = strsplit(\" \", name, 5)\n        \n        if not isFrenchLocale then\n            return a, b, c, d, e, f\n        end\n        \n        return RemoveTrailingPunctuation(a),\n        RemoveTrailingPunctuation(b),\n        RemoveTrailingPunctuation(c),\n        RemoveTrailingPunctuation(d),\n        RemoveTrailingPunctuation(e),\n        RemoveTrailingPunctuation(f)\n    end\n    \n    local function Capitalize(str)\n        return str and str:gsub(\"^%l\", string.upper) or str\n    end\n    \n    ---@type table<number, string>\n    local specialTreatmentCache = {}\n    \n    ---@type table<number, fun(name: string): string>\n    local specialTreatmentNpcIdMap = {\n        [228463] = function(name)\n            local locales = {\n                \"Reel Assistant\", -- en\n                \"Walzenassistent\", -- de\n                \"Assistant des bobines\", --fr\n                \"Технический ассистент\", -- ru\n                \"转轮助理\", -- cn\n                \"Ayudante de palanca\", -- es\n                \"Assistente al Rullo\", -- it\n                \"Assistente de Cilindro\", -- pt\n                \"굴림판 도우미\", -- ko\n            }\n            \n            for _, locale in ipairs(locales) do\n                if name ~= locale and name:find(locale) then\n                    return name:gsub(locale, \"\"):match(\"^%s*(.-)%s*$\")\n                end\n            end\n            \n            return name\n        end,\n        -- for testing purposes, replace -1 with the npc id\n        [-1] = function(name)\n            return \"lmao\"\n        end,\n    }\n    \n    -- @unitId unitID for mob e.g nameplate1\n    function modTable.renamer(unitFrame, unitId)\n        if not (unitId and unitFrame) then\n            return\n        end\n        \n        local name = unitFrame.namePlateUnitName or UnitName(unitId) or \"\"\n        \n        if modTable.config.short_names and not unitFrame.unitName.isRenamed then\n            if unitFrame.namePlateNpcId and specialTreatmentNpcIdMap[unitFrame.namePlateNpcId] then\n                name = specialTreatmentNpcIdMap[unitFrame.namePlateNpcId](name)\n            else\n                local a, b, c, d, e, f = GetSanitizedParts(name)\n                \n                local unitName\n                \n                if isFrenchLocale then\n                    if a and nameBlacklist[a:lower()] then\n                        unitName = Capitalize(f or e or d or c or b or a)\n                    else\n                        unitName = a\n                    end\n                else\n                    if nameBlacklist[b] then\n                        unitName = a or b or c or d or e or f\n                    else\n                        unitName = f or e or d or c or b or a\n                    end\n                end\n                name = unitName or name\n            end\n        end\n        \n        if modTable.config.colour_names then\n            local marker = GetRaidTargetIndex(unitId)\n            if marker then\n                local color = markerToHex[marker or 8]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        unitFrame.healthBar.unitName:SetText(name)\n    end\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend\n\n\n\n",
},
["Time"] = 1746107817,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "",
["Enabled"] = true,
["Revision"] = 406,
["semver"] = "",
["Author"] = "Rhk-Tarren Mill",
["Desc"] = "Aimed at making calls in dungeons simpler by using the last name of a mob or first name of certains ones i.e Jessie Howlis -> Jessie",
["Prio"] = 99,
["Name"] = "Short Names",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "short_names",
["Value"] = true,
["Name"] = "Shorten Names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Shortens NPC Names. eg.: \"Murkbrine Fishmancer\" -> \"Fishmancer\"",
},
{
["Type"] = 4,
["Key"] = "colour_names",
["Value"] = false,
["Name"] = "Colour by Raidmark",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colours the Name by the assigned Raidmark. eg.: Triangle --> Green Name",
},
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Player Logon"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- /RELOAD AFTER IMPORTING OR CHANGING THE SCRIPT\n    -- SELECT THE INDICATOR AT THE TARGET TAB\n    \n    Plater.TargetIndicators    [\"Double Arrows\"] = {\n        path = [[Interface\\AddOns\\Plater\\media\\arrow_double_right_64]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 15,\n        height = 12,\n        x = 14,\n        y = 0,\n        blend = \"ADD\",\n        color = \"white\",\n    }    \n    \nend\n\n\n",
},
["Time"] = 1755898353,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "",
["Enabled"] = true,
["Revision"] = 127,
["semver"] = "",
["Author"] = "�r��ne-Kel'thuzad",
["Desc"] = "Adds double arrow as a target indicators option",
["Prio"] = 99,
["Name"] = "Double Arrow Target",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
},
},
{
["OptionsValues"] = {
["extraLowScale"] = 0.75,
["midScale"] = 0.8499999642372131,
},
["LastHookEdited"] = "Player Logon",
["UID"] = "0x6366dbeb1fda6285",
["Hooks"] = {
["Leave Combat"] = "function (_, unitId, unitFrame, _, modTable)\n    -- when updating this, also update Init and Nameplate Updated\n    \n    if not modTable.isActive then\n        return\n    end\n    \n    local npcID = unitFrame.namePlateNpcId or modTable.parseGUID(unitId)\n    \n    if not npcID or not modTable.isSpitefulLike(npcID) then\n        return\n    end\n    \n    local specialScale = modTable.getSpitefulLikeScale(npcID)\n    \n    Plater.SetNameplateScale(unitFrame, modTable.targetsPlayer(unitId) and specialScale.self or specialScale.others)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not modTable.isActive then\n        return\n    end\n    \n    local npcID = unitFrame.namePlateNpcId or modTable.parseGUID(unitId)\n    \n    if not npcID then\n        return\n    end\n    \n    modTable.compile()\n    local scale = modTable.npcIDs[npcID]\n    \n    if scale and scale ~= unitFrame.nameplateScaleAdjust then\n        Plater.SetNameplateScale(unitFrame, scale)\n    end\nend",
["Nameplate Updated"] = "function (_, unitId, unitFrame, _, modTable)\n    -- when updating this, also update Init and Leave Combat\n    \n    if not modTable.isActive then\n        return\n    end\n    \n    local npcID = unitFrame.namePlateNpcId or modTable.parseGUID(unitId)\n    \n    if not npcID or not modTable.isSpitefulLike(npcID) then\n        return\n    end\n    \n    local specialScale = modTable.getSpitefulLikeScale(npcID)\n    local scale = modTable.targetsPlayer(unitId) and specialScale.self or specialScale.others\n    \n    if scale ~= unitFrame.nameplateScaleAdjust then\n        Plater.SetNameplateScale(unitFrame, scale)\n    end\nend",
["Initialization"] = "function (modTable)\n    modTable.isActive = modTable.config.scale and WOW_PROJECT_ID == WOW_PROJECT_MAINLINE\n    \n    local medium = modTable.config.midScale -- 0.90\n    local small = modTable.config.lowScale -- 0.80\n    local extrasmall = modTable.config.extraLowScale -- 0.70,\n    local larger = modTable.config.higherScale -- 1.1\n    \n    --[[\n    GUIDELINES\n    - use LARGER for enemies with great situational importance that need extra attention\n        ex: totems at the end of Stonevault, Spiteful targeting you\n    - use MEDIUM for enemies that do little to nothing but melee the tank and have average health\n        OR casters without mandatory kick\n        ex: Patchwerk Soldier, Necrotic Wake | Tainted Lashers, Gnarlroot\n        ex: Primalist Galesinger, Halls of Infusion\n    - use SMALL for enemies that do nothing but melee the tank and have less than average health\n        -- ex: Jagged Hound, Waycrest Manor\n    - use EXTRA SMALL for enemies that do nothing at all AND/OR there's so many on the screen, you have no choice\n        ex: Fiery Vines, Tindral | Hungry Lashers, Academy\n    ]]\n    --\n    \n    ---@class SpitefulLikeScaling\n    ---@field self number\n    ---@field others number\n    \n    ---@type table<number, SpitefulLikeScaling>\n    ---@description table of npc ids with conditional scaling based on their current target\n    local spitefulLikes = {\n        [220626] = { -- Blood Parasite, Ovinax\n            self = larger,\n            others = extrasmall,\n        },\n        [235631] = { -- Crawler Mine, Motherlode\n            self = larger,\n            others = small,\n        },\n        [133482] = { -- Crawler Mine, Motherlode\n            self = larger,\n            others = small,\n        },\n        [167898] = { -- Manifestation of Envy, HoA\n            self = medium,\n            others = small,\n        },\n        [231014] = { -- Loaderbot - Floodgate\n            self = larger,\n            others = medium,\n        },\n    }\n    \n    ---@table<number, number>\n    modTable.npcIDs = {}\n    \n    modTable.playerMetaInformation = {\n        specId = nil,\n        isRdps = false,\n        isTank = false,\n        isMdps = false,\n        isHealer = false,\n        lastQuery = 0,\n    }\n    \n    local function GetCurrentSpecId()\n        local diff = GetTime() - modTable.playerMetaInformation.lastQuery\n        \n        if diff >= 60 then\n            modTable.playerMetaInformation.lastQuery = GetTime()\n            return PlayerUtil.GetCurrentSpecID()\n        end\n        \n        return modTable.playerMetaInformation.specId\n    end\n    \n    ---@return  boolean, boolean, boolean, boolean\n    function modTable.determinePlayerMetaInformation(specId)\n        local role = select(5, GetSpecializationInfoByID(specId))\n        \n        if role == \"NONE\" then\n            role = \"DAMAGER\"\n        end\n        \n        local isTank = false\n        local isHealer = false\n        local isRdps = false\n        local isMdps = false\n        \n        if role == \"TANK\" then\n            isTank = true\n        elseif role == \"HEALER\" then\n            isHealer = true\n        elseif role == \"DAMAGER\" then\n            isRdps = specId == 102 -- balance\n            or specId == 1467 -- devastation\n            or specId == 1473 -- augmentation\n            or specId == 253 -- beast mastery\n            or specId == 254 -- marksmanship\n            or specId == 62 -- arcane\n            or specId == 63 -- fire\n            or specId == 64 -- frost\n            or specId == 258 -- shadow\n            or specId == 262 -- elemental\n            or specId == 265 -- afflictin\n            or specId == 266 -- demonology\n            or specId == 267 -- destruction\n            \n            isMdps = not isRdps\n        end\n        \n        return isRdps, isTank, isMdps, isHealer\n    end\n    \n    ---@param defaultScale number\n    ---@param condition boolean\n    ---@return number\n    local function downscaleByOneIf(defaultScale, condition)\n        if condition then\n            if defaultScale == larger then\n                return medium\n            elseif defaultScale == medium then\n                return small\n            end\n        end\n        \n        return defaultScale\n    end\n    \n    function modTable.compile(force)\n        if not modTable.isActive then\n            return\n        end\n        \n        local specId = GetCurrentSpecId()\n        \n        if not force and specId == modTable.playerMetaInformation.specId then\n            return\n        end\n        \n        modTable.playerMetaInformation.specId = specId\n        \n        local isRdps, isTank, isMdps, isHealer = modTable.determinePlayerMetaInformation(specId)\n        \n        if\n        not force\n        and isRdps == modTable.playerMetaInformation.isRdps\n        and isTank == modTable.playerMetaInformation.isTank\n        and isMdps == modTable.playerMetaInformation.isMdps\n        and isHealer == modTable.playerMetaInformation.isHealer\n        then\n            return\n        end\n        \n        modTable.playerMetaInformation.isRdps = isRdps\n        modTable.playerMetaInformation.isTank = isTank\n        modTable.playerMetaInformation.isMdps = isMdps\n        modTable.playerMetaInformation.isHealer = isHealer\n        \n        table.wipe(modTable.npcIDs)\n        \n        local test = {\n            --[87329] = extrasmall, -- test dummy\n        }\n        -- raids\n        \n        local manaforgeOmega= {\n            [245705] = medium, -- Voidwarden\n        }\n        if not isTank then\n            manaforgeOmega[244922] = medium -- Shadowguard Phaseblade\n        end\n        \n        local liberationOfUndermine = {\n            [231935] = small, -- Junkyard Hyena\n            [236280] = small, -- Tiny Torq\n            [236284] = small, -- Fun-sized Flarendo\n            [231977] = medium, -- Darkfuse Technician\n        }\n        \n        local nerubarPalace = {\n            [219739] = small, -- Infested Spawn\n            [223674] = small, --Skitterer - Ansurek\n            [219746] = small, -- Tomb - Ansurek\n            [221344] = medium, -- Gloom Hatchling - Ansurek\n        }\n        local amirdrassil = {\n            [210231] = medium, -- Tainted Lasher, Gnarlroot\n            [211306] = extrasmall, -- Fiery Vines, Tindral\n        }\n        local vault = {\n            [194991] = medium, -- Oathsworn Vanguard\n            [191714] = small, -- Seeking Stormling\n        }\n        local sepulcher = {\n            [183669] = small, -- Fiendish Soul\n        }\n        local nathria = {\n            [169925] = small, -- Begrudging Waiter\n        }\n        \n        -- War Within dungeons\n        local ecoDomeAldani = {\n            [234870] = small, -- Invading Mite\n            [234912] = medium, -- Ravaging Scavenger\n            [245411] = medium, -- Ravaging Scavenger\n            [234960] = medium, -- Tamed Ruinstalker\n            [239379] = small, -- Unbound Ethereal\n        }\n        \n        local operationFloodgate = {\n            [231497] = medium, -- Bombshell crab\n            --[231014] = medium, -- Loaderbot\n            [229252] = medium, -- Darkfuse Hyena\n            [228144] = downscaleByOneIf(medium, isRdps or isMdps), -- Darkfuse Soldier\n        }\n        if not isTank then\n            operationFloodgate[227145] = medium -- Waterworks Crocolisk\n        end\n        \n        local theRookery = {\n            [219066] = small, -- Citizen\n        }\n        \n        local prioryOfTheSacredFlame = {\n            [212838] = small, --Arathi Neophyte\n            [207943] = extrasmall, --Arathi Neophyte\n            [206705] = small, -- Arathi Footman\n            [206699] = downscaleByOneIf(medium, isMdps or isTank), -- War lynx\n            [206694] = medium, -- Fervent Sharpshooter\n            [211140] = small, -- Arathi Neophyte - Last boss\n        }\n        \n        local darkflameCleft = {\n            [210148] = small, -- Menial Laborer\n            [210810] = small, -- Menial Laborer\n            [208457] = small, -- Skittering Darkness\n            [213008] = medium, -- Wriggling Darkspawn\n        }\n        \n        local cinderbrewMeadery = {\n            [218671] = medium, -- Pyromaniac\n            [217126] = extrasmall, --Over-indulged Patron\n            [214668] = small, -- Patron\n            [214920] = small, -- Tasting room attendant\n            [218865] = small, --Bee-let\n            [210270] = small, --Brew Drop\n            [223562] = small, --Brew Drop #2\n        }\n        \n        local stoneVault = {\n            [214287] = larger, --Earth Burst Totem\n        }\n        \n        local araKara = {\n            [216336] = small, --Ravenous Crawler\n            [216341] = small, --Jabbing Flyer\n            [218325] = extrasmall, --Swarming Flyer\n            [216337] = small, --Bloodworker\n            [215968] = small, -- Black blood\n            [219221] = small, --Ravenous Crawler (Summoned 2nd mini boss)\n        }\n        \n        local cityOfThreads = {\n            [220199] = small, --Battle Scarab\n            [216363] = medium, --Reenforced drone\n            [216365] = medium, --Carrier\n            [223357] = medium, --Conscript\n            [216329] = small, --Droplet\n            [220065] = small, --Umbral Weave\n            [222700] = small, --Umbral Weave\n            [219198] = medium, --Ravenous Scarab\n            [216342] = medium, -- Skittering Assistant\n        }\n        \n        local theDawnbreaker = {\n            [224616] = small, -- Animated Shadow\n            [213894] = medium, -- Nightfall Curseblade\n            [223995] = medium, -- Nightfall Curseblade\n        }\n        if not isTank then\n            theDawnbreaker[213895] = medium -- Nightfall Shadowalker\n        end\n        \n        \n        -- DF Dungeons\n        \n        local murozondsRise = {\n            [205151] = small, -- Tyr's Vanguard\n        }\n        \n        local galakrondsFall = {\n            [204536] = extrasmall, -- Blight Chunk\n            [206065] = extrasmall, -- Interval\n        }\n        \n        local hallsOfInfusion = {\n            [190923] = small, -- Zephyrling\n        }\n        \n        local neltharus = {\n            [192781] = small, -- Ore Elemental\n            [194389] = small, -- Lava Spawn\n        }\n        \n        local uldaman = {\n            [184134] = small, -- Scavenging Leaper\n            [186696] = larger, -- Quaking Totem\n        }\n        \n        local brackenhideHollow = {\n            [189299] = small, -- Decaying Slime\n            [192481] = small, -- Decaying Slime (boss adds)\n            [194330] = small, -- Decaying Slime (from big slime split)\n            [199916] = small, -- Decaying Slime\n            [194273] = small, -- Witherling\n            [187238] = small, -- Witherling\n            [189363] = extrasmall, -- Infected Lasher\n            [208994] = extrasmall, -- Infected Lasher\n            [194373] = small, -- Witherling\n            [190381] = larger, -- Rotburst Totem\n        }\n        \n        local algetharAcademy = {\n            [196642] = extrasmall, -- Hungry Lasher\n            [197398] = extrasmall, -- Hungry Lasher\n            [192329] = small, -- Territorial Eagle\n            [196694] = medium, -- Arcane Forager\n        }\n        \n        local azureVault = {\n            [191313] = extrasmall, -- Bubbling Sapling\n            [196559] = extrasmall, -- Volatile Sapling\n            [187246] = medium, -- Nullmagic Hornswog\n            [187242] = medium, -- Tarasek Looter\n            [187159] = small, -- Whelp\n        }\n        \n        local rubyLifePools = {\n            [189893] = extrasmall, -- Infused Whelp\n            [187894] = extrasmall, -- Infused Whelp\n            [194622] = extrasmall, -- Scorchling\n            [190205] = extrasmall, -- Scorchling\n            [197509] = extrasmall, -- Primal Thundercloud\n        }\n        \n        local nokhudOffensive = {\n            [195855] = small, -- Risen Warrior\n            [195875] = small, -- Desecrated Bakar\n            [196645] = small, -- Desecrated Bakar\n        }\n        \n        -- Shadowlands Dungeons\n        \n        local tazavesh = {\n            [178163] = small, -- Murkbrine Shorerunner - Gambit\n            [178394] = medium, -- Cartel Lackey - Streets\n            [176396] = medium, -- Defective Sorter - Streets\n            [177807] = medium, -- Customs Security\n            [179386] = medium, -- Corsair Officer\n            [180432] = small, -- Devoted Accomplice\n        }\n        if not isTank then\n            tazavesh[176394] = medium -- P.O.S.T. Worker\n            tazavesh[180015] = medium -- Burly Deckhand\n        end\n        \n        local theaterOfPain = {\n            [163089] = small, -- Disgusting Refuse\n            [169875] = medium, -- Shackled Soul\n            [167994] = medium, -- Ossified Conscript\n        }\n        \n        local necroticWake = {\n            [166264] = small, -- Spare Parts\n            [166266] = small, -- Spare Parts #2\n            [171500] = extrasmall, -- Shuffling Corpse\n            [165138] = small, -- Blight bag\n            [162729] = medium, -- Patchwerk Soldier\n            [163122] = small, -- Brittlebone Warrior\n            [164427] = small, -- Reanimated Warrior\n        }\n        \n        local mistsOfTirnaScithe = {\n            [165111] = medium, -- Drust Spiteclaw\n            [167117] = small, -- Larva\n        }\n        \n        local hallsOfAtonement = {\n            [167892] = small, -- Tormented Soul\n            [167806] = small, -- Animated Sin\n            [167610] = small, -- Anklebiter\n            [165415] = small, -- Toiling Groundskeeper\n            [164363] = medium, -- Undying Stonefiend - Echelon\n        }\n        if  isRdps then\n            hallsOfAtonement[164563] = medium -- Vicious Gargon\n            hallsOfAtonement[165515] = medium -- Depraved Darkblade\n        end\n        \n        local deOtherSide = {\n            [168986] = small, -- Skeletal Raptor\n        }\n        \n        local plaguefall = {\n            [168969] = small, -- Gushing Slime\n        }\n        \n        local sanguineDepths = {\n            [171455] = small, -- Stonewall Gargon\n            [168457] = small, -- Stonewall Gargon\n            [166589] = small, -- Animate Weapon\n        }\n        \n        --BFA Dungeons\n        \n        local theMotherlode = {\n            [130436] = medium, -- Off-Duty Laborer\n            [136006] = extrasmall, -- Rowdy Reveler\n            [136005] = extrasmall, -- Rowdy Reveler\n            [130437] = medium, -- Mine Rat\n            [133963] = small, -- Test Subject\n            [130653] = small, -- Wanton Sapper\n            [134005] = small, -- Shalebiter\n            [138369] = small, -- Footbomb Hooligan\n        }\n        \n        local mechagon = {\n            [144300] = extrasmall, -- Mechagon Citizen\n            [150547] = medium, -- Scrapbone Grunter\n            [144301] = small, -- Living Waste\n        }\n        \n        local siegeOfBoralus = {\n            [133990] = medium, -- Scrimshaw Gutter\n            [138002] = medium, -- Scrimshaw Gutter\n            [135258] = medium, -- Curseblade\n        }\n        \n        local atalDazar = {\n            [128435] = extrasmall, -- saurid\n        }\n        \n        local waycrestManor = {\n            [131669] = small, -- Jagged Hound\n        }\n        \n        local underrot = {\n            [131402] = extrasmall, -- Underrot Tick\n        }\n        \n        local freehold = {\n            [130024] = small, -- Soggy Shiprat\n        }\n        \n        -- Legion Dungeons\n        \n        local hallsOfValor = {\n            [97087] = medium, -- Valajar Champion\n            [96640] = medium, -- Valajar Marksman\n            [99922] = small, -- Ebonclaw Packmate\n            [96608] = medium, -- Ebonclaw Worg\n            [96609] = medium, -- Gildedfur Stag\n        }\n        \n        local darkheartThicket = {\n            [100529] = small, -- Hatespawn Slime\n            [101074] = small, -- Hatespawn Whelpling\n            [100991] = small, -- Strangling Roots\n            [107288] = small, -- Vilethorn Sapling\n        }\n        \n        local blackRookHold = {\n            [98677] = small, -- Rook Spiderling\n            [98900] = medium, -- Wyrmtongue Trickster\n            [102781] = extrasmall, -- Fel Bat Pup\n        }\n        \n        local courtOfStars = {\n            [105703] = small, -- Mana Wyrm,\n            [104295] = small, -- Blazing Imp\n        }\n        \n        local neltharionsLair = {\n            [96247] = extrasmall, -- Vileshard Crawler\n            [102430] = small, -- Tarspitter Slug\n        }\n        \n        -- WoD Dungeons\n        \n        local everbloom = {\n            [81864] = small, -- Dreadpetal\n            [84401] = small, -- Swift Sproutling\n        }\n        \n        local shadowmoonBurialGrounds = {\n            [75451] = small, -- Defiled Spirit (non-casting)\n            [77006] = small, -- Corpse Skitterling\n            [76444] = small, -- Subjugated Soul\n        }\n        -- MoP Dungeons\n        local templeOfTheJadeSerpent = {\n            [62358] = small, -- Corrupt Droplet\n            [58319] = small, -- Lesser Sha\n            [59598] = small, -- Lesser Sha\n        }\n        \n        -- Cata Dungeons\n        \n        local throneOfTheTides = {\n            [40923] = extrasmall, -- Unstable Corruption\n        }\n        \n        local vortexPinnacle = {\n            [205326] = medium, -- Gust Soldier\n            [45477] = medium, -- Gust Soldier\n            [45704] = small, -- Lurking Tempest\n            [204337] = small, -- Lurking Tempest\n            [45924] = medium, -- Turbulent Squall\n            [45922] = medium, -- Empyrean Assassin\n            [45926] = medium, -- Servant of Asaad\n            [45932] = small, -- Skyfall Star\n        }\n        \n        local grimBatol = {\n            [224853] = small, -- Hatchling\n            [39388] = medium, -- Boss Hatchling\n        }\n        \n        local misc = {\n            -- Fodder to the Flame demons\n            [169428] = small,\n            [169430] = small,\n            [169429] = small,\n            [169426] = small,\n            [169421] = small,\n            [169425] = small,\n            [168932] = small,\n            -- Misc\n            [189707] = small, -- Chaotic Motes, SL Fated affix\n            [229537] = larger, -- Void Emissary\n            [229296] = small, -- Orb of Ascendance\n        }\n        \n        local maps = {\n            test,\n            manaforgeOmega,\n            liberationOfUndermine,\n            ecoDomeAldani,\n            operationFloodgate,\n            theMotherlode,\n            theRookery,\n            prioryOfTheSacredFlame,\n            darkflameCleft,\n            cinderbrewMeadery,\n            theDawnbreaker,\n            stoneVault,\n            amirdrassil,\n            atalDazar,\n            waycrestManor,\n            darkheartThicket,\n            everbloom,\n            blackRookHold,\n            galakrondsFall,\n            throneOfTheTides,\n            templeOfTheJadeSerpent,\n            nokhudOffensive,\n            courtOfStars,\n            shadowmoonBurialGrounds,\n            algetharAcademy,\n            azureVault,\n            hallsOfValor,\n            rubyLifePools,\n            underrot,\n            freehold,\n            neltharionsLair,\n            vortexPinnacle,\n            hallsOfInfusion,\n            neltharus,\n            uldaman,\n            brackenhideHollow,\n            murozondsRise,\n            misc,\n            vault,\n            sepulcher,\n            nathria,\n            nerubarPalace,\n            araKara,\n            cityOfThreads,\n            tazavesh,\n            theaterOfPain,\n            necroticWake,\n            mistsOfTirnaScithe,\n            hallsOfAtonement,\n            deOtherSide,\n            plaguefall,\n            sanguineDepths,\n            grimBatol,\n            siegeOfBoralus,\n            mechagon,\n        }\n        \n        for i = 1, #maps do\n            local map = maps[i]\n            \n            for id, priority in pairs(map) do\n                modTable.npcIDs[id] = priority\n            end\n        end\n    end\n    \n    ---@param unit string\n    ---@return number|nil\n    function modTable.parseGUID(unit)\n        local guid = UnitGUID(unit)\n        \n        if not guid then\n            return nil\n        end\n        \n        local id = select(6, strsplit(\"-\", guid))\n        \n        return id and tonumber(id) or nil\n    end\n    \n    ---@param id number\n    ---@return boolean\n    function modTable.isSpitefulLike(id)\n        return spitefulLikes[id] ~= nil\n    end\n    \n    function modTable.getSpitefulLikeScale(id)\n        return spitefulLikes[id]\n    end\n    \n    ---@param unitId string\n    ---@return boolean\n    function modTable.targetsPlayer(unitId)\n        local targetName = UnitName(unitId .. \"target\")\n        \n        if not targetName then\n            return false\n        end\n        \n        return UnitIsUnit(targetName, \"player\")\n    end\nend",
["Player Logon"] = "function (modTable)\n    local specId = PlayerUtil.GetCurrentSpecID()\n    local isRdps, isTank, isMdps, isHealer = modTable.determinePlayerMetaInformation(specId)\n    \n    modTable.playerMetaInformation.specId = specId\n    modTable.playerMetaInformation.isRdps = isRdps\n    modTable.playerMetaInformation.isTank = isTank\n    modTable.playerMetaInformation.isMdps = isMdps\n    modTable.playerMetaInformation.isHealer = isHealer\n    \n    modTable.compile(true)\nend",
},
["Time"] = 1755275384,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "",
["Enabled"] = true,
["Revision"] = 2936,
["semver"] = "",
["Author"] = "Jundies-Mal'ganis",
["Desc"] = "Allows you to scale a creatures nameplate based on it's importance in the dungeon.",
["Prio"] = 99,
["Name"] = "Priority based scaling - Jundies",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 4,
["Name"] = "Enable Scaling",
["Value"] = true,
["Key"] = "scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Allows nameplates to scale based on priority.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set scaling value for mid priority.",
["Min"] = 0,
["Key"] = "midScale",
["Value"] = 0.9,
["Name"] = "Mid prio",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set scaling value for low priority.",
["Min"] = 0,
["Key"] = "lowScale",
["Value"] = 0.8,
["Name"] = "Low prio",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set scaling value for extra low scale",
["Min"] = 0,
["Key"] = "extraLowScale",
["Value"] = 0.7,
["Name"] = "Very Low Prio",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Set scaling value for higher priority",
["Min"] = 0,
["Key"] = "higherScale",
["Value"] = 1.1,
["Name"] = "Higher Priority",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
},
},
["aura_width2"] = 19,
["aura_stack_size"] = 8,
["extra_icon_caster_outline"] = "OUTLINE",
["auras_per_row_amount2"] = 1,
["aura_width"] = 17,
["aura_height2"] = 19,
["bossmod_support_enabled"] = false,
["ghost_auras"] = {
["auras"] = {
["WARRIOR"] = {
[5] = {
},
},
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["aura_show_crowdcontrol"] = true,
["blizzard_nameplate_large_font_size"] = 9,
["extra_icon_timer_outline"] = "OUTLINE",
["aura_border_colors"] = {
["steal_or_purge"] = {
0.9019607843137255,
0.9019607843137255,
0.9019607843137255,
},
["crowdcontrol"] = {
0,
0,
0,
},
["offensive"] = {
nil,
0,
0,
},
["defensive"] = {
0.8509803921568627,
0.4509803921568628,
0.1019607843137255,
},
["is_buff"] = {
nil,
0,
0,
},
},
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Unit - Show Energy"] = 11,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Cast - Shining Green [P]"] = 3,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Relics 9.2 M Dungeons"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Glowing [P]"] = 10,
["Unit - Important"] = 11,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Add - Explode on Die [P]"] = 1,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Cast - Alert + Timer [P]"] = 4,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Stop Casting"] = 4,
["Cast - Very Important"] = 15,
["Cast - AoE Hit All [P]"] = 3,
["Aura - Is Cast Bar [P]"] = 1,
["Countdown"] = 12,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Heroic Leap [P]"] = 3,
["Cast - Heal Cut [P]"] = 3,
["Explosion Affix M+"] = 14,
["Auto Set Skull"] = 11,
["Spiteful Affix"] = 3,
["Add - Non Elite Trash [P]"] = 4,
["Add - Warning [P]"] = 5,
["Cast - Voidzone [P]"] = 2,
["Cast - On Going Cast [P]"] = 2,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Fixate"] = 11,
["Cast - Quick Flash"] = 2,
["Cast - Shield Interrupt"] = 2,
["Cast - Tank Interrupt"] = 12,
["Fixate On You"] = 12,
},
["target_highlight_color"] = {
0.4862745404243469,
0.4862745404243469,
0.4862745404243469,
},
["cast_statusbar_color_channeling"] = {
0.6235294117647059,
0.7490196078431373,
1,
1,
},
["extra_icon_anchor"] = {
["x"] = -6,
},
["extra_icon_wide_icon"] = false,
["extra_icon_stack_outline"] = "OUTLINE",
["range_check_alpha"] = 0.699999988079071,
["click_space"] = {
nil,
21,
},
["extra_icon_auras"] = {
204490,
451026,
377014,
200672,
77505,
164275,
22703,
388523,
372824,
438706,
278431,
403631,
200672,
451026,
440179,
385954,
322569,
323059,
453,
1330,
423246,
456252,
456245,
355689,
76151,
1217685,
1215591,
372048,
377048,
702,
1714,
334275,
442804,
},
["aura2_grow_direction"] = 3,
["range_check_in_range_or_target_alpha_friendlies"] = 0.8999999761581421,
["aura_frame2_anchor"] = {
["y"] = 2,
["side"] = 1,
},
["use_name_translit"] = true,
["aura_alpha"] = 1,
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark8",
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["show_softinteract_icons"] = false,
["pet_height_scale"] = 0.9999999403953552,
["aura_x_offset"] = 0,
["range_check_alpha_friendlies"] = 0.8999999761581421,
["transparency_behavior"] = 3,
["spell_animations"] = false,
["ui_parent_scale_tune"] = 1.406249965948519,
["debuff_show_cc_border"] = {
0,
0,
0,
},
["aura_stack_color"] = {
0,
0.8588235974311829,
},
["aura_consolidate"] = true,
["health_statusbar_bgtexture"] = "Atrocity",
["indicator_raidmark_anchor"] = {
["side"] = 9,
["x"] = 0,
},
["extra_icon_width"] = 26,
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
0.9764705882352941,
0.5411764705882353,
0.4745098039215686,
},
["anothertank"] = {
0.3921568989753723,
0.5137255191802979,
0.6352941393852234,
},
["aggro"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["noaggro"] = {
nil,
0.5960784554481506,
},
["nocombat"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["pulling"] = {
nil,
0.7725490927696228,
0.4274510145187378,
},
},
},
["health_statusbar_texture"] = "Atrocity",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Attacking Specific Unit"] = 2,
["Cast Bar Icon Config"] = 2,
["Execute Range"] = 1,
["Hide Neutral Units"] = 1,
["Extra Border"] = 2,
["Target Color"] = 3,
["Aura Reorder"] = 3,
["Combo Points"] = 6,
},
["cast_statusbar_color"] = {
0.6235294342041016,
0.7490196228027344,
1,
1,
},
["update_throttle"] = 0.2499999850988388,
["minor_width_scale"] = 0.9999999403953552,
["cast_statusbar_interrupt_anim"] = false,
["castbar_target_text_size"] = 13,
["aura_frame1_anchor"] = {
["y"] = 2,
["side"] = 7,
},
["tocversion"] = 110200,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["indicator_elite"] = false,
["cast_statusbar_use_fade_effects"] = false,
["aura_show_debuffs_personal"] = false,
["aura_timer_text_font"] = "Expressway",
["npc_colors"] = {
[99358] = {
true,
false,
"deeppink",
},
[198716] = {
true,
false,
"peachpuff",
},
[196798] = {
true,
false,
"snow",
},
[186696] = {
true,
false,
"deeppink",
},
[194241] = {
true,
false,
"peachpuff",
},
[213806] = {
true,
false,
"snow",
},
[231325] = {
true,
false,
"slateblue",
},
[95842] = {
true,
false,
"snow",
},
[180431] = {
true,
false,
"snow",
},
[115407] = {
true,
false,
"peachpuff",
},
[221863] = {
true,
false,
"snow",
},
[248589] = {
true,
false,
"deeppink",
},
[99359] = {
true,
false,
"slateblue",
},
[180432] = {
true,
false,
"peachpuff",
},
[173655] = {
true,
false,
"slateblue",
},
[173016] = {
true,
false,
"snow",
},
[129602] = {
true,
false,
"slateblue",
},
[180433] = {
true,
false,
"deeppink",
},
[231839] = {
true,
false,
"snow",
},
[120651] = {
true,
false,
"gold",
},
[212786] = {
true,
false,
"slateblue",
},
[197697] = {
true,
false,
"deeppink",
},
[176598] = {
true,
false,
"peachpuff",
},
[164578] = {
true,
false,
"slateblue",
},
[229283] = {
true,
false,
"slateblue",
},
[197698] = {
true,
false,
"deeppink",
},
[175576] = {
true,
false,
"yellow",
},
[164451] = {
true,
false,
"slateblue",
},
[164707] = {
true,
false,
"slateblue",
},
[229284] = {
true,
false,
"slateblue",
},
[135552] = {
true,
false,
"peachpuff",
},
[218671] = {
true,
false,
"peachpuff",
},
[130435] = {
true,
false,
"slateblue",
},
[193352] = {
true,
false,
"peachpuff",
},
[135169] = {
true,
false,
"deeppink",
},
[206140] = {
true,
false,
"deeppink",
},
[237981] = {
true,
false,
"snow",
},
[220974] = {
true,
false,
"deeppink",
},
[221102] = {
true,
false,
"snow",
},
[178392] = {
true,
false,
"deeppink",
},
[168418] = {
true,
false,
"snow",
},
[200387] = {
true,
false,
"slateblue",
},
[221103] = {
true,
false,
"slateblue",
},
[199748] = {
true,
false,
"snow",
},
[165222] = {
true,
false,
"peachpuff",
},
[198214] = {
true,
false,
"deeppink",
},
[184020] = {
true,
false,
"slateblue",
},
[220976] = {
true,
false,
"deeppink",
},
[229288] = {
true,
false,
"slateblue",
},
[199749] = {
true,
false,
"slateblue",
},
[168420] = {
true,
false,
"peachpuff",
},
[165479] = {
true,
false,
"slateblue",
},
[170850] = {
true,
false,
"deeppink",
},
[178139] = {
true,
false,
"peachpuff",
},
[83763] = {
true,
false,
"snow",
},
[184022] = {
true,
false,
"snow",
},
[220978] = {
true,
false,
"deeppink",
},
[75899] = {
true,
false,
"deeppink",
},
[210109] = {
true,
false,
"slateblue",
},
[212411] = {
true,
false,
"slateblue",
},
[184023] = {
true,
false,
"peachpuff",
},
[168934] = {
true,
false,
"deeppink",
},
[211261] = {
true,
false,
"deeppink",
},
[196044] = {
true,
false,
"deeppink",
},
[231977] = {
true,
false,
"peachpuff",
},
[160495] = {
true,
false,
"snow",
},
[188244] = {
true,
false,
"slateblue",
},
[178142] = {
true,
false,
"snow",
},
[157810] = {
true,
false,
"snow",
},
[211262] = {
true,
false,
"deeppink",
},
[200137] = {
true,
false,
"snow",
},
[231978] = {
true,
false,
"snow",
},
[194895] = {
true,
false,
"snow",
},
[168425] = {
true,
false,
"deeppink",
},
[208450] = {
true,
false,
"slateblue",
},
[83893] = {
true,
false,
"peachpuff",
},
[128969] = {
true,
false,
"deeppink",
},
[99366] = {
true,
false,
"peachpuff",
},
[227632] = {
true,
false,
"deeppink",
},
[220599] = {
true,
false,
"snow",
},
[217658] = {
true,
false,
"deeppink",
},
[177889] = {
true,
false,
"deeppink",
},
[187224] = {
true,
false,
"peachpuff",
},
[211904] = {
true,
false,
"deeppink",
},
[154744] = {
true,
false,
"deeppink",
},
[194897] = {
true,
false,
"deeppink",
},
[217531] = {
true,
false,
"deeppink",
},
[167532] = {
true,
false,
"slateblue",
},
[114584] = {
true,
false,
"slateblue",
},
[98280] = {
true,
false,
"snow",
},
[178008] = {
true,
false,
"yellow",
},
[80816] = {
true,
false,
"snow",
},
[205384] = {
true,
false,
"snow",
},
[177891] = {
true,
false,
"slateblue",
},
[246285] = {
true,
false,
"slateblue",
},
[211121] = {
true,
false,
"slateblue",
},
[150143] = {
true,
false,
"peachpuff",
},
[172265] = {
true,
false,
"snow",
},
[227635] = {
true,
false,
"snow",
},
[217533] = {
true,
false,
"deeppink",
},
[167534] = {
true,
false,
"slateblue",
},
[177892] = {
true,
false,
"peachpuff",
},
[220986] = {
true,
false,
"deeppink",
},
[165872] = {
true,
false,
"deeppink",
},
[180429] = {
true,
false,
"slateblue",
},
[214209] = {
true,
false,
"snow",
},
[129600] = {
true,
false,
"snow",
},
[174568] = {
false,
false,
"azure",
},
[213932] = {
true,
false,
"slateblue",
},
[131858] = {
true,
false,
"slateblue",
},
[98275] = {
true,
false,
"peachpuff",
},
[65317] = {
true,
false,
"slateblue",
},
[114266] = {
true,
false,
"snow",
},
[185032] = {
true,
false,
"slateblue",
},
[207177] = {
true,
false,
"slateblue",
},
[127757] = {
true,
false,
"slateblue",
},
[40925] = {
true,
false,
"slateblue",
},
[83761] = {
true,
false,
"slateblue",
},
[220988] = {
true,
false,
"deeppink",
},
[190426] = {
true,
false,
"deeppink",
},
[189531] = {
true,
false,
"peachpuff",
},
[162038] = {
true,
false,
"slateblue",
},
[98538] = {
true,
false,
"deeppink",
},
[168153] = {
true,
false,
"deeppink",
},
[150146] = {
true,
false,
"deeppink",
},
[150142] = {
true,
false,
"snow",
},
[137103] = {
true,
false,
"deeppink",
},
[127106] = {
true,
false,
"deeppink",
},
[101991] = {
true,
false,
"peachpuff",
},
[162039] = {
true,
false,
"snow",
},
[164702] = {
true,
false,
"deeppink",
},
[156157] = {
true,
false,
"peachpuff",
},
[167538] = {
true,
false,
"slateblue",
},
[75713] = {
true,
false,
"snow",
},
[180070] = {
true,
false,
"deeppink",
},
[208456] = {
true,
false,
"peachpuff",
},
[196671] = {
true,
false,
"slateblue",
},
[162040] = {
true,
false,
"deeppink",
},
[195927] = {
true,
false,
"slateblue",
},
[81212] = {
true,
false,
"slateblue",
},
[208459] = {
true,
false,
"snow",
},
[167533] = {
true,
false,
"slateblue",
},
[223777] = {
true,
false,
"peachpuff",
},
[52019] = {
true,
false,
"deeppink",
},
[83578] = {
true,
false,
"slateblue",
},
[227513] = {
true,
false,
"snow",
},
[171376] = {
true,
false,
"peachpuff",
},
[211263] = {
true,
false,
"deeppink",
},
[190034] = {
true,
false,
"slateblue",
},
[97197] = {
true,
false,
"snow",
},
[130635] = {
true,
false,
"snow",
},
[151812] = {
false,
false,
"transparent",
},
[203857] = {
true,
false,
"snow",
},
[227514] = {
true,
false,
"deeppink",
},
[195929] = {
true,
false,
"slateblue",
},
[212412] = {
true,
false,
"deeppink",
},
[221760] = {
true,
false,
"peachpuff",
},
[205618] = {
true,
false,
"slateblue",
},
[231223] = {
true,
false,
"snow",
},
[223423] = {
true,
false,
"slateblue",
},
[229433] = {
true,
false,
"slateblue",
},
[75459] = {
true,
false,
"snow",
},
[195930] = {
true,
false,
"slateblue",
},
[170483] = {
true,
false,
"deeppink",
},
[39392] = {
true,
false,
"slateblue",
},
[198870] = {
true,
false,
"peachpuff",
},
[193373] = {
true,
false,
"deeppink",
},
[216364] = {
true,
false,
"deeppink",
},
[229434] = {
true,
false,
"slateblue",
},
[190688] = {
true,
false,
"slateblue",
},
[168310] = {
true,
false,
"deeppink",
},
[97068] = {
true,
false,
"slateblue",
},
[195928] = {
true,
false,
"slateblue",
},
[133912] = {
true,
false,
"peachpuff",
},
[198869] = {
true,
false,
"snow",
},
[98081] = {
true,
false,
"deeppink",
},
[190686] = {
true,
false,
"peachpuff",
},
[136470] = {
true,
false,
"snow",
},
[208208] = {
true,
false,
"slateblue",
},
[150253] = {
true,
false,
"slateblue",
},
[75652] = {
true,
false,
"deeppink",
},
[81984] = {
true,
false,
"slateblue",
},
[201288] = {
true,
false,
"deeppink",
},
[197595] = {
true,
false,
"slateblue",
},
[203861] = {
true,
false,
"slateblue",
},
[190690] = {
true,
false,
"slateblue",
},
[134012] = {
true,
false,
"slateblue",
},
[171384] = {
true,
false,
"peachpuff",
},
[179821] = {
true,
false,
"deeppink",
},
[83389] = {
true,
false,
"slateblue",
},
[157571] = {
true,
false,
"snow",
},
[129552] = {
true,
false,
"slateblue",
},
[154758] = {
true,
false,
"deeppink",
},
[162047] = {
true,
false,
"slateblue",
},
[118491] = {
true,
false,
"snow",
},
[115486] = {
true,
false,
"slateblue",
},
[220742] = {
true,
false,
"deeppink",
},
[215755] = {
true,
false,
"deeppink",
},
[157572] = {
true,
false,
"snow",
},
[164861] = {
true,
false,
"peachpuff",
},
[114783] = {
true,
false,
"snow",
},
[45915] = {
true,
false,
"slateblue",
},
[105704] = {
true,
false,
"peachpuff",
},
[166396] = {
true,
false,
"peachpuff",
},
[166524] = {
true,
false,
"snow",
},
[215756] = {
true,
false,
"deeppink",
},
[187240] = {
true,
false,
"slateblue",
},
[132126] = {
true,
false,
"peachpuff",
},
[180335] = {
true,
false,
"peachpuff",
},
[202969] = {
true,
false,
"deeppink",
},
[214350] = {
true,
false,
"snow",
},
[168443] = {
true,
false,
"peachpuff",
},
[77700] = {
true,
false,
"snow",
},
[208440] = {
true,
false,
"slateblue",
},
[84989] = {
true,
false,
"snow",
},
[196576] = {
true,
false,
"peachpuff",
},
[180336] = {
true,
false,
"snow",
},
[170234] = {
true,
false,
"deeppink",
},
[155908] = {
true,
false,
"deeppink",
},
[170490] = {
true,
false,
"snow",
},
[168572] = {
true,
false,
"peachpuff",
},
[191206] = {
true,
false,
"snow",
},
[187969] = {
true,
false,
"peachpuff",
},
[184301] = {
true,
false,
"snow",
},
[115020] = {
true,
false,
"slateblue",
},
[202971] = {
true,
false,
"snow",
},
[225605] = {
true,
false,
"snow",
},
[115488] = {
true,
false,
"peachpuff",
},
[91000] = {
true,
false,
"slateblue",
},
[186208] = {
true,
false,
"slateblue",
},
[84990] = {
true,
false,
"peachpuff",
},
[81985] = {
true,
false,
"snow",
},
[122969] = {
true,
false,
"snow",
},
[100527] = {
true,
false,
"snow",
},
[197985] = {
true,
false,
"snow",
},
[195265] = {
true,
false,
"slateblue",
},
[150160] = {
true,
false,
"slateblue",
},
[208438] = {
true,
false,
"slateblue",
},
[212673] = {
true,
false,
"deeppink",
},
[178165] = {
true,
false,
"slateblue",
},
[196045] = {
true,
false,
"snow",
},
[225479] = {
true,
false,
"peachpuff",
},
[240952] = {
true,
false,
"yellow",
},
[104300] = {
true,
false,
"snow",
},
[197219] = {
true,
false,
"slateblue",
},
[198326] = {
true,
false,
"slateblue",
},
[175992] = {
true,
false,
"deeppink",
},
[104278] = {
true,
false,
"deeppink",
},
[122970] = {
true,
false,
"deeppink",
},
[199233] = {
true,
false,
"slateblue",
},
[131492] = {
true,
false,
"peachpuff",
},
[203230] = {
true,
false,
"peachpuff",
},
[205622] = {
true,
false,
"slateblue",
},
[114316] = {
true,
false,
"snow",
},
[86526] = {
true,
false,
"peachpuff",
},
[218961] = {
true,
false,
"deeppink",
},
[135329] = {
true,
false,
"deeppink",
},
[81603] = {
true,
false,
"slateblue",
},
[210264] = {
true,
false,
"peachpuff",
},
[45917] = {
true,
false,
"slateblue",
},
[196198] = {
true,
false,
"peachpuff",
},
[174843] = {
true,
false,
"slateblue",
},
[198500] = {
true,
false,
"snow",
},
[184131] = {
true,
false,
"deeppink",
},
[122971] = {
true,
false,
"slateblue",
},
[191164] = {
true,
false,
"deeppink",
},
[166276] = {
true,
false,
"slateblue",
},
[245255] = {
true,
false,
"slateblue",
},
[168578] = {
true,
false,
"snow",
},
[150292] = {
true,
false,
"deeppink",
},
[198501] = {
true,
false,
"snow",
},
[198502] = {
true,
false,
"snow",
},
[228424] = {
true,
false,
"snow",
},
[162057] = {
true,
false,
"slateblue",
},
[211289] = {
true,
false,
"deeppink",
},
[207198] = {
true,
false,
"snow",
},
[150165] = {
true,
false,
"snow",
},
[223822] = {
true,
false,
"deeppink",
},
[186226] = {
true,
false,
"deeppink",
},
[166275] = {
true,
false,
"snow",
},
[122972] = {
true,
false,
"snow",
},
[218324] = {
true,
false,
"deeppink",
},
[211290] = {
true,
false,
"deeppink",
},
[204206] = {
true,
false,
"peachpuff",
},
[92538] = {
true,
false,
"deeppink",
},
[122973] = {
true,
false,
"peachpuff",
},
[198503] = {
true,
false,
"snow",
},
[178171] = {
true,
false,
"deeppink",
},
[196203] = {
true,
false,
"snow",
},
[180473] = {
true,
false,
"peachpuff",
},
[207199] = {
true,
false,
"peachpuff",
},
[152033] = {
true,
false,
"deeppink",
},
[196202] = {
true,
false,
"peachpuff",
},
[212827] = {
true,
false,
"deeppink",
},
[212826] = {
true,
false,
"deeppink",
},
[164873] = {
true,
false,
"deeppink",
},
[231496] = {
true,
false,
"peachpuff",
},
[180474] = {
true,
false,
"deeppink",
},
[183671] = {
true,
false,
"deeppink",
},
[236995] = {
true,
false,
"slateblue",
},
[129367] = {
true,
false,
"peachpuff",
},
[196679] = {
false,
false,
"gray",
},
[169861] = {
true,
false,
"peachpuff",
},
[129559] = {
true,
false,
"deeppink",
},
[174210] = {
true,
false,
"snow",
},
[84520] = {
true,
false,
"slateblue",
},
[186741] = {
true,
false,
"snow",
},
[164363] = {
true,
false,
"peachpuff",
},
[150169] = {
true,
false,
"peachpuff",
},
[183033] = {
true,
false,
"slateblue",
},
[180348] = {
true,
false,
"slateblue",
},
[212389] = {
true,
false,
"peachpuff",
},
[189555] = {
true,
false,
"snow",
},
[100532] = {
true,
false,
"deeppink",
},
[207202] = {
true,
false,
"snow",
},
[182778] = {
true,
false,
"deeppink",
},
[179837] = {
true,
false,
"slateblue",
},
[229069] = {
true,
false,
"snow",
},
[59555] = {
true,
false,
"deeppink",
},
[222619] = {
false,
false,
"slateblue",
},
[45912] = {
true,
false,
"snow",
},
[163086] = {
true,
false,
"slateblue",
},
[126918] = {
true,
false,
"peachpuff",
},
[131587] = {
true,
false,
"slateblue",
},
[91006] = {
true,
false,
"snow",
},
[180323] = {
true,
false,
"deeppink",
},
[189265] = {
true,
false,
"peachpuff",
},
[173044] = {
true,
false,
"snow",
},
[173189] = {
true,
false,
"snow",
},
[98406] = {
true,
false,
"deeppink",
},
[221526] = {
false,
false,
"palevioletred",
},
[118489] = {
true,
false,
"deeppink",
},
[129369] = {
true,
false,
"deeppink",
},
[97720] = {
true,
false,
"deeppink",
},
[212831] = {
true,
false,
"deeppink",
},
[195696] = {
true,
false,
"deeppink",
},
[173190] = {
true,
false,
"snow",
},
[220368] = {
true,
false,
"yellow",
},
[187768] = {
true,
false,
"snow",
},
[222167] = {
true,
false,
"snow",
},
[198577] = {
true,
false,
"peachpuff",
},
[75979] = {
true,
false,
"deeppink",
},
[127111] = {
true,
false,
"peachpuff",
},
[234443] = {
true,
false,
"deeppink",
},
[187897] = {
true,
false,
"deeppink",
},
[153882] = {
true,
false,
"snow",
},
[180864] = {
true,
false,
"deeppink",
},
[234955] = {
true,
false,
"deeppink",
},
[129370] = {
true,
false,
"snow",
},
[151325] = {
true,
false,
"deeppink",
},
[98521] = {
true,
false,
"deeppink",
},
[174569] = {
false,
false,
"azure",
},
[179842] = {
true,
false,
"deeppink",
},
[213217] = {
true,
false,
"snow",
},
[40357] = {
true,
false,
"deeppink",
},
[80938] = {
true,
false,
"slateblue",
},
[188026] = {
true,
false,
"deeppink",
},
[168717] = {
true,
false,
"snow",
},
[144293] = {
true,
false,
"slateblue",
},
[206697] = {
true,
false,
"snow",
},
[183423] = {
true,
false,
"snow",
},
[165137] = {
true,
false,
"slateblue",
},
[187771] = {
true,
false,
"peachpuff",
},
[234957] = {
true,
false,
"snow",
},
[144295] = {
true,
false,
"peachpuff",
},
[168718] = {
true,
false,
"peachpuff",
},
[144294] = {
true,
false,
"snow",
},
[184319] = {
true,
false,
"peachpuff",
},
[165010] = {
true,
false,
"slateblue",
},
[200943] = {
true,
false,
"slateblue",
},
[228015] = {
true,
false,
"slateblue",
},
[97083] = {
true,
false,
"snow",
},
[165763] = {
true,
false,
"snow",
},
[191225] = {
true,
false,
"slateblue",
},
[206698] = {
true,
false,
"peachpuff",
},
[242631] = {
true,
false,
"deeppink",
},
[183425] = {
true,
false,
"peachpuff",
},
[98810] = {
true,
false,
"slateblue",
},
[154014] = {
true,
false,
"snow",
},
[212453] = {
true,
false,
"snow",
},
[129372] = {
true,
false,
"peachpuff",
},
[224219] = {
true,
false,
"snow",
},
[144296] = {
true,
false,
"slateblue",
},
[205804] = {
true,
false,
"slateblue",
},
[179334] = {
true,
false,
"deeppink",
},
[208698] = {
true,
false,
"deeppink",
},
[176521] = {
true,
false,
"peachpuff",
},
[179847] = {
true,
false,
"deeppink",
},
[144298] = {
true,
false,
"deeppink",
},
[216293] = {
true,
false,
"peachpuff",
},
[130012] = {
true,
false,
"peachpuff",
},
[231380] = {
true,
false,
"snow",
},
[190588] = {
true,
false,
"slateblue",
},
[191739] = {
true,
false,
"slateblue",
},
[224732] = {
true,
false,
"snow",
},
[224731] = {
true,
false,
"slateblue",
},
[168594] = {
true,
false,
"slateblue",
},
[40167] = {
true,
false,
"peachpuff",
},
[211816] = {
true,
false,
"deeppink",
},
[133430] = {
true,
false,
"slateblue",
},
[225982] = {
false,
false,
"blueviolet",
},
[176395] = {
true,
false,
"peachpuff",
},
[176523] = {
true,
false,
"slateblue",
},
[234962] = {
true,
false,
"peachpuff",
},
[198263] = {
true,
false,
"slateblue",
},
[190206] = {
true,
false,
"peachpuff",
},
[180104] = {
true,
false,
"snow",
},
[224221] = {
true,
false,
"slateblue",
},
[114796] = {
true,
false,
"peachpuff",
},
[184580] = {
true,
false,
"snow",
},
[92610] = {
true,
false,
"deeppink",
},
[96574] = {
true,
false,
"slateblue",
},
[210539] = {
true,
false,
"slateblue",
},
[191230] = {
true,
false,
"deeppink",
},
[169875] = {
true,
false,
"peachpuff",
},
[165911] = {
true,
false,
"deeppink",
},
[206064] = {
true,
false,
"peachpuff",
},
[188673] = {
true,
false,
"slateblue",
},
[179852] = {
true,
false,
"peachpuff",
},
[104247] = {
true,
false,
"snow",
},
[130909] = {
true,
false,
"deeppink",
},
[164506] = {
true,
false,
"deeppink",
},
[206704] = {
true,
false,
"slateblue",
},
[214761] = {
true,
false,
"slateblue",
},
[173714] = {
true,
false,
"slateblue",
},
[85194] = {
true,
false,
"deeppink",
},
[154020] = {
true,
false,
"snow",
},
[45935] = {
true,
false,
"snow",
},
[165529] = {
true,
false,
"peachpuff",
},
[191232] = {
true,
false,
"peachpuff",
},
[98813] = {
true,
false,
"snow",
},
[165913] = {
true,
false,
"deeppink",
},
[45922] = {
true,
false,
"snow",
},
[206066] = {
true,
false,
"snow",
},
[95834] = {
true,
false,
"deeppink",
},
[221667] = {
true,
false,
"snow",
},
[114542] = {
true,
false,
"peachpuff",
},
[214762] = {
true,
false,
"deeppink",
},
[186246] = {
true,
false,
"snow",
},
[115757] = {
true,
false,
"slateblue",
},
[155812] = {
true,
false,
"peachpuff",
},
[164737] = {
true,
false,
"deeppink",
},
[224609] = {
true,
false,
"deeppink",
},
[95779] = {
true,
false,
"slateblue",
},
[206696] = {
true,
false,
"slateblue",
},
[135474] = {
true,
false,
"peachpuff",
},
[216621] = {
true,
false,
"deeppink",
},
[229537] = {
true,
false,
"yellow",
},
[198868] = {
true,
false,
"snow",
},
[230748] = {
true,
false,
"deeppink",
},
[166299] = {
true,
false,
"peachpuff",
},
[199595] = {
true,
false,
"slateblue",
},
[56792] = {
true,
false,
"deeppink",
},
[228539] = {
true,
false,
"snow",
},
[199547] = {
true,
false,
"deeppink",
},
[164557] = {
true,
false,
"slateblue",
},
[204918] = {
true,
false,
"peachpuff",
},
[195119] = {
true,
false,
"snow",
},
[196856] = {
true,
false,
"slateblue",
},
[115019] = {
true,
false,
"snow",
},
[223844] = {
true,
false,
"snow",
},
[171799] = {
true,
false,
"deeppink",
},
[166301] = {
true,
false,
"deeppink",
},
[167963] = {
true,
false,
"peachpuff",
},
[208244] = {
true,
false,
"snow",
},
[180495] = {
true,
false,
"slateblue",
},
[199037] = {
true,
false,
"snow",
},
[169927] = {
true,
false,
"deeppink",
},
[40936] = {
true,
false,
"slateblue",
},
[167964] = {
true,
false,
"deeppink",
},
[199549] = {
true,
false,
"deeppink",
},
[101437] = {
true,
false,
"peachpuff",
},
[122984] = {
true,
false,
"deeppink",
},
[41096] = {
true,
false,
"peachpuff",
},
[166302] = {
true,
false,
"snow",
},
[220616] = {
true,
false,
"slateblue",
},
[155221] = {
true,
false,
"snow",
},
[194990] = {
true,
false,
"snow",
},
[168988] = {
true,
false,
"deeppink",
},
[165919] = {
true,
false,
"slateblue",
},
[169159] = {
true,
false,
"gold",
},
[195842] = {
true,
false,
"peachpuff",
},
[129374] = {
true,
false,
"slateblue",
},
[104251] = {
true,
false,
"deeppink",
},
[173720] = {
true,
false,
"slateblue",
},
[163618] = {
true,
false,
"peachpuff",
},
[101438] = {
true,
false,
"peachpuff",
},
[227300] = {
true,
false,
"slateblue",
},
[176959] = {
true,
false,
"snow",
},
[167965] = {
true,
false,
"peachpuff",
},
[211291] = {
true,
false,
"deeppink",
},
[189706] = {
true,
false,
"yellow",
},
[239833] = {
true,
false,
"deeppink",
},
[186125] = {
true,
false,
"snow",
},
[179388] = {
true,
false,
"snow",
},
[167967] = {
true,
false,
"peachpuff",
},
[45924] = {
true,
false,
"peachpuff",
},
[206074] = {
true,
false,
"snow",
},
[233823] = {
true,
false,
"deeppink",
},
[165410] = {
true,
false,
"slateblue",
},
[205435] = {
true,
false,
"slateblue",
},
[163620] = {
true,
false,
"slateblue",
},
[205691] = {
true,
false,
"peachpuff",
},
[83025] = {
true,
false,
"peachpuff",
},
[203812] = {
true,
false,
"deeppink",
},
[239834] = {
true,
false,
"deeppink",
},
[229686] = {
true,
false,
"snow",
},
[179733] = {
true,
false,
"yellow",
},
[171805] = {
true,
false,
"peachpuff",
},
[163621] = {
true,
false,
"slateblue",
},
[217039] = {
true,
false,
"slateblue",
},
[168992] = {
true,
false,
"snow",
},
[184331] = {
true,
false,
"slateblue",
},
[223724] = {
true,
false,
"yellow",
},
[211228] = {
true,
false,
"peachpuff",
},
[196102] = {
true,
false,
"snow",
},
[177816] = {
true,
false,
"snow",
},
[98243] = {
true,
false,
"slateblue",
},
[188302] = {
true,
false,
"yellow",
},
[83026] = {
true,
false,
"slateblue",
},
[114803] = {
true,
false,
"snow",
},
[239836] = {
true,
false,
"deeppink",
},
[177817] = {
true,
false,
"peachpuff",
},
[81236] = {
true,
false,
"snow",
},
[130404] = {
true,
false,
"slateblue",
},
[224271] = {
true,
false,
"snow",
},
[169924] = {
true,
false,
"slateblue",
},
[220946] = {
true,
false,
"slateblue",
},
[82579] = {
true,
false,
"snow",
},
[156244] = {
true,
false,
"slateblue",
},
[193291] = {
true,
false,
"deeppink",
},
[165414] = {
true,
false,
"snow",
},
[175550] = {
true,
false,
"deeppink",
},
[213751] = {
true,
false,
"yellow",
},
[151476] = {
true,
false,
"slateblue",
},
[114804] = {
true,
false,
"peachpuff",
},
[200836] = {
true,
false,
"slateblue",
},
[220401] = {
true,
false,
"deeppink",
},
[175517] = {
true,
false,
"peachpuff",
},
[136643] = {
true,
false,
"slateblue",
},
[59544] = {
true,
false,
"snow",
},
[187154] = {
true,
false,
"deeppink",
},
[190340] = {
true,
false,
"peachpuff",
},
[179841] = {
true,
false,
"snow",
},
[170147] = {
false,
false,
"gray",
},
[198311] = {
true,
false,
"slateblue",
},
[220730] = {
true,
false,
"slateblue",
},
[194315] = {
true,
false,
"slateblue",
},
[105715] = {
true,
false,
"peachpuff",
},
[194316] = {
true,
false,
"slateblue",
},
[210812] = {
true,
false,
"snow",
},
[163882] = {
true,
false,
"slateblue",
},
[208193] = {
true,
false,
"peachpuff",
},
[195851] = {
true,
false,
"peachpuff",
},
[197671] = {
true,
false,
"peachpuff",
},
[201222] = {
true,
false,
"slateblue",
},
[173729] = {
true,
false,
"deeppink",
},
[194317] = {
true,
false,
"slateblue",
},
[84499] = {
true,
false,
"deeppink",
},
[167876] = {
true,
false,
"deeppink",
},
[174197] = {
true,
false,
"snow",
},
[184335] = {
true,
false,
"snow",
},
[104270] = {
true,
false,
"slateblue",
},
[201223] = {
true,
false,
"peachpuff",
},
[193799] = {
true,
false,
"deeppink",
},
[216340] = {
true,
false,
"deeppink",
},
[135240] = {
true,
false,
"peachpuff",
},
[115765] = {
true,
false,
"deeppink",
},
[200840] = {
true,
false,
"slateblue",
},
[59873] = {
true,
false,
"slateblue",
},
[98368] = {
true,
false,
"slateblue",
},
[156212] = {
true,
false,
"snow",
},
[155090] = {
true,
false,
"snow",
},
[196263] = {
true,
false,
"snow",
},
[214140] = {
true,
false,
"slateblue",
},
[135241] = {
true,
false,
"snow",
},
[231531] = {
true,
false,
"deeppink",
},
[150297] = {
true,
false,
"peachpuff",
},
[83892] = {
true,
false,
"snow",
},
[100485] = {
true,
false,
"slateblue",
},
[133835] = {
true,
false,
"peachpuff",
},
[222964] = {
true,
false,
"peachpuff",
},
[213885] = {
true,
false,
"deeppink",
},
[155830] = {
true,
false,
"snow",
},
[228463] = {
true,
false,
"snow",
},
[182045] = {
true,
false,
"deeppink",
},
[183707] = {
true,
false,
"snow",
},
[81432] = {
true,
false,
"snow",
},
[102287] = {
true,
false,
"slateblue",
},
[187160] = {
true,
false,
"peachpuff",
},
[165805] = {
true,
false,
"slateblue",
},
[136139] = {
true,
false,
"deeppink",
},
[155831] = {
true,
false,
"deeppink",
},
[101637] = {
true,
false,
"slateblue",
},
[206214] = {
true,
false,
"slateblue",
},
[195878] = {
true,
false,
"snow",
},
[187033] = {
true,
false,
"slateblue",
},
[168747] = {
true,
false,
"deeppink",
},
[210818] = {
true,
false,
"peachpuff",
},
[180640] = {
true,
false,
"deeppink",
},
[100486] = {
true,
false,
"snow",
},
[192788] = {
true,
false,
"deeppink",
},
[59546] = {
true,
false,
"peachpuff",
},
[133685] = {
true,
false,
"deeppink",
},
[102788] = {
true,
false,
"peachpuff",
},
[102095] = {
true,
false,
"peachpuff",
},
[189464] = {
true,
false,
"peachpuff",
},
[135245] = {
true,
false,
"slateblue",
},
[76446] = {
true,
false,
"peachpuff",
},
[162099] = {
true,
false,
"deeppink",
},
[98706] = {
true,
false,
"slateblue",
},
[220141] = {
true,
false,
"snow",
},
[168384] = {
true,
false,
"peachpuff",
},
[115640] = {
true,
false,
"deeppink",
},
[138187] = {
true,
false,
"deeppink",
},
[45704] = {
true,
false,
"dimgray",
},
[227573] = {
true,
false,
"slateblue",
},
[197905] = {
true,
false,
"peachpuff",
},
[192791] = {
true,
false,
"deeppink",
},
[131666] = {
true,
false,
"peachpuff",
},
[176551] = {
true,
false,
"snow",
},
[212739] = {
true,
false,
"slateblue",
},
[189338] = {
true,
false,
"snow",
},
[107073] = {
true,
false,
"snow",
},
[42859] = {
false,
false,
"snow",
},
[229619] = {
true,
false,
"deeppink",
},
[245092] = {
true,
false,
"slateblue",
},
[189227] = {
true,
false,
"deeppink",
},
[144071] = {
true,
false,
"snow",
},
[189466] = {
true,
false,
"slateblue",
},
[190362] = {
true,
false,
"peachpuff",
},
[224249] = {
true,
false,
"deeppink",
},
[168112] = {
false,
false,
"transparent",
},
[131586] = {
true,
false,
"slateblue",
},
[59547] = {
true,
false,
"slateblue",
},
[196117] = {
true,
false,
"slateblue",
},
[193760] = {
true,
false,
"slateblue",
},
[223994] = {
true,
false,
"snow",
},
[213892] = {
true,
false,
"snow",
},
[163126] = {
true,
false,
"snow",
},
[165556] = {
true,
false,
"deeppink",
},
[227575] = {
true,
false,
"peachpuff",
},
[193944] = {
true,
false,
"peachpuff",
},
[245222] = {
true,
false,
"slateblue",
},
[81819] = {
true,
false,
"peachpuff",
},
[115642] = {
true,
false,
"peachpuff",
},
[209801] = {
true,
false,
"deeppink",
},
[163894] = {
true,
false,
"peachpuff",
},
[45919] = {
true,
false,
"slateblue",
},
[190377] = {
true,
false,
"peachpuff",
},
[45928] = {
true,
false,
"slateblue",
},
[163128] = {
true,
false,
"snow",
},
[162744] = {
true,
false,
"slateblue",
},
[152898] = {
true,
false,
"deeppink",
},
[169905] = {
true,
false,
"peachpuff",
},
[189470] = {
true,
false,
"snow",
},
[171184] = {
true,
false,
"slateblue",
},
[188703] = {
true,
false,
"yellow",
},
[196115] = {
true,
false,
"deeppink",
},
[168156] = {
true,
false,
"deeppink",
},
[168627] = {
true,
false,
"snow",
},
[204560] = {
true,
false,
"yellow",
},
[94224] = {
true,
false,
"deeppink",
},
[164929] = {
true,
false,
"peachpuff",
},
[227578] = {
true,
false,
"snow",
},
[186658] = {
true,
false,
"snow",
},
[170882] = {
true,
false,
"peachpuff",
},
[206351] = {
true,
false,
"snow",
},
[192796] = {
true,
false,
"peachpuff",
},
[205337] = {
true,
false,
"deeppink",
},
[213913] = {
true,
false,
"snow",
},
[168318] = {
true,
false,
"slateblue",
},
[133463] = {
true,
false,
"slateblue",
},
[216326] = {
true,
false,
"snow",
},
[228540] = {
true,
false,
"snow",
},
[197145] = {
true,
false,
"slateblue",
},
[40577] = {
true,
false,
"slateblue",
},
[198424] = {
true,
false,
"peachpuff",
},
[190368] = {
true,
false,
"deeppink",
},
[199703] = {
true,
false,
"deeppink",
},
[178141] = {
true,
false,
"deeppink",
},
[156226] = {
true,
false,
"snow",
},
[167607] = {
true,
false,
"deeppink",
},
[197146] = {
true,
false,
"slateblue",
},
[188067] = {
true,
false,
"snow",
},
[227581] = {
true,
false,
"snow",
},
[168886] = {
true,
false,
"snow",
},
[134232] = {
true,
false,
"peachpuff",
},
[45930] = {
true,
false,
"deeppink",
},
[216328] = {
true,
false,
"deeppink",
},
[211341] = {
true,
false,
"slateblue",
},
[192767] = {
true,
false,
"slateblue",
},
[40943] = {
true,
false,
"snow",
},
[175861] = {
true,
false,
"deeppink",
},
[157634] = {
true,
false,
"peachpuff",
},
[166969] = {
true,
false,
"snow",
},
[98370] = {
true,
false,
"snow",
},
[192800] = {
true,
false,
"snow",
},
[197904] = {
true,
false,
"snow",
},
[238068] = {
true,
false,
"deeppink",
},
[84957] = {
true,
false,
"deeppink",
},
[199325] = {
true,
false,
"snow",
},
[102232] = {
true,
false,
"peachpuff",
},
[166970] = {
true,
false,
"peachpuff",
},
[82590] = {
true,
false,
"peachpuff",
},
[221945] = {
true,
false,
"deeppink",
},
[113537] = {
true,
false,
"slateblue",
},
[197149] = {
true,
false,
"snow",
},
[218884] = {
true,
false,
"deeppink",
},
[166589] = {
true,
false,
"deeppink",
},
[172981] = {
true,
false,
"slateblue",
},
[166971] = {
true,
false,
"deeppink",
},
[184107] = {
true,
false,
"slateblue",
},
[152905] = {
true,
false,
"deeppink",
},
[128434] = {
true,
false,
"peachpuff",
},
[164414] = {
true,
false,
"snow",
},
[180015] = {
true,
false,
"peachpuff",
},
[197406] = {
true,
false,
"deeppink",
},
[190373] = {
true,
false,
"snow",
},
[164926] = {
true,
false,
"deeppink",
},
[180399] = {
true,
false,
"deeppink",
},
[131677] = {
true,
false,
"deeppink",
},
[206230] = {
true,
false,
"deeppink",
},
[167612] = {
true,
false,
"slateblue",
},
[163520] = {
true,
false,
"slateblue",
},
[114624] = {
true,
false,
"slateblue",
},
[197535] = {
true,
false,
"deeppink",
},
[114629] = {
true,
false,
"peachpuff",
},
[190370] = {
true,
false,
"slateblue",
},
[214287] = {
true,
false,
"yellow",
},
[198047] = {
true,
false,
"peachpuff",
},
[212403] = {
true,
false,
"peachpuff",
},
[115388] = {
true,
false,
"deeppink",
},
[156245] = {
true,
false,
"slateblue",
},
[164921] = {
true,
false,
"snow",
},
[189816] = {
true,
false,
"snow",
},
[86684] = {
true,
false,
"snow",
},
[76518] = {
true,
false,
"deeppink",
},
[176565] = {
true,
false,
"snow",
},
[177716] = {
true,
false,
"snow",
},
[205212] = {
true,
false,
"deeppink",
},
[101326] = {
true,
false,
"deeppink",
},
[165824] = {
true,
false,
"deeppink",
},
[167998] = {
true,
false,
"slateblue",
},
[81820] = {
true,
false,
"snow",
},
[165762] = {
true,
false,
"deeppink",
},
[192934] = {
true,
false,
"peachpuff",
},
[168882] = {
true,
false,
"deeppink",
},
[214673] = {
true,
false,
"peachpuff",
},
[168109] = {
true,
false,
"snow",
},
[229251] = {
true,
false,
"slateblue",
},
[214066] = {
true,
false,
"peachpuff",
},
[213893] = {
true,
false,
"snow",
},
[195876] = {
true,
false,
"snow",
},
[84767] = {
true,
false,
"deeppink",
},
[126919] = {
true,
false,
"snow",
},
[163524] = {
true,
false,
"deeppink",
},
[114626] = {
true,
false,
"deeppink",
},
[229252] = {
true,
false,
"peachpuff",
},
[210966] = {
true,
false,
"peachpuff",
},
[96587] = {
true,
false,
"snow",
},
[195877] = {
true,
false,
"deeppink",
},
[214419] = {
true,
false,
"peachpuff",
},
[87252] = {
true,
false,
"slateblue",
},
[131812] = {
true,
false,
"deeppink",
},
[41139] = {
true,
false,
"peachpuff",
},
[135365] = {
true,
false,
"deeppink",
},
[163121] = {
true,
false,
"peachpuff",
},
[101008] = {
true,
false,
"deeppink",
},
[216338] = {
true,
false,
"slateblue",
},
[102404] = {
true,
false,
"slateblue",
},
[131685] = {
true,
false,
"snow",
},
[198308] = {
true,
false,
"slateblue",
},
[114627] = {
true,
false,
"peachpuff",
},
[212793] = {
true,
false,
"deeppink",
},
[233474] = {
true,
false,
"snow",
},
[164461] = {
true,
false,
"snow",
},
[216339] = {
true,
false,
"peachpuff",
},
[214421] = {
true,
false,
"slateblue",
},
[214012] = {
true,
false,
"slateblue",
},
[220815] = {
true,
false,
"peachpuff",
},
[170480] = {
true,
false,
"slateblue",
},
[190381] = {
true,
false,
"deeppink",
},
[190342] = {
true,
false,
"deeppink",
},
[186220] = {
true,
false,
"snow",
},
[115395] = {
true,
false,
"slateblue",
},
[130661] = {
true,
false,
"peachpuff",
},
[236033] = {
true,
false,
"peachpuff",
},
[80805] = {
true,
false,
"slateblue",
},
[169893] = {
true,
false,
"deeppink",
},
[205727] = {
true,
false,
"peachpuff",
},
[199717] = {
true,
false,
"slateblue",
},
[197799] = {
true,
false,
"snow",
},
[187155] = {
true,
false,
"peachpuff",
},
[59552] = {
true,
false,
"peachpuff",
},
[213338] = {
true,
false,
"snow",
},
[170690] = {
true,
false,
"peachpuff",
},
[130485] = {
true,
false,
"deeppink",
},
[200126] = {
true,
false,
"peachpuff",
},
[76104] = {
true,
false,
"peachpuff",
},
[150168] = {
true,
false,
"deeppink",
},
[155824] = {
true,
false,
"peachpuff",
},
[176573] = {
true,
false,
"deeppink",
},
[134701] = {
true,
false,
"snow",
},
[193462] = {
true,
false,
"snow",
},
[231176] = {
true,
false,
"yellow",
},
[162763] = {
true,
false,
"slateblue",
},
[186420] = {
true,
false,
"snow",
},
[167111] = {
true,
false,
"snow",
},
[136549] = {
true,
false,
"deeppink",
},
[237662] = {
true,
false,
"deeppink",
},
[151127] = {
true,
false,
"deeppink",
},
[167536] = {
true,
false,
"slateblue",
},
[189234] = {
true,
false,
"deeppink",
},
[129527] = {
true,
false,
"peachpuff",
},
[168007] = {
true,
false,
"peachpuff",
},
[82597] = {
true,
false,
"deeppink",
},
[101075] = {
true,
false,
"deeppink",
},
[176575] = {
true,
false,
"snow",
},
[205152] = {
true,
false,
"slateblue",
},
[131819] = {
true,
false,
"snow",
},
[189235] = {
true,
false,
"slateblue",
},
[80935] = {
true,
false,
"snow",
},
[168942] = {
true,
false,
"peachpuff",
},
[167113] = {
true,
false,
"peachpuff",
},
[131436] = {
true,
false,
"slateblue",
},
[59553] = {
true,
false,
"slateblue",
},
[137830] = {
true,
false,
"peachpuff",
},
[96664] = {
true,
false,
"peachpuff",
},
[212765] = {
true,
false,
"slateblue",
},
[95769] = {
true,
false,
"snow",
},
[114544] = {
true,
false,
"deeppink",
},
[185528] = {
true,
false,
"snow",
},
[185656] = {
true,
false,
"snow",
},
[164510] = {
true,
false,
"peachpuff",
},
[116549] = {
true,
false,
"snow",
},
[131821] = {
true,
false,
"peachpuff",
},
[130400] = {
true,
false,
"slateblue",
},
[80936] = {
true,
false,
"peachpuff",
},
[177808] = {
true,
false,
"slateblue",
},
[185529] = {
true,
false,
"deeppink",
},
[165197] = {
true,
false,
"deeppink",
},
[114334] = {
true,
false,
"slateblue",
},
[84400] = {
true,
false,
"slateblue",
},
[210269] = {
true,
false,
"slateblue",
},
[186191] = {
true,
false,
"peachpuff",
},
[129529] = {
true,
false,
"deeppink",
},
[223253] = {
true,
false,
"snow",
},
[167116] = {
true,
false,
"deeppink",
},
[241923] = {
true,
false,
"deeppink",
},
[189878] = {
true,
false,
"yellow",
},
[133432] = {
true,
false,
"snow",
},
[237192] = {
true,
false,
"deeppink",
},
[114632] = {
true,
false,
"snow",
},
[205735] = {
true,
false,
"peachpuff",
},
[198702] = {
true,
false,
"slateblue",
},
[190207] = {
true,
false,
"snow",
},
[208165] = {
true,
false,
"snow",
},
[168396] = {
true,
false,
"slateblue",
},
[86372] = {
true,
false,
"slateblue",
},
[133870] = {
true,
false,
"snow",
},
[179010] = {
true,
false,
"snow",
},
[95771] = {
true,
false,
"peachpuff",
},
[163862] = {
true,
false,
"peachpuff",
},
[151773] = {
true,
false,
"peachpuff",
},
[230740] = {
true,
false,
"deeppink",
},
[40166] = {
true,
false,
"slateblue",
},
[191847] = {
true,
false,
"snow",
},
[224962] = {
true,
false,
"snow",
},
[114633] = {
true,
false,
"slateblue",
},
[231312] = {
true,
false,
"snow",
},
[88163] = {
true,
false,
"deeppink",
},
[241798] = {
true,
false,
"snow",
},
[157017] = {
true,
false,
"peachpuff",
},
[163458] = {
true,
false,
"snow",
},
[170572] = {
true,
false,
"peachpuff",
},
[164562] = {
true,
false,
"peachpuff",
},
[213343] = {
true,
false,
"slateblue",
},
[220060] = {
true,
false,
"snow",
},
[213954] = {
true,
false,
"slateblue",
},
[192333] = {
true,
false,
"slateblue",
},
[162133] = {
true,
false,
"deeppink",
},
[231197] = {
true,
false,
"slateblue",
},
[205158] = {
true,
false,
"deeppink",
},
[164563] = {
true,
false,
"peachpuff",
},
[221979] = {
true,
false,
"deeppink",
},
[164463] = {
true,
false,
"snow",
},
[179269] = {
true,
false,
"deeppink",
},
[241800] = {
true,
false,
"deeppink",
},
[171341] = {
true,
false,
"snow",
},
[178630] = {
true,
false,
"snow",
},
[223770] = {
true,
false,
"peachpuff",
},
[235151] = {
true,
false,
"peachpuff",
},
[163459] = {
true,
false,
"peachpuff",
},
[226200] = {
true,
false,
"peachpuff",
},
[194487] = {
true,
false,
"peachpuff",
},
[165076] = {
true,
false,
"peachpuff",
},
[180091] = {
true,
false,
"deeppink",
},
[129788] = {
true,
false,
"snow",
},
[100531] = {
true,
false,
"slateblue",
},
[102295] = {
true,
false,
"deeppink",
},
[186229] = {
true,
false,
"slateblue",
},
[219983] = {
true,
false,
"slateblue",
},
[99891] = {
true,
false,
"slateblue",
},
[185537] = {
true,
false,
"peachpuff",
},
[171343] = {
true,
false,
"deeppink",
},
[196548] = {
true,
false,
"snow",
},
[223772] = {
true,
false,
"peachpuff",
},
[168658] = {
true,
false,
"deeppink",
},
[212775] = {
true,
false,
"snow",
},
[234557] = {
true,
false,
"deeppink",
},
[198709] = {
true,
false,
"slateblue",
},
[241803] = {
true,
false,
"snow",
},
[75506] = {
true,
false,
"snow",
},
[237967] = {
true,
false,
"yellow",
},
[223773] = {
true,
false,
"peachpuff",
},
[164567] = {
true,
false,
"snow",
},
[184132] = {
true,
false,
"peachpuff",
},
[83390] = {
true,
false,
"snow",
},
[205623] = {
true,
false,
"slateblue",
},
[194894] = {
true,
false,
"peachpuff",
},
[207796] = {
true,
false,
"deeppink",
},
[214439] = {
true,
false,
"snow",
},
[223774] = {
true,
false,
"peachpuff",
},
[214608] = {
true,
false,
"snow",
},
[196577] = {
true,
false,
"snow",
},
[134284] = {
true,
false,
"snow",
},
[184300] = {
true,
false,
"slateblue",
},
[114317] = {
true,
false,
"snow",
},
[129553] = {
true,
false,
"deeppink",
},
[90998] = {
true,
false,
"peachpuff",
},
[223775] = {
true,
false,
"peachpuff",
},
[242209] = {
true,
false,
"snow",
},
[190174] = {
true,
false,
"deeppink",
},
[199368] = {
true,
false,
"deeppink",
},
[220195] = {
true,
false,
"snow",
},
[183495] = {
true,
false,
"slateblue",
},
[228514] = {
true,
false,
"snow",
},
[214441] = {
true,
false,
"deeppink",
},
[223776] = {
true,
false,
"peachpuff",
},
[214697] = {
true,
false,
"deeppink",
},
[176974] = {
true,
false,
"deeppink",
},
[190401] = {
true,
false,
"snow",
},
[220196] = {
true,
false,
"deeppink",
},
[233623] = {
true,
false,
"deeppink",
},
[199124] = {
true,
false,
"snow",
},
[83894] = {
true,
false,
"slateblue",
},
[205363] = {
true,
false,
"snow",
},
[114319] = {
true,
false,
"peachpuff",
},
[205619] = {
true,
false,
"slateblue",
},
[219046] = {
true,
false,
"snow",
},
[220197] = {
true,
false,
"slateblue",
},
[183497] = {
true,
false,
"peachpuff",
},
[223150] = {
true,
false,
"snow",
},
[165471] = {
true,
false,
"peachpuff",
},
[40634] = {
true,
false,
"snow",
},
[150250] = {
true,
false,
"snow",
},
[205620] = {
true,
false,
"slateblue",
},
[190403] = {
true,
false,
"slateblue",
},
[151657] = {
true,
false,
"snow",
},
[44404] = {
true,
false,
"snow",
},
[115406] = {
true,
false,
"snow",
},
[184140] = {
true,
false,
"deeppink",
},
[195135] = {
true,
false,
"deeppink",
},
[150251] = {
true,
false,
"peachpuff",
},
[165483] = {
true,
false,
"deeppink",
},
},
["extra_icon_timer_font"] = "Expressway",
["auras_per_row_amount"] = 6,
["not_affecting_combat_alpha"] = 1,
["indicator_pet"] = false,
["cast_statusbar_color_finished"] = {
0.392156862745098,
0.996078431372549,
0.6392156862745098,
},
["extra_icon_stack_font"] = "Expressway",
["pet_width_scale"] = 0.9999999403953552,
["aura_height"] = 17,
["non_targeted_alpha_enabled"] = true,
["cast_statusbar_fadeout_time"] = 0.009999999776482582,
["cast_statusbar_bgtexture"] = "Atrocity",
["aura2_x_offset"] = 0,
["target_indicator"] = "Double Arrows",
["extra_icon_timer_size"] = 11,
["aura_grow_direction"] = 1,
["cast_statusbar_spark_filloninterrupt"] = false,
["resources"] = {
["scale"] = 0.800000011920929,
},
["extra_icon_stack_size"] = 11,
["aura_show_buff_by_the_unit"] = false,
["aura_show_enrage"] = true,
["target_shady_alpha"] = 0.2800000011920929,
["aura_stack_anchor"] = {
["y"] = 7,
["x"] = 2,
["side"] = 5,
},
["tap_denied_color"] = {
0.6000000238418579,
0.6000000238418579,
0.6000000238418579,
},
["bossmod_icons_anchor"] = {
["y"] = 0,
},
["aura_breakline_space"] = 2,
["show_healthbars_on_softinteract"] = false,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "0",
["nameplateOverlapV"] = "1.3999999761581",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "0",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateNotSelectedAlpha"] = "1",
["clampTargetNameplateToScreen"] = "1",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "60",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1",
["nameplateTargetBehindMaxDistance"] = "15",
["SoftTargetInteract"] = "1",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "1",
["nameplateShowPersonalCooldowns"] = "0",
["nameplateSelfTopInset"] = "0",
["nameplateMotionSpeed"] = "0.024999998509884",
["nameplateGlobalScale"] = "1",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowEnemyPets"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1",
["nameplatePersonalShowAlways"] = "1",
["nameplateShowFriends"] = "0",
["ShowClassColorInNameplate"] = "1",
["nameplateOverlapH"] = "0.79999995231628",
["nameplateMinScale"] = "1",
["nameplateLargeTopInset"] = "-1",
["nameplateOtherTopInset"] = "-1",
["nameplateSelfAlpha"] = "0",
["nameplateSelfBottomInset"] = "0.3",
["nameplateShowEnemyTotems"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["NamePlateHorizontalScale"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateShowDebuffsOnFriendly"] = "0",
["nameplateShowFriendlyBuffs"] = "0",
["SoftTargetIconGameObject"] = "0",
},
["target_highlight_alpha"] = 1,
["click_space_friendly"] = {
80,
1,
},
["login_counter"] = 29000,
["extra_icon_caster_name"] = false,
["aura_cooldown_show_swipe"] = false,
["profile_name"] = "AtrocityUI",
["ui_parent_target_strata"] = "BACKGROUND",
["aura_tracker"] = {
["debuff_banned"] = {
false,
[450212] = false,
[324260] = true,
[457928] = false,
[356995] = false,
[279303] = false,
[356329] = true,
[275335] = false,
[390271] = false,
[281242] = true,
[383414] = false,
[289467] = true,
[396719] = true,
[393957] = false,
[394021] = true,
[454029] = false,
[6360] = false,
[390181] = false,
[450538] = false,
[435203] = false,
[306965] = true,
[376974] = false,
[342240] = false,
[300013] = true,
[354052] = true,
[458478] = false,
[353354] = false,
[444826] = false,
[360277] = true,
[356372] = false,
[346562] = true,
[389806] = true,
[394061] = false,
[344754] = true,
[115994] = false,
[452229] = false,
[115804] = false,
[443404] = false,
[431625] = false,
[58180] = false,
[374557] = false,
[392490] = false,
[444834] = false,
[358379] = true,
[273977] = false,
[359078] = true,
[385042] = false,
[30213] = false,
[449217] = false,
[391568] = false,
[394036] = false,
[204301] = false,
[473602] = false,
[461981] = false,
[453599] = false,
[370898] = false,
[321330] = true,
[322098] = false,
[434424] = false,
[391403] = false,
[263165] = false,
[454025] = false,
[425154] = false,
[5760] = false,
[1243828] = false,
[331016] = false,
[391722] = false,
[294934] = true,
[387881] = true,
[381628] = false,
[458169] = false,
[317792] = false,
[273836] = true,
[331653] = true,
[352534] = true,
[265931] = false,
[211793] = false,
[392388] = false,
[256148] = true,
[450214] = false,
[279426] = true,
[283649] = true,
[274838] = false,
[3409] = false,
[267997] = false,
[270569] = false,
[196840] = false,
[441812] = false,
[373281] = false,
[457133] = false,
[444633] = false,
[410790] = false,
},
["buff_banned"] = {
[333579] = true,
[338857] = true,
[302564] = true,
[359078] = true,
[236502] = true,
[216777] = true,
[396109] = true,
[343553] = true,
[323961] = true,
[333575] = true,
[209746] = true,
[286145] = true,
[432778] = true,
[344240] = true,
[292664] = true,
[396106] = true,
[343613] = false,
[344426] = true,
[327416] = true,
[383648] = true,
[284882] = true,
[375583] = true,
[396113] = true,
[373305] = true,
[396098] = true,
[367803] = true,
},
["debuff_tracked"] = {
[453] = false,
[461904] = false,
[462704] = false,
[442204] = true,
[323059] = false,
[335372] = false,
},
["debuff"] = {
370898,
420474,
458010,
394063,
335174,
419097,
460569,
445474,
430049,
418561,
183357,
357121,
443503,
429619,
421979,
403662,
258179,
457160,
460927,
428515,
369128,
284402,
424509,
451740,
430219,
436195,
387174,
406919,
343723,
431581,
413902,
388867,
444736,
443934,
385305,
453268,
343215,
439659,
428402,
295311,
441176,
443788,
430817,
445740,
370452,
444249,
366653,
446701,
292626,
456145,
419798,
452116,
453206,
106830,
197277,
384631,
461981,
394324,
319504,
36194,
196937,
457129,
167105,
377445,
454824,
444826,
434765,
376974,
55095,
51714,
390276,
377540,
191587,
194310,
55078,
55095,
},
["buff_tracked"] = {
[336451] = false,
[330545] = false,
[213602] = false,
[336499] = false,
[462704] = false,
[338610] = false,
[333241] = false,
[344739] = false,
[343558] = false,
[461904] = false,
[389029] = false,
[343496] = true,
[327416] = false,
[324046] = false,
[317936] = false,
[321402] = false,
[343484] = true,
[227931] = true,
[322569] = false,
[297133] = true,
[343470] = false,
[333737] = false,
[338510] = false,
[340873] = false,
[376705] = false,
[152262] = false,
[303941] = true,
[355790] = false,
[326450] = false,
[233210] = true,
[343502] = false,
[312926] = true,
[163689] = true,
[166591] = true,
},
},
["extra_icon_caster_font"] = "Expressway",
["aura_show_important"] = false,
["extra_icon_auras_mine"] = {
[386208] = true,
},
["patch_version"] = 39,
["aura_stack_font"] = "Expressway",
["cast_statusbar_color_interrupted"] = {
0.7803921568627451,
0.2509803921568627,
0.2509803921568627,
},
["blizzard_nameplate_font"] = "Expressway",
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 8,
["target_shady_combat_only"] = false,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.ChangeColor = False\n    envTable.CastbarColor = \"mediumvioletred\"\n    envTable.GlowOptions = {\n        glowType = \"pixel\",\n        xOffset = 2,\n        yOffset = 2,\n        key = \"\",\n    }\n    --number of lines\n    envTable.GlowOptions.N = scriptTable.config.glowOptionsN\n    --frequency of lines\n    envTable.GlowOptions.frequency = scriptTable.config.glowOptionsFrequency\n    --length of lines\n    envTable.GlowOptions.length = scriptTable.config.glowOptionsLength\n    --line thickness\n    envTable.GlowOptions.th = scriptTable.config.glowOptionsTh\n    --pixel glow color\n    envTable.GlowOptions.color = scriptTable.config.glowOptionsColor\n    --add glow to castbar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --restore the cast bar to its original height\n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --stop glow effect\n    Plater.StopGlow(self, \"pixel\")\nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --change castbar color\n    if (envTable.ChangeColor) then\n        self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n    end\n    Plater.StartGlow(self, color, envTable.GlowOptions)\n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\nend",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1755275229,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.ChangeColor = False\n    envTable.CastbarColor = \"mediumvioletred\"\n    envTable.GlowOptions = {\n        glowType = \"pixel\",\n        xOffset = 2,\n        yOffset = 2,\n        key = \"\",\n    }\n    --number of lines\n    envTable.GlowOptions.N = scriptTable.config.glowOptionsN\n    --frequency of lines\n    envTable.GlowOptions.frequency = scriptTable.config.glowOptionsFrequency\n    --length of lines\n    envTable.GlowOptions.length = scriptTable.config.glowOptionsLength\n    --line thickness\n    envTable.GlowOptions.th = scriptTable.config.glowOptionsTh\n    --pixel glow color\n    envTable.GlowOptions.color = scriptTable.config.glowOptionsColor\n    --add glow to castbar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\nend",
["Icon"] = 132298,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --change castbar color\n    if (envTable.ChangeColor) then\n        self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n    end\n    Plater.StartGlow(self, color, envTable.GlowOptions)\n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\nend",
["Enabled"] = true,
["Revision"] = 461,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Description",
["Value"] = "Sets a glow for casts you should stops on",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Instructins",
["Value"] = "Add new spells by entering spell ID, then click \"Add\"",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increase the cast bar height value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Name"] = "Cast Bar Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Increase number Pixel glow lines",
["Min"] = 1,
["Key"] = "glowOptionsN",
["Value"] = 8,
["Name"] = "Pixel Glow Lines",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Increase pixel glow frequency",
["Min"] = -2,
["Key"] = "glowOptionsFrequency",
["Value"] = 0.5,
["Name"] = "Pixel Glow Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Increase pixel glow length",
["Min"] = 1,
["Key"] = "glowOptionsLength",
["Value"] = 6,
["Name"] = "Pixel Glow Length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Increase pixel glow thickness",
["Min"] = 0.05,
["Key"] = "glowOptionsTh",
["Value"] = 2,
["Name"] = "Pixel Glow Thickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Pixel Glow Color",
["Value"] = {
0.97254908084869,
1,
0,
1,
},
["Key"] = "glowOptionsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the color of the glow",
},
},
["Name"] = "Use Stops - Jundies",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend",
["Author"] = "Takeover-Kel'Thuzad",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "",
["SpellIds"] = {
427342,
461796,
294855,
267354,
1215412,
330532,
355640,
347721,
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --restore the cast bar to its original height\n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --stop glow effect\n    Plater.StopGlow(self, \"pixel\")\nend",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend",
["url"] = "",
},
{
["ConstructorCode"] = "function()\nend",
["OnHideCode"] = "function()\nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function()\nend\n\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)        \nend",
["Time"] = 1748534321,
["Options"] = {
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1.2,
["Name"] = "Casting Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "casting",
},
},
["Temp_ConstructorCode"] = "function()\nend",
["NpcNames"] = {
"214287",
"220368",
"213751",
},
["Desc"] = "conditionally scales the nameplate of Incorporeal Beings when not ccd",
["Enabled"] = true,
["Revision"] = 362,
["semver"] = "",
["version"] = -1,
["Temp_UpdateCode"] = "function (_, _, unitFrame, _, scriptTable)\n    Plater.SetNameplateScale(unitFrame, scriptTable.config.casting)\n    Plater.FlashNameplateBorder(unitFrame)\nend",
["Author"] = "Ququlcoatl-Blackmoore",
["Initialization"] = "function (scriptTable)        \nend",
["OnShowCode"] = "function()\nend\n\n\n\n",
["SpellIds"] = {
},
["Prio"] = 99,
["Name"] = "Must Die - Jundies",
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function()\nend",
["Icon"] = 132090,
["url"] = "",
["UpdateCode"] = "function (_, _, unitFrame, _, scriptTable)\n    Plater.SetNameplateScale(unitFrame, scriptTable.config.casting)\n    Plater.FlashNameplateBorder(unitFrame)\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    local color = \"gray\"\n    \n    function envTable.updateNameplateColor(unitFrame)\n        if not InCombatLockdown() then\n            return\n        end\n        \n        -- Hardened Carapace stacks on Shattereshell Scarab\n        if unitFrame.namePlateNpcId == 144244 then\n            local auraInfo = C_UnitAuras.GetAuraDataBySpellName(unitId, C_Spell.GetSpellName(282801))\n            \n            if auraInfo and auraInfo.applications and auraInfo.applications <= 3 then\n                Plater.SetNameplateColor(unitFrame) -- omitting a color should reset it\n                return\n            end\n        end\n        \n        Plater.SetNameplateColor(unitFrame, color)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable) end",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable) end",
["ScriptType"] = 1,
["Temp_Initialization"] = "function (self, unitId, unitFrame, envTable) end",
["Time"] = 1755275254,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    local color = \"gray\"\n    \n    function envTable.updateNameplateColor(unitFrame)\n        if not InCombatLockdown() then\n            return\n        end\n        \n        -- Hardened Carapace stacks on Shattereshell Scarab\n        if unitFrame.namePlateNpcId == 144244 then\n            local auraInfo = C_UnitAuras.GetAuraDataBySpellName(unitId, C_Spell.GetSpellName(282801))\n            \n            if auraInfo and auraInfo.applications and auraInfo.applications <= 3 then\n                Plater.SetNameplateColor(unitFrame) -- omitting a color should reset it\n                return\n            end\n        end\n        \n        Plater.SetNameplateColor(unitFrame, color)\n    end\nend",
["Icon"] = "524354",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable) end",
["Enabled"] = true,
["Revision"] = 741,
["Options"] = {
},
["Name"] = "Invalidate Unit - Jundies",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateNameplateColor(unitFrame)\nend",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (self, unitId, unitFrame, envTable) end",
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["SpellIds"] = {
261265,
261266,
271590,
350857,
352016,
235308,
235089,
367573,
362020,
232156,
374779,
113309,
117665,
379256,
396734,
406730,
403049,
410631,
410654,
403284,
421013,
425794,
260923,
264027,
75683,
336499,
335141,
256957,
440177,
438706,
451026,
325697,
442611,
458199,
457877,
469981,
282801,
467117,
465420,
1219283,
1222948,
471660,
1213817,
260189,
1231726,
1228284,
1228454,
1219457,
1242952,
351086,
347097,
1248701,
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable) end",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateNameplateColor(unitFrame)\nend",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1755275242,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["Enabled"] = true,
["Revision"] = 1489,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["Name"] = "Important Casts - Jundies",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["SpellIds"] = {
268030,
320822,
333292,
341840,
324987,
333478,
178072,
330438,
329423,
350287,
334928,
348428,
358980,
351073,
358026,
351603,
356023,
330513,
334076,
237946,
237952,
312262,
242733,
362628,
316443,
356031,
356011,
356001,
355642,
355644,
355782,
355057,
357260,
357284,
347015,
355139,
336451,
364240,
364241,
361923,
368063,
356407,
363024,
355584,
334664,
340300,
366288,
232120,
228554,
228009,
228025,
228019,
227977,
228278,
228280,
228567,
29339,
169341,
162415,
340037,
373513,
373618,
167232,
227646,
375606,
386549,
385568,
385393,
388211,
371983,
373405,
391599,
387627,
375653,
387862,
392457,
371624,
393309,
393296,
391268,
393429,
374623,
390548,
391019,
392486,
385331,
388804,
106856,
397394,
377612,
385574,
215204,
212773,
397382,
265540,
403978,
403671,
278755,
265511,
183528,
193803,
193585,
410870,
87779,
373897,
411302,
274400,
400296,
405433,
408805,
411300,
412378,
412233,
415304,
421029,
420525,
425816,
264390,
264407,
253583,
256849,
204243,
427459,
169839,
76820,
225562,
436841,
334748,
324293,
434802,
322938,
256957,
275826,
446700,
257169,
272571,
449455,
429109,
443430,
451871,
76711,
338353,
432967,
433841,
452162,
431309,
451097,
462508,
429428,
407120,
444743,
427609,
432959,
424420,
440687,
448248,
429545,
447950,
447411,
445021,
333623,
460092,
330868,
342675,
474337,
280604,
267433,
293827,
301088,
441627,
460582,
448791,
428169,
427601,
428066,
1220752,
341969,
263628,
1215741,
1219041,
448492,
268702,
441242,
1214780,
462771,
466765,
326450,
1230261,
1221532,
1229510,
1229474,
350922,
326409,
1235326,
357404,
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["Time"] = 1740082682,
["Options"] = {
},
["url"] = "",
["Icon"] = 644389,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend\n\n\n",
["Revision"] = 189,
["semver"] = "",
["Name"] = "Hide Nameplate - Jundies",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["Author"] = "Briarbreed-Area 52",
["Initialization"] = "function (scriptTable)\nend\n\n-- 167966: Experimental Sludge (De Other Side)\n-- 199220 - Stagbeetle (Valdrakken)\n-- 199916 - Bridge Slimes (Brackenhide Hollow)",
["Desc"] = "Hide nameplates based on the unit's NPC ID.",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Enabled"] = true,
["NpcNames"] = {
"167966",
"199220",
"199916",
"225601",
"39450",
"233956",
"233955",
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend",
["Temp_Initialization"] = "function (scriptTable)\nend\n\n-- 167966: Experimental Sludge (De Other Side)\n-- 199220 - Stagbeetle (Valdrakken)\n-- 199916 - Bridge Slimes (Brackenhide Hollow)",
},
{
["ConstructorCode"] = "function (_, _, _, envTable, scriptTable)\n    \n    \n    --TWW Dungeons\n    \n    local araKara = {\n    }\n    \n    local cityOfThreads = {\n        [219984] = { 50 }, --Xeph'itik\n    }\n    \n    local dawnbreaker = {\n        [211087] = { 50 }, --Speaker Shadowcrown\n        [213937] = { 60 }, --Rasha'nan\n    }\n    \n    local prioryOfTheSacredFlame = {\n        [207940] = { 50 }, --Prioress Murrpray\n        [206710] = { 25 }, -- Lightspawn\n    }\n    \n    local darkflameCleft = {\n        [208747] = { 55 }, -- The Darkness\n    }\n    \n    local cinderbrewMeadery = {\n        [210271] = { 66, 33 }, -- Brew Master Aldryr\n        [210265] = { 30 }, -- Worker Bee\n        [223497] = { 30 }, -- Worker Bee Summoned\n    }\n    \n    local theRookery = {\n        [212739] = { 40 }, --Radiating Voidstone\n    }\n    \n    \n    \n    --DF Dungeons\n    \n    local dawnOfTheInfinite = {\n        [207638] = { 80 }, -- Blight of Galakrond\n        [207639] = { 80 }, -- Blight of Galakrond\n        [198997] = { 80 }, -- Blight of Galakrond\n        [201792] = { 50 }, -- Ahnzon\n        [199000] = { 20 }, -- Deios\n        [198933] = { 90, 85 }, -- Iridikron\n    }\n    \n    local rubyLifePools = {\n        [190485] = { 50 }, -- Stormvein\n        [190484] = { 50 }, -- Kyrakka\n        [193435] = { 50 }, -- Kyrakka\n        [188252] = { 75, 45 }, -- Melidrussa Chillworn\n        [197697] = { 50 }, -- Flamegullet\n    }\n    \n    local azureVault = {\n        [186738] = { 75, 50, 25 }, -- Umbrelskul\n    }\n    \n    local brackenhideHollow = {\n        [186125] = { 15 }, -- Tricktotem\n        [186122] = { 15 }, -- Rira Hackclaw\n        [186124] = { 15 }, -- Gashtooth\n        [185534] = { 15 }, -- Bonebolt Hunter\n        [186206] = { 15 }, -- Cruel Bonecrusher\n        [185508] = { 15 }, -- Claw Fighter\n        [185528] = { 15 }, -- Trickclaw Mystic\n        [186121] = { 4 }, -- Decatriarch Wratheye\n        [186227] = { 20 }, -- Monstrous Decay\n    }\n    \n    local neltharus = {\n        [194816] = { 10 }, -- Forgewrought Monstrosity\n    }\n    \n    local hallsOfInfusion = {\n        [189719] = { 15 }, -- Watcher Irideus\n        [190407] = { 20 }, -- Aqua Rager\n        [189729] = { 60 }, -- Primal Tsunami\n    }\n    \n    local nokhudOffensive = {\n        [186151] = { 60 }, --Balakar Khan\n    }\n    \n    local uldaman = {\n        [184020] = { 40 }, -- Hulking Berserker\n        [184580] = { 10 }, -- Olaf\n        [184581] = { 10 }, -- Baelog\n        [184582] = { 10 }, -- Eric \"The Swift\"\n        [184125] = { 1 }, -- Chrono-Lord Deios\n    }\n    \n    --SL Dungeons\n    \n    local theaterOfPain = {\n        [164451] = { 40 }, -- Dessia the Decapitator\n        [164463] = { 40 }, -- Paceran the Virulent\n        [164461] = { 40 }, -- Sathel the Accursed\n        [165946] = { 50 }, -- Mordretha\n    }\n    \n    local mistsOfTirnaScithe = {\n        [164501] = { 70, 40, 10 }, -- Mistcaller\n        [164926] = { 50 }, --Drust Boughbreaker\n        [164804] = { 20 }, -- Droman Oulfarran\n        [164517] = { 70, 40 }, --Tred'ova\n        [164929] = { 20 }, --Tirnenn Villager\n    }\n    \n    local plaguefall = {\n        [164267] = { 66, 33 }, -- Magrave Stradama\n        [164967] = { 66, 33 }, -- Doctor ickus\n        [169861] = { 66, 33 }, -- Ickor Bileflesh\n    }\n    \n    local hallsOfAtonement = {\n        [164218] = { 70, 40 }, --Lord Chamberlain\n    }\n    \n    local sanguineDepths = {\n        [162099] = { 50 }, -- General Kaal Boss fight\n    }\n    \n    local spiresOfAscension = {\n        [162061] = { 70, 30 }, --Devos\n    }\n    \n    local necroticWake = {\n        [163121] = { 70 }, -- Stitched Vanguard\n    }\n    \n    local deOtherSide = {\n        [164558] = { 80, 60, 40, 20 }, -- Hakkar the Soulflayer\n    }\n    \n    local tazaveshGambit = {\n        [177269] = { 40 }, -- So'leah\n    }\n    \n    local tazaveshStreets = {\n        [175806] = { 66, 33 }, -- So'azmi\n    }\n    \n    --BFA Dungeons\n    \n    local freehold = {\n        [126983] = { 60, 30 }, -- Harlan Sweete - Freehold\n        [126832] = { 75 }, -- Skycap'n Kragg - Freehold\n        [129699] = { 90, 70, 50, 30 }, -- Ludwig von Tortollan - Freehold\n    }\n    \n    local waycrest = {\n        [131527] = { 30 }, -- Lord Waycrest\n    }\n    \n    local siegeOfBoralus = {\n        [129208] = { 66, 33 }, -- Dread Captain Lockwood\n    }\n    \n    local motherlode = {\n        [133345] = { 20 }, -- Feckless Assistant\n        [129232] = { 50 }, -- Mogul Razdunk\n    }\n    \n    local junkyard = {\n        [150276] = { 50 }, -- Heavy Scrapbot\n        [152009] = { 30 }, -- Malfunctioning Scrapbots\n        [144298] = { 30 }, -- Defense Bot Mk III (Workshop)\n    }\n    \n    local workshop = {\n        [144298] = { 30 }, -- Defense Bot Mk III (casts a shield)\n    }\n    \n    --Legion Dungeons\n    \n    local karazhanUpper = {\n        [114790] = { 66, 33 }, -- Viz'aduum\n    }\n    \n    local karazhanLower = {\n        [114261] = { 50 }, -- Toe Knee\n        [114260] = { 50 }, -- Mrrgria\n        [114265] = { 50 }, -- Gang Ruffian\n        [114783] = { 50 }, -- Reformed Maiden\n        [114312] = { 60 }, -- Moroes\n    }\n    \n    local hallsOfValor = {\n        [96574] = { 30 }, -- Stormforged Sentinel\n        [95674] = { 60.5 }, -- Fenryr P1\n        [94960] = { 10.5 }, -- Hymdall\n        [95676] = { 80, 5 }, -- Odyn\n    }\n    \n    local courtOfStars = {\n        [104215] = { 25 }, -- Patrol Captain Gerdo\n    }\n    \n    local neltharionsLair = {\n        [91005] = { 20 }, -- Naraxas\n    }\n    \n    local blackRookHold = {\n        [98542] = { 50 }, -- Amalgam of Souls\n        [98965] = { 20 }, -- Kur'talos Ravencrest\n    }\n    \n    local darkheartThicket = {\n        [99192] = { 50 }, -- Shade of Xavius\n    }\n    \n    --WoD Dungeons\n    \n    local grimrailDepot = {\n        [81236] = { 50 }, -- Grimrail Technician\n        [79545] = { 60 }, -- Nitrogg Thundertower\n        [77803] = { 20 }, -- Railmaster Rocketspark\n    }\n    \n    local ironDocks = {\n        [81297] = { 50 }, -- Dreadfang -> Fleshrender Nok'gar\n    }\n    \n    local shadowmoonBurialGrounds = {\n        [76057] = { 20.5 }, -- Carrion Worm\n    }\n    \n    --MoP Dungeons\n    \n    local templeOfTheJadeSerpent = {\n        [59544] = { 50 }, --The Nodding Tiger\n        [56732] = { 70, 30 }, -- Liu Flameheart\n    }\n    \n    --Cata Dungeons\n    \n    local throneOfTheTides = {\n        [40586] = { 60, 30 }, -- Lady Naz'jar\n        [40825] = { 25 }, -- Erunak Stonespeaker\n    }\n    \n    local grimBatol = {\n        [224249] = { 50 }, --Twilight Lavabender\n        [40320] = { 50 }, --Valiona\n    }\n    \n    \n    --Raids \n    \n    local liberationOfUndermine = {\n        [231531] = { 80 }, -- Territorial Bombshell\n        [229953] = { 40 }, -- Mug'Zee\n        [230316] = { 80 }, -- MK II Electro Shocker\n        [228458] = { 30 }, -- One-armed Bandit\n        [231075] = { 50 }, -- Gallywix\n    }\n    \n    local amirdrassil = {\n        [208445] = { 35 }, -- Larodar\n        [204931] = { 70 }, -- Fyrakk\n    }\n    \n    local aberrus = {\n        [201261] = { 80, 60, 40 }, -- Kazzara\n        [201773] = { 50 }, -- Moltannia (Eternal Blaze)\n        [201774] = { 50 }, -- Krozgoth (Essence of Shadow)\n        [201668] = { 60, 35 }, -- Neltharion\n        [200912] = { 50 }, -- Neldris, Experiment\n        [200913] = { 50 }, -- Thadrion, Experiment\n        [199659] = { 25 }, -- Warlord Kagni, Assault of the Zaqali\n        [201754] = { 65, 40 }, -- Sarkareth\n        [203230] = { 50 }, -- Dragonfire Golem, Zskarn\n    }\n    \n    local vault = {\n        [181378] = { 66, 33 }, -- Kurog Grimtotem\n        [194990] = { 50 }, -- Stormseeker Acolyte\n        [189492] = { 65 }, -- Raszageth\n    }\n    \n    local sepulcher = {\n        [181548] = { 40 }, -- Absolution: Prototype Pantheon\n        [181551] = { 40 }, -- Duty: Prototype Pantheon\n        [181546] = { 40 }, -- Renewal: Prototype Pantheon\n        [181549] = { 40 }, -- War: Prototype Pantheon\n        [183501] = { 75, 50 }, --Xymox\n        [180906] = { 78, 45 }, --Halondrus\n        [183671] = { 40 }, -- Monstrous Soul - Anduin\n        [185421] = { 15 }, -- The Jailer\n    }\n    \n    local sanctumOfDomination = {\n        [175730] = { 70, 40 }, -- Fatescribe Roh-Kalo\n        [176523] = { 70, 40 }, -- Painsmith\n        [175725] = { 66, 33 }, -- Eye of the Jailer\n        [176929] = { 60, 20 }, -- Remnant of Kel'Thuzad\n        [175732] = { 83, 50 }, -- Sylvanas Windrunner\n    }\n    \n    local nathria = {\n        [166969] = { 50 }, -- Council of Blood - Frieda\n        [166970] = { 50 }, -- Council of Blood - Stavros\n        [166971] = { 50 }, -- Council of Blood - Niklaus\n        [167406] = { 70.5, 37.5 }, -- Sire Denathrius\n        [173162] = { 66, 33 }, -- Lord Evershade\n    }\n    \n    local openWorld = {\n        [180013] = { 20 }, -- Escaped Wilderling, Shadowlands - Korthia\n        [179931] = { 80, 60 }, -- Relic Breaker krelva, Shadowlands - Korthia\n        [193532] = { 40 }, -- Bazual, The Dreaded Flame, Dragonflight\n    }\n    \n    local mageTower = {\n        [116410] = { 33 }, -- Karam Magespear\n    }\n    \n    envTable.lifePercent = {}\n    \n    local zones = {\n        liberationOfUndermine,\n        cinderbrewMeadery,\n        araKara,\n        darkflameCleft,\n        prioryOfTheSacredFlame,\n        cityOfThreads,\n        dawnbreaker,\n        rubyLifePools,\n        azureVault,\n        brackenhideHollow,\n        neltharus,\n        hallsOfInfusion,\n        nokhudOffensive,\n        uldaman,\n        theaterOfPain,\n        mistsOfTirnaScithe,\n        plaguefall,\n        hallsOfAtonement,\n        sanguineDepths,\n        spiresOfAscension,\n        necroticWake,\n        deOtherSide,\n        tazaveshGambit,\n        tazaveshStreets,\n        freehold,\n        waycrest,\n        siegeOfBoralus,\n        motherlode,\n        junkyard,\n        workshop,\n        karazhanUpper,\n        karazhanLower,\n        hallsOfValor,\n        courtOfStars,\n        neltharionsLair,\n        blackRookHold,\n        darkheartThicket,\n        grimrailDepot,\n        ironDocks,\n        shadowmoonBurialGrounds,\n        templeOfTheJadeSerpent,\n        throneOfTheTides,\n        grimBatol,\n        amirdrassil,\n        aberrus,\n        vault,\n        sepulcher,\n        sanctumOfDomination,\n        nathria,\n        openWorld,\n        mageTower,\n        dawnOfTheInfinite,\n    }\n    \n    for i = 1, #zones do\n        local zone = zones[i]\n        \n        for id, thresholds in pairs(zone) do\n            envTable.lifePercent[id] = thresholds\n        end\n    end\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        \n        if not markersTable then\n            return\n        end\n        \n        local unitLifePercent = envTable._HealthPercent / 100\n        \n        for _, percent in ipairs(markersTable) do\n            percent = percent / 100\n            if unitLifePercent > percent then\n                if not unitFrame.healthMarker then\n                    envTable.CreateMarker(unitFrame)\n                end\n                \n                unitFrame.healthMarker:Show()\n                local width = unitFrame.healthBar:GetWidth()\n                unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width * percent, 0)\n                \n                local overlaySize = width * (unitLifePercent - percent)\n                unitFrame.healthOverlay:SetWidth(overlaySize)\n                unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                \n                unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                \n                unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                \n                return\n            end\n        end\n        \n        if unitFrame.healthMarker and unitFrame.healthMarker:IsShown() then\n            unitFrame.healthMarker:Hide()\n            unitFrame.healthOverlay:Hide()\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1744814678,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Temp_ConstructorCode"] = "function (_, _, _, envTable, scriptTable)\n    \n    \n    --TWW Dungeons\n    \n    local araKara = {\n    }\n    \n    local cityOfThreads = {\n        [219984] = { 50 }, --Xeph'itik\n    }\n    \n    local dawnbreaker = {\n        [211087] = { 50 }, --Speaker Shadowcrown\n        [213937] = { 60 }, --Rasha'nan\n    }\n    \n    local prioryOfTheSacredFlame = {\n        [207940] = { 50 }, --Prioress Murrpray\n        [206710] = { 25 }, -- Lightspawn\n    }\n    \n    local darkflameCleft = {\n        [208747] = { 55 }, -- The Darkness\n    }\n    \n    local cinderbrewMeadery = {\n        [210271] = { 66, 33 }, -- Brew Master Aldryr\n        [210265] = { 30 }, -- Worker Bee\n        [223497] = { 30 }, -- Worker Bee Summoned\n    }\n    \n    local theRookery = {\n        [212739] = { 40 }, --Radiating Voidstone\n    }\n    \n    \n    \n    --DF Dungeons\n    \n    local dawnOfTheInfinite = {\n        [207638] = { 80 }, -- Blight of Galakrond\n        [207639] = { 80 }, -- Blight of Galakrond\n        [198997] = { 80 }, -- Blight of Galakrond\n        [201792] = { 50 }, -- Ahnzon\n        [199000] = { 20 }, -- Deios\n        [198933] = { 90, 85 }, -- Iridikron\n    }\n    \n    local rubyLifePools = {\n        [190485] = { 50 }, -- Stormvein\n        [190484] = { 50 }, -- Kyrakka\n        [193435] = { 50 }, -- Kyrakka\n        [188252] = { 75, 45 }, -- Melidrussa Chillworn\n        [197697] = { 50 }, -- Flamegullet\n    }\n    \n    local azureVault = {\n        [186738] = { 75, 50, 25 }, -- Umbrelskul\n    }\n    \n    local brackenhideHollow = {\n        [186125] = { 15 }, -- Tricktotem\n        [186122] = { 15 }, -- Rira Hackclaw\n        [186124] = { 15 }, -- Gashtooth\n        [185534] = { 15 }, -- Bonebolt Hunter\n        [186206] = { 15 }, -- Cruel Bonecrusher\n        [185508] = { 15 }, -- Claw Fighter\n        [185528] = { 15 }, -- Trickclaw Mystic\n        [186121] = { 4 }, -- Decatriarch Wratheye\n        [186227] = { 20 }, -- Monstrous Decay\n    }\n    \n    local neltharus = {\n        [194816] = { 10 }, -- Forgewrought Monstrosity\n    }\n    \n    local hallsOfInfusion = {\n        [189719] = { 15 }, -- Watcher Irideus\n        [190407] = { 20 }, -- Aqua Rager\n        [189729] = { 60 }, -- Primal Tsunami\n    }\n    \n    local nokhudOffensive = {\n        [186151] = { 60 }, --Balakar Khan\n    }\n    \n    local uldaman = {\n        [184020] = { 40 }, -- Hulking Berserker\n        [184580] = { 10 }, -- Olaf\n        [184581] = { 10 }, -- Baelog\n        [184582] = { 10 }, -- Eric \"The Swift\"\n        [184125] = { 1 }, -- Chrono-Lord Deios\n    }\n    \n    --SL Dungeons\n    \n    local theaterOfPain = {\n        [164451] = { 40 }, -- Dessia the Decapitator\n        [164463] = { 40 }, -- Paceran the Virulent\n        [164461] = { 40 }, -- Sathel the Accursed\n        [165946] = { 50 }, -- Mordretha\n    }\n    \n    local mistsOfTirnaScithe = {\n        [164501] = { 70, 40, 10 }, -- Mistcaller\n        [164926] = { 50 }, --Drust Boughbreaker\n        [164804] = { 20 }, -- Droman Oulfarran\n        [164517] = { 70, 40 }, --Tred'ova\n        [164929] = { 20 }, --Tirnenn Villager\n    }\n    \n    local plaguefall = {\n        [164267] = { 66, 33 }, -- Magrave Stradama\n        [164967] = { 66, 33 }, -- Doctor ickus\n        [169861] = { 66, 33 }, -- Ickor Bileflesh\n    }\n    \n    local hallsOfAtonement = {\n        [164218] = { 70, 40 }, --Lord Chamberlain\n    }\n    \n    local sanguineDepths = {\n        [162099] = { 50 }, -- General Kaal Boss fight\n    }\n    \n    local spiresOfAscension = {\n        [162061] = { 70, 30 }, --Devos\n    }\n    \n    local necroticWake = {\n        [163121] = { 70 }, -- Stitched Vanguard\n    }\n    \n    local deOtherSide = {\n        [164558] = { 80, 60, 40, 20 }, -- Hakkar the Soulflayer\n    }\n    \n    local tazaveshGambit = {\n        [177269] = { 40 }, -- So'leah\n    }\n    \n    local tazaveshStreets = {\n        [175806] = { 66, 33 }, -- So'azmi\n    }\n    \n    --BFA Dungeons\n    \n    local freehold = {\n        [126983] = { 60, 30 }, -- Harlan Sweete - Freehold\n        [126832] = { 75 }, -- Skycap'n Kragg - Freehold\n        [129699] = { 90, 70, 50, 30 }, -- Ludwig von Tortollan - Freehold\n    }\n    \n    local waycrest = {\n        [131527] = { 30 }, -- Lord Waycrest\n    }\n    \n    local siegeOfBoralus = {\n        [129208] = { 66, 33 }, -- Dread Captain Lockwood\n    }\n    \n    local motherlode = {\n        [133345] = { 20 }, -- Feckless Assistant\n        [129232] = { 50 }, -- Mogul Razdunk\n    }\n    \n    local junkyard = {\n        [150276] = { 50 }, -- Heavy Scrapbot\n        [152009] = { 30 }, -- Malfunctioning Scrapbots\n        [144298] = { 30 }, -- Defense Bot Mk III (Workshop)\n    }\n    \n    local workshop = {\n        [144298] = { 30 }, -- Defense Bot Mk III (casts a shield)\n    }\n    \n    --Legion Dungeons\n    \n    local karazhanUpper = {\n        [114790] = { 66, 33 }, -- Viz'aduum\n    }\n    \n    local karazhanLower = {\n        [114261] = { 50 }, -- Toe Knee\n        [114260] = { 50 }, -- Mrrgria\n        [114265] = { 50 }, -- Gang Ruffian\n        [114783] = { 50 }, -- Reformed Maiden\n        [114312] = { 60 }, -- Moroes\n    }\n    \n    local hallsOfValor = {\n        [96574] = { 30 }, -- Stormforged Sentinel\n        [95674] = { 60.5 }, -- Fenryr P1\n        [94960] = { 10.5 }, -- Hymdall\n        [95676] = { 80, 5 }, -- Odyn\n    }\n    \n    local courtOfStars = {\n        [104215] = { 25 }, -- Patrol Captain Gerdo\n    }\n    \n    local neltharionsLair = {\n        [91005] = { 20 }, -- Naraxas\n    }\n    \n    local blackRookHold = {\n        [98542] = { 50 }, -- Amalgam of Souls\n        [98965] = { 20 }, -- Kur'talos Ravencrest\n    }\n    \n    local darkheartThicket = {\n        [99192] = { 50 }, -- Shade of Xavius\n    }\n    \n    --WoD Dungeons\n    \n    local grimrailDepot = {\n        [81236] = { 50 }, -- Grimrail Technician\n        [79545] = { 60 }, -- Nitrogg Thundertower\n        [77803] = { 20 }, -- Railmaster Rocketspark\n    }\n    \n    local ironDocks = {\n        [81297] = { 50 }, -- Dreadfang -> Fleshrender Nok'gar\n    }\n    \n    local shadowmoonBurialGrounds = {\n        [76057] = { 20.5 }, -- Carrion Worm\n    }\n    \n    --MoP Dungeons\n    \n    local templeOfTheJadeSerpent = {\n        [59544] = { 50 }, --The Nodding Tiger\n        [56732] = { 70, 30 }, -- Liu Flameheart\n    }\n    \n    --Cata Dungeons\n    \n    local throneOfTheTides = {\n        [40586] = { 60, 30 }, -- Lady Naz'jar\n        [40825] = { 25 }, -- Erunak Stonespeaker\n    }\n    \n    local grimBatol = {\n        [224249] = { 50 }, --Twilight Lavabender\n        [40320] = { 50 }, --Valiona\n    }\n    \n    \n    --Raids \n    \n    local liberationOfUndermine = {\n        [231531] = { 80 }, -- Territorial Bombshell\n        [229953] = { 40 }, -- Mug'Zee\n        [230316] = { 80 }, -- MK II Electro Shocker\n        [228458] = { 30 }, -- One-armed Bandit\n        [231075] = { 50 }, -- Gallywix\n    }\n    \n    local amirdrassil = {\n        [208445] = { 35 }, -- Larodar\n        [204931] = { 70 }, -- Fyrakk\n    }\n    \n    local aberrus = {\n        [201261] = { 80, 60, 40 }, -- Kazzara\n        [201773] = { 50 }, -- Moltannia (Eternal Blaze)\n        [201774] = { 50 }, -- Krozgoth (Essence of Shadow)\n        [201668] = { 60, 35 }, -- Neltharion\n        [200912] = { 50 }, -- Neldris, Experiment\n        [200913] = { 50 }, -- Thadrion, Experiment\n        [199659] = { 25 }, -- Warlord Kagni, Assault of the Zaqali\n        [201754] = { 65, 40 }, -- Sarkareth\n        [203230] = { 50 }, -- Dragonfire Golem, Zskarn\n    }\n    \n    local vault = {\n        [181378] = { 66, 33 }, -- Kurog Grimtotem\n        [194990] = { 50 }, -- Stormseeker Acolyte\n        [189492] = { 65 }, -- Raszageth\n    }\n    \n    local sepulcher = {\n        [181548] = { 40 }, -- Absolution: Prototype Pantheon\n        [181551] = { 40 }, -- Duty: Prototype Pantheon\n        [181546] = { 40 }, -- Renewal: Prototype Pantheon\n        [181549] = { 40 }, -- War: Prototype Pantheon\n        [183501] = { 75, 50 }, --Xymox\n        [180906] = { 78, 45 }, --Halondrus\n        [183671] = { 40 }, -- Monstrous Soul - Anduin\n        [185421] = { 15 }, -- The Jailer\n    }\n    \n    local sanctumOfDomination = {\n        [175730] = { 70, 40 }, -- Fatescribe Roh-Kalo\n        [176523] = { 70, 40 }, -- Painsmith\n        [175725] = { 66, 33 }, -- Eye of the Jailer\n        [176929] = { 60, 20 }, -- Remnant of Kel'Thuzad\n        [175732] = { 83, 50 }, -- Sylvanas Windrunner\n    }\n    \n    local nathria = {\n        [166969] = { 50 }, -- Council of Blood - Frieda\n        [166970] = { 50 }, -- Council of Blood - Stavros\n        [166971] = { 50 }, -- Council of Blood - Niklaus\n        [167406] = { 70.5, 37.5 }, -- Sire Denathrius\n        [173162] = { 66, 33 }, -- Lord Evershade\n    }\n    \n    local openWorld = {\n        [180013] = { 20 }, -- Escaped Wilderling, Shadowlands - Korthia\n        [179931] = { 80, 60 }, -- Relic Breaker krelva, Shadowlands - Korthia\n        [193532] = { 40 }, -- Bazual, The Dreaded Flame, Dragonflight\n    }\n    \n    local mageTower = {\n        [116410] = { 33 }, -- Karam Magespear\n    }\n    \n    envTable.lifePercent = {}\n    \n    local zones = {\n        liberationOfUndermine,\n        cinderbrewMeadery,\n        araKara,\n        darkflameCleft,\n        prioryOfTheSacredFlame,\n        cityOfThreads,\n        dawnbreaker,\n        rubyLifePools,\n        azureVault,\n        brackenhideHollow,\n        neltharus,\n        hallsOfInfusion,\n        nokhudOffensive,\n        uldaman,\n        theaterOfPain,\n        mistsOfTirnaScithe,\n        plaguefall,\n        hallsOfAtonement,\n        sanguineDepths,\n        spiresOfAscension,\n        necroticWake,\n        deOtherSide,\n        tazaveshGambit,\n        tazaveshStreets,\n        freehold,\n        waycrest,\n        siegeOfBoralus,\n        motherlode,\n        junkyard,\n        workshop,\n        karazhanUpper,\n        karazhanLower,\n        hallsOfValor,\n        courtOfStars,\n        neltharionsLair,\n        blackRookHold,\n        darkheartThicket,\n        grimrailDepot,\n        ironDocks,\n        shadowmoonBurialGrounds,\n        templeOfTheJadeSerpent,\n        throneOfTheTides,\n        grimBatol,\n        amirdrassil,\n        aberrus,\n        vault,\n        sepulcher,\n        sanctumOfDomination,\n        nathria,\n        openWorld,\n        mageTower,\n        dawnOfTheInfinite,\n    }\n    \n    for i = 1, #zones do\n        local zone = zones[i]\n        \n        for id, thresholds in pairs(zone) do\n            envTable.lifePercent[id] = thresholds\n        end\n    end\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        \n        if not markersTable then\n            return\n        end\n        \n        local unitLifePercent = envTable._HealthPercent / 100\n        \n        for _, percent in ipairs(markersTable) do\n            percent = percent / 100\n            if unitLifePercent > percent then\n                if not unitFrame.healthMarker then\n                    envTable.CreateMarker(unitFrame)\n                end\n                \n                unitFrame.healthMarker:Show()\n                local width = unitFrame.healthBar:GetWidth()\n                unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width * percent, 0)\n                \n                local overlaySize = width * (unitLifePercent - percent)\n                unitFrame.healthOverlay:SetWidth(overlaySize)\n                unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                \n                unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                \n                unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                \n                return\n            end\n        end\n        \n        if unitFrame.healthMarker and unitFrame.healthMarker:IsShown() then\n            unitFrame.healthMarker:Hide()\n            unitFrame.healthOverlay:Hide()\n        end\n    end\nend",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["Enabled"] = true,
["Revision"] = 920,
["semver"] = "",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Author"] = "Duracell",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Name"] = "Health Markers - Jundies",
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vertical Line Alpha",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["url"] = "",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["NpcNames"] = {
"81236",
"77803",
"150276",
"152009",
"175806",
"114790",
"81297",
"79545",
"177269",
"133345",
"164926",
"114265",
"114261",
"114783",
"180013",
"179931",
"193532",
"116410",
"190485",
"193435",
"188252",
"186738",
"186125",
"186122",
"186124",
"184422",
"96574",
"114312",
"164804",
"164267",
"164967",
"169861",
"162061",
"144298",
"181548",
"181551",
"181546",
"181549",
"183501",
"180906",
"185421",
"163121",
"175730",
"176523",
"175725",
"176929",
"166969",
"166970",
"166971",
"167406",
"173162",
"175732",
"183671",
"114260",
"184581",
"184582",
"184580",
"185534",
"190407",
"194816",
"186151",
"59544",
"186121",
"197697",
"194990",
"76057",
"56732",
"95676",
"94960",
"104215",
"95674",
"189492",
"190484",
"97087",
"184020",
"201261",
"91005",
"113537",
"126983",
"185508",
"186206",
"185528",
"189719",
"129732",
"199659",
"201773",
"201774",
"164218",
"164501",
"162099",
"164451",
"164463",
"164461",
"165946",
"201754",
"203230",
"199000",
"201792",
"198997",
"207639",
"20763",
"129699",
"198933",
"98542",
"98965",
"99192",
"40586",
"40825",
"208445",
"207638",
"131527",
"201668",
"200912",
"200913",
"126832",
"204931",
"189729",
"164929",
"224249",
"219984",
"211087",
"129208",
"164517",
"40320",
"207940",
"213937",
"231531",
"208747",
"229953",
"230316",
"206710",
"129232",
"210271",
"210265",
"223497",
"228458",
"231075",
"212739",
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"top\", unitFrame.HealthBar, -22, 15);   \n    envTable.FixateTarget.outline = scriptTable.config.outline\n    envTable.FixateTarget:Hide()\nend\n\n--MISC\n--174773 - Spiteful Shade\n\n--The War Within\n\n--220626 - Parasite\n\n--Ara Kara\n--218961 - Starved Crawler\n\n\n--Dragonflight\n\n--Brackenhide\n--194745 - Rotfang Hyena\n\n--Halls of Infusion\n--190366, 195399 - Curious Swoglet\n\n\n--Shadowlands\n\n--Halls of Atonement\n--165913 - Ghastly Parishioner\n--167898 - Manifestation of Envy\n\n--Necrotic Wake\n--164702 - Carrion Worm\n--167731 - Surgeons before 3rd boss\n\n\n--BFA\n\n--Freehold\n--129529 - Blacktooth Scrapper\n\n--Underrot\n--133835 - Feral Bloodswarmer\n\n--Siege of Boredom\n--128649 - 1st boss\n\n\n--LEGION\n\n--Nelth's Lair\n--101476 - Molten Charskin - Dargrul Encounter\n\n--Blackrook hold\n--102781 - Fel Bat Pup\n\n\n--OLD SHIT\n\n--Throne of the tides\n--212681 - Vicious Snap Dragon\n\n--Temple of the Jade Serpent\n--56792 - Figment of Doubt\n\n\n\n--87329 - test dummy \n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    envTable.FixateTarget:Hide()\n    \n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.colorchanged = false\nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (_, unitId, unitFrame, envTable, scriptTable)\n    --check if can change the nameplate color\n    local targetName = UnitName(unitId .. \"target\")\n    \n    if not targetName then\n        return\n    end\n    \n    local role = UnitGroupRolesAssigned(unitId .. \"target\")\n    \n    -- ignore temporary fixates if the unit is targeting the tank (again)\n    if role == \"TANK\" then\n        Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n        envTable.FixateTarget:Hide()\n        \n        return\n    end\n    \n    if UnitIsUnit(targetName, \"player\") then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n        \n        if not envTable.colorchanged then\n            Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n            unitFrame.healthBar.MainTargetDotAnimation =\n            Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4)\n            \n            envTable.colorchanged = true\n        end\n    end\n    \n    targetName = Plater.SetTextColorByClass(unitId .. \"target\", targetName)\n    envTable.FixateTarget.text = targetName\n    envTable.FixateTarget:Show()\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1742334896,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.8666667342186,
0.43529415130615,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Outline Test",
},
},
["url"] = "",
["Icon"] = "4630415",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.colorchanged = false\nend\n\n\n\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    envTable.FixateTarget:Hide()\n    \n    \nend\n\n\n\n\n",
["Revision"] = 1193,
["semver"] = "",
["Name"] = "Fixate - Jundies",
["Temp_UpdateCode"] = "function (_, unitId, unitFrame, envTable, scriptTable)\n    --check if can change the nameplate color\n    local targetName = UnitName(unitId .. \"target\")\n    \n    if not targetName then\n        return\n    end\n    \n    local role = UnitGroupRolesAssigned(unitId .. \"target\")\n    \n    -- ignore temporary fixates if the unit is targeting the tank (again)\n    if role == \"TANK\" then\n        Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n        envTable.FixateTarget:Hide()\n        \n        return\n    end\n    \n    if UnitIsUnit(targetName, \"player\") then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n        \n        if not envTable.colorchanged then\n            Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n            unitFrame.healthBar.MainTargetDotAnimation =\n            Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4)\n            \n            envTable.colorchanged = true\n        end\n    end\n    \n    targetName = Plater.SetTextColorByClass(unitId .. \"target\", targetName)\n    envTable.FixateTarget.text = targetName\n    envTable.FixateTarget:Show()\nend\n\n\n\n\n\n\n\n\n",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Changes nameplate color to Orange and adds glow to npcs that are fixated on you",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Enabled"] = true,
["NpcNames"] = {
"174773",
"164702",
"165913",
"167898",
"56792",
"194745",
"129529",
"133835",
"101476",
"190366",
"195399",
"212681",
"102781",
"Shattershell Scarab",
"220626",
"218961",
"165251",
"162689",
"167731",
"128649",
"144160",
"40357",
"231014",
"129802",
"235631",
"133482",
"231028",
"231027",
"228502",
"231788",
"235187",
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"top\", unitFrame.HealthBar, -22, 15);   \n    envTable.FixateTarget.outline = scriptTable.config.outline\n    envTable.FixateTarget:Hide()\nend\n\n--MISC\n--174773 - Spiteful Shade\n\n--The War Within\n\n--220626 - Parasite\n\n--Ara Kara\n--218961 - Starved Crawler\n\n\n--Dragonflight\n\n--Brackenhide\n--194745 - Rotfang Hyena\n\n--Halls of Infusion\n--190366, 195399 - Curious Swoglet\n\n\n--Shadowlands\n\n--Halls of Atonement\n--165913 - Ghastly Parishioner\n--167898 - Manifestation of Envy\n\n--Necrotic Wake\n--164702 - Carrion Worm\n--167731 - Surgeons before 3rd boss\n\n\n--BFA\n\n--Freehold\n--129529 - Blacktooth Scrapper\n\n--Underrot\n--133835 - Feral Bloodswarmer\n\n--Siege of Boredom\n--128649 - 1st boss\n\n\n--LEGION\n\n--Nelth's Lair\n--101476 - Molten Charskin - Dargrul Encounter\n\n--Blackrook hold\n--102781 - Fel Bat Pup\n\n\n--OLD SHIT\n\n--Throne of the tides\n--212681 - Vicious Snap Dragon\n\n--Temple of the Jade Serpent\n--56792 - Figment of Doubt\n\n\n\n--87329 - test dummy \n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 14, \"orange\");\n    envTable.EnergyAmount:SetPoint (\"top\", unitFrame, \"left\", -8, 20);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1755275236,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 14, \"orange\");\n    envTable.EnergyAmount:SetPoint (\"top\", unitFrame, \"left\", -8, 20);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend",
["Icon"] = 136048,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Enabled"] = true,
["Revision"] = 653,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "script desc",
["Value"] = "Show the power of the unit above the nameplate.",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show at 80% of Energy",
["Value"] = true,
["Key"] = "showLater",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Key"] = "fontSize",
["Value"] = 16,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Font Color",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Key"] = "fontColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Name"] = "Enable Text Outline",
["Value"] = true,
["Key"] = "outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["Name"] = "Show Energy - Jundies",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["SpellIds"] = {
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["NpcNames"] = {
"171557",
"162060",
"168318",
"184140",
"182169",
"196482",
"186120",
"186116",
"189901",
"197025",
"190496",
"189813",
"190245",
"184972",
"184986",
"186737",
"186616",
"186615",
"131383",
"133007",
"202375",
"201320",
"201579",
"189340",
"131817",
"209333",
"122967",
"206172",
"200927",
"208367",
"208363",
"218523",
"208743",
"209230",
"144248",
"230583",
"229181",
"229177",
"237661",
"237662",
"237660",
"233814",
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.options = {\n        color = \"white\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 5, -- number of lines. Defaul value is 8;\n        frequency = 0.3, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 3, -- length of lines. Default value depends on region size and number of lines;\n        th = 2, -- thickness of lines. Default value is 2;\n        xOffset = 0,\n        yOffset = 0, -- offset of glow relative to region border;\n        border = true, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n    self.glowStarted = false\n    \n    envTable.pandemicTime[self.spellId..unitId] = nil\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.pandemicTime = envTable.pandemicTime or {}\n    envTable.pandemicTime[self.spellId..unitId] = envTable._RemainingTime * 0.3\nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1755898362,
["semver"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.options = {\n        color = \"white\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 5, -- number of lines. Defaul value is 8;\n        frequency = 0.3, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 3, -- length of lines. Default value depends on region size and number of lines;\n        th = 2, -- thickness of lines. Default value is 2;\n        xOffset = 0,\n        yOffset = 0, -- offset of glow relative to region border;\n        border = true, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\n    \nend\n\n\n",
["NpcNames"] = {
},
["Desc"] = "Adds a configurable pixel border glow to the buff/debuff if the remaining duration is less than 30% of its total duration.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n    self.glowStarted = false\n    \n    envTable.pandemicTime[self.spellId..unitId] = nil\n    \nend\n\n\n",
["Revision"] = 394,
["Options"] = {
},
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --if (timeLeft < (envTable.pandemicTime[self.spellId..unitId] or (envTable._Duration*0.3))) then\n    if (timeLeft < (envTable._Duration*0.3)) then\n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self.Cooldown, nil, envTable.options, envTable.options.key)\n        end\n    else\n        if self.glowStarted then\n            self.glowStarted = false\n            Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Author"] = "Viash-Thrall",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.pandemicTime = envTable.pandemicTime or {}\n    envTable.pandemicTime[self.spellId..unitId] = envTable._RemainingTime * 0.3\nend\n\n\n",
["SpellIds"] = {
292711,
278946,
212463,
284402,
284401,
2818,
703,
1943,
295425,
283668,
316220,
258179,
207690,
315341,
1822,
1079,
106830,
202347,
204213,
391191,
980,
172,
445468,
445465,
316099,
383346,
342938,
772,
191587,
},
["Prio"] = 99,
["Name"] = "Pandemic Glow - Jundies",
["PlaterCore"] = 1,
["Enabled"] = true,
["Icon"] = 413591,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --if (timeLeft < (envTable.pandemicTime[self.spellId..unitId] or (envTable._Duration*0.3))) then\n    if (timeLeft < (envTable._Duration*0.3)) then\n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self.Cooldown, nil, envTable.options, envTable.options.key)\n        end\n    else\n        if self.glowStarted then\n            self.glowStarted = false\n            Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["url"] = "",
},
},
["number_region_first_run"] = true,
["color_override_colors"] = {
[3] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
[4] = {
0.8509804606437683,
0.8156863451004028,
0.5882353186607361,
},
[5] = {
0.5058823529411764,
0.7803921568627451,
0.5137254901960784,
},
},
["health_statusbar_bgcolor"] = {
0.0313725508749485,
0.0313725508749485,
0.0313725508749485,
0.800000011920929,
},
["indicator_quest"] = false,
["show_health_prediction"] = false,
["target_highlight_height"] = 11,
["hide_friendly_castbars"] = true,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["bossmod_cooldown_text_enabled"] = false,
["target_highlight"] = false,
["castbar_target_font"] = "Expressway",
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.5960784554481506,
},
["solo"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["noaggro"] = {
0.6352941393852234,
0.2196078598499298,
0.2196078598499298,
},
["pulling"] = {
nil,
0.7725490927696228,
0.4274510145187378,
},
},
["use_aggro_solo"] = true,
},
["cast_statusbar_texture"] = "Atrocity",
["indicator_faction"] = false,
["extra_icon_height"] = 26,
["first_run3"] = true,
["indicator_raidmark_scale"] = 0.699999988079071,
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0.06999999284744263,
},
["auto_toggle_stacking"] = {
["party"] = false,
["raid"] = false,
["arena"] = false,
["world"] = false,
},
["cast_statusbar_bgcolor"] = {
0.03137254901960784,
0.03137254901960784,
0.03137254901960784,
0.4670491218566895,
},
["cast_statusbar_spark_width"] = 8,
["auto_toggle_enemy"] = {
["party"] = false,
["raid"] = false,
["arena"] = false,
["world"] = false,
},
},
["Default"] = {
["use_ui_parent"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["script_auto_imported"] = {
["Unit - Show Energy"] = 11,
["Cast - Important Target [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Explosion Affix M+"] = 14,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Very Important"] = 15,
["Cast - Alert + Timer [P]"] = 4,
["Cast - Shield Interrupt"] = 2,
["Aura - Debuff Alert"] = 12,
["Cast - Ultra Important"] = 14,
["Add - Warning [P]"] = 5,
["Cast - Castbar is Timer [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Add - Explode on Die [P]"] = 1,
["Cast - Small Alert"] = 12,
["Auto Set Skull"] = 11,
["Add - Tag Number [P]"] = 2,
["Spiteful Affix"] = 3,
["Cast - Stop Casting"] = 4,
["Add - Non Elite Trash [P]"] = 4,
["Aura - Blink Time Left"] = 13,
["Cast - On Going Cast [P]"] = 2,
["Countdown"] = 12,
["Fixate by Unit Buff [P]"] = 2,
["Add - Important [P]"] = 4,
["Fixate"] = 11,
["Cast - Glowing [P]"] = 10,
["Cast - Quick Flash"] = 2,
["Cast - Circular Swipe"] = 4,
["Fixate On You"] = 12,
},
["expansion_triggerwipe"] = {
[9] = true,
},
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 632,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["NpcNames"] = {
},
["SpellIds"] = {
398151,
377738,
378149,
282801,
},
["PlaterCore"] = 1,
["Name"] = "Aura - Buff Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = false,
["Revision"] = 37,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["NpcNames"] = {
},
["SpellIds"] = {
191284,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Effect After Cast [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1670201853,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = true,
["Revision"] = 533,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["NpcNames"] = {
},
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
389446,
},
["PlaterCore"] = 1,
["Name"] = "Explosion Affix M+ [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 368,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Desc"] = "Add the debuff name in the trigger box.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura - Debuff Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203758,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1213,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["NpcNames"] = {
},
["SpellIds"] = {
350421,
355787,
348513,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Alert + Timer [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670790652,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = true,
["Revision"] = 694,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["NpcNames"] = {
},
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
358320,
374045,
386757,
367500,
370225,
376200,
372107,
388923,
376934,
384899,
373960,
374724,
385551,
259732,
373424,
373084,
87618,
255041,
428926,
76634,
200050,
197546,
198079,
199193,
266181,
253544,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Ultra Important [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Health Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1669325410,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 662,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
376851,
396044,
381517,
373932,
397801,
208165,
392576,
198750,
387843,
387411,
211299,
198595,
198934,
198962,
156722,
350554,
348513,
351779,
328180,
319898,
281420,
274383,
259092,
367521,
374544,
385039,
382474,
369823,
377500,
260879,
186269,
378818,
371875,
372225,
200658,
266036,
265407,
164965,
429176,
428526,
418200,
407124,
200630,
415437,
264050,
267824,
271579,
301088,
423479,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Small Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
"189669",
"192464",
190381,
92538,
192464,
131009,
127315,
133361,
136330,
214117,
212483,
101008,
194745,
190426,
152033,
170234,
220368,
231176,
213751,
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Important [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Name"] = "Nameplate Size Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "nameplateSizeOffset",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullAlpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Name"] = "Scale",
["Value"] = 0.6,
["Key"] = "skullScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1626382829,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Enabled"] = true,
["Revision"] = 375,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura - Blink by Time Left [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 3,
["Key"] = "timeleftToBlink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Timeleft to Blink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "blinkSpeed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Key"] = "blinkMaxAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.2862745098039216,
0.00392156862745098,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Warning",
["Value"] = 8,
["Key"] = "timeLeftWarning",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Critical",
["Value"] = 3,
["Key"] = "timeLeftCritical",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.8705882352941177,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.07450980392156863,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Tag Number [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["NpcNames"] = {
},
["SpellIds"] = {
376644,
386781,
384823,
385536,
392398,
375596,
387135,
360850,
212784,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
384353,
265376,
193941,
411002,
169445,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Glowing [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1669339628,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 878,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["NpcNames"] = {
},
["SpellIds"] = {
270042,
260813,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Important Target [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 14,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetNameSize",
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Name"] = "Frame Width",
["Value"] = 90,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetFrameWidth",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetFrameHeight",
["Value"] = 20,
["Name"] = "Frame Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = true,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
350687,
372735,
373017,
350687,
392488,
257732,
256060,
257899,
384633,
374339,
395694,
391634,
372701,
369328,
265487,
413044,
183526,
88194,
87762,
413385,
411001,
378282,
384161,
259572,
255371,
427460,
429172,
426500,
413607,
412922,
417481,
201399,
411994,
415770,
260907,
260703,
260741,
265876,
263959,
266225,
253517,
377488,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Very Important [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1670427654,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color of  add",
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
129758,
186696,
101075,
100818,
98081,
52019,
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Warning [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["NpcNames"] = {
},
["SpellIds"] = {
372743,
372749,
384933,
},
["PlaterCore"] = 1,
["Name"] = "Aura While Casting [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203603,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1194,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
396640,
372743,
377389,
396812,
388392,
387955,
386546,
377503,
384808,
386024,
387615,
387606,
225100,
211401,
211470,
215433,
192563,
198959,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
377950,
372223,
350421,
352158,
349985,
329239,
328400,
384194,
392451,
392924,
397889,
209413,
207980,
257397,
257736,
382787,
374699,
377402,
369602,
369465,
369400,
381593,
265091,
265433,
382791,
376780,
225573,
278444,
164887,
168082,
76813,
227913,
265368,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Big Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1670428019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["NpcNames"] = {
},
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
386559,
382555,
258672,
258777,
257756,
257784,
256405,
256589,
393793,
388046,
375079,
390290,
369811,
369703,
226287,
410999,
372561,
256882,
172578,
412063,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Circle AoE [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.15,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "rotationDuration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animStartDuration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Start Alpha",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureScale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureAlpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1611844883,
["url"] = "",
["Icon"] = 135945,
["Enabled"] = true,
["Revision"] = 186,
["semver"] = "",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Time to die Spiteful affix",
["NpcNames"] = {
"174773",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "M+ Spiteful",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Time to Die",
["Name"] = "Time to Die",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Key"] = "bgWidth",
["Value"] = 27,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Width",
},
{
["Type"] = 1,
["Key"] = "bgColor",
["Value"] = {
0.5058823529411764,
0.07058823529411765,
1,
1,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Key"] = "textSize",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option11",
["Value"] = "Targeting",
["Name"] = "Targeting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Target instead of Name",
["Value"] = true,
["Key"] = "switchTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Color if targeting You",
["Value"] = true,
["Key"] = "useTargetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Color if targeting You",
["Value"] = {
0.07058823529411765,
0.6196078431372549,
0,
1,
},
["Key"] = "targetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "Option 11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669324381,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 887,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start",
["NpcNames"] = {
},
["SpellIds"] = {
392640,
397888,
209033,
385029,
374563,
377341,
369675,
369365,
369411,
278961,
202108,
88186,
255824,
252781,
250096,
200248,
197797,
264520,
418202,
201839,
412012,
411958,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Quick Flash [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1670427838,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 111,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Non Elite Trash [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Scale",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669325411,
["url"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["NpcNames"] = {
},
["SpellIds"] = {
373688,
391050,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Shield Interrupt [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = true,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["NpcNames"] = {
},
["SpellIds"] = {
388886,
209676,
377912,
},
["PlaterCore"] = 1,
["Name"] = "Cast - On Going Cast [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Dots Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Key"] = "speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Key"] = "minAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end --compatibility\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        --[225976] = {secondCastBar = true, altCastId = \"Uber Strike\",  debuffTimer = 167385, name = GetSpellInfo(167385), spellIcon = 167385}, --tank dummy        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        config.text = npcInfo.name\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend",
["Time"] = 1729585139,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Enabled"] = true,
["Revision"] = 234,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["NpcNames"] = {
"164427",
"164414",
"164185",
"164567",
"165408",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Countdown",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 33,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["NpcNames"] = {
},
["SpellIds"] = {
426662,
426663,
},
["PlaterCore"] = 1,
["Name"] = "Fixate by Unit Buff [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1604696441,
["url"] = "",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Enabled"] = false,
["Revision"] = 63,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Auto set skull marker",
["NpcNames"] = {
"163520",
"163618",
"164506",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Auto Set Skull",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
189299,
131402,
135052,
130653,
231497,
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Explode on Die [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1604357453,
["url"] = "",
["Icon"] = 136048,
["Enabled"] = true,
["Revision"] = 233,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["NpcNames"] = {
"164406",
"164407",
"162100",
"162099",
"162329",
"164558",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Unit - Show Energy [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 16,
["Key"] = "fontSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.803921568627451,
0.803921568627451,
0.803921568627451,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["NpcNames"] = {
},
["SpellIds"] = {
377004,
381516,
196543,
199726,
200291,
268202,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Stop Casting [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1604239880,
["url"] = "",
["Icon"] = 1029718,
["Enabled"] = true,
["Revision"] = 269,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Desc"] = "Show above the nameplate who is the player fixated",
["NpcNames"] = {
"165560",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Fixate [Plater]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --compat\n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        --[167385] = \"Uber Strike\", --tank dummy\n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    local auras = Plater.GetUnitAuras(unitFrame)\n    for id, aura in pairs(auras) do\n        local name, caster = aura.name, aura.sourceUnit\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n            break\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1729585422,
["url"] = "",
["Icon"] = 841383,
["Enabled"] = true,
["Revision"] = 279,
["semver"] = "",
["Author"] = "Tecno-Azralon",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["NpcNames"] = {
"Illusionary Vulpin",
129802,
133482,
235631,
231014,
},
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["PlaterCore"] = 1,
["Name"] = "Fixate On You [Plater]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
},
},
["aura2_x_offset"] = 0,
["hook_data"] = {
{
["Enabled"] = false,
["Revision"] = 50,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Kastfall-Azralon",
["Time"] = 1547392935,
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Name"] = "Color Automation [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Time"] = 1541606242,
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["Name"] = "Hide Neutral Units [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 1990989,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
["Author"] = "Kastfall-Azralon",
["Options"] = {
},
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Time"] = 1596791840,
["Name"] = "Reorder Nameplate [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = 574574,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 59,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Time"] = 1554138845,
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --set this to true if you are not using threat colors in the health bar\n    envTable.ForceRefreshNameplateColor = true\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --do nothing if the unit is the player it self\n    if (unitFrame.IsSelf) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    else\n        if (envTable.ForceRefreshNameplateColor) then\n            Plater.RefreshNameplateColor (unitFrame) \n        end\n    end    \n    \nend",
},
["Name"] = "Don't Have Aura [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 136207,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 176,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Tecno-Azralon",
["Time"] = 1547409079,
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled) then\n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["Name"] = "Extra Border [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 133689,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 93,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Time"] = 1552354619,
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["Name"] = "Current Target Color [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 878211,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 348,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
["Author"] = "Ditador-Azralon",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Icon Settings",
["Value"] = "Icon Settings:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Icon",
["Value"] = true,
["Key"] = "showIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Name"] = "Icon on Left Side",
["Value"] = true,
["Key"] = "iconOnLeftSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Icon Size Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "iconSizeOffset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Name"] = "Icon Padding",
["Value"] = 0,
["Key"] = "iconPadding",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Interrupt Texture",
["Value"] = "Can't Interrupt Texture:",
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Texture",
["Value"] = true,
["Key"] = "showTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Name"] = "Texture Path",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Key"] = "iconTexturePath",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Name"] = "Texture Desaturated",
["Value"] = true,
["Key"] = "desaturatedTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
0.3056715726852417,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 10,
["Name"] = "Texture Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureWidth",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Name"] = "Texture Height Mod",
["Value"] = 0,
["Key"] = "textureHeightMod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Texture Position",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "texturePosition",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
},
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Time"] = 1597097268,
["Name"] = "Cast Bar Icon Settings [P]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 84,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Ahwa-Azralon",
["Time"] = 1547406548,
["Desc"] = "Add extra effects to execute range. See the constructor script for options.",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Name"] = "Execute Range [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 135358,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 363,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
["Author"] = "Kastfall-Azralon",
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.5019607843137255,
0.5019607843137255,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Time"] = 1620377377,
["Name"] = "Attacking Specific Unit [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 284,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
["Author"] = "Izimode-Azralon",
["Options"] = {
},
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Time"] = 1621935143,
["Name"] = "Combo Points [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = 135426,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 182,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Time"] = 1548278227,
["Desc"] = "Show how many raid members are targeting the unit",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["Name"] = "Players Targeting a Target [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 1966587,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 424,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
["Author"] = "Ditador-Azralon",
["Options"] = {
},
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    local sortByTime = true\n    local invertSort = true\n    local npcSeparatedFromPlayer = true\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n        [\"Garrote\"] = 95,\n        [\"Rupture\"] = 90,\n        [\"Sigil of Flame\"] = 50,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or aura1.layoutIndex or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or aura2.layoutIndex or 1\n        \n        if npcSeparatedFromPlayer then\n            if aura1.IsFromPlayer and not aura2.IsFromPlayer then\n                return false\n            elseif not aura1.IsFromPlayer and aura2.IsFromPlayer then\n                return true\n            end\n        end\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1741092085,
["Name"] = "Aura Reorder [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["HooksTemp"] = {
},
},
},
["aura_x_offset"] = 0,
["saved_cvars_last_change"] = {
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateShowPersonalCooldowns"] = "Interface/AddOns/Plater/Plater.lua:1611",
["nameplateShowFriendlyBuffs"] = "Interface/AddOns/Plater/Plater.lua:1611",
},
["ui_parent_scale_tune"] = 1,
["number_region_first_run"] = true,
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Extra Border"] = 2,
["Cast Bar Icon Config"] = 2,
["Execute Range"] = 1,
["Hide Neutral Units"] = 1,
["Attacking Specific Unit"] = 2,
["Target Color"] = 3,
["Aura Reorder"] = 3,
["Combo Points"] = 6,
},
["saved_cvars"] = {
["nameplateMinAlpha"] = "0.90135484",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateSelectedAlpha"] = "1",
["nameplateShowPersonalCooldowns"] = "0",
["nameplateShowFriendlyBuffs"] = "0",
},
["aura_tracker"] = {
["buff_tracked"] = {
[209859] = true,
},
},
["aura2_y_offset"] = 5,
["login_counter"] = 3,
["script_data_trash"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1625793282,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1154,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["NpcNames"] = {
},
["Name"] = "Cast - Alert + Timer [P]",
["SpellIds"] = {
350421,
355787,
348513,
},
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Cast start animation settings",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Value"] = {
{
"350421",
"5",
},
{
"355787",
"15",
},
{
"348513",
"14",
},
{
"348513",
"14",
},
},
["Key"] = "timerList",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["__TrashAt"] = 1758721131,
},
},
["ghost_auras"] = {
["auras"] = {
["WARRIOR"] = {
[5] = {
},
},
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["first_run3"] = true,
["plate_config"] = {
["global_health_height"] = 12,
["global_health_width"] = 112,
},
["patch_version"] = 39,
["aura_y_offset"] = 5,
},
["FragUI_2"] = {
["target_shady_combat_only"] = false,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["Time"] = 1743409167,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["url"] = "https://wago.io/Dq5DaC3b4/8",
["Icon"] = 135964,
["Temp_Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Revision"] = 117,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["NpcNames"] = {
},
["Enabled"] = true,
["Author"] = "Duracell",
["Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["SpellIds"] = {
383840,
379256,
388084,
369031,
336499,
347097,
328921,
329636,
350857,
365381,
367573,
361934,
362020,
352016,
260189,
261265,
261266,
271590,
202455,
197422,
232156,
229489,
235308,
235089,
376705,
},
["Prio"] = 99,
["Name"] = "Invalid Target",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["version"] = 8,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["semver"] = "1.0.7",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
["indicatorAlpha"] = 0.75,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1743281252,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 162,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["NpcNames"] = {
"214840",
},
["Enabled"] = true,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["SpellIds"] = {
},
["Prio"] = 99,
["Name"] = "Add - Health Markers [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1743281703,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["Icon"] = 610472,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Revision"] = 94,
["Options"] = {
},
["NpcNames"] = {
},
["Enabled"] = true,
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["SpellIds"] = {
343470,
423228,
},
["Prio"] = 99,
["Name"] = "Aura is Shield [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1743409175,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["Revision"] = 1286,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.1,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 2,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 10,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["Enabled"] = true,
["Desc"] = "Abilities casted on the tank.",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Name"] = "Cast - Tankbuster [P]",
["PlaterCore"] = 1,
["Prio"] = 99,
["version"] = -1,
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    envTable.ShowTargeted = scriptTable.config.ShowTargeted\n    envTable.ShowRaidMarked = scriptTable.config.ShowRaidMarked\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend",
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 3\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 3\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["Time"] = 1756369282,
["Icon"] = 644389,
["url"] = "",
["NpcNames"] = {
"245705",
"250417",
},
["semver"] = "",
["Enabled"] = true,
["Revision"] = 772,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Show if Targeted",
["Value"] = true,
["Key"] = "ShowTargeted",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Determines if the nameplate should be shown if you have the unit targeted",
},
{
["Type"] = 4,
["Name"] = "Show if Raid Marked",
["Value"] = true,
["Key"] = "ShowRaidMarked",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Determines if the nameplate should be shown if it has a raid mark applied",
},
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Unhalted",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 3\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["Name"] = "Hide Nameplate by UnitID",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 3\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Desc"] = "Hide's nameplates based on the unit's name or npcID. Add the Unit Name or npcID as a trigger.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    envTable.ShowTargeted = scriptTable.config.ShowTargeted\n    envTable.ShowRaidMarked = scriptTable.config.ShowRaidMarked\n    \nend",
},
},
["saved_cvars_last_change"] = {
["nameplateShowOnlyNames"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelectedAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateLargeTopInset"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowPersonalCooldowns"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMotionSpeed"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyNPCs"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelectedScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOverlapH"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyBuffs"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinAlphaDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMotion"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateLargerScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMaxDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOtherTopInset"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplatePlayerMaxDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOccludedAlphaMult"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOverlapV"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemies"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowSelf"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriends"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
},
["aura_cache_by_name"] = {
},
["blizzard_nameplate_font_override_enabled"] = true,
["cast_statusbar_fadein_time"] = 0.019999999552965,
["health_cutoff_upper"] = false,
["cast_statusbar_spark_alpha"] = 0,
["aura2_y_offset"] = 3,
["extra_icon_caster_size"] = 12,
["buffs_on_aura2"] = true,
["indicator_quest"] = false,
["expansion_triggerwipe"] = {
[10] = true,
[9] = true,
},
["cast_statusbar_color_nointerrupt"] = {
1,
0.25098040699959,
0.25098040699959,
1,
},
["bossmod_support_bars_enabled"] = false,
["color_override_colors"] = {
[3] = {
1,
0.25098040699959,
0.25098040699959,
},
[4] = {
1,
1,
0.25098040699959,
},
[5] = {
0.25098040699959,
1,
0.25098040699959,
},
},
["npc_cache"] = {
[158146] = {
"Fallen Riftwalker",
"Horrific Vision of Stormwind",
"enUS",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
},
[242209] = {
"Overgorged Mite",
"Eco-Dome Al'dani",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
"enUS",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[158279] = {
"Haywire Clockwork Rocket Bot",
"Horrific Vision of Stormwind",
"enUS",
},
[152722] = {
"Fallen Voidspeaker",
"Horrific Vision of Stormwind",
"enUS",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
},
[206698] = {
"Fanatical Conjuror",
"Priory of the Sacred Flame",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[87317] = {
"Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
},
[234933] = {
"Taah'bat",
"Eco-Dome Al'dani",
},
[158411] = {
"Unstable Servant",
"Horrific Vision of Stormwind",
"enUS",
},
[87318] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[158092] = {
"Fallen Heartpiercer",
"Horrific Vision of Stormwind",
"enUS",
},
[137716] = {
"Bottom Feeder",
"The MOTHERLODE!!",
"enUS",
},
[158284] = {
"Craggle Wobbletop",
"Horrific Vision of Stormwind",
"enUS",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[234935] = {
"Soul-Scribe",
"Eco-Dome Al'dani",
},
[158158] = {
"Forge-Guard Hurrul",
"Horrific Vision of Stormwind",
"enUS",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[158286] = {
"Reprogrammed Warbot",
"Horrific Vision of Stormwind",
"enUS",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
},
[158478] = {
"Corruption Tumor",
"Horrific Vision of Stormwind",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
},
[87320] = {
"Raider's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[176556] = {
"Alcruux",
"Tazavesh, the Veiled Market",
},
[130436] = {
"Off-Duty Laborer",
"The MOTHERLODE!!",
"enUS",
},
[152987] = {
"Faceless Willbreaker",
"Horrific Vision of Stormwind",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
},
[175663] = {
"Hylbrande",
"Tazavesh, the Veiled Market",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
},
[152988] = {
"Faceless Shadowcaller",
"Horrific Vision of Stormwind",
"enUS",
},
[152669] = {
"Void Globule",
"Horrific Vision of Stormwind",
"enUS",
},
[156949] = {
"Armsmaster Terenson",
"Horrific Vision of Stormwind",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
},
[151649] = {
"Defense Bot Mk I",
"Operation: Mechagon",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
"enUS",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
},
[234883] = {
"Voracious Gorger",
"Eco-Dome Al'dani",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
},
[213741] = {
"Voidstone Awakened",
"The Rookery",
"enUS",
},
[177269] = {
"So'leah",
"Tazavesh, the Veiled Market",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
},
[219046] = {
"Voracious Worm",
"Nerub-ar Palace",
},
[236995] = {
"Ravenous Destroyer",
"Eco-Dome Al'dani",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[156641] = {
"Enthralled Weaponsmith",
"Horrific Vision of Stormwind",
"enUS",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
},
[237252] = {
"Underpin's Friend's Agent",
"Excavation Site 9",
"enUS",
},
[156642] = {
"Enthralled Laborer",
"Horrific Vision of Stormwind",
"enUS",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[179893] = {
"Cartel Skulker",
"Tazavesh, the Veiled Market",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
},
[153130] = {
"Greater Void Elemental",
"Horrific Vision of Stormwind",
"enUS",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[175806] = {
"So'azmi",
"Tazavesh, the Veiled Market",
},
[152939] = {
"Boundless Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[234955] = {
"Wastelander Pactspeaker",
"Eco-Dome Al'dani",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[226396] = {
"Swampface",
"Operation: Floodgate",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[175616] = {
"Zo'phex",
"Tazavesh, the Veiled Market",
},
[156837] = {
"Valeera Sanguinar",
"Horrific Vision of Stormwind",
"enUS",
},
[233679] = {
"Therum Deepforge",
"Horrific Vision of Stormwind",
"enUS",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[234893] = {
"Azhiccar",
"Eco-Dome Al'dani",
},
[234957] = {
"Wastelander Ritualist",
"Eco-Dome Al'dani",
},
[158371] = {
"Zardeth of the Black Claw",
"Horrific Vision of Stormwind",
"enUS",
},
[226398] = {
"Big M.O.M.M.A.",
"Operation: Floodgate",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[157158] = {
"Cultist Slavedriver",
"Horrific Vision of Stormwind",
"enUS",
},
[159266] = {
"Portal Master",
"Horrific Vision of Stormwind",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
},
[233681] = {
"Magister Umbric",
"Horrific Vision of Stormwind",
"enUS",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
},
[237514] = {
"A'wazj",
"Eco-Dome Al'dani",
},
[158373] = {
"Roberto Pupellyverbos",
"Horrific Vision of Stormwind",
"enUS",
},
[158437] = {
"Fallen Taskmaster",
"Horrific Vision of Stormwind",
"enUS",
},
[138061] = {
"Venture Co. Longshoreman",
"The MOTHERLODE!!",
"enUS",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[213179] = {
"Avanoxx",
"Ara-Kara, City of Echoes",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[226402] = {
"Bront",
"Operation: Floodgate",
},
[164188] = {
"Horrific Figment",
"Horrific Vision of Stormwind",
"enUS",
},
[236942] = {
"The Underpin",
"Excavation Site 9",
"enUS",
},
[234962] = {
"Wastelander Farstalker",
"Eco-Dome Al'dani",
},
[226403] = {
"Keeza Quickfuse",
"Operation: Floodgate",
},
[233685] = {
"Slavemaster Ul'rok",
"Horrific Vision of Stormwind",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[226404] = {
"Geezle Gigazap",
"Operation: Floodgate",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[234900] = {
"Underpin's Adoring Fan",
"Excavation Site 9",
"enUS",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
},
[234901] = {
"Underpin's Well-Connected Friend",
"Excavation Site 9",
"enUS",
},
[158315] = {
"Eye of Chaos",
"Horrific Vision of Stormwind",
"enUS",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[239437] = {
"Hogger",
"Horrific Vision of Stormwind",
"enUS",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[242631] = {
"Overcharged Sentinel",
"Eco-Dome Al'dani",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
},
[156145] = {
"Burrowing Appendage",
"Horrific Vision of Stormwind",
"enUS",
},
[159275] = {
"Portal Keeper",
"Horrific Vision of Stormwind",
"enUS",
},
[176394] = {
"P.O.S.T. Worker",
"Tazavesh, the Veiled Market",
},
[212739] = {
"Consuming Voidstone",
"The Rookery",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
},
[237651] = {
"Lit Fuse",
"Excavation Site 9",
"enUS",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
},
[234204] = {
"Congealed Clot",
"Excavation Site 9",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
},
[234205] = {
"Corruption Parasite",
"Excavation Site 9",
"enUS",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[234206] = {
"Nightmare Crawler",
"Excavation Site 9",
"enUS",
},
[157812] = {
"Billibub Cogspinner",
"Horrific Vision of Stormwind",
"enUS",
},
[234207] = {
"Tainted Feaster",
"Excavation Site 9",
"enUS",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[157813] = {
"Sprite Jumpsprocket",
"Horrific Vision of Stormwind",
"enUS",
},
[231014] = {
"Loaderbot",
"Operation: Floodgate",
},
[234208] = {
"Hideous Amalgamation",
"Excavation Site 9",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
},
[152704] = {
"Crawling Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[234209] = {
"Coagulated Mass",
"Excavation Site 9",
"enUS",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
},
[244302] = {
"Binding Javelin",
"Eco-Dome Al'dani",
},
[234210] = {
"Silent Slitherer",
"Excavation Site 9",
"enUS",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
},
[158774] = {
"Broken Citizen",
"Horrific Vision of Stormwind",
"enUS",
},
[156794] = {
"SI:7 Light-Hunter",
"Horrific Vision of Stormwind",
"enUS",
},
[158690] = {
"Cultist Tormenter",
"Horrific Vision of Stormwind",
"enUS",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[220626] = {
"Blood Parasite",
"Nerub-ar Palace",
},
[158136] = {
"Inquisitor Darkspeak",
"Horrific Vision of Stormwind",
"enUS",
},
[165408] = {
"Halkias",
"Halls of Atonement",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
},
[176563] = {
"Zo'gron",
"Tazavesh, the Veiled Market",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
},
[158056] = {
"Rat",
"Horrific Vision of Stormwind",
"enUS",
},
[179386] = {
"Corsair Officer",
"Tazavesh, the Veiled Market",
},
[242570] = {
"Haymar the Devout",
"Horrific Vision of Stormwind",
"enUS",
},
[246285] = {
"Bazaar Overseer",
"Tazavesh, the Veiled Market",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
},
[235151] = {
"K'aresh Elemental",
"Eco-Dome Al'dani",
},
[239834] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
},
[237272] = {
"Underpin's Friend's Broker",
"Excavation Site 9",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
},
[231385] = {
"Darkfuse Inspector",
"Operation: Floodgate",
},
[153760] = {
"Enthralled Footman",
"Horrific Vision of Stormwind",
"enUS",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
},
[158285] = {
"Tinkered Shieldbot",
"Horrific Vision of Stormwind",
"enUS",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
},
[215407] = {
"Ki'katal the Harvester",
"Ara-Kara, City of Echoes",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[164185] = {
"Echelon",
"Halls of Atonement",
},
[159633] = {
"Cultist Executioner",
"Horrific Vision of Stormwind",
"enUS",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
},
[156795] = {
"SI:7 Informant",
"Horrific Vision of Stormwind",
"enUS",
},
[234918] = {
"Wastes Creeper",
"Eco-Dome Al'dani",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[180433] = {
"Wandering Pulsar",
"Tazavesh, the Veiled Market",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[157811] = {
"Lilliam Sparkspindle",
"Horrific Vision of Stormwind",
"enUS",
},
[164218] = {
"Lord Chamberlain",
"Halls of Atonement",
},
[158452] = {
"Mindtwist Tendril",
"Horrific Vision of Stormwind",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
},
[234960] = {
"Tamed Ruinstalker",
"Eco-Dome Al'dani",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
},
[176555] = {
"Achillite",
"Tazavesh, the Veiled Market",
},
[234902] = {
"Underpin's Explosive Ally",
"Excavation Site 9",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
},
[152809] = {
"Alx'kov the Infested",
"Horrific Vision of Stormwind",
"enUS",
},
[233675] = {
"Alleria Windrunner",
"Horrific Vision of Stormwind",
"enUS",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
},
[179840] = {
"Market Peacekeeper",
"Tazavesh, the Veiled Market",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[216333] = {
"Bloodstained Assistant",
"Ara-Kara, City of Echoes",
},
[159632] = {
"Cultist Shadowblade",
"Horrific Vision of Stormwind",
"enUS",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
},
[216275] = {
"Brann's Epic Egg",
"Excavation Site 9",
"enUS",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
},
[158140] = {
"Frenzied Rat",
"Horrific Vision of Stormwind",
"enUS",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[231497] = {
"Bombshell Crab",
"Operation: Floodgate",
},
[175646] = {
"P.O.S.T. Master",
"Tazavesh, the Veiled Market",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
},
[88314] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[160061] = {
"Crawling Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[224221] = {
"Twilight Overseer",
"Grim Batol",
},
[233684] = {
"Overlord Mathias Shaw",
"Horrific Vision of Stormwind",
"enUS",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
},
[177500] = {
"Corsair Brute",
"Tazavesh, the Veiled Market",
},
[137713] = {
"Big Money Crab",
"Zandalar",
"enUS",
},
},
["indicator_anchor"] = {
["y"] = -5,
["x"] = 1,
["side"] = 1,
},
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.99999994039536,
["aura_padding"] = 3,
["indicator_worldboss"] = false,
["cast_statusbar_fadeout_time"] = 0.49999997019768,
["aura_stack_size"] = 12,
["aura_height2"] = 26,
["cast_colors"] = {
[420907] = {
false,
"white",
"",
},
},
["aura_border_colors"] = {
["enrage"] = {
0,
0,
0,
},
["steal_or_purge"] = {
nil,
0,
0,
},
["offensive"] = {
nil,
0,
0,
},
["crowdcontrol"] = {
0,
0,
0,
},
["is_show_all"] = {
0,
0,
0,
},
["defensive"] = {
0,
0,
0,
},
["is_buff"] = {
nil,
0,
0,
},
},
["class_colors"] = {
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["extra_icon_anchor"] = {
["x"] = -14,
},
["extra_icon_wide_icon"] = false,
["range_check_alpha"] = 0.5,
["semver"] = "1.0.10",
["bossmod_aura_glow_expiring"] = true,
["aura_frame2_anchor"] = {
["y"] = 3,
["side"] = 1,
},
["use_name_translit"] = true,
["indicator_faction"] = false,
["transparency_behavior"] = 2,
["spell_animations"] = false,
["debuff_show_cc_border"] = {
0,
0,
0,
},
["aura_consolidate"] = true,
["extra_icon_width"] = 34,
["health_statusbar_texture"] = "Blizzard Raid Bar",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Extra Border"] = 2,
["Cast Bar Icon Config"] = 2,
["Attacking Specific Unit"] = 2,
["Combo Points"] = 6,
["Hide Neutral Units"] = 1,
["Target Color"] = 3,
["Execute Range"] = 1,
["Aura Reorder"] = 3,
},
["minor_width_scale"] = 0.99999994039536,
["castbar_target_text_size"] = 12,
["aura_frame1_anchor"] = {
["y"] = 3,
["side"] = 7,
},
["aura_timer_text_font"] = "Friz Quadrata TT",
["extra_icon_stack_font"] = "Friz Quadrata TT",
["aura_height"] = 26,
["non_targeted_alpha_enabled"] = true,
["cast_statusbar_bgtexture"] = "Blizzard Raid Bar",
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["extra_icon_stack_size"] = 12,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "0",
["nameplateSelectedAlpha"] = "1",
["nameplateLargeTopInset"] = "0.049999997019768",
["nameplateShowPersonalCooldowns"] = "0",
["nameplateMotionSpeed"] = "0.024999998509884",
["nameplateShowFriendlyNPCs"] = "1",
["nameplateSelectedScale"] = "1",
["nameplateOverlapH"] = "0.79999995231628",
["nameplateShowFriendlyBuffs"] = "0",
["nameplateMinAlpha"] = "0.90135484",
["nameplateShowFriends"] = "0",
["nameplateMotion"] = "1",
["nameplateLargerScale"] = "1",
["nameplateMaxDistance"] = "40",
["nameplateOtherTopInset"] = "0.049999997019768",
["nameplatePlayerMaxDistance"] = "40",
["nameplateOccludedAlphaMult"] = "0.19999998807907",
["nameplateOverlapV"] = "1.6000000238419",
["nameplateShowEnemies"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateShowSelf"] = "0",
},
["login_counter"] = 16226,
["extra_icon_caster_name"] = false,
["aura_stack_font"] = "Friz Quadrata TT",
["blizzard_nameplate_font"] = "Friz Quadrata TT",
["bossmod_cooldown_text_enabled"] = false,
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 5,
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator7",
["blizzard_nameplate_large_font"] = "Friz Quadrata TT",
["aura_stack_anchor"] = {
["y"] = 15,
["side"] = 5,
},
["plate_config"] = {
["player"] = {
["module_enabled"] = false,
["level_text_alpha"] = 0.3,
},
["friendlyplayer"] = {
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
210,
22,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
0,
0,
0,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["mana_incombat"] = {
nil,
4,
},
["all_names"] = true,
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["percent_text_ooc"] = true,
["level_text_outline"] = "OUTLINE",
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 11,
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["quest_enabled"] = true,
["cast_incombat"] = {
210,
22,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["big_actortitle_text_size"] = 12,
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_enabled"] = true,
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_size"] = 12,
["spellname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "OUTLINE",
["castbar_offset"] = -1,
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["mana"] = {
nil,
4,
},
["spellpercent_text_size"] = 12,
["percent_text_enabled"] = true,
["health_incombat"] = {
232,
32,
},
["percent_text_size"] = 12,
["percent_text_font"] = "Friz Quadrata TT",
["buff_frame_y_offset"] = 0,
["level_text_alpha"] = 0.2999999821186066,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_size"] = 12,
["health"] = {
232,
32,
},
["actorname_text_size"] = 12,
["spellpercent_text_enabled"] = true,
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
},
["friendlynpc"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
210,
22,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["percent_text_ooc"] = true,
["level_text_outline"] = "OUTLINE",
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 11,
["cast_incombat"] = {
210,
22,
},
["actorname_text_size"] = 12,
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellname_text_size"] = 12,
["level_text_alpha"] = 0.2999999821186066,
["spellname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_enabled"] = true,
["castbar_offset"] = -1,
["spellpercent_text_size"] = 12,
["percent_text_size"] = 12,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_font"] = "Friz Quadrata TT",
["percent_text_show_decimals"] = false,
["spellpercent_text_enabled"] = true,
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["health_incombat"] = {
232,
32,
},
["health"] = {
232,
32,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
},
["global_health_width"] = 224,
["global_health_height"] = 28,
["enemyplayer"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
210,
22,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["level_text_outline"] = "OUTLINE",
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["cast_incombat"] = {
210,
22,
},
["quest_enabled"] = true,
["quest_color_enabled"] = true,
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellname_text_font"] = "Friz Quadrata TT",
["spellname_text_size"] = 12,
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["level_text_alpha"] = 0.2999999821186066,
["castbar_offset"] = -1,
["spellpercent_text_size"] = 12,
["percent_show_health"] = false,
["percent_text_size"] = 12,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_font"] = "Friz Quadrata TT",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 11,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
232,
32,
},
["health"] = {
232,
32,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["level_text_enabled"] = false,
},
["enemynpc"] = {
["castbar_offset"] = -1,
["spellpercent_text_font"] = "Friz Quadrata TT",
["cast"] = {
182,
18,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
nil,
0.50196081399918,
0.25098040699959,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["level_text_outline"] = "OUTLINE",
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 9,
["cast_incombat"] = {
182,
18,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_size"] = 12,
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_neutral"] = {
nil,
0.50196081399918,
0.25098040699959,
},
["spellname_text_font"] = "Friz Quadrata TT",
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_size"] = 12,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 12,
["percent_text_font"] = "Friz Quadrata TT",
["percent_text_show_decimals"] = false,
["health_incombat"] = {
200,
28,
},
["health"] = {
200,
28,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["actorname_text_size"] = 12,
["percent_show_health"] = false,
["level_text_enabled"] = false,
},
},
["aura_y_offset"] = 3,
["cast_statusbar_bgcolor"] = {
0.13333334028721,
0.13333334028721,
0.13333334028721,
1,
},
["border_thickness"] = 0.4999999701976776,
["resources_settings"] = {
["global_settings"] = {
["show_depleted"] = false,
},
["chr"] = {
["Player-3674-0B4CEAF6"] = "HolyPower",
["Player-3674-0B10664D"] = "Runes",
["Player-3674-0B7E99BA"] = "Chi",
["Player-3674-0B290529"] = "Chi",
["Player-3674-0B6F6C67"] = "ComboPoints",
["Player-3674-0B54DA49"] = "Runes",
["Player-3674-0B1BB2A3"] = "ComboPoints",
["Player-3666-073F2CE7"] = "Chi",
["Player-3674-0B7EE2CB"] = "Chi",
["Player-3674-0B0A2407"] = "Essence",
["Player-3674-0B733AA8"] = "Runes",
["Player-3674-0B7DA606"] = "Chi",
["Player-3674-0B7DEF79"] = "Chi",
["Player-3674-0ABC0676"] = "ArcaneCharges",
["Player-3674-0B7429F4"] = "Runes",
["Player-3674-0B267A73"] = "HolyPower",
["Player-3674-0B6950F5"] = "ComboPoints",
["Player-3674-0B7AA5AA"] = "Chi",
["Player-5764-00087D02"] = "Chi",
["Player-3674-0B782F56"] = "Runes",
["Player-3674-0B436FA0"] = "ComboPoints",
["Player-3674-0B5833AE"] = "Chi",
["Player-3674-0B25F50F"] = "ComboPoints",
["Player-3674-0B1E76C1"] = "SoulShards",
["Player-3674-0B82DA01"] = "HolyPower",
},
},
["indicator_scale"] = 1.200000047683716,
["focus_color"] = {
nil,
nil,
nil,
1,
},
["npc_colors"] = {
[226402] = {
true,
false,
"orange",
},
[211262] = {
true,
false,
"orange",
},
[206704] = {
true,
false,
"orange",
},
[229686] = {
true,
false,
"deeppink",
},
[144293] = {
true,
false,
"orange",
},
[231312] = {
true,
false,
"deeppink",
},
[211263] = {
true,
false,
"orange",
},
[215407] = {
true,
false,
"orange",
},
[144294] = {
true,
false,
"deeppink",
},
[144071] = {
true,
false,
"deeppink",
},
[234883] = {
true,
false,
"moccasin",
},
[216364] = {
true,
false,
"deeppink",
},
[212826] = {
true,
false,
"orange",
},
[210818] = {
true,
false,
"deeppink",
},
[230740] = {
true,
false,
"orange",
},
[212412] = {
true,
false,
"deeppink",
},
[216333] = {
true,
false,
"moccasin",
},
[212827] = {
true,
false,
"orange",
},
[176394] = {
true,
false,
"moccasin",
},
[164218] = {
true,
false,
"orange",
},
[173016] = {
true,
false,
"deeppink",
},
[213338] = {
true,
false,
"deeppink",
},
[176395] = {
true,
false,
"deeppink",
},
[229212] = {
true,
false,
"deeppink",
},
[213179] = {
true,
false,
"orange",
},
[234918] = {
true,
false,
"orange",
},
[176555] = {
true,
false,
"orange",
},
[209801] = {
true,
false,
"orange",
},
[175663] = {
true,
false,
"orange",
},
[170882] = {
true,
false,
"deeppink",
},
[176556] = {
true,
false,
"orange",
},
[223253] = {
true,
false,
"deeppink",
},
[206710] = {
true,
false,
"moccasin",
},
[136139] = {
true,
false,
"orange",
},
[219046] = {
true,
false,
"deeppink",
},
[179840] = {
true,
false,
"lightskyblue",
},
[221979] = {
true,
false,
"deeppink",
},
[165529] = {
true,
false,
"lightskyblue",
},
[179841] = {
true,
false,
"deeppink",
},
[216338] = {
true,
false,
"orange",
},
[220195] = {
true,
false,
"deeppink",
},
[129367] = {
true,
false,
"deeppink",
},
[130435] = {
true,
false,
"orange",
},
[133432] = {
true,
false,
"deeppink",
},
[128969] = {
true,
false,
"orange",
},
[163618] = {
true,
false,
"orange",
},
[213885] = {
true,
false,
"orange",
},
[179269] = {
true,
false,
"deeppink",
},
[234955] = {
true,
false,
"orange",
},
[210539] = {
true,
false,
"orange",
},
[230748] = {
true,
false,
"orange",
},
[212739] = {
true,
false,
"orange",
},
[221760] = {
true,
false,
"lightskyblue",
},
[229251] = {
true,
false,
"orange",
},
[234893] = {
true,
false,
"orange",
},
[134232] = {
true,
false,
"deeppink",
},
[239834] = {
true,
false,
"orange",
},
[166299] = {
true,
false,
"deeppink",
},
[176563] = {
true,
false,
"orange",
},
[223770] = {
true,
false,
"deeppink",
},
[228424] = {
true,
false,
"moccasin",
},
[231325] = {
true,
false,
"orange",
},
[167607] = {
true,
false,
"orange",
},
[223994] = {
true,
false,
"lightskyblue",
},
[239836] = {
true,
false,
"orange",
},
[165408] = {
true,
false,
"orange",
},
[130661] = {
true,
false,
"deeppink",
},
[213954] = {
true,
false,
"orange",
},
[166301] = {
true,
false,
"orange",
},
[177808] = {
true,
false,
"moccasin",
},
[176565] = {
true,
false,
"lightskyblue",
},
[223772] = {
true,
false,
"deeppink",
},
[165919] = {
true,
false,
"deeppink",
},
[211341] = {
true,
false,
"orange",
},
[166302] = {
true,
false,
"deeppink",
},
[224219] = {
true,
false,
"deeppink",
},
[216856] = {
true,
false,
"lightskyblue",
},
[223773] = {
true,
false,
"deeppink",
},
[165410] = {
true,
false,
"orange",
},
[213892] = {
true,
false,
"lightskyblue",
},
[223423] = {
true,
false,
"orange",
},
[129370] = {
true,
false,
"deeppink",
},
[234962] = {
true,
false,
"lightskyblue",
},
[223774] = {
true,
false,
"deeppink",
},
[218961] = {
true,
false,
"lightskyblue",
},
[213893] = {
true,
false,
"deeppink",
},
[214840] = {
true,
false,
"moccasin",
},
[244302] = {
true,
false,
"lightskyblue",
},
[177269] = {
true,
false,
"orange",
},
[224221] = {
true,
false,
"orange",
},
[179386] = {
true,
false,
"orange",
},
[223775] = {
true,
false,
"deeppink",
},
[208456] = {
true,
false,
"deeppink",
},
[211089] = {
true,
false,
"orange",
},
[211121] = {
true,
false,
"orange",
},
[212453] = {
true,
false,
"deeppink",
},
[174210] = {
true,
false,
"deeppink",
},
[224732] = {
true,
false,
"deeppink",
},
[237514] = {
true,
false,
"orange",
},
[223776] = {
true,
false,
"deeppink",
},
[130485] = {
true,
false,
"orange",
},
[164921] = {
true,
false,
"deeppink",
},
[211261] = {
true,
false,
"orange",
},
[40167] = {
true,
false,
"deeppink",
},
[179821] = {
true,
false,
"orange",
},
[234933] = {
true,
false,
"orange",
},
[212793] = {
true,
false,
"deeppink",
},
[223777] = {
true,
false,
"deeppink",
},
[165414] = {
true,
false,
"deeppink",
},
[175646] = {
true,
false,
"orange",
},
[207198] = {
true,
false,
"deeppink",
},
[166275] = {
true,
false,
"deeppink",
},
[180429] = {
true,
false,
"orange",
},
[229069] = {
true,
false,
"lightskyblue",
},
[175806] = {
true,
false,
"orange",
},
[217658] = {
true,
false,
"orange",
},
[178165] = {
true,
false,
"orange",
},
[218671] = {
true,
false,
"deeppink",
},
[231014] = {
true,
false,
"moccasin",
},
[166276] = {
true,
false,
"orange",
},
[136470] = {
true,
false,
"deeppink",
},
[234935] = {
true,
false,
"orange",
},
[217531] = {
true,
false,
"orange",
},
[206694] = {
true,
false,
"moccasin",
},
[175616] = {
true,
false,
"orange",
},
[242631] = {
true,
false,
"orange",
},
[220815] = {
true,
false,
"deeppink",
},
[164185] = {
true,
false,
"orange",
},
[226403] = {
true,
false,
"moccasin",
},
[210966] = {
true,
false,
"orange",
},
[231385] = {
true,
false,
"moccasin",
},
[235151] = {
true,
false,
"lightskyblue",
},
[167612] = {
true,
false,
"orange",
},
[223844] = {
true,
false,
"deeppink",
},
[220626] = {
true,
false,
"orange",
},
[217533] = {
true,
false,
"orange",
},
[213741] = {
true,
false,
"orange",
},
[164557] = {
true,
false,
"orange",
},
[207207] = {
true,
false,
"orange",
},
[206696] = {
true,
false,
"moccasin",
},
[226396] = {
true,
false,
"orange",
},
[246285] = {
true,
false,
"orange",
},
[214697] = {
true,
false,
"orange",
},
[214762] = {
true,
false,
"moccasin",
},
[214761] = {
true,
false,
"orange",
},
[220946] = {
true,
false,
"orange",
},
[207940] = {
true,
false,
"orange",
},
[178392] = {
true,
false,
"orange",
},
[151649] = {
true,
false,
"orange",
},
[231496] = {
true,
false,
"lightskyblue",
},
[211290] = {
true,
false,
"moccasin",
},
[177500] = {
true,
false,
"moccasin",
},
[224962] = {
true,
false,
"deeppink",
},
[180433] = {
true,
false,
"lightskyblue",
},
[212786] = {
true,
false,
"orange",
},
[206698] = {
true,
false,
"lightskyblue",
},
[167111] = {
true,
false,
"deeppink",
},
[231497] = {
true,
false,
"moccasin",
},
[213934] = {
true,
false,
"moccasin",
},
[236995] = {
true,
false,
"orange",
},
[216293] = {
true,
false,
"deeppink",
},
[136643] = {
true,
false,
"orange",
},
[173044] = {
true,
false,
"deeppink",
},
[210269] = {
true,
false,
"orange",
},
[163126] = {
true,
false,
"deeppink",
},
[226398] = {
true,
false,
"orange",
},
[179733] = {
true,
false,
"red",
},
[178139] = {
true,
false,
"orange",
},
[179388] = {
true,
false,
"deeppink",
},
[167876] = {
true,
false,
"orange",
},
[179893] = {
true,
false,
"moccasin",
},
[214350] = {
true,
false,
"deeppink",
},
[210812] = {
true,
false,
"deeppink",
},
[242209] = {
true,
false,
"lightskyblue",
},
[206697] = {
true,
false,
"deeppink",
},
[180336] = {
true,
false,
"deeppink",
},
[180431] = {
true,
false,
"deeppink",
},
[164562] = {
true,
false,
"moccasin",
},
[177817] = {
true,
false,
"deeppink",
},
[178141] = {
true,
false,
"deeppink",
},
[234957] = {
true,
false,
"deeppink",
},
[177816] = {
true,
false,
"lightskyblue",
},
[213937] = {
true,
false,
"orange",
},
[220599] = {
true,
false,
"deeppink",
},
[216340] = {
true,
false,
"lightskyblue",
},
[211228] = {
true,
false,
"deeppink",
},
[180348] = {
true,
false,
"orange",
},
[178142] = {
true,
false,
"lightskyblue",
},
[220196] = {
true,
false,
"deeppink",
},
[179842] = {
true,
false,
"orange",
},
[226404] = {
true,
false,
"orange",
},
[218324] = {
true,
false,
"orange",
},
[234960] = {
true,
false,
"moccasin",
},
[214439] = {
true,
false,
"deeppink",
},
[207946] = {
true,
false,
"orange",
},
[133430] = {
true,
false,
"orange",
},
[215405] = {
true,
false,
"orange",
},
[220141] = {
true,
false,
"deeppink",
},
},
["extra_icon_show_enrage_border"] = {
0,
0,
0,
},
["version"] = 11,
["hook_data"] = {
{
["OptionsValues"] = {
["replaceName"] = false,
["nameplateFlash"] = true,
["colorTick"] = {
1,
1,
1,
1,
},
["colorInterruptSoon"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
["colorInterruptAvailable"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
["colorNoInterrupt"] = {
0.80000007152557,
0.80000007152557,
0.80000007152557,
1,
},
["colorProtected"] = {
1,
0.25098040699959,
0.25098040699959,
1,
},
["colorSecondaryInterrupt"] = {
1,
0.50196081399918,
0.50196081399918,
1,
},
},
["HooksTemp"] = {
},
["UID"] = "0x63cc19ce2df2342d",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend\n\n\n",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Get players current talent specialization\n    envTable.spec = GetSpecialization()\n    \n    -- Flashing nameplate options\n    envTable.optionsHideFlashSolo = modTable.config.hideNameplateFlashSolo\n    envTable.optionsNameplateFlash = modTable.config.nameplateFlash\n    envTable.optionsHideFlashAsTank = modTable.config.hideFlashAsTank\n    \n    -- Target name options\n    envTable.optionsShowTargetName = modTable.config.showTargetName\n    envTable.optionsReplaceMyName = modTable.config.replaceName\n    envTable.optionsHideNameSolo = modTable.config.hideNameSolo\n    envTable.optionsCastNameSize = modTable.config.castNameSize\n    \n    -- Cast bar interrupt coloring\n    envTable.optionsShowInterruptColor = modTable.config.showInterruptColor\n    envTable.optionsShowSecondaryInterrupts = modTable.config.showSecondaryInterrupts\n    envTable.optionsColorNoInterrupt = modTable.config[\"colorNoInterrupt\"]\n    envTable.optionsColorInterruptAvailable = modTable.config[\"colorInterruptAvailable\"]\n    envTable.optionsColorInterruptSoon = modTable.config[\"colorInterruptSoon\"]\n    envTable.optionsColorSecondaryAvailable = modTable.config[\"colorSecondaryInterrupt\"]\n    envTable.optionsColorProtected = modTable.config[\"colorProtected\"]\n    envTable.optionsColorTick = modTable.config[\"colorTick\"]\n    \n    -- Get the primary interrupt ID of the players current class/spec.\n    -- All non-warlock classes have straight forward primary interrupt skills.\n    if envTable.class ~= 9 then\n        envTable.interruptID = modTable.primaryInterrupts[envTable.class][envTable.spec]\n    else\n        -- Warlock interrupt changes based on pet being used.\n        envTable.interruptID = envTable.GetWarlockInterrupt()\n    end\n    \n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend",
["Initialization"] = "function (modTable)\n    -- List of primary interupt skills used by each spec and class\n    -- Does not track secondary interrupt skills (such as Avenger's shield, etc)\n    modTable.primaryInterrupts =\n    {\n        \n        -- Warrior\n        [1] =\n        {\n            [1] = 6552, -- Pummel (Arms)\n            [2] = 6552, -- Pummel (Fury)\n            [3] = 6552 --  Pummel (Protection)\n        },\n        \n        -- Paladin\n        [2] =\n        {\n            [1] = 96231, -- Rebuke (Holy)\n            [2] = 96231, -- Rebuke (Protection)\n            [3] = 96231 -- Rebuke (Retribution)\n        },\n        \n        -- Hunter\n        [3] =\n        {\n            [1] = 147362, -- Counter Shot (Beast Mastery)\n            [2] = 147362, -- Counter Shot (Marksmanship)\n            [3] = 187707 -- Muzzle (Survival)\n        },\n        \n        -- Rogue\n        [4] =\n        {\n            [1] = 1766, -- Kick (Assassination)\n            [2] = 1766, -- Kick (Outlaw)\n            [3] = 1766 -- Kick (Subtlety)\n        },\n        \n        -- Priest\n        [5] =\n        {\n            [1] = nil,\n            [2] = nil,\n            [3] = 15487 -- Silence (Shadow)\n        },\n        \n        -- Death Knight\n        [6] =\n        {\n            [1] = 47528, -- Mind Freeze (Blood)\n            [2] = 47528, -- Mind Freeze (Frost)\n            [3] = 47528 -- Mind Freeze (Unholy)\n        },\n        \n        -- Shaman\n        [7] =\n        {\n            [1] = 57994, -- Wind Shear (Elemental)\n            [2] = 57994, -- Wind Shear (Enhancement)\n            [3] = 57994 -- Wind Shear (Restoration)\n        },\n        \n        -- Mage\n        [8] =\n        {\n            [1] = 2139, -- Counterspell (Arcane)\n            [2] = 2139, -- Counterspell (Fire)\n            [3] = 2139 -- Counterspell (Frost)\n        },\n        \n        -- [9] Warlock interrupt depends on pet being used.\n        --  Code for warlock contained in Cast Start hook.\n        \n        -- Monk\n        [10] =\n        {\n            [1] = 116705, -- Spear Hand Strike (Brewmaster)\n            [2] = 116705, -- Spear Hand Strike (Mistweaver)\n            [3] = 116705 -- Spear Hand Strike (Windwalker)\n        },\n        \n        -- Druid\n        [11] =\n        {\n            [1] = 78675, -- Solar Beam (Balance)\n            [2] = 106839, -- Skull Bash (Feral)\n            [3] = 106839, -- Skull Bash (Guardian)\n            [4] = 106839 -- Skull Bash (Restoration)\n        },\n        \n        -- Demon Hunter\n        [12] =\n        {\n            [1] = 183752, -- Disrupt (Havoc)\n            [2] = 183752 -- Disrupt (Vengeance)\n        },\n        \n        -- Evoker\n        [13] =\n        {\n            [1] = 351338, -- Quell (Devastation)\n            [2] = 351338 -- Quell (Preservation)\n        }\n    }\n    \nend\n\n\n",
["Constructor"] = "function(self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    if not unitFrame.castBar.tick then\n        unitFrame.castBar.tick = unitFrame.castBar:CreateTexture (nil, \"overlay\")\n        unitFrame.castBar.tick:SetDrawLayer (\"overlay\", 4)\n        unitFrame.castBar.tick:SetBlendMode (\"DISABLE\")\n        unitFrame.castBar.tick:SetHeight(unitFrame.castBar:GetHeight())\n    end\n    unitFrame.castBar.tick:SetTexture(Plater.SparkTextures[8])\n    unitFrame.castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n    unitFrame.castBar.tick:SetWidth(2)\n    \n    \n    function envTable.EnhancedCastBar(unitId, castBar)\n        castBar.tick:Hide()\n        \n        if castBar.IsInterrupted then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        \n        if UnitExists(targetUnitId) then\n            local targetName = UnitName(targetUnitId)\n            local spellID = castBar.SpellID\n            if BigWigsAPI then\n                spellName =  BigWigsAPI.GetSpellRename(spellID) or castBar.spellName\n            else\n                spellName = castBar.spellName\n            end\n            local inParty = UnitInParty(\"player\")\n            local inRaid = UnitInRaid(\"player\")\n            castBar.Text:SetText(spellName)\n            \n            -- Cast is targetting a specific unit\n            if targetName then\n                \n                local isTargettingMe\n                local targetNameByColor\n                \n                -- Determine if the cast is targetting the player character\n                if targetName == UnitName(\"player\") then\n                    isTargettingMe = true\n                else\n                    isTargettingMe = false\n                end\n                \n                -- Nameplate flash options\n                if isTargettingMe then\n                    if envTable.optionsNameplateFlash then\n                        \n                        -- Default value of true since it is turned on in the options\n                        local showNameplateFlash = true\n                        \n                        -- Hide flash when not in a group\n                        if envTable.optionsHideFlashSolo then\n                            if not inParty and not inRaid then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Hide flash when player is a tank specialization\n                        if envTable.optionsHideFlashAsTank then\n                            if GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Show nameplate flash if conditions met\n                        if showNameplateFlash then\n                            Plater.FlashNameplateBody (unitFrame)\n                        end\n                    end\n                end\n                \n                \n                -- Target name in cast bar options\n                if envTable.optionsShowTargetName then\n                    \n                    -- Change character name to \"Me\" if turned on in options\n                    if envTable.optionsReplaceMyName then\n                        if isTargettingMe then\n                            targetName = \"Me\"\n                        end\n                    end\n                    \n                    -- Color the target name based on the targets class color\n                    targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                    \n                    -- Shrink the name of the cast bar text if necessary (based on options)\n                    local castBarWidth = castBar:GetWidth()\n                    DetailsFramework:TruncateText (castBar.Text, castBarWidth * (envTable.optionsCastNameSize / 100))\n                    \n                    -- Update the cast bar text\n                    local currentText = castBar.Text:GetText()\n                    if currentText ~= nil and currentText ~= '' then\n                        local castText = currentText .. \" - \" ..  targetNameByColor\n                        \n                        -- Hide self target name when solo\n                        if envTable.optionsHideNameSolo then\n                            if not inParty and not inRaid then\n                                if isTargettingMe then\n                                    castText = currentText\n                                end\n                            end\n                        end\n                        castBar.Text:SetText(castText)\n                        DetailsFramework:TruncateText (castBar.Text, castBarWidth)\n                    end\n                end\n            end\n            \n            \n            -- Interrupt bar color options\n            if envTable.optionsShowInterruptColor then\n                local canInterrupt = castBar.canInterrupt\n                local castEndTime = castBar.spellEndTime\n                local interruptReadyTime = 0\n                local start\n                local duration\n                local playerIsWarlock\n                \n                if envTable.interruptID ~= nil then\n                    local cd = C_Spell.GetSpellCooldown(envTable.interruptID)  --local\n                    start, duration  =  cd.startTime, cd.duration\n                    interruptReadyTime = start + duration\n                end\n                \n                if canInterrupt then\n                    if envTable.interruptID ~= nil then\n                        \n                        -- Is the player a warlock?\n                        if envTable.class == 9 then\n                            playerIsWarlock = true\n                        else\n                            playerIsWarlock = false\n                        end\n                        \n                        -- Check to see if the spell is known/talented\n                        if IsSpellKnown(envTable.interruptID, playerIsWarlock) then\n                            if interruptReadyTime == 0 then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptAvailable)\n                            elseif envTable.optionsShowSecondaryInterrupts and envTable.class == 2 and IsSpellKnown(31935) and not envTable.isSpellOnCooldown_IgnoreGCD(31935) then\n                                -- Paladin Avenger's Shield\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            elseif interruptReadyTime < (castEndTime - 0.25) then\n                                castBar.tick:Show()\n                                castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n                                local tickLocation = (start + duration - castBar.spellStartTime) / castBar.maxValue  -- castBar.spellStartTime + 0.25\n                                if castBar.channeling then\n                                    tickLocation = 1 - tickLocation\n                                end\n                                castBar.tick:SetPoint (\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                                \n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptSoon)\n                            elseif interruptReadyTime >= (castEndTime - 0.25) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                            end\n                        else\n                            Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                        end\n                    end\n                else\n                    Plater.SetCastBarColor(unitFrame, envTable.optionsColorProtected)\n                end\n                \n            end\n            \n        end\n    end\n    \n    \n    -- Checks to see if Felgaurd or Felhunter interrupt skill is known and assigns if found\n    function envTable.GetWarlockInterrupt()\n        if IsSpellKnown(89766, true) then\n            -- Felguard: Axe Toss\n            return 89766\n        elseif IsSpellKnown(19647, true) then\n            -- Felhunter: Spell Lock\n            return 19647\n        elseif C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnown(132409, true) then\n            -- Check for Grimoire of Sacrifice\n            return 132409\n        else\n            -- Otherwise no interrupt available    \n            return nil\n        end\n    end\n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    function envTable.isSpellOnCooldown_IgnoreGCD(spellID)\n        local GCD=C_Spell.GetSpellCooldown(61304) -- GCD\n        local gcdSTART, gcdDUR = GCD.startTime, GCD.duration\n        local GCD_expirationTime = gcdSTART + gcdDUR\n        local info = C_Spell.GetSpellCooldown(spellID)\n        local spellStart, spellDuration  = info.startTime, info.duration\n        local spellReadyTime = spellStart + spellDuration\n        if spellReadyTime <= GCD_expirationTime then\n            return false\n        else\n            return true\n        end\n    end\n    \nend",
},
["Time"] = 1753401350,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/L6ZlsbPEC/9",
["Icon"] = 429383,
["Enabled"] = true,
["Revision"] = 1349,
["semver"] = "1.2.3",
["Author"] = "Nimeshady-Zul'jin",
["Desc"] = "Shows who a cast is targeting in the cast bar as well as other configurable options.",
["Prio"] = 99,
["version"] = 9,
["PlaterCore"] = 1,
["Name"] = "Enhanced Enemy Castbar",
["Options"] = {
{
["Type"] = 5,
["Name"] = "CUSTOM CAST BAR COLORS",
["Value"] = "Feature - Custom cast bar coloring:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable custom colored enemy cast bars.",
["Value"] = true,
["Key"] = "showInterruptColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting the cast bar will change to the colors below based on the status of you being able to interrupt the cast.",
},
{
["Type"] = 4,
["Name"] = "Enable support for secondary interrupts: Avenger's Shield (Paladin), Spell Reflection (Warrior).",
["Value"] = true,
["Key"] = "showSecondaryInterrupts",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colors casts that can be reflected with Spell Reflection (Warrior) and interrupted with Avenger's Shield (Paladin).",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is available.",
["Value"] = {
0.10980392992496,
0.63921570777893,
0.1843137294054,
1,
},
["Key"] = "colorInterruptAvailable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is down but will be available before cast finishes.",
["Value"] = {
0.63921570777893,
0.61568629741669,
0.10980392992496,
1,
},
["Key"] = "colorInterruptSoon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt on cooldown but it will be available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is unavailable.",
["Value"] = {
0.61960786581039,
0.16862745583057,
0.28627452254295,
1,
},
["Key"] = "colorNoInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you do not have an interrupt available to interrupt the current cast",
},
{
["Type"] = 1,
["Name"] = "Color for secondary interrupts. (Avenger's Shield and Spell Reflection)",
["Value"] = {
0.10980392992496,
0.52156865596771,
0.63921570777893,
1,
},
["Key"] = "colorSecondaryInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast targeting you can be reflected with Spell Reflection or interrupted with Avenger's Shield. Only active when playing the appropriate class with the skill off cooldown.",
},
{
["Type"] = 1,
["Name"] = "Color for casts that are protected/un-interruptable.",
["Value"] = {
0.22352942824364,
0.22352942824364,
0.22352942824364,
1,
},
["Key"] = "colorProtected",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast can not be interrupted by a standard interrupt.",
},
{
["Type"] = 1,
["Name"] = "Color of interrupt available tick. (Hover for more info)",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Key"] = "colorTick",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "When your interrupt is currently down but will become available before the current cast completes a tick will appear in the cast bar showing you the exact position in the cast you will be able to interrupt the cast. You can customize the color of the tick using this setting.  YOU MUST /RELOAD YOUR UI AFTER CHANGING THIS COLOR.",
},
{
["Type"] = 5,
["Name"] = "Settings Target Name",
["Value"] = "Feature - Show name of target in the cast bar:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show the name of cast targets in the cast bar.",
["Value"] = true,
["Key"] = "showTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting a spell at a target, the targets name will appear in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Hide my name when not in a party.",
["Value"] = true,
["Key"] = "hideNameSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When you are not in a party or raid group casts targetting you will not display your name in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Show \"Me\" instead of my character name.",
["Value"] = true,
["Key"] = "replaceName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When targetted by casts, instead of showing your character name it will show \"Me\".",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "The relative size (in percentage) that a spell name will take up of the cast bar, not including the target name. Adjust this so that target names fit into the cast bar correctly based on the width and text size of your cast bar. If you find even after adjusting this setting that there is not enough space try decreasing your cast bar text size or making the cast bar wider.",
["Min"] = 30,
["Name"] = "Maximum length of a cast name in %. Hover for more info.",
["Value"] = 60,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castNameSize",
},
{
["Type"] = 5,
["Name"] = "Settings Border Flash",
["Value"] = "Feature - Flash nameplates when a spell targets you:",
["Key"] = "option8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Namplate Flash",
},
{
["Type"] = 4,
["Name"] = "Flash the nameplates of enemies that are casting a spell or ability targeting me.",
["Value"] = false,
["Key"] = "nameplateFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is targetting you with a cast, this option will flash the nameplate of that enemy to indicate that cast is targeting you.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when not in a party.",
["Value"] = true,
["Key"] = "hideNameplateFlashSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing solo.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when I'm playing a tank specialization.",
["Value"] = true,
["Key"] = "hideFlashAsTank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing as a tank specialization.",
},
},
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --ensure reload updates existing\n    modTable.updateExisting(unitFrame)\nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    \n    -- settings:\n    local formatAuraTimers = modTable.config.formatAuraTimers\n    local formatBuffSpecialTimers = modTable.config.formatBuffSpecialTimers\n    \n    \n    -- time formatting function: (can be adjusted)\n    Plater.FormatTimeNew = function (s)\n        if s < 5 then\n            return (\"%.1f\"):format(s)\n        elseif s < 60 then\n            return (\"%d\"):format(s)\n        elseif s < 3600 then\n            return (\"%d:%02d\"):format(s/60%60, s%60)\n        elseif s < 86400 then\n            return (\"%dh %02dm\"):format(s/(3600), s/60%60)\n        else\n            return (\"%dd %02dh\"):format(s/86400, (s /3600) - (floor(s/86400) * 24))\n        end\n    end\n    Plater.FormatTimeOrig = Plater.FormatTimeOrig or Plater.FormatTime\n    \n    local DF = _G[\"DetailsFramework\"]\n    local IconRowFunctions = DF.IconRowFunctions or DF.IconMixin\n    IconRowFunctions.FormatCooldownTimeOrig = IconRowFunctions.FormatCooldownTimeOrig or IconRowFunctions.FormatCooldownTime\n    \n    \n    -- exchange formatting:\n    function modTable.hookTimeFormat()\n        if formatAuraTimers then\n            Plater.FormatTime = Plater.FormatTimeNew\n        else\n            Plater.FormatTime = Plater.FormatTimeOrig\n        end\n        \n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                IconRowFunctions.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n        else\n            -- no buff special\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            end\n        end\n    end\n    \n    function modTable.updateExisting(unitFrame)\n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        else\n            \n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeOrig (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        end\n        \n    end\n    \n    \n    modTable.hookTimeFormat()\n    for _, plateFrame in ipairs (Plater.GetAllShownPlates()) do\n        modTable.updateExisting(plateFrame.unitFrame)\n    end\n    \nend",
["Player Logon"] = "function(modTable)\n    modTable.hookTimeFormat()\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1753401349,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/mULsbUUxJ/13",
["Icon"] = "INTERFACE\\ICONS\\Ability_BossMagistrix_TimeWarp2",
["Enabled"] = true,
["Revision"] = 251,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Overwrites the Plater time formatting to show second fractions.",
["Prio"] = 99,
["version"] = 13,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Format Aura Timers",
["Value"] = true,
["Key"] = "formatAuraTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Format Buff Special Timers",
["Value"] = true,
["Key"] = "formatBuffSpecialTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["LastHookEdited"] = "",
["Name"] = "Detailed Time Format",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsVisible()) then\n                if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n                end \n            end\n            \n        end\n    end\n    \n    \n    for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        if auraIcon:IsShown() then\n            if (auraIcon:IsVisible()) then\n                local remainingTime = (auraIcon.startTime + auraIcon.duration - GetTime())\n                if (remainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.okay)\n                end\n            end\n        end\n    end\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"#FF4040\",\n        okay = \"#FFFFFF\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 5.0,\n    }\n    \nend\n\n\n",
},
["Time"] = 1753401351,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/CjOSTakvH/1",
["Icon"] = "Interface\\Timer\\Challenges-Logo",
["Enabled"] = true,
["Revision"] = 125,
["semver"] = "1.0.0",
["Author"] = "Ditador-Azralon",
["Desc"] = "Change the color of the aura timer by it's time left",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Paint Aura Timers",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = .5 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Time"] = 1741738545,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 134400,
["Enabled"] = true,
["Revision"] = 202,
["semver"] = "",
["Author"] = "????????-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Debuff Border",
},
{
["OptionsValues"] = {
["showBigIcon"] = false,
["SpellIconXOffset"] = 0,
["ReplaceDefaultBorder"] = false,
["TargetBorderSize"] = 1.5,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Destructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar.border then unitFrame.healthBar.border:Hide() end\n    if unitFrame.healthBar.targetBorder then unitFrame.healthBar.targetBorder:Hide() end\n    if unitFrame.castBar.border then unitFrame.castBar.border:Hide() end\n    if unitFrame.castBar.Icon then unitFrame.castBar.Icon:Hide() end\n    if unitFrame.castBar.IconBorder then unitFrame.castBar.IconBorder:Hide() end\n    if unitFrame.castBar.BorderShield then unitFrame.castBar.BorderShield:Hide() end\nend",
["Initialization"] = "function (modTable)\n    \n    function modTable.UpdateIconPosition(unitFrame, envTable, modTable)\n        local castBar = unitFrame.castBar\n        local icon = unitFrame.castBar.Icon\n        local shield = unitFrame.castBar.BorderShield\n        icon:Hide()\n        castBar.IconBorder:Hide()\n        if (modTable.config.ShowSpellIcon) then\n            icon:ClearAllPoints()\n            if (modTable.config.showBigIcon) then\n                icon:SetPoint(\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetPoint(\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            else\n                icon:SetPoint(\"topright\", unitFrame.castBar, \"topleft\", modTable.config.SpellIconXOffset, envTable.IconSizeOffset)\n                icon:SetPoint(\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            end\n            icon:Show()\n            if modTable.config.SpellIconBorder then\n                castBar.IconBorder:SetVertexColor(\n                    DetailsFramework:ParseColors(modTable.config.SpellIconBorderColor)\n                )\n                castBar.IconBorder:SetBorderSizes(\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize\n                )\n                castBar.IconBorder:UpdateSizes()\n                castBar.IconBorder:Show()\n            end\n        end\n        \n        if modTable.config.CastBarBorder then\n            castBar.border:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.CastBarBorderColor)\n            )\n            castBar.border:SetBorderSizes(\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize\n            )\n            castBar.border:UpdateSizes()\n            castBar.border:Show()\n        else\n            castBar.border:Hide()\n        end\n        \n        if (modTable.config.ShowShieldIcon and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            shield:SetSize(modTable.config.ShieldIconWidth, modTable.config.ShieldIconHeight)\n            shield:ClearAllPoints()\n            shield:SetPoint( \"center\", castBar, \"left\", modTable.config.ShieldIconXOffset, modTable.config.ShieldIconYOffset )\n        else\n            shield:Hide()\n        end\n    end\n    \n    function modTable.UpdateBorder(unitFrame, envTable, modTable, casting)\n        local healthBar = unitFrame.healthBar\n        local castBar = unitFrame.castBar\n        local targetBorder = unitFrame.healthBar.targetBorder\n        local defaultBorder = unitFrame.healthBar.border\n        \n        targetBorder:Hide()\n        defaultBorder:Hide()\n        \n        if modTable.config.ReplaceDefaultBorder then\n            targetBorder = unitFrame.healthBar.border\n            targetBorder:SetFrameStrata(\"HIGH\")\n            targetBorder:Show()\n        else\n            unitFrame.healthBar.border:Show()\n            if unitFrame.IsTarget then\n                targetBorder:Show()\n            end\n        end\n        \n        if casting==true then\n            if modTable.config.ShowSpellIcon then\n                targetBorder:ClearAllPoints()\n                if modTable.config.ExpandTargetBorder then\n                    if modTable.config.showBigIcon then\n                        targetBorder:SetPoint(\"topleft\", castBar.Icon, \"topleft\", 0, 0)\n                    else\n                        targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                    end\n                else\n                    targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                end\n                if modTable.config.ExpandTargetBorder then\n                    targetBorder:SetPoint(\"bottomright\", castBar, \"bottomright\", 0, 0)\n                else\n                    targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0)\n                end\n            else\n                targetBorder:ClearAllPoints()\n                targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0)\n            end\n            \n        elseif casting==false then\n            targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n            targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0) \n        end\n        \n        if unitFrame.IsTarget then\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.TargetBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize\n            )\n            targetBorder:UpdateSizes()\n        else\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(envTable.DefaultBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize\n            )\n            targetBorder:UpdateSizes()\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    modTable.UpdateBorder (unitFrame, envTable, modTable, true)\nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    self.ThrottleUpdate = -1\nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- Any settings changed here will require you to disable this plater mod,\n    -- then re-enable it by checking the box in the list on the left hand side of the window\n    \n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 0\n    \n    -- Settings for the shield for non interruptible casts\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    \n    envTable.DefaultBorderSize  = Plater.db.profile.border_thickness\n    envTable.DefaultBorderColor = Plater.db.profile.border_color\n    \n    -- Create a new health bar target border\n    if not unitFrame.healthBar.targetBorder then\n        unitFrame.healthBar.targetBorder = CreateFrame(\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.healthBar.targetBorder:Hide()\n    end\n    \n    -- Create a frame for the spell icon border\n    if not unitFrame.castBar.IconOverlayFrame then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.IconBorder:SetIgnoreParentScale(false)\n    end\n    \n    -- Create a frame for the cast bar border\n    if not unitFrame.castBar.border then\n        unitFrame.castBar.border = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.border:SetIgnoreParentScale(false)\n    end\n    \n    -- Hook into when the cast bar hides so we can update the border with casting set to false\n    -- Note: This hook needs to be the last thing in the constructor as it may immediately call\n    -- UpdateBorder and we need to make sure all of the frames are created first\n    if not unitFrame.castBar.borderChangeHooked then\n        hooksecurefunc(\n            unitFrame.castBar, \n            \"Hide\",\n            function()\n                modTable.UpdateBorder(unitFrame, envTable, modTable, false)\n            end\n        )\n        unitFrame.castBar.borderChangeHooked = true\n    end\nend",
},
["Time"] = 1754339130,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 1651,
["semver"] = "",
["Author"] = "Vahra-Tichondrius",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate and extend the border around icon and cast bar.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Border Settings",
["Value"] = "Border Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Target Border Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "TargetBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of the targeted nameplate",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Target Border Size",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "TargetBorderSize",
},
{
["Type"] = 4,
["Name"] = "Expand Target Border",
["Value"] = true,
["Key"] = "ExpandTargetBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Expands the target border around the cast icon and cast bar",
},
{
["Type"] = 4,
["Name"] = "Replace Default Border (/reload)",
["Value"] = true,
["Key"] = "ReplaceDefaultBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Replace the default border instead of creating a new one. You may have to /reload when changing this option",
},
{
["Type"] = 5,
["Name"] = "Cast Bar Settings",
["Value"] = "Cast Bar Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "Note, to get this to look right you may have",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "to update the Y offset of the cast bar",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "under Plater's \"Enemy Npc\" settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Border",
["Value"] = true,
["Key"] = "CastBarBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show a border around the enemy cast bar",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the enemy cast bar",
["Min"] = 0,
["Name"] = "Cast Bar Border Size",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "CastBarBorderSize",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "CastBarBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of enemy cast bar",
},
{
["Type"] = 5,
["Name"] = "Cast Icon Settings",
["Value"] = "Cast Icon Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Spell Icon",
["Value"] = true,
["Key"] = "ShowSpellIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show the spell icon of the targets cast",
},
{
["Type"] = 4,
["Name"] = "Show Big Icon",
["Value"] = false,
["Key"] = "showBigIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Spell Icon Border",
["Value"] = true,
["Key"] = "SpellIconBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should Show a border around the spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Spell Icon Border Size",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "SpellIconBorderSize",
},
{
["Type"] = 1,
["Name"] = "Spell Icon Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "SpellIconBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of target's spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X Offset of the Spell Icon",
["Min"] = -10,
["Name"] = "Spell Icon X Offset",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "SpellIconXOffset",
},
{
["Type"] = 5,
["Name"] = "Shield Icon Settings",
["Value"] = "Shield Icon Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Shield Icon",
["Value"] = false,
["Key"] = "ShowShieldIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show a shield icon next to the cast bar for uninterruptable spells",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon X Offset",
["Value"] = -4.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconXOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The Y offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon Y Offset",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconYOffset",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The width of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Width",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconWidth",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The height of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Height",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconHeight",
},
},
["LastHookEdited"] = "",
["Name"] = "Target Border",
},
{
["OptionsValues"] = {
["colour_names"] = false,
["show_elite"] = false,
["show_elite_text"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Initialization"] = "function(modTable)\n    \n    -- used for nameColouring\n    -- AARRGGBB\n    local markerToHex = {\n        [1] = \"FFEAEA0D\", -- Yellow 5 Point Star\n        [2] = \"FFEAB10D\", -- Orange Circle\n        [3] = \"FFCD00FF\", -- Purple Diamond\n        [4] = \"FF06D425\", -- Green Triangle\n        [5] = \"FFB3E3D8\", -- Light Blue Moon\n        [6] = \"FF0CD2EA\", -- Blue Square\n        [7] = \"FFD6210B\", -- Red Cross\n        [8] = \"FFFFFFFF\", -- White Skull\n    }\n    \n    local eliteToHex = {\n        [1] = \"FFFFCC00\", -- Elite\n        [2] = \"FFCCCCCC\", -- Rare\n        [3] = \"FFFF8040\", -- Rare Elite\n    }\n    \n    -- Makes it so you take their first name e.g Jessie Howlis -> Jessie\n    local nameBlacklist = {\n        [\"the\"] = true,\n        [\"of\"] = true,\n        [\"Tentacle\"] = true,\n        [\"Apprentice\"] = true,\n        [\"Denizen\"] = true,\n        [\"Emissary\"] = true,\n        [\"Howlis\"] = true,\n        [\"Terror\"] = true,\n        [\"Totem\"] = true,\n        [\"Waycrest\"] = true,\n        [\"Aspect\"] = true\n    }\n    \n    \n    -- @unitId  unitID for mob e.g nameplate1\n    function modTable.renamer(unitFrame, unitId)\n        \n        if not (unitId and unitFrame) then\n            return\n        end\n        \n        local name = unitFrame.namePlateUnitName or UnitName(unitId) or \"\"\n        \n        -- 1) shorten\n        if modTable.config[\"short_names\"] and not unitFrame.unitName.isRenamed then\n            local unitName\n            local a, b, c, d, e, f = strsplit(' ', name, 5)\n            if nameBlacklist[b] then\n                unitName = a or b or c or d or e or f\n            else\n                unitName = f or e or d or c or b or a\n            end\n            name = unitName or name\n        end -- if short_names\n        \n        \n        -- 2) Coloring\n        if modTable.config[\"colour_names\"] then\n            local marker = GetRaidTargetIndex(unitId)\n            if marker then\n                local color = markerToHex[marker or 8]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        -- 3) Rare / Elite Addition\n        if modTable.config[\"show_elite\"] then\n            local eliteType = UnitClassification(unitId)\n            if eliteType == \"elite\" then\n                local color = eliteToHex[1]\n                name = WrapTextInColorCode(name, color)\n            elseif eliteType == \"rare\" then\n                local color = eliteToHex[2]\n                name = WrapTextInColorCode(name, color)\n            elseif eliteType == \"rareelite\" then\n                local color = eliteToHex[3]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        if modTable.config[\"show_elite_text\"] then\n            local eliteType = UnitClassification(unitId)\n            if eliteType == \"elite\" and not IsInRaid() then\n                name = name .. \" [E]\"\n            elseif eliteType == \"rare\" and not IsInRaid() then\n                name = name .. \" [R]\"\n            elseif eliteType == \"rareelite\" and not IsInRaid() then\n                name = name .. \" [RE]\"\n            end\n        end\n        \n        -- 4) Apply\n        unitFrame.healthBar.unitName:SetText(name)\n    end -- envTable.namer\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend\n\n\n\n",
},
["Time"] = 1753401491,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 385,
["semver"] = "",
["Author"] = "Rhk-Tarren Mill",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Shorten Names",
["Value"] = true,
["Key"] = "short_names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Shortens NPC Names. eg.: \"Murkbrine Fishmancer\" -> \"Fishmancer\"",
},
{
["Type"] = 4,
["Name"] = "Colour by Raidmark",
["Value"] = true,
["Key"] = "colour_names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colours the Name by the assigned Raidmark. eg.: Triangle --> Green Name",
},
{
["Type"] = 4,
["Name"] = "Colour by Unit Status",
["Value"] = true,
["Key"] = "show_elite",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "show_elite_text",
["Value"] = true,
["Name"] = "Concatenate Name with Unit Status",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["LastHookEdited"] = "Initialization",
["Name"] = "Name Shortener",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function(self, unitId, unitFrame, envTable)\n    unitFrame.castBar.ScheduleToHide = function(self) self:Hide() end\nend",
},
["Time"] = 1753401352,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 97,
["semver"] = "",
["Author"] = "Avade-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Hide Interrupted",
},
{
["OptionsValues"] = {
["raidMarkerXOff"] = 1,
["unitNameXOffRaidMarker"] = 3,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.updatePosition = function(unitFrame)\n        local unitNameXOff = modTable.config.unitNameXOff -- Unit Name X Offset\n        local unitNameXOffRaidMarker = modTable.config.unitNameXOffRaidMarker -- Unit Name X Offset with Raid Marker\n        local raidMarkerXOff = modTable.config.raidMarkerXOff\n        local hasRaidTarget = unitFrame.PlaterRaidTargetFrame.RaidTargetIcon:IsShown() and unitFrame.PlaterRaidTargetFrame\n        if hasRaidTarget then\n            unitFrame.PlaterRaidTargetFrame:ClearAllPoints()\n            unitFrame.PlaterRaidTargetFrame:SetPoint(\"LEFT\", unitFrame.healthBar, \"LEFT\", raidMarkerXOff, 0)\n            unitFrame.PlaterRaidTargetFrame:SetSize(18, 18)\n            unitFrame.unitName:SetPoint(\"LEFT\", unitFrame.PlaterRaidTargetFrame, \"RIGHT\", unitNameXOffRaidMarker, 0)\n        else\n            unitFrame.unitName:ClearAllPoints()\n            unitFrame.unitName:SetPoint(\"LEFT\", unitFrame.healthBar, \"LEFT\", unitNameXOff, 0)\n        end\n    end\nend",
["Raid Target"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
},
["Time"] = 1754339088,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
["raid"] = true,
["none"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 458724,
["Enabled"] = true,
["Revision"] = 1176,
["semver"] = "",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "Aligns Raid Marker to the Left of the Unit Name.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset without Raid Marker",
["Min"] = -99,
["Name"] = "Unit Name (No Raid Marker)",
["Value"] = 1,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "unitNameXOff",
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset with Raid Marker",
["Min"] = -99,
["Name"] = "Unit Name (Raid Marker)",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "unitNameXOffRaidMarker",
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset for Raid Marker",
["Min"] = -99,
["Name"] = "Raid Marker",
["Value"] = 1,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "raidMarkerXOff",
},
},
["LastHookEdited"] = "",
["Name"] = "Target Marker",
},
{
["OptionsValues"] = {
["oneColor"] = {
0,
1,
0.01176470704376698,
1,
},
["twoColor"] = {
0,
0.501960813999176,
1,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x6490c26f17d91913",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.SetNameplateColors(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    --IDs of dots, you can change them to easier adjust to different classes, change only numbers\n    modTable.doubleDebuffs = {\n        {34914, 335467}, --Vampiric Touch + Devouring Plague\n        {188389, 334168}, --Flame Shock + Lashing Flames\n        {164815, 164812}, --Sunfire + Moonfire\n        {703, 1943}, --Garrote + Rupture\n        {980, 146739}, --Agony + Corruption\n        {980, 445474}, --Agony + Wither\n    }\n    \n    modTable.singleDebuffs = {\n        34914, --Vampiric Touch\n        589,--Shadow Word: Pain\n        20421, --Purge the Wicked\n        188389, --Flame Shock\n        157736, --Immolate\n        217200, --Barbed Shot\n        228287, --Mark of the Crane\n        445474, --Wither\n        164815, --Sunfire\n        164812, --Moonfire\n        155722, --Rake\n        980, --Agony\n        146739, --Corruption\n        460553, --Doom\n    }\n    \n    modTable.rOption = modTable.config.resetOption\n    \n    modTable.matchMultipleBuffs = {}\n    \n    for _, v in ipairs (modTable.doubleDebuffs) do\n        local buff = {\n            auras = v,\n            nameplateColor = modTable.config.twoColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\n    \n    for _, v in ipairs (modTable.singleDebuffs) do\n        local buff = {\n            auras = {v},\n            nameplateColor = modTable.config.oneColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\nend\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(modTable.matchMultipleBuffs) do      \n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, v.nameplateColor)\n                \n                return\n            else\n                -- reset colour\n                if (modTable.rOption) then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, 1,1,1, 1)\n                end\n                \n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors(unitFrame)\n        local colored = envTable.matchMultiple(unitFrame)\n    end\n    \nend",
},
["Time"] = 1753401349,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/-OwVE8C1v/1",
["Enabled"] = true,
["Revision"] = 1541,
["semver"] = "1.0.0",
["Author"] = "Megabelly-Silvermoon",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Debuff Name Color Change",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "label1",
["Value"] = "Settings:",
["Name"] = "Settings:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "oneColor",
["Value"] = {
1,
0.50196081399918,
0,
1,
},
["Name"] = "One Debuff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with 1 debuff",
},
{
["Type"] = 1,
["Key"] = "twoColor",
["Value"] = {
0.13333334028721,
0.54509806632996,
0.13333334028721,
1,
},
["Name"] = "Two Debuffs",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with a set of 2 debuffs",
},
{
["Type"] = 5,
["Key"] = "label4",
["Value"] = "Miscellaneous:",
["Name"] = "Miscellaneous:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetOption",
["Value"] = true,
["Name"] = "Reset colour after expire",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Resets colour after debuf expires. Toggling on will prevent sometimes lingering colour on nameplates/borders. Toggling off makes mod compatible with other nameplate colouring mods.",
},
},
["HooksTemp"] = {
},
["version"] = 1,
},
{
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1756369267,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 30,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 99,
["Name"] = "Force Threat Color",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["HooksTemp"] = {
},
},
},
["aura_breakline_space"] = 3,
["auras_per_row_auto"] = false,
["aura_show_enrage"] = true,
["first_run3"] = true,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["extra_icon_caster_outline"] = "OUTLINE",
["auras_per_row_amount2"] = 5,
["disable_omnicc_on_auras"] = true,
["url"] = "https://wago.io/tA5ADNfDG/11",
["focus_texture"] = "Details! Slash",
["bossmod_support_enabled"] = false,
["ghost_auras"] = {
["width"] = 28,
["height"] = 28,
["auras"] = {
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
["WARLOCK"] = {
{
[980] = true,
[172] = true,
},
},
},
},
["cast_statusbar_spark_width"] = 4,
["blizzard_nameplate_large_font_size"] = 12,
["pet_width_scale"] = 0.99999994039536,
["extra_icon_show_purge_border"] = {
nil,
0,
0,
},
["quick_hide"] = true,
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Shining Green [P]"] = 3,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Heroic Leap [P]"] = 3,
["Fixate On You"] = 12,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Is Cast Bar [P]"] = 1,
["Fixate"] = 11,
["Cast - Shield Interrupt"] = 2,
["Cast - AoE Hit All [P]"] = 3,
["Cast - On Going Cast [P]"] = 2,
["Fixate by Unit Buff [P]"] = 2,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Stop Casting"] = 4,
["Cast - Heal Cut [P]"] = 3,
["Spiteful Affix"] = 3,
["Auto Set Skull"] = 11,
["Cast - Alert + Timer [P]"] = 4,
["Add - Non Elite Trash [P]"] = 4,
["Add - Warning [P]"] = 5,
["Cast - Glowing [P]"] = 10,
["Cast - Voidzone [P]"] = 2,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Add - Explode on Die [P]"] = 1,
["Cast - Quick Flash"] = 2,
["Countdown"] = 12,
["Cast - Very Important"] = 15,
["Unit - Show Energy"] = 11,
},
["target_highlight_color"] = {
1,
1,
},
["cast_statusbar_spark_hideoninterrupt"] = false,
["extra_icon_stack_outline"] = "OUTLINE",
["castbar_target_font"] = "Friz Quadrata TT",
["health_animation_time_dilatation"] = 2.6199998855591,
["range_check_in_range_or_target_alpha_friendlies"] = 1,
["aura_grow_direction"] = 1,
["aura2_grow_direction"] = 3,
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark8",
["aura_sort"] = true,
["aura_timer_text_size"] = 12,
["extra_icon_timer_font"] = "Friz Quadrata TT",
["extra_icon_timer_outline"] = "OUTLINE",
["use_ui_parent"] = true,
["health_selection_overlay"] = "Blizzard Raid Bar",
["cast_statusbar_texture"] = "Blizzard Raid Bar",
["pet_height_scale"] = 0.99999994039536,
["aura_x_offset"] = 0,
["range_check_alpha_friendlies"] = 0.5,
["patch_version"] = 39,
["extra_icon_use_blizzard_border_color"] = false,
["indicator_raidmark_scale"] = 0.99999994039536,
["ui_parent_scale_tune"] = 1,
["profile_name"] = "FragUI",
["health_statusbar_bgtexture"] = "Blizzard Raid Bar",
["border_color"] = {
nil,
nil,
nil,
1,
},
["ui_parent_target_strata"] = "BACKGROUND",
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
nil,
0.80000007152557,
0.25098040699959,
},
["anothertank"] = {
1,
0.50196081399918,
0.25098040699959,
},
["aggro"] = {
0.25098040699959,
1,
0.25098040699959,
},
["noaggro"] = {
nil,
0.25098040699959,
0.25098040699959,
},
["nocombat"] = {
1,
0.25098040699959,
0.25098040699959,
},
["pulling"] = {
[3] = 0.25098040699959,
},
},
},
["aura_tracker"] = {
["buff_tracked"] = {
["166591"] = true,
["273432"] = true,
["312926"] = true,
["262092"] = true,
["303941"] = true,
["265160"] = true,
["209859"] = true,
["233210"] = true,
["342073"] = true,
},
["buff"] = {
412012,
412695,
},
["debuff"] = {
217200,
371472,
292626,
422683,
},
["buff_banned"] = {
["333553"] = true,
["61573"] = true,
["206150"] = true,
["411635"] = true,
["299450"] = true,
["352854"] = true,
["61574"] = true,
},
["debuff_tracked"] = {
["389809"] = true,
["292451"] = true,
["312595"] = true,
},
["debuff_banned"] = {
["355759"] = true,
["280494"] = true,
["426534"] = true,
["270569"] = true,
["345801"] = true,
["345219"] = true,
["368802"] = true,
["359168"] = true,
["345547"] = true,
["329449"] = true,
["420092"] = true,
["284678"] = true,
["391568"] = true,
["359180"] = true,
["317583"] = true,
["411717"] = true,
["375583"] = true,
["381743"] = true,
["392566"] = true,
["356181"] = true,
["331016"] = true,
["344748"] = true,
["426783"] = true,
["356372"] = true,
["428103"] = true,
["333526"] = true,
["376974"] = true,
["417419"] = true,
["269576"] = true,
["420054"] = true,
["392885"] = true,
["436582"] = true,
["390276"] = true,
["440339"] = true,
["115994"] = true,
["410790"] = true,
["283649"] = true,
["430184"] = true,
["340007"] = true,
["302564"] = true,
["425180"] = true,
["394453"] = true,
["403952"] = true,
["353773"] = true,
["403696"] = true,
["435476"] = true,
["379021"] = true,
["356329"] = true,
["372127"] = true,
["373305"] = true,
["394327"] = true,
["440340"] = true,
["411715"] = true,
["390155"] = true,
["324260"] = true,
["331934"] = true,
["328287"] = true,
["359078"] = true,
["390271"] = true,
["258883"] = true,
["367902"] = true,
["353793"] = true,
["418339"] = true,
},
},
["cast_statusbar_color"] = {
0.50196081399918,
0.50196081399918,
1,
1,
},
["update_throttle"] = 0.5,
["extra_icon_show_defensive_border"] = {
0,
0,
0,
},
["target_shady_enabled"] = false,
["cast_statusbar_interrupt_anim"] = false,
["hover_highlight_alpha"] = 0.25,
["tocversion"] = 110107,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["target_highlight"] = false,
["not_affecting_combat_alpha"] = 1,
["range_check_enabled"] = false,
["extra_icon_caster_font"] = "Friz Quadrata TT",
["extra_icon_show_offensive_border"] = {
nil,
0,
0,
},
["cast_statusbar_spark_filloninterrupt"] = false,
["extra_icon_height"] = 34,
["target_shady_alpha"] = 0.59999996423721,
["tap_denied_color"] = {
0.40000003576279,
0.40000003576279,
0.40000003576279,
},
["bossmod_icons_anchor"] = {
["y"] = 30,
["x"] = 0,
["side"] = 8,
},
["target_highlight_height"] = 25,
["health_selection_overlay_alpha"] = 0,
["focus_as_target_alpha"] = true,
["blizzard_nameplate_font_size"] = 10,
["indicator_raidmark_anchor"] = {
["x"] = 0,
["side"] = 9,
},
["extra_icon_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["cast_statusbar_color_interrupted"] = {
0.25098040699959,
1,
0.25098040699959,
},
["range_check_in_range_or_target_alpha"] = 1,
["health_statusbar_bgcolor"] = {
0.13333334028721,
0.13333334028721,
0.13333334028721,
1,
},
["number_region_first_run"] = true,
["cast_statusbar_color_channeling"] = {
0.50196081399918,
0.50196081399918,
1,
1,
},
["indicator_pet"] = false,
["cast_statusbar_color_finished"] = {
0.50196081399918,
0.50196081399918,
1,
},
["indicator_rare"] = false,
["indicator_elite"] = false,
["aura_alpha"] = 1,
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.25098040699959,
0.25098040699959,
},
["noaggro"] = {
0.50196081399918,
0.50196081399918,
},
["pulling"] = {
nil,
0.25098040699959,
0.25098040699959,
},
},
},
["cast_statusbar_use_fade_effects"] = false,
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["indicator_spec"] = false,
},
["FragUI_1"] = {
["focus_as_target_alpha"] = true,
["aura_breakline_space"] = 3,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["Time"] = 1743409167,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --SETTINGS: NAMEPLATE\n    envTable.NameplateColor =\"gray\"\n    \n    \nend",
["url"] = "https://wago.io/Dq5DaC3b4/8",
["Icon"] = 135964,
["Temp_Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Revision"] = 117,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["NpcNames"] = {
},
["Enabled"] = true,
["Author"] = "Duracell",
["Initialization"] = "function (scriptTable)\n    \n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["SpellIds"] = {
383840,
379256,
388084,
369031,
336499,
347097,
328921,
329636,
350857,
365381,
367573,
361934,
362020,
352016,
260189,
261265,
261266,
271590,
202455,
197422,
232156,
229489,
235308,
235089,
376705,
},
["Prio"] = 99,
["Name"] = "Invalid Target",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- if in combat\n    if (InCombatLockdown()) then\n        --update nameplate color\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \n    \nend\n\n\n",
["version"] = 8,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --insert code here\n    \nend",
["semver"] = "1.0.7",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
["indicatorAlpha"] = 0.75,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1743281252,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 162,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["NpcNames"] = {
"214840",
},
["Enabled"] = true,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["SpellIds"] = {
},
["Prio"] = 99,
["Name"] = "Add - Health Markers [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1743281703,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["Icon"] = 610472,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Revision"] = 94,
["Options"] = {
},
["NpcNames"] = {
},
["Enabled"] = true,
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["SpellIds"] = {
343470,
423228,
},
["Prio"] = 99,
["Name"] = "Aura is Shield [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1743409175,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["Revision"] = 1286,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.1,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 2,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 10,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["Enabled"] = true,
["Desc"] = "Abilities casted on the tank.",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Name"] = "Cast - Tankbuster [P]",
["PlaterCore"] = 1,
["Prio"] = 99,
["version"] = -1,
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    envTable.ShowTargeted = scriptTable.config.ShowTargeted\n    envTable.ShowRaidMarked = scriptTable.config.ShowRaidMarked\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend",
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 3\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 3\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["Time"] = 1756369282,
["Icon"] = 644389,
["url"] = "",
["NpcNames"] = {
"245705",
"250417",
},
["semver"] = "",
["Enabled"] = true,
["Revision"] = 772,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Show if Targeted",
["Value"] = true,
["Key"] = "ShowTargeted",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Determines if the nameplate should be shown if you have the unit targeted",
},
{
["Type"] = 4,
["Name"] = "Show if Raid Marked",
["Value"] = true,
["Key"] = "ShowRaidMarked",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Determines if the nameplate should be shown if it has a raid mark applied",
},
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Unhalted",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 3\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["Name"] = "Hide Nameplate by UnitID",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.ThrottleUpdate = 3\n    if (envTable.ShowTargeted) and (unitFrame.namePlateIsTarget) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    elseif (envTable.ShowRaidMarked) and (Plater.GetRaidMark (unitFrame)) then\n        Plater.ShowHealthBar (unitFrame)\n        --Plater.EnableHighlight (unitFrame)\n    else\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        unitFrame.castBar:Hide ()\n    end\n    \nend",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Desc"] = "Hide's nameplates based on the unit's name or npcID. Add the Unit Name or npcID as a trigger.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    envTable.ShowTargeted = scriptTable.config.ShowTargeted\n    envTable.ShowRaidMarked = scriptTable.config.ShowRaidMarked\n    \nend",
},
},
["saved_cvars_last_change"] = {
["nameplateShowOnlyNames"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelectedAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateLargeTopInset"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowPersonalCooldowns"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMotionSpeed"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyNPCs"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateSelectedScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOverlapH"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriendlyBuffs"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinAlpha"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMinAlphaDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMotion"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateLargerScale"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateMaxDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOtherTopInset"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplatePlayerMaxDistance"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOccludedAlphaMult"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateOverlapV"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowEnemies"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowSelf"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
["nameplateShowFriends"] = "...dOns/WagoUI/libs/LibAddonProfiles/modules/Plater.lua:120",
},
["aura_cache_by_name"] = {
},
["blizzard_nameplate_font_override_enabled"] = true,
["target_shady_enabled"] = false,
["aura2_y_offset"] = 3,
["extra_icon_caster_size"] = 12,
["buffs_on_aura2"] = true,
["indicator_quest"] = false,
["expansion_triggerwipe"] = {
[10] = true,
[9] = true,
},
["cast_statusbar_color_nointerrupt"] = {
1,
0.25098040699959,
0.25098040699959,
1,
},
["bossmod_support_bars_enabled"] = false,
["npc_cache"] = {
[158146] = {
"Fallen Riftwalker",
"Horrific Vision of Stormwind",
"enUS",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
},
[242209] = {
"Overgorged Mite",
"Eco-Dome Al'dani",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
"enUS",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[158279] = {
"Haywire Clockwork Rocket Bot",
"Horrific Vision of Stormwind",
"enUS",
},
[152722] = {
"Fallen Voidspeaker",
"Horrific Vision of Stormwind",
"enUS",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
},
[206698] = {
"Fanatical Conjuror",
"Priory of the Sacred Flame",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[87317] = {
"Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
},
[234933] = {
"Taah'bat",
"Eco-Dome Al'dani",
},
[158411] = {
"Unstable Servant",
"Horrific Vision of Stormwind",
"enUS",
},
[87318] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[158092] = {
"Fallen Heartpiercer",
"Horrific Vision of Stormwind",
"enUS",
},
[137716] = {
"Bottom Feeder",
"The MOTHERLODE!!",
"enUS",
},
[158284] = {
"Craggle Wobbletop",
"Horrific Vision of Stormwind",
"enUS",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[234935] = {
"Soul-Scribe",
"Eco-Dome Al'dani",
},
[158158] = {
"Forge-Guard Hurrul",
"Horrific Vision of Stormwind",
"enUS",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[158286] = {
"Reprogrammed Warbot",
"Horrific Vision of Stormwind",
"enUS",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
},
[158478] = {
"Corruption Tumor",
"Horrific Vision of Stormwind",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
},
[87320] = {
"Raider's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[176556] = {
"Alcruux",
"Tazavesh, the Veiled Market",
},
[130436] = {
"Off-Duty Laborer",
"The MOTHERLODE!!",
"enUS",
},
[152987] = {
"Faceless Willbreaker",
"Horrific Vision of Stormwind",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
},
[175663] = {
"Hylbrande",
"Tazavesh, the Veiled Market",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
},
[152988] = {
"Faceless Shadowcaller",
"Horrific Vision of Stormwind",
"enUS",
},
[152669] = {
"Void Globule",
"Horrific Vision of Stormwind",
"enUS",
},
[156949] = {
"Armsmaster Terenson",
"Horrific Vision of Stormwind",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
},
[151649] = {
"Defense Bot Mk I",
"Operation: Mechagon",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
"enUS",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
},
[234883] = {
"Voracious Gorger",
"Eco-Dome Al'dani",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
},
[213741] = {
"Voidstone Awakened",
"The Rookery",
"enUS",
},
[177269] = {
"So'leah",
"Tazavesh, the Veiled Market",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
},
[219046] = {
"Voracious Worm",
"Nerub-ar Palace",
},
[236995] = {
"Ravenous Destroyer",
"Eco-Dome Al'dani",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[156641] = {
"Enthralled Weaponsmith",
"Horrific Vision of Stormwind",
"enUS",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
},
[237252] = {
"Underpin's Friend's Agent",
"Excavation Site 9",
"enUS",
},
[156642] = {
"Enthralled Laborer",
"Horrific Vision of Stormwind",
"enUS",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[179893] = {
"Cartel Skulker",
"Tazavesh, the Veiled Market",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
},
[153130] = {
"Greater Void Elemental",
"Horrific Vision of Stormwind",
"enUS",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[175806] = {
"So'azmi",
"Tazavesh, the Veiled Market",
},
[152939] = {
"Boundless Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[234955] = {
"Wastelander Pactspeaker",
"Eco-Dome Al'dani",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[226396] = {
"Swampface",
"Operation: Floodgate",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[175616] = {
"Zo'phex",
"Tazavesh, the Veiled Market",
},
[156837] = {
"Valeera Sanguinar",
"Horrific Vision of Stormwind",
"enUS",
},
[233679] = {
"Therum Deepforge",
"Horrific Vision of Stormwind",
"enUS",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[234893] = {
"Azhiccar",
"Eco-Dome Al'dani",
},
[234957] = {
"Wastelander Ritualist",
"Eco-Dome Al'dani",
},
[158371] = {
"Zardeth of the Black Claw",
"Horrific Vision of Stormwind",
"enUS",
},
[226398] = {
"Big M.O.M.M.A.",
"Operation: Floodgate",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[157158] = {
"Cultist Slavedriver",
"Horrific Vision of Stormwind",
"enUS",
},
[159266] = {
"Portal Master",
"Horrific Vision of Stormwind",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
},
[233681] = {
"Magister Umbric",
"Horrific Vision of Stormwind",
"enUS",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
},
[237514] = {
"A'wazj",
"Eco-Dome Al'dani",
},
[158373] = {
"Roberto Pupellyverbos",
"Horrific Vision of Stormwind",
"enUS",
},
[158437] = {
"Fallen Taskmaster",
"Horrific Vision of Stormwind",
"enUS",
},
[138061] = {
"Venture Co. Longshoreman",
"The MOTHERLODE!!",
"enUS",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[213179] = {
"Avanoxx",
"Ara-Kara, City of Echoes",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[226402] = {
"Bront",
"Operation: Floodgate",
},
[164188] = {
"Horrific Figment",
"Horrific Vision of Stormwind",
"enUS",
},
[236942] = {
"The Underpin",
"Excavation Site 9",
"enUS",
},
[234962] = {
"Wastelander Farstalker",
"Eco-Dome Al'dani",
},
[226403] = {
"Keeza Quickfuse",
"Operation: Floodgate",
},
[233685] = {
"Slavemaster Ul'rok",
"Horrific Vision of Stormwind",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[226404] = {
"Geezle Gigazap",
"Operation: Floodgate",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[234900] = {
"Underpin's Adoring Fan",
"Excavation Site 9",
"enUS",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
},
[234901] = {
"Underpin's Well-Connected Friend",
"Excavation Site 9",
"enUS",
},
[158315] = {
"Eye of Chaos",
"Horrific Vision of Stormwind",
"enUS",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[239437] = {
"Hogger",
"Horrific Vision of Stormwind",
"enUS",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[242631] = {
"Overcharged Sentinel",
"Eco-Dome Al'dani",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
},
[156145] = {
"Burrowing Appendage",
"Horrific Vision of Stormwind",
"enUS",
},
[159275] = {
"Portal Keeper",
"Horrific Vision of Stormwind",
"enUS",
},
[176394] = {
"P.O.S.T. Worker",
"Tazavesh, the Veiled Market",
},
[212739] = {
"Consuming Voidstone",
"The Rookery",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
},
[237651] = {
"Lit Fuse",
"Excavation Site 9",
"enUS",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
},
[234204] = {
"Congealed Clot",
"Excavation Site 9",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
},
[234205] = {
"Corruption Parasite",
"Excavation Site 9",
"enUS",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[234206] = {
"Nightmare Crawler",
"Excavation Site 9",
"enUS",
},
[157812] = {
"Billibub Cogspinner",
"Horrific Vision of Stormwind",
"enUS",
},
[234207] = {
"Tainted Feaster",
"Excavation Site 9",
"enUS",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[157813] = {
"Sprite Jumpsprocket",
"Horrific Vision of Stormwind",
"enUS",
},
[231014] = {
"Loaderbot",
"Operation: Floodgate",
},
[234208] = {
"Hideous Amalgamation",
"Excavation Site 9",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
},
[152704] = {
"Crawling Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[234209] = {
"Coagulated Mass",
"Excavation Site 9",
"enUS",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
},
[244302] = {
"Binding Javelin",
"Eco-Dome Al'dani",
},
[234210] = {
"Silent Slitherer",
"Excavation Site 9",
"enUS",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
},
[158774] = {
"Broken Citizen",
"Horrific Vision of Stormwind",
"enUS",
},
[156794] = {
"SI:7 Light-Hunter",
"Horrific Vision of Stormwind",
"enUS",
},
[158690] = {
"Cultist Tormenter",
"Horrific Vision of Stormwind",
"enUS",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[220626] = {
"Blood Parasite",
"Nerub-ar Palace",
},
[158136] = {
"Inquisitor Darkspeak",
"Horrific Vision of Stormwind",
"enUS",
},
[165408] = {
"Halkias",
"Halls of Atonement",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
},
[176563] = {
"Zo'gron",
"Tazavesh, the Veiled Market",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
},
[158056] = {
"Rat",
"Horrific Vision of Stormwind",
"enUS",
},
[179386] = {
"Corsair Officer",
"Tazavesh, the Veiled Market",
},
[242570] = {
"Haymar the Devout",
"Horrific Vision of Stormwind",
"enUS",
},
[246285] = {
"Bazaar Overseer",
"Tazavesh, the Veiled Market",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
},
[235151] = {
"K'aresh Elemental",
"Eco-Dome Al'dani",
},
[239834] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
},
[237272] = {
"Underpin's Friend's Broker",
"Excavation Site 9",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
},
[153760] = {
"Enthralled Footman",
"Horrific Vision of Stormwind",
"enUS",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
},
[216275] = {
"Brann's Epic Egg",
"Excavation Site 9",
"enUS",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
},
[158285] = {
"Tinkered Shieldbot",
"Horrific Vision of Stormwind",
"enUS",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[179840] = {
"Market Peacekeeper",
"Tazavesh, the Veiled Market",
},
[164185] = {
"Echelon",
"Halls of Atonement",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[158140] = {
"Frenzied Rat",
"Horrific Vision of Stormwind",
"enUS",
},
[156795] = {
"SI:7 Informant",
"Horrific Vision of Stormwind",
"enUS",
},
[234918] = {
"Wastes Creeper",
"Eco-Dome Al'dani",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[180433] = {
"Wandering Pulsar",
"Tazavesh, the Veiled Market",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[157811] = {
"Lilliam Sparkspindle",
"Horrific Vision of Stormwind",
"enUS",
},
[164218] = {
"Lord Chamberlain",
"Halls of Atonement",
},
[158452] = {
"Mindtwist Tendril",
"Horrific Vision of Stormwind",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
},
[234960] = {
"Tamed Ruinstalker",
"Eco-Dome Al'dani",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
},
[176555] = {
"Achillite",
"Tazavesh, the Veiled Market",
},
[234902] = {
"Underpin's Explosive Ally",
"Excavation Site 9",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
},
[152809] = {
"Alx'kov the Infested",
"Horrific Vision of Stormwind",
"enUS",
},
[233675] = {
"Alleria Windrunner",
"Horrific Vision of Stormwind",
"enUS",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
},
[159633] = {
"Cultist Executioner",
"Horrific Vision of Stormwind",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[216333] = {
"Bloodstained Assistant",
"Ara-Kara, City of Echoes",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
},
[159632] = {
"Cultist Shadowblade",
"Horrific Vision of Stormwind",
"enUS",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
},
[215407] = {
"Ki'katal the Harvester",
"Ara-Kara, City of Echoes",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
},
[231385] = {
"Darkfuse Inspector",
"Operation: Floodgate",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[231497] = {
"Bombshell Crab",
"Operation: Floodgate",
},
[175646] = {
"P.O.S.T. Master",
"Tazavesh, the Veiled Market",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
},
[88314] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[160061] = {
"Crawling Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[224221] = {
"Twilight Overseer",
"Grim Batol",
},
[233684] = {
"Overlord Mathias Shaw",
"Horrific Vision of Stormwind",
"enUS",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
},
[177500] = {
"Corsair Brute",
"Tazavesh, the Veiled Market",
},
[137713] = {
"Big Money Crab",
"Zandalar",
"enUS",
},
},
["indicator_anchor"] = {
["y"] = -5,
["x"] = 1,
["side"] = 1,
},
["health_selection_overlay_alpha"] = 0,
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.99999994039536,
["aura_padding"] = 3,
["indicator_worldboss"] = false,
["aura_stack_size"] = 12,
["aura_height2"] = 26,
["cast_colors"] = {
[420907] = {
false,
"white",
"",
},
},
["extra_icon_timer_outline"] = "OUTLINE",
["aura_border_colors"] = {
["enrage"] = {
0,
0,
0,
},
["steal_or_purge"] = {
nil,
0,
0,
},
["offensive"] = {
nil,
0,
0,
},
["crowdcontrol"] = {
0,
0,
0,
},
["is_show_all"] = {
0,
0,
0,
},
["defensive"] = {
0,
0,
0,
},
["is_buff"] = {
nil,
0,
0,
},
},
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["extra_icon_anchor"] = {
["x"] = -14,
},
["extra_icon_wide_icon"] = false,
["range_check_alpha"] = 0.5,
["semver"] = "1.0.10",
["bossmod_aura_glow_expiring"] = true,
["aura_frame2_anchor"] = {
["y"] = 3,
["side"] = 1,
},
["use_name_translit"] = true,
["cast_statusbar_texture"] = "Blizzard Raid Bar",
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["transparency_behavior"] = 2,
["spell_animations"] = false,
["debuff_show_cc_border"] = {
0,
0,
0,
},
["aura_consolidate"] = true,
["extra_icon_width"] = 34,
["health_statusbar_texture"] = "Blizzard Raid Bar",
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Extra Border"] = 2,
["Cast Bar Icon Config"] = 2,
["Attacking Specific Unit"] = 2,
["Combo Points"] = 6,
["Hide Neutral Units"] = 1,
["Target Color"] = 3,
["Execute Range"] = 1,
["Aura Reorder"] = 3,
},
["minor_width_scale"] = 0.99999994039536,
["indicator_pet"] = false,
["extra_icon_show_defensive_border"] = {
0,
0,
0,
},
["aura_frame1_anchor"] = {
["y"] = 3,
["side"] = 7,
},
["indicator_rare"] = false,
["cast_statusbar_color_finished"] = {
0.50196081399918,
0.50196081399918,
1,
},
["extra_icon_stack_font"] = "Friz Quadrata TT",
["aura_height"] = 26,
["non_targeted_alpha_enabled"] = true,
["cast_statusbar_bgtexture"] = "Blizzard Raid Bar",
["aura2_x_offset"] = 0,
["target_indicator"] = "NONE",
["extra_icon_stack_size"] = 12,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "0",
["nameplateSelectedAlpha"] = "1",
["nameplateLargeTopInset"] = "0.049999997019768",
["nameplateShowPersonalCooldowns"] = "0",
["nameplateMotionSpeed"] = "0.024999998509884",
["nameplateShowFriendlyNPCs"] = "1",
["nameplateSelectedScale"] = "1",
["nameplateOverlapH"] = "0.79999995231628",
["nameplateShowFriendlyBuffs"] = "0",
["nameplateMinAlpha"] = "0.90135484",
["nameplateShowFriends"] = "0",
["nameplateMotion"] = "1",
["nameplateLargerScale"] = "1",
["nameplateMaxDistance"] = "40",
["nameplateOtherTopInset"] = "0.049999997019768",
["nameplatePlayerMaxDistance"] = "40",
["nameplateOccludedAlphaMult"] = "0.19999998807907",
["nameplateOverlapV"] = "1.6000000238419",
["nameplateShowEnemies"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateShowSelf"] = "0",
},
["login_counter"] = 16229,
["extra_icon_caster_name"] = false,
["aura_stack_font"] = "Friz Quadrata TT",
["blizzard_nameplate_font"] = "Friz Quadrata TT",
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["bossmod_cooldown_text_enabled"] = false,
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 5,
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator7",
["blizzard_nameplate_large_font"] = "Friz Quadrata TT",
["aura_stack_anchor"] = {
["y"] = 15,
["side"] = 5,
},
["plate_config"] = {
["player"] = {
["module_enabled"] = false,
["level_text_alpha"] = 0.3,
},
["friendlyplayer"] = {
["castbar_offset"] = -1,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
210,
22,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
0,
0,
0,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["mana_incombat"] = {
nil,
4,
},
["all_names"] = true,
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["percent_text_ooc"] = true,
["level_text_outline"] = "OUTLINE",
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 11,
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["cast_incombat"] = {
210,
22,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_outline"] = "OUTLINE",
["big_actortitle_text_size"] = 12,
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["mana"] = {
nil,
4,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_size"] = 12,
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 12,
["spellpercent_text_size"] = 12,
["percent_text_font"] = "Friz Quadrata TT",
["buff_frame_y_offset"] = 0,
["quest_enabled"] = true,
["spellname_text_size"] = 12,
["actorname_text_size"] = 12,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
232,
32,
},
["health"] = {
232,
32,
},
["spellpercent_text_enabled"] = true,
["percent_text_enabled"] = true,
["quest_color_enabled"] = true,
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
},
["friendlynpc"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
210,
22,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["percent_text_show_decimals"] = false,
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["percent_text_ooc"] = true,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 11,
["spellname_text_font"] = "Friz Quadrata TT",
["cast_incombat"] = {
210,
22,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["actorname_text_size"] = 12,
["spellpercent_text_size"] = 12,
["big_actorname_text_font"] = "Friz Quadrata TT",
["castbar_offset"] = -1,
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["percent_text_font"] = "Friz Quadrata TT",
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
232,
32,
},
["health"] = {
232,
32,
},
["percent_text_enabled"] = true,
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["spellpercent_text_enabled"] = true,
["spellname_text_size"] = 12,
},
["global_health_width"] = 224,
["global_health_height"] = 28,
["enemyplayer"] = {
["big_actorname_text_size"] = 12,
["spellpercent_text_font"] = "Friz Quadrata TT",
["level_text_size"] = 8,
["cast"] = {
210,
22,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["spellname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["spellpercent_text_size"] = 12,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 11,
["cast_incombat"] = {
210,
22,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellname_text_font"] = "Friz Quadrata TT",
["quest_color_neutral"] = {
1,
0.50196081399918,
0.25098040699959,
1,
},
["big_actorname_text_font"] = "Friz Quadrata TT",
["level_text_outline"] = "OUTLINE",
["castbar_offset"] = -1,
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 12,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_font"] = "Friz Quadrata TT",
["percent_text_show_decimals"] = false,
["quest_enabled"] = true,
["percent_show_health"] = false,
["quest_color_enabled"] = true,
["spellname_text_size"] = 12,
["health"] = {
232,
32,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
232,
32,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["level_text_enabled"] = false,
},
["enemynpc"] = {
["castbar_offset"] = -1,
["spellpercent_text_font"] = "Friz Quadrata TT",
["cast"] = {
182,
18,
},
["big_actortitle_text_size"] = 12,
["spellpercent_text_anchor"] = {
["x"] = -1,
},
["big_actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_font"] = "Friz Quadrata TT",
["actorname_text_font"] = "Friz Quadrata TT",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 11,
["quest_color_enemy"] = {
nil,
0.50196081399918,
0.25098040699959,
},
["big_actortitle_text_font"] = "Friz Quadrata TT",
["spellpercent_text_size"] = 12,
["level_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["castbar_offset_x"] = 9,
["cast_incombat"] = {
182,
18,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["big_actortitle_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["percent_text_anchor"] = {
["x"] = -1,
["side"] = 11,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_neutral"] = {
nil,
0.50196081399918,
0.25098040699959,
},
["actorname_text_size"] = 12,
["big_actorname_text_font"] = "Friz Quadrata TT",
["big_actorname_text_size"] = 12,
["level_text_outline"] = "OUTLINE",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 12,
["percent_text_show_decimals"] = false,
["percent_text_font"] = "Friz Quadrata TT",
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
200,
28,
},
["health"] = {
200,
28,
},
["spellname_text_font"] = "Friz Quadrata TT",
["actorname_text_anchor"] = {
["x"] = 3,
["side"] = 10,
},
["percent_show_health"] = false,
["level_text_enabled"] = false,
},
},
["aura_y_offset"] = 3,
["use_ui_parent"] = true,
["focus_texture"] = "Details! Slash",
["cast_statusbar_bgcolor"] = {
0.13333334028721,
0.13333334028721,
0.13333334028721,
1,
},
["cast_statusbar_use_fade_effects"] = false,
["indicator_spec"] = false,
["border_thickness"] = 0.4999999701976776,
["resources_settings"] = {
["global_settings"] = {
["show_depleted"] = false,
},
["chr"] = {
["Player-3674-0B4CEAF6"] = "HolyPower",
["Player-3674-0B10664D"] = "Runes",
["Player-3674-0B7E99BA"] = "Chi",
["Player-3674-0B290529"] = "Chi",
["Player-3674-0B6F6C67"] = "ComboPoints",
["Player-3674-0B54DA49"] = "Runes",
["Player-3674-0B1BB2A3"] = "ComboPoints",
["Player-3666-073F2CE7"] = "Chi",
["Player-3674-0B7EE2CB"] = "Chi",
["Player-3674-0B0A2407"] = "Essence",
["Player-3674-0B733AA8"] = "Runes",
["Player-3674-0B7DA606"] = "Chi",
["Player-3674-0B7DEF79"] = "Chi",
["Player-3674-0ABC0676"] = "ArcaneCharges",
["Player-3674-0B7429F4"] = "Runes",
["Player-3674-0B267A73"] = "HolyPower",
["Player-3674-0B6950F5"] = "ComboPoints",
["Player-3674-0B7AA5AA"] = "Chi",
["Player-5764-00087D02"] = "Chi",
["Player-3674-0B782F56"] = "Runes",
["Player-3674-0B436FA0"] = "ComboPoints",
["Player-3674-0B5833AE"] = "Chi",
["Player-3674-0B25F50F"] = "ComboPoints",
["Player-3674-0B1E76C1"] = "SoulShards",
["Player-3674-0B82DA01"] = "HolyPower",
},
},
["indicator_scale"] = 1.200000047683716,
["border_color"] = {
nil,
nil,
nil,
1,
},
["focus_color"] = {
nil,
nil,
nil,
1,
},
["npc_colors"] = {
[226402] = {
true,
false,
"orange",
},
[211262] = {
true,
false,
"orange",
},
[206704] = {
true,
false,
"orange",
},
[229686] = {
true,
false,
"deeppink",
},
[144293] = {
true,
false,
"orange",
},
[231312] = {
true,
false,
"deeppink",
},
[211263] = {
true,
false,
"orange",
},
[215407] = {
true,
false,
"orange",
},
[144294] = {
true,
false,
"deeppink",
},
[144071] = {
true,
false,
"deeppink",
},
[234883] = {
true,
false,
"moccasin",
},
[216364] = {
true,
false,
"deeppink",
},
[212826] = {
true,
false,
"orange",
},
[210818] = {
true,
false,
"deeppink",
},
[230740] = {
true,
false,
"orange",
},
[212412] = {
true,
false,
"deeppink",
},
[216333] = {
true,
false,
"moccasin",
},
[212827] = {
true,
false,
"orange",
},
[176394] = {
true,
false,
"moccasin",
},
[164218] = {
true,
false,
"orange",
},
[173016] = {
true,
false,
"deeppink",
},
[213338] = {
true,
false,
"deeppink",
},
[176395] = {
true,
false,
"deeppink",
},
[229212] = {
true,
false,
"deeppink",
},
[213179] = {
true,
false,
"orange",
},
[234918] = {
true,
false,
"orange",
},
[176555] = {
true,
false,
"orange",
},
[209801] = {
true,
false,
"orange",
},
[175663] = {
true,
false,
"orange",
},
[170882] = {
true,
false,
"deeppink",
},
[176556] = {
true,
false,
"orange",
},
[223253] = {
true,
false,
"deeppink",
},
[206710] = {
true,
false,
"moccasin",
},
[136139] = {
true,
false,
"orange",
},
[219046] = {
true,
false,
"deeppink",
},
[179840] = {
true,
false,
"lightskyblue",
},
[221979] = {
true,
false,
"deeppink",
},
[165529] = {
true,
false,
"lightskyblue",
},
[179841] = {
true,
false,
"deeppink",
},
[216338] = {
true,
false,
"orange",
},
[220195] = {
true,
false,
"deeppink",
},
[129367] = {
true,
false,
"deeppink",
},
[130435] = {
true,
false,
"orange",
},
[133432] = {
true,
false,
"deeppink",
},
[128969] = {
true,
false,
"orange",
},
[163618] = {
true,
false,
"orange",
},
[213885] = {
true,
false,
"orange",
},
[179269] = {
true,
false,
"deeppink",
},
[234955] = {
true,
false,
"orange",
},
[210539] = {
true,
false,
"orange",
},
[230748] = {
true,
false,
"orange",
},
[212739] = {
true,
false,
"orange",
},
[221760] = {
true,
false,
"lightskyblue",
},
[229251] = {
true,
false,
"orange",
},
[234893] = {
true,
false,
"orange",
},
[134232] = {
true,
false,
"deeppink",
},
[239834] = {
true,
false,
"orange",
},
[166299] = {
true,
false,
"deeppink",
},
[176563] = {
true,
false,
"orange",
},
[223770] = {
true,
false,
"deeppink",
},
[228424] = {
true,
false,
"moccasin",
},
[231325] = {
true,
false,
"orange",
},
[167607] = {
true,
false,
"orange",
},
[223994] = {
true,
false,
"lightskyblue",
},
[239836] = {
true,
false,
"orange",
},
[165408] = {
true,
false,
"orange",
},
[130661] = {
true,
false,
"deeppink",
},
[213954] = {
true,
false,
"orange",
},
[166301] = {
true,
false,
"orange",
},
[177808] = {
true,
false,
"moccasin",
},
[176565] = {
true,
false,
"lightskyblue",
},
[223772] = {
true,
false,
"deeppink",
},
[165919] = {
true,
false,
"deeppink",
},
[211341] = {
true,
false,
"orange",
},
[166302] = {
true,
false,
"deeppink",
},
[224219] = {
true,
false,
"deeppink",
},
[216856] = {
true,
false,
"lightskyblue",
},
[223773] = {
true,
false,
"deeppink",
},
[165410] = {
true,
false,
"orange",
},
[213892] = {
true,
false,
"lightskyblue",
},
[223423] = {
true,
false,
"orange",
},
[129370] = {
true,
false,
"deeppink",
},
[234962] = {
true,
false,
"lightskyblue",
},
[223774] = {
true,
false,
"deeppink",
},
[218961] = {
true,
false,
"lightskyblue",
},
[213893] = {
true,
false,
"deeppink",
},
[224221] = {
true,
false,
"orange",
},
[244302] = {
true,
false,
"lightskyblue",
},
[177269] = {
true,
false,
"orange",
},
[220141] = {
true,
false,
"deeppink",
},
[179386] = {
true,
false,
"orange",
},
[223775] = {
true,
false,
"deeppink",
},
[208456] = {
true,
false,
"deeppink",
},
[211089] = {
true,
false,
"orange",
},
[211121] = {
true,
false,
"orange",
},
[212453] = {
true,
false,
"deeppink",
},
[174210] = {
true,
false,
"deeppink",
},
[224732] = {
true,
false,
"deeppink",
},
[237514] = {
true,
false,
"orange",
},
[223776] = {
true,
false,
"deeppink",
},
[130485] = {
true,
false,
"orange",
},
[164921] = {
true,
false,
"deeppink",
},
[211261] = {
true,
false,
"orange",
},
[40167] = {
true,
false,
"deeppink",
},
[179821] = {
true,
false,
"orange",
},
[234933] = {
true,
false,
"orange",
},
[212793] = {
true,
false,
"deeppink",
},
[223777] = {
true,
false,
"deeppink",
},
[165414] = {
true,
false,
"deeppink",
},
[175646] = {
true,
false,
"orange",
},
[207198] = {
true,
false,
"deeppink",
},
[166275] = {
true,
false,
"deeppink",
},
[180348] = {
true,
false,
"orange",
},
[229069] = {
true,
false,
"lightskyblue",
},
[175806] = {
true,
false,
"orange",
},
[217658] = {
true,
false,
"orange",
},
[178165] = {
true,
false,
"orange",
},
[136470] = {
true,
false,
"deeppink",
},
[231014] = {
true,
false,
"moccasin",
},
[166276] = {
true,
false,
"orange",
},
[217531] = {
true,
false,
"orange",
},
[234935] = {
true,
false,
"orange",
},
[180429] = {
true,
false,
"orange",
},
[206694] = {
true,
false,
"moccasin",
},
[175616] = {
true,
false,
"orange",
},
[242631] = {
true,
false,
"orange",
},
[220815] = {
true,
false,
"deeppink",
},
[164185] = {
true,
false,
"orange",
},
[226403] = {
true,
false,
"moccasin",
},
[210966] = {
true,
false,
"orange",
},
[231385] = {
true,
false,
"moccasin",
},
[235151] = {
true,
false,
"lightskyblue",
},
[167612] = {
true,
false,
"orange",
},
[223844] = {
true,
false,
"deeppink",
},
[220626] = {
true,
false,
"orange",
},
[217533] = {
true,
false,
"orange",
},
[213741] = {
true,
false,
"orange",
},
[164557] = {
true,
false,
"orange",
},
[206697] = {
true,
false,
"deeppink",
},
[206696] = {
true,
false,
"moccasin",
},
[226396] = {
true,
false,
"orange",
},
[246285] = {
true,
false,
"orange",
},
[214697] = {
true,
false,
"orange",
},
[214762] = {
true,
false,
"moccasin",
},
[214761] = {
true,
false,
"orange",
},
[220946] = {
true,
false,
"orange",
},
[207940] = {
true,
false,
"orange",
},
[207207] = {
true,
false,
"orange",
},
[151649] = {
true,
false,
"orange",
},
[231496] = {
true,
false,
"lightskyblue",
},
[211290] = {
true,
false,
"moccasin",
},
[177500] = {
true,
false,
"moccasin",
},
[224962] = {
true,
false,
"deeppink",
},
[180433] = {
true,
false,
"lightskyblue",
},
[212786] = {
true,
false,
"orange",
},
[206698] = {
true,
false,
"lightskyblue",
},
[167111] = {
true,
false,
"deeppink",
},
[231497] = {
true,
false,
"moccasin",
},
[213934] = {
true,
false,
"moccasin",
},
[236995] = {
true,
false,
"orange",
},
[216293] = {
true,
false,
"deeppink",
},
[136643] = {
true,
false,
"orange",
},
[173044] = {
true,
false,
"deeppink",
},
[210269] = {
true,
false,
"orange",
},
[163126] = {
true,
false,
"deeppink",
},
[226398] = {
true,
false,
"orange",
},
[179733] = {
true,
false,
"red",
},
[178139] = {
true,
false,
"orange",
},
[179388] = {
true,
false,
"deeppink",
},
[167876] = {
true,
false,
"orange",
},
[179893] = {
true,
false,
"moccasin",
},
[214350] = {
true,
false,
"deeppink",
},
[210812] = {
true,
false,
"deeppink",
},
[242209] = {
true,
false,
"lightskyblue",
},
[178392] = {
true,
false,
"orange",
},
[180336] = {
true,
false,
"deeppink",
},
[180431] = {
true,
false,
"deeppink",
},
[164562] = {
true,
false,
"moccasin",
},
[177817] = {
true,
false,
"deeppink",
},
[178141] = {
true,
false,
"deeppink",
},
[234957] = {
true,
false,
"deeppink",
},
[177816] = {
true,
false,
"lightskyblue",
},
[213937] = {
true,
false,
"orange",
},
[220599] = {
true,
false,
"deeppink",
},
[216340] = {
true,
false,
"lightskyblue",
},
[211228] = {
true,
false,
"deeppink",
},
[214439] = {
true,
false,
"deeppink",
},
[178142] = {
true,
false,
"lightskyblue",
},
[218671] = {
true,
false,
"deeppink",
},
[220196] = {
true,
false,
"deeppink",
},
[179842] = {
true,
false,
"orange",
},
[226404] = {
true,
false,
"orange",
},
[218324] = {
true,
false,
"orange",
},
[234960] = {
true,
false,
"moccasin",
},
[207946] = {
true,
false,
"orange",
},
[133430] = {
true,
false,
"orange",
},
[215405] = {
true,
false,
"orange",
},
[214840] = {
true,
false,
"moccasin",
},
},
["extra_icon_show_enrage_border"] = {
0,
0,
0,
},
["indicator_elite"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
["replaceName"] = false,
["nameplateFlash"] = true,
["colorTick"] = {
1,
1,
1,
1,
},
["colorInterruptSoon"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
["colorInterruptAvailable"] = {
0.25098040699959,
1,
0.25098040699959,
1,
},
["colorNoInterrupt"] = {
0.80000007152557,
0.80000007152557,
0.80000007152557,
1,
},
["colorProtected"] = {
1,
0.25098040699959,
0.25098040699959,
1,
},
["colorSecondaryInterrupt"] = {
1,
0.50196081399918,
0.50196081399918,
1,
},
},
["HooksTemp"] = {
},
["UID"] = "0x63cc19ce2df2342d",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend\n\n\n",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Get players current talent specialization\n    envTable.spec = GetSpecialization()\n    \n    -- Flashing nameplate options\n    envTable.optionsHideFlashSolo = modTable.config.hideNameplateFlashSolo\n    envTable.optionsNameplateFlash = modTable.config.nameplateFlash\n    envTable.optionsHideFlashAsTank = modTable.config.hideFlashAsTank\n    \n    -- Target name options\n    envTable.optionsShowTargetName = modTable.config.showTargetName\n    envTable.optionsReplaceMyName = modTable.config.replaceName\n    envTable.optionsHideNameSolo = modTable.config.hideNameSolo\n    envTable.optionsCastNameSize = modTable.config.castNameSize\n    \n    -- Cast bar interrupt coloring\n    envTable.optionsShowInterruptColor = modTable.config.showInterruptColor\n    envTable.optionsShowSecondaryInterrupts = modTable.config.showSecondaryInterrupts\n    envTable.optionsColorNoInterrupt = modTable.config[\"colorNoInterrupt\"]\n    envTable.optionsColorInterruptAvailable = modTable.config[\"colorInterruptAvailable\"]\n    envTable.optionsColorInterruptSoon = modTable.config[\"colorInterruptSoon\"]\n    envTable.optionsColorSecondaryAvailable = modTable.config[\"colorSecondaryInterrupt\"]\n    envTable.optionsColorProtected = modTable.config[\"colorProtected\"]\n    envTable.optionsColorTick = modTable.config[\"colorTick\"]\n    \n    -- Get the primary interrupt ID of the players current class/spec.\n    -- All non-warlock classes have straight forward primary interrupt skills.\n    if envTable.class ~= 9 then\n        envTable.interruptID = modTable.primaryInterrupts[envTable.class][envTable.spec]\n    else\n        -- Warlock interrupt changes based on pet being used.\n        envTable.interruptID = envTable.GetWarlockInterrupt()\n    end\n    \n    envTable.EnhancedCastBar(unitId, unitFrame.castBar)\nend",
["Initialization"] = "function (modTable)\n    -- List of primary interupt skills used by each spec and class\n    -- Does not track secondary interrupt skills (such as Avenger's shield, etc)\n    modTable.primaryInterrupts =\n    {\n        \n        -- Warrior\n        [1] =\n        {\n            [1] = 6552, -- Pummel (Arms)\n            [2] = 6552, -- Pummel (Fury)\n            [3] = 6552 --  Pummel (Protection)\n        },\n        \n        -- Paladin\n        [2] =\n        {\n            [1] = 96231, -- Rebuke (Holy)\n            [2] = 96231, -- Rebuke (Protection)\n            [3] = 96231 -- Rebuke (Retribution)\n        },\n        \n        -- Hunter\n        [3] =\n        {\n            [1] = 147362, -- Counter Shot (Beast Mastery)\n            [2] = 147362, -- Counter Shot (Marksmanship)\n            [3] = 187707 -- Muzzle (Survival)\n        },\n        \n        -- Rogue\n        [4] =\n        {\n            [1] = 1766, -- Kick (Assassination)\n            [2] = 1766, -- Kick (Outlaw)\n            [3] = 1766 -- Kick (Subtlety)\n        },\n        \n        -- Priest\n        [5] =\n        {\n            [1] = nil,\n            [2] = nil,\n            [3] = 15487 -- Silence (Shadow)\n        },\n        \n        -- Death Knight\n        [6] =\n        {\n            [1] = 47528, -- Mind Freeze (Blood)\n            [2] = 47528, -- Mind Freeze (Frost)\n            [3] = 47528 -- Mind Freeze (Unholy)\n        },\n        \n        -- Shaman\n        [7] =\n        {\n            [1] = 57994, -- Wind Shear (Elemental)\n            [2] = 57994, -- Wind Shear (Enhancement)\n            [3] = 57994 -- Wind Shear (Restoration)\n        },\n        \n        -- Mage\n        [8] =\n        {\n            [1] = 2139, -- Counterspell (Arcane)\n            [2] = 2139, -- Counterspell (Fire)\n            [3] = 2139 -- Counterspell (Frost)\n        },\n        \n        -- [9] Warlock interrupt depends on pet being used.\n        --  Code for warlock contained in Cast Start hook.\n        \n        -- Monk\n        [10] =\n        {\n            [1] = 116705, -- Spear Hand Strike (Brewmaster)\n            [2] = 116705, -- Spear Hand Strike (Mistweaver)\n            [3] = 116705 -- Spear Hand Strike (Windwalker)\n        },\n        \n        -- Druid\n        [11] =\n        {\n            [1] = 78675, -- Solar Beam (Balance)\n            [2] = 106839, -- Skull Bash (Feral)\n            [3] = 106839, -- Skull Bash (Guardian)\n            [4] = 106839 -- Skull Bash (Restoration)\n        },\n        \n        -- Demon Hunter\n        [12] =\n        {\n            [1] = 183752, -- Disrupt (Havoc)\n            [2] = 183752 -- Disrupt (Vengeance)\n        },\n        \n        -- Evoker\n        [13] =\n        {\n            [1] = 351338, -- Quell (Devastation)\n            [2] = 351338 -- Quell (Preservation)\n        }\n    }\n    \nend\n\n\n",
["Constructor"] = "function(self, unitId, unitFrame, envTable, modTable)\n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    if not unitFrame.castBar.tick then\n        unitFrame.castBar.tick = unitFrame.castBar:CreateTexture (nil, \"overlay\")\n        unitFrame.castBar.tick:SetDrawLayer (\"overlay\", 4)\n        unitFrame.castBar.tick:SetBlendMode (\"DISABLE\")\n        unitFrame.castBar.tick:SetHeight(unitFrame.castBar:GetHeight())\n    end\n    unitFrame.castBar.tick:SetTexture(Plater.SparkTextures[8])\n    unitFrame.castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n    unitFrame.castBar.tick:SetWidth(2)\n    \n    \n    function envTable.EnhancedCastBar(unitId, castBar)\n        castBar.tick:Hide()\n        \n        if castBar.IsInterrupted then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        \n        if UnitExists(targetUnitId) then\n            local targetName = UnitName(targetUnitId)\n            local spellID = castBar.SpellID\n            if BigWigsAPI then\n                spellName =  BigWigsAPI.GetSpellRename(spellID) or castBar.spellName\n            else\n                spellName = castBar.spellName\n            end\n            local inParty = UnitInParty(\"player\")\n            local inRaid = UnitInRaid(\"player\")\n            castBar.Text:SetText(spellName)\n            \n            -- Cast is targetting a specific unit\n            if targetName then\n                \n                local isTargettingMe\n                local targetNameByColor\n                \n                -- Determine if the cast is targetting the player character\n                if targetName == UnitName(\"player\") then\n                    isTargettingMe = true\n                else\n                    isTargettingMe = false\n                end\n                \n                -- Nameplate flash options\n                if isTargettingMe then\n                    if envTable.optionsNameplateFlash then\n                        \n                        -- Default value of true since it is turned on in the options\n                        local showNameplateFlash = true\n                        \n                        -- Hide flash when not in a group\n                        if envTable.optionsHideFlashSolo then\n                            if not inParty and not inRaid then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Hide flash when player is a tank specialization\n                        if envTable.optionsHideFlashAsTank then\n                            if GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                                showNameplateFlash = false\n                            end\n                        end\n                        \n                        -- Show nameplate flash if conditions met\n                        if showNameplateFlash then\n                            Plater.FlashNameplateBody (unitFrame)\n                        end\n                    end\n                end\n                \n                \n                -- Target name in cast bar options\n                if envTable.optionsShowTargetName then\n                    \n                    -- Change character name to \"Me\" if turned on in options\n                    if envTable.optionsReplaceMyName then\n                        if isTargettingMe then\n                            targetName = \"Me\"\n                        end\n                    end\n                    \n                    -- Color the target name based on the targets class color\n                    targetNameByColor = Plater.SetTextColorByClass (targetUnitId, targetName)\n                    \n                    -- Shrink the name of the cast bar text if necessary (based on options)\n                    local castBarWidth = castBar:GetWidth()\n                    DetailsFramework:TruncateText (castBar.Text, castBarWidth * (envTable.optionsCastNameSize / 100))\n                    \n                    -- Update the cast bar text\n                    local currentText = castBar.Text:GetText()\n                    if currentText ~= nil and currentText ~= '' then\n                        local castText = currentText .. \" - \" ..  targetNameByColor\n                        \n                        -- Hide self target name when solo\n                        if envTable.optionsHideNameSolo then\n                            if not inParty and not inRaid then\n                                if isTargettingMe then\n                                    castText = currentText\n                                end\n                            end\n                        end\n                        castBar.Text:SetText(castText)\n                        DetailsFramework:TruncateText (castBar.Text, castBarWidth)\n                    end\n                end\n            end\n            \n            \n            -- Interrupt bar color options\n            if envTable.optionsShowInterruptColor then\n                local canInterrupt = castBar.canInterrupt\n                local castEndTime = castBar.spellEndTime\n                local interruptReadyTime = 0\n                local start\n                local duration\n                local playerIsWarlock\n                \n                if envTable.interruptID ~= nil then\n                    local cd = C_Spell.GetSpellCooldown(envTable.interruptID)  --local\n                    start, duration  =  cd.startTime, cd.duration\n                    interruptReadyTime = start + duration\n                end\n                \n                if canInterrupt then\n                    if envTable.interruptID ~= nil then\n                        \n                        -- Is the player a warlock?\n                        if envTable.class == 9 then\n                            playerIsWarlock = true\n                        else\n                            playerIsWarlock = false\n                        end\n                        \n                        -- Check to see if the spell is known/talented\n                        if IsSpellKnown(envTable.interruptID, playerIsWarlock) then\n                            if interruptReadyTime == 0 then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptAvailable)\n                            elseif envTable.optionsShowSecondaryInterrupts and envTable.class == 2 and IsSpellKnown(31935) and not envTable.isSpellOnCooldown_IgnoreGCD(31935) then\n                                -- Paladin Avenger's Shield\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorSecondaryAvailable)\n                            elseif interruptReadyTime < (castEndTime - 0.25) then\n                                castBar.tick:Show()\n                                castBar.tick:SetVertexColor(Plater:ParseColors(envTable.optionsColorTick))\n                                local tickLocation = (start + duration - castBar.spellStartTime) / castBar.maxValue  -- castBar.spellStartTime + 0.25\n                                if castBar.channeling then\n                                    tickLocation = 1 - tickLocation\n                                end\n                                castBar.tick:SetPoint (\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                                \n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorInterruptSoon)\n                            elseif interruptReadyTime >= (castEndTime - 0.25) then\n                                Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                            end\n                        else\n                            Plater.SetCastBarColor(unitFrame, envTable.optionsColorNoInterrupt)\n                        end\n                    end\n                else\n                    Plater.SetCastBarColor(unitFrame, envTable.optionsColorProtected)\n                end\n                \n            end\n            \n        end\n    end\n    \n    \n    -- Checks to see if Felgaurd or Felhunter interrupt skill is known and assigns if found\n    function envTable.GetWarlockInterrupt()\n        if IsSpellKnown(89766, true) then\n            -- Felguard: Axe Toss\n            return 89766\n        elseif IsSpellKnown(19647, true) then\n            -- Felhunter: Spell Lock\n            return 19647\n        elseif C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnown(132409, true) then\n            -- Check for Grimoire of Sacrifice\n            return 132409\n        else\n            -- Otherwise no interrupt available    \n            return nil\n        end\n    end\n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    function envTable.isSpellOnCooldown_IgnoreGCD(spellID)\n        local GCD=C_Spell.GetSpellCooldown(61304) -- GCD\n        local gcdSTART, gcdDUR = GCD.startTime, GCD.duration\n        local GCD_expirationTime = gcdSTART + gcdDUR\n        local info = C_Spell.GetSpellCooldown(spellID)\n        local spellStart, spellDuration  = info.startTime, info.duration\n        local spellReadyTime = spellStart + spellDuration\n        if spellReadyTime <= GCD_expirationTime then\n            return false\n        else\n            return true\n        end\n    end\n    \nend",
},
["Time"] = 1753401350,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/L6ZlsbPEC/9",
["Icon"] = 429383,
["Enabled"] = true,
["Revision"] = 1349,
["semver"] = "1.2.3",
["Author"] = "Nimeshady-Zul'jin",
["Desc"] = "Shows who a cast is targeting in the cast bar as well as other configurable options.",
["Prio"] = 99,
["version"] = 9,
["PlaterCore"] = 1,
["Name"] = "Enhanced Enemy Castbar",
["Options"] = {
{
["Type"] = 5,
["Name"] = "CUSTOM CAST BAR COLORS",
["Value"] = "Feature - Custom cast bar coloring:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable custom colored enemy cast bars.",
["Value"] = true,
["Key"] = "showInterruptColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting the cast bar will change to the colors below based on the status of you being able to interrupt the cast.",
},
{
["Type"] = 4,
["Name"] = "Enable support for secondary interrupts: Avenger's Shield (Paladin), Spell Reflection (Warrior).",
["Value"] = true,
["Key"] = "showSecondaryInterrupts",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colors casts that can be reflected with Spell Reflection (Warrior) and interrupted with Avenger's Shield (Paladin).",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is available.",
["Value"] = {
0.10980392992496,
0.63921570777893,
0.1843137294054,
1,
},
["Key"] = "colorInterruptAvailable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is down but will be available before cast finishes.",
["Value"] = {
0.63921570777893,
0.61568629741669,
0.10980392992496,
1,
},
["Key"] = "colorInterruptSoon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt on cooldown but it will be available to interrupt the current cast.",
},
{
["Type"] = 1,
["Name"] = "Color when my primary interrupt is unavailable.",
["Value"] = {
0.61960786581039,
0.16862745583057,
0.28627452254295,
1,
},
["Key"] = "colorNoInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you do not have an interrupt available to interrupt the current cast",
},
{
["Type"] = 1,
["Name"] = "Color for secondary interrupts. (Avenger's Shield and Spell Reflection)",
["Value"] = {
0.10980392992496,
0.52156865596771,
0.63921570777893,
1,
},
["Key"] = "colorSecondaryInterrupt",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast targeting you can be reflected with Spell Reflection or interrupted with Avenger's Shield. Only active when playing the appropriate class with the skill off cooldown.",
},
{
["Type"] = 1,
["Name"] = "Color for casts that are protected/un-interruptable.",
["Value"] = {
0.22352942824364,
0.22352942824364,
0.22352942824364,
1,
},
["Key"] = "colorProtected",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast can not be interrupted by a standard interrupt.",
},
{
["Type"] = 1,
["Name"] = "Color of interrupt available tick. (Hover for more info)",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Key"] = "colorTick",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "When your interrupt is currently down but will become available before the current cast completes a tick will appear in the cast bar showing you the exact position in the cast you will be able to interrupt the cast. You can customize the color of the tick using this setting.  YOU MUST /RELOAD YOUR UI AFTER CHANGING THIS COLOR.",
},
{
["Type"] = 5,
["Name"] = "Settings Target Name",
["Value"] = "Feature - Show name of target in the cast bar:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show the name of cast targets in the cast bar.",
["Value"] = true,
["Key"] = "showTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting a spell at a target, the targets name will appear in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Hide my name when not in a party.",
["Value"] = true,
["Key"] = "hideNameSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When you are not in a party or raid group casts targetting you will not display your name in the cast bar.",
},
{
["Type"] = 4,
["Name"] = "Show \"Me\" instead of my character name.",
["Value"] = true,
["Key"] = "replaceName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When targetted by casts, instead of showing your character name it will show \"Me\".",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "The relative size (in percentage) that a spell name will take up of the cast bar, not including the target name. Adjust this so that target names fit into the cast bar correctly based on the width and text size of your cast bar. If you find even after adjusting this setting that there is not enough space try decreasing your cast bar text size or making the cast bar wider.",
["Min"] = 30,
["Name"] = "Maximum length of a cast name in %. Hover for more info.",
["Value"] = 60,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castNameSize",
},
{
["Type"] = 5,
["Name"] = "Settings Border Flash",
["Value"] = "Feature - Flash nameplates when a spell targets you:",
["Key"] = "option8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Namplate Flash",
},
{
["Type"] = 4,
["Name"] = "Flash the nameplates of enemies that are casting a spell or ability targeting me.",
["Value"] = false,
["Key"] = "nameplateFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is targetting you with a cast, this option will flash the nameplate of that enemy to indicate that cast is targeting you.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when not in a party.",
["Value"] = true,
["Key"] = "hideNameplateFlashSolo",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing solo.",
},
{
["Type"] = 4,
["Name"] = "Hide flash effect when I'm playing a tank specialization.",
["Value"] = true,
["Key"] = "hideFlashAsTank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing as a tank specialization.",
},
},
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --ensure reload updates existing\n    modTable.updateExisting(unitFrame)\nend\n\n\n",
["Initialization"] = "function (modTable)\n    \n    \n    -- settings:\n    local formatAuraTimers = modTable.config.formatAuraTimers\n    local formatBuffSpecialTimers = modTable.config.formatBuffSpecialTimers\n    \n    \n    -- time formatting function: (can be adjusted)\n    Plater.FormatTimeNew = function (s)\n        if s < 5 then\n            return (\"%.1f\"):format(s)\n        elseif s < 60 then\n            return (\"%d\"):format(s)\n        elseif s < 3600 then\n            return (\"%d:%02d\"):format(s/60%60, s%60)\n        elseif s < 86400 then\n            return (\"%dh %02dm\"):format(s/(3600), s/60%60)\n        else\n            return (\"%dd %02dh\"):format(s/86400, (s /3600) - (floor(s/86400) * 24))\n        end\n    end\n    Plater.FormatTimeOrig = Plater.FormatTimeOrig or Plater.FormatTime\n    \n    local DF = _G[\"DetailsFramework\"]\n    local IconRowFunctions = DF.IconRowFunctions or DF.IconMixin\n    IconRowFunctions.FormatCooldownTimeOrig = IconRowFunctions.FormatCooldownTimeOrig or IconRowFunctions.FormatCooldownTime\n    \n    \n    -- exchange formatting:\n    function modTable.hookTimeFormat()\n        if formatAuraTimers then\n            Plater.FormatTime = Plater.FormatTimeNew\n        else\n            Plater.FormatTime = Plater.FormatTimeOrig\n        end\n        \n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                IconRowFunctions.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n        else\n            -- no buff special\n            if IconRowFunctions.FormatCooldownTime then\n                IconRowFunctions.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            end\n        end\n    end\n    \n    function modTable.updateExisting(unitFrame)\n        \n        if formatBuffSpecialTimers then\n            \n            -- change time formatting for the Buff Special icons\n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = Plater.FormatTimeNew\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeNew (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        else\n            \n            if unitFrame.ExtraIconFrame.FormatCooldownTime then\n                unitFrame.ExtraIconFrame.FormatCooldownTime = IconRowFunctions.FormatCooldownTimeOrig\n            else\n                unitFrame.ExtraIconFrame.SetIcon = function (self, spellId, borderColor, startTime, duration, forceTexture, descText, count, debuffType, caster, canStealOrPurge)\n                    \n                    local spellName, _, spellIcon\n                    \n                    if (not forceTexture) then\n                        spellName, _, spellIcon = GetSpellInfo (spellId)\n                    else\n                        spellIcon = forceTexture\n                    end\n                    \n                    if (spellIcon) then\n                        local iconFrame = self:GetIcon()\n                        iconFrame.Texture:SetTexture (spellIcon)\n                        iconFrame.Texture:SetTexCoord (unpack (self.options.texcoord))\n                        \n                        if (borderColor) then\n                            iconFrame:SetBackdropBorderColor (Plater:ParseColors (borderColor))\n                        else\n                            iconFrame:SetBackdropBorderColor (0, 0, 0 ,0)\n                        end    \n                        \n                        if (startTime) then\n                            CooldownFrame_Set (iconFrame.Cooldown, startTime, duration, true, true)\n                            \n                            if (self.options.show_text) then\n                                iconFrame.CountdownText:Show()\n                                \n                                local formattedTime = Plater.FormatTimeOrig (startTime + duration - GetTime())\n                                \n                                iconFrame.CountdownText:SetPoint (self.options.text_anchor or \"center\", iconFrame, self.options.text_rel_anchor or \"center\", self.options.text_x_offset or 0, self.options.text_y_offset or 0)\n                                DF:SetFontSize (iconFrame.CountdownText, self.options.text_size)\n                                DF:SetFontFace (iconFrame.CountdownText, self.options.text_font)\n                                DF:SetFontOutline (iconFrame.CountdownText, self.options.text_outline)\n                                iconFrame.CountdownText:SetText (formattedTime)\n                                iconFrame.Cooldown:SetHideCountdownNumbers (true)\n                            else\n                                iconFrame.CountdownText:Hide()\n                                iconFrame.Cooldown:SetHideCountdownNumbers (false)\n                            end\n                        else\n                            iconFrame.CountdownText:Hide()\n                        end\n                        \n                        if (descText and self.options.desc_text) then\n                            iconFrame.Desc:Show()\n                            iconFrame.Desc:SetText (descText.text)\n                            iconFrame.Desc:SetTextColor (DF:ParseColors (descText.text_color or self.options.desc_text_color))\n                            iconFrame.Desc:SetPoint(self.options.desc_text_anchor or \"bottom\", iconFrame, self.options.desc_text_rel_anchor or \"top\", self.options.desc_text_x_offset or 0, self.options.desc_text_y_offset or 2)\n                            DF:SetFontSize (iconFrame.Desc, descText.text_size or self.options.desc_text_size)\n                            DF:SetFontFace (iconFrame.Desc, self.options.desc_text_font)\n                            DF:SetFontOutline (iconFrame.Desc, self.options.desc_text_outline)\n                        else\n                            iconFrame.Desc:Hide()\n                        end\n                        \n                        if (count and count > 1 and self.options.stack_text) then\n                            iconFrame.StackText:Show()\n                            iconFrame.StackText:SetText (count)\n                            iconFrame.StackText:SetTextColor (DF:ParseColors (self.options.desc_text_color))\n                            iconFrame.StackText:SetPoint (self.options.stack_text_anchor or \"center\", iconFrame, self.options.stack_text_rel_anchor or \"bottomright\", self.options.stack_text_x_offset or 0, self.options.stack_text_y_offset or 0)\n                            DF:SetFontSize (iconFrame.StackText, self.options.stack_text_size)\n                            DF:SetFontFace (iconFrame.StackText, self.options.stack_text_font)\n                            DF:SetFontOutline (iconFrame.StackText, self.options.stack_text_outline)\n                        else\n                            iconFrame.StackText:Hide()\n                        end\n                        \n                        if PixelUtil then\n                            PixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        else\n                            DFPixelUtil.SetSize (iconFrame, self.options.icon_width, self.options.icon_height)\n                        end\n                        iconFrame:Show()\n                        \n                        --> update the size of the frame\n                        self:SetWidth ((self.options.left_padding * 2) + (self.options.icon_padding * (self.NextIcon-2)) + (self.options.icon_width * (self.NextIcon - 1)))\n                        self:SetHeight (self.options.icon_height + (self.options.top_padding * 2))\n                        \n                        --> make information available\n                        iconFrame.spellId = spellId\n                        iconFrame.startTime = startTime\n                        iconFrame.duration = duration\n                        iconFrame.count = count\n                        iconFrame.debuffType = debuffType\n                        iconFrame.caster = caster\n                        iconFrame.canStealOrPurge = canStealOrPurge\n                        \n                        --> show the frame\n                        self:Show()\n                        \n                        return iconFrame\n                    end\n                end\n            end\n            \n        end\n        \n    end\n    \n    \n    modTable.hookTimeFormat()\n    for _, plateFrame in ipairs (Plater.GetAllShownPlates()) do\n        modTable.updateExisting(plateFrame.unitFrame)\n    end\n    \nend",
["Player Logon"] = "function(modTable)\n    modTable.hookTimeFormat()\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1753401349,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/mULsbUUxJ/13",
["Icon"] = "INTERFACE\\ICONS\\Ability_BossMagistrix_TimeWarp2",
["Enabled"] = true,
["Revision"] = 251,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Overwrites the Plater time formatting to show second fractions.",
["Prio"] = 99,
["version"] = 13,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Format Aura Timers",
["Value"] = true,
["Key"] = "formatAuraTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Format Buff Special Timers",
["Value"] = true,
["Key"] = "formatBuffSpecialTimers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["LastHookEdited"] = "",
["Name"] = "Detailed Time Format",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsVisible()) then\n                if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n                end \n            end\n            \n        end\n    end\n    \n    \n    for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        if auraIcon:IsShown() then\n            if (auraIcon:IsVisible()) then\n                local remainingTime = (auraIcon.startTime + auraIcon.duration - GetTime())\n                if (remainingTime < envTable.Timers.critical) then\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.critical)\n                else\n                    Plater:SetFontColor (auraIcon.CountdownText, envTable.Colors.okay)\n                end\n            end\n        end\n    end\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"#FF4040\",\n        okay = \"#FFFFFF\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 5.0,\n    }\n    \nend\n\n\n",
},
["Time"] = 1753401351,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/CjOSTakvH/1",
["Icon"] = "Interface\\Timer\\Challenges-Logo",
["Enabled"] = true,
["Revision"] = 125,
["semver"] = "1.0.0",
["Author"] = "Ditador-Azralon",
["Desc"] = "Change the color of the aura timer by it's time left",
["Prio"] = 99,
["version"] = 1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Paint Aura Timers",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = .5 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (r, g, b, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Time"] = 1741738545,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 134400,
["Enabled"] = true,
["Revision"] = 202,
["semver"] = "",
["Author"] = "????????-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Debuff Border",
},
{
["OptionsValues"] = {
["showBigIcon"] = false,
["SpellIconXOffset"] = 0,
["ReplaceDefaultBorder"] = false,
["TargetBorderSize"] = 1.5,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, nil)\nend",
["Destructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar.border then unitFrame.healthBar.border:Hide() end\n    if unitFrame.healthBar.targetBorder then unitFrame.healthBar.targetBorder:Hide() end\n    if unitFrame.castBar.border then unitFrame.castBar.border:Hide() end\n    if unitFrame.castBar.Icon then unitFrame.castBar.Icon:Hide() end\n    if unitFrame.castBar.IconBorder then unitFrame.castBar.IconBorder:Hide() end\n    if unitFrame.castBar.BorderShield then unitFrame.castBar.BorderShield:Hide() end\nend",
["Initialization"] = "function (modTable)\n    \n    function modTable.UpdateIconPosition(unitFrame, envTable, modTable)\n        local castBar = unitFrame.castBar\n        local icon = unitFrame.castBar.Icon\n        local shield = unitFrame.castBar.BorderShield\n        icon:Hide()\n        castBar.IconBorder:Hide()\n        if (modTable.config.ShowSpellIcon) then\n            icon:ClearAllPoints()\n            if (modTable.config.showBigIcon) then\n                icon:SetPoint(\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetPoint(\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            else\n                icon:SetPoint(\"topright\", unitFrame.castBar, \"topleft\", modTable.config.SpellIconXOffset, envTable.IconSizeOffset)\n                icon:SetPoint(\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.SpellIconXOffset, 0)\n                icon:SetWidth(icon:GetHeight())\n            end\n            icon:Show()\n            if modTable.config.SpellIconBorder then\n                castBar.IconBorder:SetVertexColor(\n                    DetailsFramework:ParseColors(modTable.config.SpellIconBorderColor)\n                )\n                castBar.IconBorder:SetBorderSizes(\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize,\n                    modTable.config.SpellIconBorderSize\n                )\n                castBar.IconBorder:UpdateSizes()\n                castBar.IconBorder:Show()\n            end\n        end\n        \n        if modTable.config.CastBarBorder then\n            castBar.border:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.CastBarBorderColor)\n            )\n            castBar.border:SetBorderSizes(\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize,\n                modTable.config.CastBarBorderSize\n            )\n            castBar.border:UpdateSizes()\n            castBar.border:Show()\n        else\n            castBar.border:Hide()\n        end\n        \n        if (modTable.config.ShowShieldIcon and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            shield:SetSize(modTable.config.ShieldIconWidth, modTable.config.ShieldIconHeight)\n            shield:ClearAllPoints()\n            shield:SetPoint( \"center\", castBar, \"left\", modTable.config.ShieldIconXOffset, modTable.config.ShieldIconYOffset )\n        else\n            shield:Hide()\n        end\n    end\n    \n    function modTable.UpdateBorder(unitFrame, envTable, modTable, casting)\n        local healthBar = unitFrame.healthBar\n        local castBar = unitFrame.castBar\n        local targetBorder = unitFrame.healthBar.targetBorder\n        local defaultBorder = unitFrame.healthBar.border\n        \n        targetBorder:Hide()\n        defaultBorder:Hide()\n        \n        if modTable.config.ReplaceDefaultBorder then\n            targetBorder = unitFrame.healthBar.border\n            targetBorder:SetFrameStrata(\"HIGH\")\n            targetBorder:Show()\n        else\n            unitFrame.healthBar.border:Show()\n            if unitFrame.IsTarget then\n                targetBorder:Show()\n            end\n        end\n        \n        if casting==true then\n            if modTable.config.ShowSpellIcon then\n                targetBorder:ClearAllPoints()\n                if modTable.config.ExpandTargetBorder then\n                    if modTable.config.showBigIcon then\n                        targetBorder:SetPoint(\"topleft\", castBar.Icon, \"topleft\", 0, 0)\n                    else\n                        targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                    end\n                else\n                    targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                end\n                if modTable.config.ExpandTargetBorder then\n                    targetBorder:SetPoint(\"bottomright\", castBar, \"bottomright\", 0, 0)\n                else\n                    targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0)\n                end\n            else\n                targetBorder:ClearAllPoints()\n                targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n                targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0)\n            end\n            \n        elseif casting==false then\n            targetBorder:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n            targetBorder:SetPoint(\"bottomright\", healthBar, \"bottomright\", 0, 0) \n        end\n        \n        if unitFrame.IsTarget then\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(modTable.config.TargetBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize,\n                modTable.config.TargetBorderSize\n            )\n            targetBorder:UpdateSizes()\n        else\n            targetBorder:SetVertexColor(\n                DetailsFramework:ParseColors(envTable.DefaultBorderColor)\n            )\n            targetBorder:SetBorderSizes(\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize,\n                envTable.DefaultBorderSize\n            )\n            targetBorder:UpdateSizes()\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --insert code here\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    modTable.UpdateBorder (unitFrame, envTable, modTable, true)\nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateBorder(unitFrame, envTable, modTable, false)\nend\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.UpdateIconPosition (unitFrame, envTable, modTable)\n    self.ThrottleUpdate = -1\nend\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- Any settings changed here will require you to disable this plater mod,\n    -- then re-enable it by checking the box in the list on the left hand side of the window\n    \n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 0\n    \n    -- Settings for the shield for non interruptible casts\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    \n    envTable.DefaultBorderSize  = Plater.db.profile.border_thickness\n    envTable.DefaultBorderColor = Plater.db.profile.border_color\n    \n    -- Create a new health bar target border\n    if not unitFrame.healthBar.targetBorder then\n        unitFrame.healthBar.targetBorder = CreateFrame(\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.healthBar.targetBorder:Hide()\n    end\n    \n    -- Create a frame for the spell icon border\n    if not unitFrame.castBar.IconOverlayFrame then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.IconBorder:SetIgnoreParentScale(false)\n    end\n    \n    -- Create a frame for the cast bar border\n    if not unitFrame.castBar.border then\n        unitFrame.castBar.border = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n        unitFrame.castBar.border:SetIgnoreParentScale(false)\n    end\n    \n    -- Hook into when the cast bar hides so we can update the border with casting set to false\n    -- Note: This hook needs to be the last thing in the constructor as it may immediately call\n    -- UpdateBorder and we need to make sure all of the frames are created first\n    if not unitFrame.castBar.borderChangeHooked then\n        hooksecurefunc(\n            unitFrame.castBar, \n            \"Hide\",\n            function()\n                modTable.UpdateBorder(unitFrame, envTable, modTable, false)\n            end\n        )\n        unitFrame.castBar.borderChangeHooked = true\n    end\nend",
},
["Time"] = 1754339130,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 1651,
["semver"] = "",
["Author"] = "Vahra-Tichondrius",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate and extend the border around icon and cast bar.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Border Settings",
["Value"] = "Border Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Target Border Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "TargetBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of the targeted nameplate",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Target Border Size",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "TargetBorderSize",
},
{
["Type"] = 4,
["Name"] = "Expand Target Border",
["Value"] = true,
["Key"] = "ExpandTargetBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Expands the target border around the cast icon and cast bar",
},
{
["Type"] = 4,
["Name"] = "Replace Default Border (/reload)",
["Value"] = true,
["Key"] = "ReplaceDefaultBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Replace the default border instead of creating a new one. You may have to /reload when changing this option",
},
{
["Type"] = 5,
["Name"] = "Cast Bar Settings",
["Value"] = "Cast Bar Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "Note, to get this to look right you may have",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "to update the Y offset of the cast bar",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Note",
["Value"] = "under Plater's \"Enemy Npc\" settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Border",
["Value"] = true,
["Key"] = "CastBarBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show a border around the enemy cast bar",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the enemy cast bar",
["Min"] = 0,
["Name"] = "Cast Bar Border Size",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "CastBarBorderSize",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "CastBarBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of enemy cast bar",
},
{
["Type"] = 5,
["Name"] = "Cast Icon Settings",
["Value"] = "Cast Icon Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Spell Icon",
["Value"] = true,
["Key"] = "ShowSpellIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should show the spell icon of the targets cast",
},
{
["Type"] = 4,
["Name"] = "Show Big Icon",
["Value"] = false,
["Key"] = "showBigIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Spell Icon Border",
["Value"] = true,
["Key"] = "SpellIconBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If the nameplate should Show a border around the spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The size of the border around the targeted nameplate",
["Min"] = 0,
["Name"] = "Spell Icon Border Size",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "SpellIconBorderSize",
},
{
["Type"] = 1,
["Name"] = "Spell Icon Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "SpellIconBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The border color of target's spell icon",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X Offset of the Spell Icon",
["Min"] = -10,
["Name"] = "Spell Icon X Offset",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "SpellIconXOffset",
},
{
["Type"] = 5,
["Name"] = "Shield Icon Settings",
["Value"] = "Shield Icon Settings",
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Shield Icon",
["Value"] = false,
["Key"] = "ShowShieldIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show a shield icon next to the cast bar for uninterruptable spells",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The X offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon X Offset",
["Value"] = -4.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconXOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "The Y offset of the shield icon",
["Min"] = -10,
["Name"] = "Shield Icon Y Offset",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconYOffset",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The width of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Width",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconWidth",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "The height of the shield icon",
["Min"] = 0,
["Name"] = "Shield Icon Height",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "ShieldIconHeight",
},
},
["LastHookEdited"] = "",
["Name"] = "Target Border",
},
{
["OptionsValues"] = {
["colour_names"] = false,
["show_elite"] = false,
["show_elite_text"] = true,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Initialization"] = "function(modTable)\n    \n    -- used for nameColouring\n    -- AARRGGBB\n    local markerToHex = {\n        [1] = \"FFEAEA0D\", -- Yellow 5 Point Star\n        [2] = \"FFEAB10D\", -- Orange Circle\n        [3] = \"FFCD00FF\", -- Purple Diamond\n        [4] = \"FF06D425\", -- Green Triangle\n        [5] = \"FFB3E3D8\", -- Light Blue Moon\n        [6] = \"FF0CD2EA\", -- Blue Square\n        [7] = \"FFD6210B\", -- Red Cross\n        [8] = \"FFFFFFFF\", -- White Skull\n    }\n    \n    local eliteToHex = {\n        [1] = \"FFFFCC00\", -- Elite\n        [2] = \"FFCCCCCC\", -- Rare\n        [3] = \"FFFF8040\", -- Rare Elite\n    }\n    \n    -- Makes it so you take their first name e.g Jessie Howlis -> Jessie\n    local nameBlacklist = {\n        [\"the\"] = true,\n        [\"of\"] = true,\n        [\"Tentacle\"] = true,\n        [\"Apprentice\"] = true,\n        [\"Denizen\"] = true,\n        [\"Emissary\"] = true,\n        [\"Howlis\"] = true,\n        [\"Terror\"] = true,\n        [\"Totem\"] = true,\n        [\"Waycrest\"] = true,\n        [\"Aspect\"] = true\n    }\n    \n    \n    -- @unitId  unitID for mob e.g nameplate1\n    function modTable.renamer(unitFrame, unitId)\n        \n        if not (unitId and unitFrame) then\n            return\n        end\n        \n        local name = unitFrame.namePlateUnitName or UnitName(unitId) or \"\"\n        \n        -- 1) shorten\n        if modTable.config[\"short_names\"] and not unitFrame.unitName.isRenamed then\n            local unitName\n            local a, b, c, d, e, f = strsplit(' ', name, 5)\n            if nameBlacklist[b] then\n                unitName = a or b or c or d or e or f\n            else\n                unitName = f or e or d or c or b or a\n            end\n            name = unitName or name\n        end -- if short_names\n        \n        \n        -- 2) Coloring\n        if modTable.config[\"colour_names\"] then\n            local marker = GetRaidTargetIndex(unitId)\n            if marker then\n                local color = markerToHex[marker or 8]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        -- 3) Rare / Elite Addition\n        if modTable.config[\"show_elite\"] then\n            local eliteType = UnitClassification(unitId)\n            if eliteType == \"elite\" then\n                local color = eliteToHex[1]\n                name = WrapTextInColorCode(name, color)\n            elseif eliteType == \"rare\" then\n                local color = eliteToHex[2]\n                name = WrapTextInColorCode(name, color)\n            elseif eliteType == \"rareelite\" then\n                local color = eliteToHex[3]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        if modTable.config[\"show_elite_text\"] then\n            local eliteType = UnitClassification(unitId)\n            if eliteType == \"elite\" and not IsInRaid() then\n                name = name .. \" [E]\"\n            elseif eliteType == \"rare\" and not IsInRaid() then\n                name = name .. \" [R]\"\n            elseif eliteType == \"rareelite\" and not IsInRaid() then\n                name = name .. \" [RE]\"\n            end\n        end\n        \n        -- 4) Apply\n        unitFrame.healthBar.unitName:SetText(name)\n    end -- envTable.namer\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend\n\n\n\n",
},
["Time"] = 1753401491,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 385,
["semver"] = "",
["Author"] = "Rhk-Tarren Mill",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Name"] = "Shorten Names",
["Value"] = true,
["Key"] = "short_names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Shortens NPC Names. eg.: \"Murkbrine Fishmancer\" -> \"Fishmancer\"",
},
{
["Type"] = 4,
["Name"] = "Colour by Raidmark",
["Value"] = true,
["Key"] = "colour_names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colours the Name by the assigned Raidmark. eg.: Triangle --> Green Name",
},
{
["Type"] = 4,
["Name"] = "Colour by Unit Status",
["Value"] = true,
["Key"] = "show_elite",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "show_elite_text",
["Value"] = true,
["Name"] = "Concatenate Name with Unit Status",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["LastHookEdited"] = "Initialization",
["Name"] = "Name Shortener",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function(self, unitId, unitFrame, envTable)\n    unitFrame.castBar.ScheduleToHide = function(self) self:Hide() end\nend",
},
["Time"] = 1753401352,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Enabled"] = true,
["Revision"] = 97,
["semver"] = "",
["Author"] = "Avade-Illidan",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Hide Interrupted",
},
{
["OptionsValues"] = {
["raidMarkerXOff"] = 1,
["unitNameXOffRaidMarker"] = 3,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.updatePosition = function(unitFrame)\n        local unitNameXOff = modTable.config.unitNameXOff -- Unit Name X Offset\n        local unitNameXOffRaidMarker = modTable.config.unitNameXOffRaidMarker -- Unit Name X Offset with Raid Marker\n        local raidMarkerXOff = modTable.config.raidMarkerXOff\n        local hasRaidTarget = unitFrame.PlaterRaidTargetFrame.RaidTargetIcon:IsShown() and unitFrame.PlaterRaidTargetFrame\n        if hasRaidTarget then\n            unitFrame.PlaterRaidTargetFrame:ClearAllPoints()\n            unitFrame.PlaterRaidTargetFrame:SetPoint(\"LEFT\", unitFrame.healthBar, \"LEFT\", raidMarkerXOff, 0)\n            unitFrame.PlaterRaidTargetFrame:SetSize(18, 18)\n            unitFrame.unitName:SetPoint(\"LEFT\", unitFrame.PlaterRaidTargetFrame, \"RIGHT\", unitNameXOffRaidMarker, 0)\n        else\n            unitFrame.unitName:ClearAllPoints()\n            unitFrame.unitName:SetPoint(\"LEFT\", unitFrame.healthBar, \"LEFT\", unitNameXOff, 0)\n        end\n    end\nend",
["Raid Target"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePosition(unitFrame)\nend\n\n\n\n",
},
["Time"] = 1754339088,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
["raid"] = true,
["none"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 458724,
["Enabled"] = true,
["Revision"] = 1176,
["semver"] = "",
["Author"] = "Ретцер-Ревущий фьорд",
["Desc"] = "Aligns Raid Marker to the Left of the Unit Name.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset without Raid Marker",
["Min"] = -99,
["Name"] = "Unit Name (No Raid Marker)",
["Value"] = 1,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "unitNameXOff",
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset with Raid Marker",
["Min"] = -99,
["Name"] = "Unit Name (Raid Marker)",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "unitNameXOffRaidMarker",
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "X Offset for Raid Marker",
["Min"] = -99,
["Name"] = "Raid Marker",
["Value"] = 1,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "raidMarkerXOff",
},
},
["LastHookEdited"] = "",
["Name"] = "Target Marker",
},
{
["OptionsValues"] = {
["oneColor"] = {
0,
1,
0.01176470704376698,
1,
},
["twoColor"] = {
0,
0.501960813999176,
1,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x6490c26f17d91913",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.SetNameplateColors(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    --IDs of dots, you can change them to easier adjust to different classes, change only numbers\n    modTable.doubleDebuffs = {\n        {34914, 335467}, --Vampiric Touch + Devouring Plague\n        {188389, 334168}, --Flame Shock + Lashing Flames\n        {164815, 164812}, --Sunfire + Moonfire\n        {703, 1943}, --Garrote + Rupture\n        {980, 146739}, --Agony + Corruption\n        {980, 445474}, --Agony + Wither\n    }\n    \n    modTable.singleDebuffs = {\n        34914, --Vampiric Touch\n        589,--Shadow Word: Pain\n        20421, --Purge the Wicked\n        188389, --Flame Shock\n        157736, --Immolate\n        217200, --Barbed Shot\n        228287, --Mark of the Crane\n        445474, --Wither\n        164815, --Sunfire\n        164812, --Moonfire\n        155722, --Rake\n        980, --Agony\n        146739, --Corruption\n        460553, --Doom\n    }\n    \n    modTable.rOption = modTable.config.resetOption\n    \n    modTable.matchMultipleBuffs = {}\n    \n    for _, v in ipairs (modTable.doubleDebuffs) do\n        local buff = {\n            auras = v,\n            nameplateColor = modTable.config.twoColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\n    \n    for _, v in ipairs (modTable.singleDebuffs) do\n        local buff = {\n            auras = {v},\n            nameplateColor = modTable.config.oneColor\n        }\n        table.insert(modTable.matchMultipleBuffs, buff)\n    end\nend\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(modTable.matchMultipleBuffs) do      \n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, v.nameplateColor)\n                \n                return\n            else\n                -- reset colour\n                if (modTable.rOption) then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, 1,1,1, 1)\n                end\n                \n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors(unitFrame)\n        local colored = envTable.matchMultiple(unitFrame)\n    end\n    \nend",
},
["Time"] = 1753401349,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/-OwVE8C1v/1",
["Enabled"] = true,
["Revision"] = 1541,
["semver"] = "1.0.0",
["Author"] = "Megabelly-Silvermoon",
["Desc"] = "",
["Prio"] = 99,
["Name"] = "Debuff Name Color Change",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "label1",
["Value"] = "Settings:",
["Name"] = "Settings:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "oneColor",
["Value"] = {
1,
0.50196081399918,
0,
1,
},
["Name"] = "One Debuff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with 1 debuff",
},
{
["Type"] = 1,
["Key"] = "twoColor",
["Value"] = {
0.13333334028721,
0.54509806632996,
0.13333334028721,
1,
},
["Name"] = "Two Debuffs",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Colour for targets with a set of 2 debuffs",
},
{
["Type"] = 5,
["Key"] = "label4",
["Value"] = "Miscellaneous:",
["Name"] = "Miscellaneous:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetOption",
["Value"] = true,
["Name"] = "Reset colour after expire",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Resets colour after debuf expires. Toggling on will prevent sometimes lingering colour on nameplates/borders. Toggling off makes mod compatible with other nameplate colouring mods.",
},
},
["HooksTemp"] = {
},
["version"] = 1,
},
{
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1756369267,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 30,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 99,
["Name"] = "Force Threat Color",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["HooksTemp"] = {
},
},
},
["auras_per_row_auto"] = false,
["first_run3"] = true,
["extra_icon_caster_outline"] = "OUTLINE",
["auras_per_row_amount2"] = 5,
["disable_omnicc_on_auras"] = true,
["bossmod_support_enabled"] = false,
["ghost_auras"] = {
["height"] = 28,
["width"] = 28,
["auras"] = {
["WARRIOR"] = {
[5] = {
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
["WARLOCK"] = {
{
[980] = true,
[172] = true,
},
},
},
},
["blizzard_nameplate_large_font_size"] = 12,
["range_check_enabled"] = false,
["health_statusbar_bgcolor"] = {
0.13333334028721,
0.13333334028721,
0.13333334028721,
1,
},
["quick_hide"] = true,
["target_highlight_color"] = {
1,
1,
},
["cast_statusbar_fadeout_time"] = 0.49999997019768,
["extra_icon_caster_font"] = "Friz Quadrata TT",
["cast_statusbar_spark_hideoninterrupt"] = false,
["extra_icon_stack_outline"] = "OUTLINE",
["castbar_target_font"] = "Friz Quadrata TT",
["range_check_in_range_or_target_alpha_friendlies"] = 1,
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark8",
["cast_statusbar_spark_alpha"] = 0,
["cast_statusbar_fadein_time"] = 0.019999999552965,
["hover_highlight_alpha"] = 0.25,
["url"] = "https://wago.io/tA5ADNfDG/11",
["extra_icon_use_blizzard_border_color"] = false,
["pet_height_scale"] = 0.99999994039536,
["aura_x_offset"] = 0,
["range_check_alpha_friendlies"] = 0.5,
["target_shady_combat_only"] = false,
["ui_parent_scale_tune"] = 1,
["profile_name"] = "FragUI",
["health_statusbar_bgtexture"] = "Blizzard Raid Bar",
["indicator_raidmark_anchor"] = {
["x"] = 0,
["side"] = 9,
},
["aura_show_enrage"] = true,
["aura_tracker"] = {
["buff_tracked"] = {
["166591"] = true,
["273432"] = true,
["312926"] = true,
["262092"] = true,
["303941"] = true,
["265160"] = true,
["209859"] = true,
["233210"] = true,
["342073"] = true,
},
["buff"] = {
412012,
412695,
},
["debuff"] = {
217200,
371472,
292626,
422683,
},
["debuff_tracked"] = {
["389809"] = true,
["292451"] = true,
["312595"] = true,
},
["debuff_banned"] = {
["355759"] = true,
["280494"] = true,
["391568"] = true,
["270569"] = true,
["345801"] = true,
["345219"] = true,
["368802"] = true,
["359168"] = true,
["345547"] = true,
["392566"] = true,
["420092"] = true,
["284678"] = true,
["359078"] = true,
["359180"] = true,
["317583"] = true,
["411717"] = true,
["375583"] = true,
["381743"] = true,
["328287"] = true,
["356181"] = true,
["356372"] = true,
["333526"] = true,
["426534"] = true,
["426783"] = true,
["428103"] = true,
["344748"] = true,
["376974"] = true,
["417419"] = true,
["269576"] = true,
["420054"] = true,
["392885"] = true,
["436582"] = true,
["390276"] = true,
["440339"] = true,
["115994"] = true,
["410790"] = true,
["283649"] = true,
["430184"] = true,
["340007"] = true,
["302564"] = true,
["425180"] = true,
["394453"] = true,
["403952"] = true,
["353773"] = true,
["403696"] = true,
["435476"] = true,
["379021"] = true,
["356329"] = true,
["372127"] = true,
["373305"] = true,
["394327"] = true,
["440340"] = true,
["411715"] = true,
["390155"] = true,
["329449"] = true,
["324260"] = true,
["331934"] = true,
["331016"] = true,
["390271"] = true,
["258883"] = true,
["367902"] = true,
["353793"] = true,
["418339"] = true,
},
["buff_banned"] = {
["333553"] = true,
["61573"] = true,
["206150"] = true,
["299450"] = true,
["411635"] = true,
["352854"] = true,
["61574"] = true,
},
},
["extra_icon_cooldown_edge_texture"] = "Interface\\GLUES\\loadingOld",
["cast_statusbar_color"] = {
0.50196081399918,
0.50196081399918,
1,
1,
},
["update_throttle"] = 0.5,
["cast_statusbar_interrupt_anim"] = false,
["tocversion"] = 110107,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["extra_icon_timer_font"] = "Friz Quadrata TT",
["not_affecting_combat_alpha"] = 1,
["castbar_target_text_size"] = 12,
["extra_icon_show_offensive_border"] = {
nil,
0,
0,
},
["cast_statusbar_spark_filloninterrupt"] = false,
["target_highlight"] = false,
["aura_sort"] = true,
["target_shady_alpha"] = 0.59999996423721,
["tap_denied_color"] = {
0.40000003576279,
0.40000003576279,
0.40000003576279,
},
["bossmod_icons_anchor"] = {
["y"] = 30,
["x"] = 0,
["side"] = 8,
},
["target_highlight_height"] = 25,
["indicator_raidmark_scale"] = 0.99999994039536,
["version"] = 11,
["health_selection_overlay"] = "Blizzard Raid Bar",
["blizzard_nameplate_font_size"] = 10,
["color_override_colors"] = {
[3] = {
1,
0.25098040699959,
0.25098040699959,
},
[4] = {
1,
1,
0.25098040699959,
},
[5] = {
0.25098040699959,
1,
0.25098040699959,
},
},
["health_animation_time_dilatation"] = 2.6199998855591,
["health_cutoff_upper"] = false,
["cast_statusbar_color_interrupted"] = {
0.25098040699959,
1,
0.25098040699959,
},
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 12,
["aura_grow_direction"] = 1,
["number_region_first_run"] = true,
["pet_width_scale"] = 0.99999994039536,
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Shining Green [P]"] = 3,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Aura - Blink Time Left"] = 13,
["Add - Tag Number [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Heroic Leap [P]"] = 3,
["Fixate On You"] = 12,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Is Cast Bar [P]"] = 1,
["Fixate"] = 11,
["Cast - Quick Flash"] = 2,
["Cast - AoE Hit All [P]"] = 3,
["Countdown"] = 12,
["Fixate by Unit Buff [P]"] = 2,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Voidzone [P]"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Spiteful Affix"] = 3,
["Auto Set Skull"] = 11,
["Cast - Alert + Timer [P]"] = 4,
["Add - Non Elite Trash [P]"] = 4,
["Add - Warning [P]"] = 5,
["Cast - Glowing [P]"] = 10,
["Cast - Stop Casting"] = 4,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Add - Explode on Die [P]"] = 1,
["Cast - On Going Cast [P]"] = 2,
["Cast - Very Important"] = 15,
["Cast - Shield Interrupt"] = 2,
["Unit - Show Energy"] = 11,
},
["cast_statusbar_color_channeling"] = {
0.50196081399918,
0.50196081399918,
1,
1,
},
["patch_version"] = 39,
["aura2_grow_direction"] = 3,
["aura_timer_text_font"] = "Friz Quadrata TT",
["aura_alpha"] = 1,
["indicator_faction"] = false,
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.25098040699959,
0.25098040699959,
},
["noaggro"] = {
0.50196081399918,
0.50196081399918,
},
["pulling"] = {
nil,
0.25098040699959,
0.25098040699959,
},
},
},
["extra_icon_height"] = 34,
["ui_parent_target_strata"] = "BACKGROUND",
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
nil,
0.80000007152557,
0.25098040699959,
},
["anothertank"] = {
1,
0.50196081399918,
0.25098040699959,
},
["aggro"] = {
0.25098040699959,
1,
0.25098040699959,
},
["noaggro"] = {
nil,
0.25098040699959,
0.25098040699959,
},
["nocombat"] = {
1,
0.25098040699959,
0.25098040699959,
},
["pulling"] = {
[3] = 0.25098040699959,
},
},
},
["extra_icon_show_purge_border"] = {
nil,
0,
0,
},
["cast_statusbar_spark_width"] = 4,
},
},
}
PlaterLanguage = {
["language"] = "enUS",
["version"] = 1,
}
PlaterLogs = {
["_general_logs"] = {
"2025-09-25 22:37:57 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Yesfin",
"2025-09-25 22:37:30 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Yesfin",
"2025-09-25 22:36:43 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Yesfin",
"2025-09-25 22:34:28 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
"2025-09-25 22:32:11 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
"2025-09-24 22:25:04 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
"2025-09-24 21:50:16 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Badandbuzi",
"2025-09-24 18:49:54 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
"2025-09-24 18:49:13 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
"2025-09-24 18:47:44 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
"2025-09-24 18:47:29 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
"2025-09-24 18:47:09 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
"2025-09-24 18:25:28 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
"2025-09-24 17:37:12 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
"2025-09-24 17:36:51 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
"2025-09-24 16:01:31 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
"2025-09-24 15:40:23 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
"2025-09-24 15:38:51 | INIT | Plater-v615-Retail | Framework v621 | 11.2.0 | enUS | Whatamelon",
},
["_error_logs"] = {
},
}
PlaterBackup = {
}
